import { AbstractMesh } from './AbstractMesh';
import { Loop } from '../Loop';

class Base extends AbstractMesh {
    constructor(loop, base) {
        super();
        this.base = base;
        this.getMesh();
        if (loop instanceof Loop) {
            this.join(loop);
        }
    }
    getMesh() {
        var planeMaterial = new THREE.MeshLambertMaterial({
            color: 0x000000
        });

        var plane = new THREE.Mesh(
            new THREE.PlaneGeometry(
                2,
                2,
                8,
                8
            ),
            planeMaterial
        );

        plane.rotation.x = -90/180 * Math.PI;
        plane.rotation.y = 0;
        plane.rotation.z = 45/180 * Math.PI;

        switch (this.base) {
            case 'first':
                plane.position.x = 64;
                plane.position.z = -64;
                break;
            case 'second':
                plane.position.x = 0;
                plane.position.z = -121;
                break;
            case 'third':
                plane.position.x = -64;
                plane.position.z = -64;
                break;
            case 'home':
                plane.position.x = 0;
                plane.position.z = 0;

                plane.rotation.z = 0;
        }
        plane.position.y = AbstractMesh.WORLD_BASE_Y + 0.5;
        plane.position.z -= 18;

        this.mesh = plane;
        return this.mesh;
    }
    animate() {

    }
}

export { Base }
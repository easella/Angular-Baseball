import { Ball } from './mesh/Ball';
import { Mound } from './mesh/Mound';
import { Field } from './mesh/Field';
import { lighting } from './scene/lighting';

var VERTICAL_CORRECTION = 0;

class Loop {
    constructor(elementClass) {
        this.elementClass = elementClass;
        this.main();
    }
    loop() {
        requestAnimationFrame(this.loop.bind(this));
        this.objects.map(i => i.animate());
        this.renderer.render(this.scene, this.camera);
    }
    main() {
        this.objects = [];
        if (this.getThree()) {

            var THREE = this.THREE;
            var scene = this.scene = new THREE.Scene();
            var camera = this.camera = new THREE.PerspectiveCamera(75, this.getAspect(), 0.1, 500);
            this.attach();
            lighting.addTo(scene);

            camera.position.z = 10;
            camera.position.y += VERTICAL_CORRECTION;
            this.loop();

        }
    }
    addStaticMeshes() {
        new Field().join(this);
        new Mound().join(this);
    }
    getThree() {
        if (this.THREE === Loop.prototype.THREE && typeof window === 'object' && window.THREE) {
            return this.THREE = window.THREE;
        }
        return false;
    }
    attach() {
        window.removeEventListener('resize', this.onResize.bind(this), false);
        window.addEventListener('resize', this.onResize.bind(this), false);
        var element = document.getElementsByClassName(this.elementClass)[0];
        element.innerHTML = '';
        var THREE = this.THREE;
        var renderer = new THREE.WebGLRenderer({ alpha: true });
        this.setSize(renderer);
        //renderer.setClearColor(0xffffff, 0);

        element.appendChild(renderer.domElement);

        this.renderer = renderer;
        return renderer;
    }
    onResize() {
        this.camera.aspect = Loop.prototype.getAspect();
        this.camera.updateProjectionMatrix();
        this.setSize(this.renderer);
    }
    setSize(renderer) {
        var element = document.getElementsByClassName(this.elementClass)[0];
        var width = element.offsetWidth;
        renderer.setSize(width, HEIGHT);
    }
    getAspect() {
        var element = document.getElementsByClassName(this.elementClass)[0];
        return element.offsetWidth / HEIGHT;
    }


    test(d, s, f) {
        var ball = new Ball();
        ball.deriveTrajectory({
            travelDistance: d,
            splay: s,
            flyAngle: f
        });
        ball.join(this);
    }
}

var HEIGHT = 700;
Loop.prototype.THREE = {};
Loop.prototype.constructors = {
    Ball : Ball,
    Mound: Mound,
    Field: Field
};

export { Loop };
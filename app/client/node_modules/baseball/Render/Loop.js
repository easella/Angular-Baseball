import { Ball } from './mesh/Ball';
import { lighting } from './scene/lighting';

class Loop {
    constructor() {
        this.main();
    }
    loop() {
        requestAnimationFrame(this.loop.bind(this));
        this.objects.map(i => i.animate());
        this.renderer.render(this.scene, this.camera);
    }
    main() {
        this.objects = [];
        if (this.getThree()) {

            var THREE = this.THREE;
            var scene = this.scene = new THREE.Scene();
            var camera = this.camera = new THREE.PerspectiveCamera(75, this.getAspect(), 0.1, 1000);
            this.attach();
            lighting.addTo(scene);

            camera.position.z = 5;
            this.loop();

        }
    }
    getThree() {
        if (this.THREE === Loop.prototype.THREE && typeof window === 'object' && window.THREE) {
            return this.THREE = window.THREE;
        }
        return false;
    }
    attach() {
        window.removeEventListener('resize', this.onResize.bind(this), false);
        window.addEventListener('resize', this.onResize.bind(this), false);
        var element = document.getElementsByClassName('webgl-container')[0];
        element.innerHTML = '';
        var THREE = this.THREE;
        var renderer = new THREE.WebGLRenderer({ alpha: true });
        renderer.setSize(window.innerWidth, 300);
        //renderer.setClearColor(0xffffff, 0);

        element.appendChild(renderer.domElement);
        element.style.zIndex = 15;
        element.style.border = '1px solid black';
        element.style.background = 'transparent';

        this.renderer = renderer;
        return renderer;
    }
    onResize() {
        this.camera.aspect = Loop.prototype.getAspect();
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(window.innerWidth, 300);
    }


    test() {
        var n = 60 * 0.6;
        var trajectory = [];
        while (n--) {
            trajectory.push({
                x: 0, y: 0, z: 0
            });
        }
        var ball = new Ball(trajectory);
        ball.join(this);
    }
}

Loop.prototype.THREE = {};
Loop.prototype.getAspect = function() {
    return window.innerWidth / 300;
};

export { Loop };
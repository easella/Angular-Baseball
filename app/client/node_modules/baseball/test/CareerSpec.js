var assert = require("assert");
var colors = require('colors');

import { Baseball } from 'baseball/baseball';
import { Animator } from 'baseball/Services/Animator';

describe('Game', function() {

    var Game = Baseball.Game;
    var Player = Baseball.Player;
    var Team = Baseball.Team;

    var log = function() {
        console.log.apply(console, arguments);
    };

    var format = function(n) {
        n = '' + Math.floor(n*1000)/1000;
        while (n.indexOf('.') > -1 && n.length < 5) n += '0';
        while (n.indexOf('.') === -1 && n.length < 3) n = ' ' + n;
        return n;
    };

    Game.prototype.console = true;
    Game.prototype.humanControl = 'none';
    Game.prototype.quickMode = true;
    Animator.console = true;

    var game = new Game();
    game.gamesIntoSeason = 144;
    var player, p;
    player = new Player(game.teams.home, false);
    p = player;
    game.teams.home.lineup = [p,p,p,p,p,p,p,p,p];

    //offense = {
    //    eye: 65,
    //    power: 35,
    //    speed: 45
    //};
    var offense = player.skill.offense;
    player.skill.offense = offense;

    var getStats = player => {
        return {
            pa: format(player.stats.batting.pa),
            ba: format(player.stats.batting.getBA()),
            h: format(player.stats.batting.h),
            '2b': format(player.stats.batting['2b']),
            '3b': format(player.stats.batting['3b']),
            hr: format(player.stats.batting.hr),
            bb: format(player.stats.batting.bb),
            so: format(player.stats.batting.so),
            sac: format(player.stats.batting.sac),
            rbi: format(player.stats.batting.rbi),
            obp: format(player.stats.batting.getOBP()),
            slg: format(player.stats.batting.getSLG()),
            ops: format(player.stats.batting.getOBP() + player.stats.batting.getSLG())
        }
    };
    var career = {};
    var logPlayer = function(yr) {
        career[yr] = getStats(player);
    };

    var year = new Date().getFullYear() - 9;

    logPlayer((++year, 'Rookie'));
    log(player.skill.offense);
    console.log('------');

    var runSeason = function(n) {
        var x = 5000;
        game.gamesIntoSeason = 0;
        player = new Player(game.teams.home, false);
        p = player;
        game.teams.home.lineup = [p,p,p,p,p,p,p,p,p];

        player.skill.offense = offense;
        var games = 0;

        do {
            game.simulateInput(function(callback) {
                typeof callback == 'function' && callback();
            });
            if (game.stage == 'end') {
                game.teams.away = new Team(game);
                game.inning = 1;
                game.half = 'top';
                game.stage = 'pitch';
                games++;
            }
            if (player.stats.batting.pa % 10 == 0) {
                game.teams.away.positions.pitcher = new Player(game.teams.away, true);
            }
        } while (games < 144/9 && x--);
        logPlayer(++year);
        player.skill.offense.eye += 1;
        player.skill.offense.speed -= 1;
        player.skill.offense.power += 1;
    };

    runSeason(2);
    runSeason(3);
    runSeason(4);
    runSeason(5);
    runSeason(6);
    runSeason(7);
    runSeason(8);
    runSeason(9);
    //runSeason(10);
    //runSeason(11);
    //runSeason(12);
    //runSeason(13);
    //runSeason(14);

    log(player.skill.offense);

    function logCareer() {
        var statLines = {};
        for (year in career) {
            for (var stat in career[year]) {
                if (typeof statLines[stat] === 'undefined') {
                    statLines[stat] = [];
                }
                statLines[stat].push(career[year][stat]);
            }
        }

        var logYear = function(stats) {
            let filter = stat => {
                return stats[stat] == Math.max.apply(this, statLines[stat]) ? stats[stat].toString().red : stats[stat]
            };
            log(
                year + ' Season',
                ' | PA ' + filter('pa'),
                ' | AV ' + filter('ba'),
                ' | H '  + filter('h'),
                ' | 2B ' + filter('2b'),
                ' | 3B ' + filter('3b'),
                ' | HR ' + filter('hr'),
                ' | BB ' + filter('bb'),
                ' | K  ' + filter('so'),
                ' | SAC ' + filter('sac'),
                ' | RBI ' + filter('rbi'),
                ' | OBP ' + filter('obp'),
                ' | SLG ' + filter('slg'),
                ' | OPS ' + filter('ops')
            );
        };
        logYear(career.Rookie);
        for (var year in career) {
            if (year != 'Rookie') {
                var stats = career[year];
                logYear(stats);
            }
        }
    }
    logCareer();
    //game.debugOut();

    it('I\'ve seen a lot in my life. I think it\'s time to retire.', function () {
        assert(500 < player.stats.batting.ab);
    });
});
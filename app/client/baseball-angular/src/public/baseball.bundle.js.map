{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./Utility/text.ts","webpack:///./Utility/Log.js","webpack:///./Model/AtBat.ts","webpack:///./Utility/data.js","webpack:///./Utility/helper.js","webpack:///./Utility/_utils.js","webpack:///./Services/Distribution.js","webpack:///./Services/Mathinator.js","webpack:///./Services/Iterator.js","webpack:///./Model/TeamConstants.ts","webpack:///./Model/Player.js","webpack:///./Render/Mesh/AbstractMesh.js","webpack:///./Render/Mesh/Indicator.js","webpack:///./Render/LoopConstants.js","webpack:///./Render/Mesh/Ball.js","webpack:///./Render/Mesh/Mound.js","webpack:///./Render/Mesh/Base.js","webpack:///./Render/Mesh/FoulLine.js","webpack:///./Render/Mesh/FoulPole.js","webpack:///./Render/Mesh/Field.js","webpack:///./Render/Mesh/Grass.js","webpack:///./Render/Mesh/BaseDirt.js","webpack:///./Render/Mesh/BattersEye.js","webpack:///./Render/Mesh/Wall.js","webpack:///./Render/Shaders/SkyShader.js","webpack:///./Render/Mesh/Sky.js","webpack:///./Render/Mesh/Sun.js","webpack:///./Render/scene/lighting.js","webpack:///./Render/Loop.js","webpack:///./Services/Animator.js","webpack:///./Model/Field.js","webpack:///./Model/Manager.js","webpack:///./Model/Team.ts","webpack:///./Model/Umpire.js","webpack:///./Model/Game.js","webpack:///./Teams/Trainer.js","webpack:///./Teams/TeamJapan.js","webpack:///./Teams/Provider.js","webpack:///./namespace.js","webpack:///./baseball.js"],"names":[],"mappings":"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;AACA;AACA;AACA;AACA,2DAA2D,SAAI,yBAAyB;AACxF,aAAa;AACb,4DAA4D,SAAI,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,SAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2DAA2D,SAAI,0BAA0B;AACzF;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,SAAI;AACtB,oBAAoB,SAAI;AACxB,mBAAmB,SAAI;;AAEvB;AACA;AACA;AACA;;AAEA,QAAQ,SAAI;AACZ;AACA;AACA,4CAA4C,SAAI;AAChD;AACA;;AAEA,QAAQ,SAAI;AACZ;AACA;AACA,8CAA8C,SAAI;AAClD;AACA;;AAEA,QAAQ,SAAI;AACZ;AACA;AACA,gBAAgB,SAAI;AACpB;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,aAAa;AACb;AACA;AACA,6BAA6B,OAAO;AACpC;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,SAAI;AACvB,oBAAoB,SAAI;AACxB,mBAAmB,SAAI;AACvB,mBAAmB,SAAI;AACvB,qBAAqB,SAAI;AACzB,qBAAqB,SAAI;AACzB,kBAAkB,SAAI;AACtB,oBAAoB,SAAI;AACxB,mBAAmB,SAAI;AACvB;AACA;AACA;;AAEe;;;AC1gBsB;AAErC;;;;;GAKG;AACH;IASI,eAAY,IAAY;QAFjB,eAAU,GAAY,KAAK,CAAC;QAG/B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,qBAAqB,CAAC;YACrD,CAAC,CAAC,KAAK,CAAC,qBAAqB;YAC7B,CAAC,CAAC,EAAE,CAAC;QACT,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,GAAG,GAAG,KAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAG,CAAC;QAEzC,IAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QAEtB,IAAM,UAAU,GAAG;YACf,GAAG,CAAC,IAAI;YACR,GAAG,CAAC,MAAM;YACV,GAAG,CAAC,OAAO;YACX,GAAG,CAAC,MAAM;YACV,GAAG,CAAC,MAAM;YACV,GAAG,CAAC,SAAS;YACb,GAAG,CAAC,gBAAgB;YACpB,GAAG,CAAC,WAAW;YACf,GAAG,CAAC,GAAG;SACV,CAAC;QACF,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;IACL,CAAC;IACD,wBAAQ,GAAR;QACI,OAAO,KAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAK,CAAC;IACpD,CAAC;IAnCsB,2BAAqB,GAAW,EAAE,CAAC;IACnC,mBAAa,GAAW,GAAG,CAAC;IAmCvD,YAAC;CAAA;AAEgB;;;AC/CjgB;;;AC1hBhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEkB;;;AC7BqB;AACI;AACN;AACE;;AAEJ;;;ACLQ;AAC3C,yBAAyB,MAAM;;AAE/B,OAAO,gDAAgD;;AAEvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB;AACnB;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA,sBAAsB,OAAO;AAC7B,uBAAuB,OAAO;AAC9B,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB;AACrB,uBAAuB;AACvB,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,OAAO;AAC7B,sBAAsB,OAAO;AAC7B,mBAAmB,OAAO;AAC1B,iBAAiB,OAAO;AACxB;AACA;AACA,4BAA4B;AAC5B;AACA,KAAK;AACL;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mBAAmB,OAAO;AAC1B,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,OAAO;AAC5B,uBAAuB;AACvB,qBAAqB;AACrB,oBAAoB,OAAO;AAC3B,0BAA0B,QAAQ;AAClC,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,OAAO;AAC5B,uBAAuB;AACvB,qBAAqB;AACrB,oBAAoB,OAAO;AAC3B,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEwB;;;AClVxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,qBAAqB;AACrB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc;AACd;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,iBAAiB;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,OAAO;AAC9B,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sEAAsE;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gCAAgC,OAAO;AACvC,8BAA8B,KAAK;AACnC;AACA,KAAK;AACL;AACA,oBAAoB,OAAO;AAC3B,mBAAmB,OAAO;AAC1B,0BAA0B,OAAO;AACjC,yBAAyB,OAAO;AAChC,uBAAuB,OAAO;AAC9B,0BAA0B,OAAO;AACjC,8BAA8B,OAAO;AACrC,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,wBAAwB,OAAO;AAC/B,8BAA8B,OAAO;AACrC,+BAA+B,OAAO;AACtC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,QAAQ;AACpC,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,KAAK;AACL;AACA,sBAAsB;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,qBAAqB,OAAO;AAC5B,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,sBAAsB,OAAO;AAC7B,qBAAqB,QAAQ;AAC7B,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8CAA8C;;AAE9C;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,8BAA8B,OAAO;AACrC,8BAA8B,OAAO;AACrC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEsB;;;AC3UtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA,SAAS;AACT;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEoB;;;AC1BL;IACX,kBAAkB,EAAE,mBAAmB;IACvC,SAAS,EAAE,IAAI;IACf,WAAW,EAAE,MAAM;CACtB,EAAC;;;ACJ6C;AACS;AACJ;AACJ;AACT;AACA;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,sDAAsD,SAAI;AAC1D,iDAAiD,SAAI;;AAErD,uBAAuB,SAAI,sBAAsB,GAAG,SAAI,gBAAgB;AACxE,yBAAyB,SAAI;AAC7B,yBAAyB,SAAI;AAC7B;AACA,uBAAuB,SAAI;AAC3B,wBAAwB,SAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wDAAwD;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,EAAE;AACvD,0CAA0C,EAAE;AAC5C,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,8DAA8D,WAAK;AACnE;AACA;AACA,KAAK;AACL;AACA,+CAA+C,WAAK;AACpD,KAAK;AACL;AACA,+CAA+C,WAAK;AACpD,KAAK;AACL;AACA,iBAAiB;AACjB;AACA;AACA,eAAe,UAAU;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA,uCAAuC,aAAC;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA,eAAe,SAAI;AACnB,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA,eAAe,SAAI;AACnB,KAAK;AACL;AACA,eAAe,SAAI;AACnB,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA,eAAe,SAAI;AACnB;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA,gDAAgD,SAAI;AACpD,+CAA+C,SAAI;AACnD;AACA,kDAAkD,SAAI;AACtD,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD,SAAI;AACrD,gDAAgD,SAAI;AACpD;AACA;AACA;AACA;AACA,mDAAmD,SAAI;AACvD,KAAK;AACL;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA,wCAAwC,SAAI;AAC5C,+CAA+C,SAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,sBAAsB,SAAI;AAC1B,aAAa;AACb,sBAAsB,SAAI;AAC1B,aAAa;AACb,sBAAsB,SAAI;AAC1B,aAAa;AACb,sBAAsB,SAAI;AAC1B;AACA,SAAS;AACT;AACA;AACA,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B;AACA,aAAa;AACb;AACA,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B,iBAAiB;AACjB,0BAA0B,SAAI;AAC9B;AACA;AACA;AACA;AACA,4CAA4C,SAAI;AAChD,KAAK;AACL;AACA;AACA;AACA;AACA,kBAAkB,UAAU,IAAI,YAAY;AAC5C;AACA;;AAEkB;;;AC/mBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEwB;;;AChDsB;;AAE9C,MAAM,mBAAS,SAAS,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEqB;;;ACjCrB;AACA;AACA,UAAU;AACV;AACO;AACA;;;ACLuC;AACS;AACf;AACM;AACW;;AAEzD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA,MAAM,SAAI,SAAS,YAAY;AAC/B;AACA;AACA;AACA,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD,2CAA2C,QAAQ;AACnD,gEAAgE;AAChE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,MAAM;AAC1B,8BAA8B,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA,gBAAgB,MAAM;AACtB;;AAEA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA,wEAAwE,mBAAmB;AAC3F;AACA;AACA;AACA;AACA,0CAA0C,mBAAmB;AAC7D;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,mBAAmB;AACpD,yBAAyB,mBAAmB;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA,mDAAmD,UAAU;;AAE7D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mGAAmG;;AAEnG;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,uBAAuB,OAAO;AAC9B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC,YAAY;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;;AAEA,SAAI;AACJ,SAAI;AACJ,SAAI;AACJ,SAAI;AACJ,SAAI;AACJ,QAAQ,SAAI;AACZ,QAAQ,SAAI;AACZ;;AAEgB;;;AC7a8B;;AAE9C,MAAM,WAAK,SAAS,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,YAAY;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEiB;;;AC/B6B;;AAE9C,MAAM,SAAI,SAAS,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0BAA0B,YAAY;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEgB;;;AClD8B;;AAE9C,MAAM,iBAAQ,SAAS,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,YAAY;;AAEtC;AACA;AACA;AACA;AACA;;AAEoB;;;ACxC0B;;AAE9C,MAAM,iBAAQ,SAAS,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,YAAY;;AAEtC;AACA;AACA;AACA;AACA;;AAEoB;;;ACnC0B;;AAE9C,MAAM,WAAK,SAAS,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B,YAAY;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEiB;;;AC/B6B;;AAE9C,MAAM,WAAK,SAAS,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;A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,+BAA+B;AAC/B,oDAAoD;;AAEpD,yCAAyC;AACzC,gDAAgD;AAChD,mIAAmI;;AAEnI,iDAAiD;;AAEjD,oFAAoF;AACpF,0CAA0C;;AAE1C,sEAAsE;;AAEtE,yCAAyC;;AAEzC,kCAAkC;AAClC,cAAc;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEyB;;;ACtPqB;AACO;;AAErD,MAAM,OAAG,SAAS,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD,wBAAwB,sBAAsB;AAC9C,uBAAuB,wBAAwB;AAC/C,6BAA6B,2BAA2B;AACxD,8BAA8B,yBAAyB;AACvD,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA,SAAS;AACT,aAAa,YAAY;AACzB,YAAY,YAAY,OAAO,aAAa;AAC5C;AACA,wBAAwB,YAAY;AACpC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEe;;;ACnD+B;;AAE9C,MAAM,OAAG,SAAS,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mCAAmC;AAC5E;AACA,iCAAiC;AACjC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;;;ACrEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEoB;;;AChBe;AACE;AACF;AACQ;AACA;AACN;AACA;AACM;AACI;AACZ;AACF;AACA;AACW;AACO;AACC;;AAE2B;;AAE/E;;AAEA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mBAAmB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mBAAmB;AAC/B,YAAY,uBAAuB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,SAAI;AACV;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,MAAM;AACrB;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;;AAEA;;AAEA,mBAAmB,YAAY;AAC/B;;AAEA,mBAAmB,KAAK;AACxB;;AAEA,mBAAmB,KAAK;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,qBAAqB,OAAO;AAC5B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,WAAK;AACjB,YAAY,WAAK;AACjB,YAAY,WAAK;AACjB,YAAY,WAAK;AACjB,YAAY,qBAAU;AACtB,wBAAwB,OAAG;AAC3B,sBAAsB,OAAG;AACzB;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,SAAI;AAChB,YAAY,SAAI;AAChB,YAAY,SAAI;AAChB,YAAY,SAAI;;AAEhB,uBAAuB,SAAI;AAC3B,uBAAuB,SAAI;AAC3B,uBAAuB,SAAI;AAC3B,uBAAuB,SAAI;;AAE3B,YAAY,iBAAQ;AACpB,YAAY,iBAAQ;AACpB,YAAY,iBAAQ;AACpB,YAAY,iBAAQ;;AAEpB,YAAY,iBAAQ;AACpB,YAAY,iBAAQ;;AAEpB,YAAY,iBAAQ;AACpB,YAAY,iBAAQ;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAI;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA,eAAe,UAAU;AACzB;AACA;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,SAAI;AAC7B,sBAAsB,SAAI;AAC1B;AACA;AACA,qCAAqC,aAAa,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,SAAI;AAC7B,sBAAsB,SAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAAI;AACJ,SAAI;AACJ,IAAI,eAAI;AACR,IAAI,kBAAK;AACT,IAAI,kBAAK;AACT;;AAEgB;;;ACneoC;AACd;AACK;AACyB;;AAEpE,MAAM,iBAAQ;AACd;AACA;AACA;AACA,iBAAQ;AACR,iBAAQ;AACR;AACA,iBAAiB,iBAAQ;AACzB;AACA;AACA;AACA;AACA,eAAe,iBAAQ;AACvB,KAAK;AACL;AACA,QAAQ,iBAAQ;AAChB,KAAK;AACL,gBAAgB;AAChB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAQ;AACpB;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;AACjB;AACA;AACA,8BAA8B,SAAI,6BAA6B,iBAAQ;AACvE,wBAAwB,SAAI,2BAA2B,iBAAQ;;AAE/D;AACA;;AAEA;AACA,KAAK;AACL;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,YAAY,iBAAQ;AACpB,wBAAwB;AACxB,uBAAuB;AACvB,yBAAyB;AACzB;AACA;AACA,SAAS;AACT,YAAY,iBAAQ;AACpB;AACA,eAAe,iBAAQ;AACvB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAQ;;AAEpB,YAAY,iBAAQ;AACpB,mBAAmB,iBAAQ;AAC3B;AACA,eAAe,iBAAQ;AACvB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB,iBAAQ;AAC1C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAQ;AACjC;AACA;AACA,0BAA0B,UAAU;AACpC;AACA,gBAAgB,MAAM;AACtB;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,iBAAQ;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB,iBAAQ;AAC1C;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,YAAY,iBAAQ;;AAEpB;AACA;AACA,gBAAgB,iBAAQ;AACxB,aAAa;AACb,mBAAmB,iBAAQ;AAC3B;AACA,eAAe,iBAAQ;AACvB,KAAK;AACL;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB,iBAAQ;AACjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,QAAQ,UAAU;AAClB;AACA;;AAEA;AACA;AACA;AACA,mDAAmD,UAAU;AAC7D;AACA;AACA;AACA;AACA,2FAA2F;;AAE3F;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,iBAAQ;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yCAAyC,gBAAgB,uBAAuB,EAAE;AAClF;AACA,SAAS;AACT;AACA,qCAAqC,gBAAgB,uBAAuB,EAAE;AAC9E;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAQ;AACzB,QAAQ,iBAAQ;AAChB,QAAQ,iBAAQ,OAAO,iBAAQ;AAC/B;AACA;;AAEoB;;;ACtXqB;AACe;AACJ;AACJ;;AAEhD;AACA;AACA;AACA;AACA;AACA,MAAM,iBAAK;AACX;AACA;;AAEA,iBAAK;AACL,iBAAiB,iBAAK;AACtB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,MAAM;AACxC,mCAAmC,MAAM;AACzC,kCAAkC,MAAM;AACxC;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,UAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qDAAqD,UAAU;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC,0CAA0C,UAAU;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+BAA+B;AACnE;AACA,sCAAsC,UAAU;;AAEhD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAQ;AACrB,YAAY,iBAAQ;AACpB,YAAY,iBAAQ;AACpB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA,0BAA0B,OAAO;AACjC,+BAA+B,OAAO;AACtC,qBAAqB,OAAO;AAC5B,wBAAwB,OAAO;AAC/B,iBAAiB;AACjB;AACA;AACA,iCAAiC;;AAEjC;;AAEA,+CAA+C;AAC/C;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,iFAAiF;AACjF,wDAAwD;AACxD,6FAA6F;AAC7F;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,UAAU;AACzB;AACA;;AAEiB;;;AC9Y+B;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AAC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ACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,GAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,6BAA6B,YAAY;;AAEzC;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,GAAG;AACnD;AACA,qBAAqB;AACrB;AACA;AACA,oDAAoD,GAAG;AACvD,yBAAyB;AACzB,oDAAoD,GAAG;AACvD;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG;AACvD;AACA,yEAAyE,GAAG;AAC5E;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,GAAG;AACvD,yEAAyE,GAAG;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG;AACvC;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,GAAG;AAC/D;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA;AACA,4DAA4D,GAAG;AAC/D;AACA;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA;AACA,4DAA4D,GAAG;AAC/D;AACA;AACA;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA;AACA,4DAA4D,GAAG;AAC/D;AACA;AACA;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA;AACA,4DAA4D,GAAG;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA,uBAAuB,iBAAiB,OAAO,mBAAmB;;AAElE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,GAAG;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,GAAG;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY,IAAI,mCAAmC,GAAG;AAC3E;AACA,wBAAwB;AACxB,mBAAmB,uCAAuC,GAAG,YAAY;AACzE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qBAAqB;AACrB;AACA;AACA;;AAEkB;;;AC3gBqB;AACF;AACI;AACA;AACJ;;AAEY;;AAED;AACQ;AACJ;AACJ;;AAEhD,MAAM,MAAC;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,wBAAwB;AACxB,uBAAuB;AACvB,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,UAAU,KAAK;AACzB,eAAe,SAAI;AACnB;AACA,yBAAyB,iBAAK;AAC9B,8BAA8B,SAAI;AAClC,8BAA8B,SAAI;AAClC,uBAAuB,GAAG;AAC1B;AACA;AACA,sBAAsB,MAAM;AAC5B;AACA;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA,QAAQ,iBAAQ;AAChB;AACA,KAAK;AACL;AACA,eAAe,iBAAQ;AACvB,KAAK;AACL;AACA,QAAQ,iBAAQ;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,iBAAQ,UAAU,iBAAQ;AACvC,KAAK;AACL;AACA,eAAe,SAAI;AACnB;AACA,iBAAiB,wBAAwB,GAAG,YAAY;AACxD,KAAK;AACL;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oCAAoC;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,kBAAkB,iBAAQ;AAC1B,kBAAkB,iBAAQ;AAC1B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;;AAEA,aAAa,iBAAQ;AACrB,YAAY,MAAC;AACb,yBAAyB,MAAC;AAC1B;AACA;AACA,YAAY,iBAAQ;AACpB;AACA;AACA,SAAS;AACT,iBAAiB,iBAAQ;AACzB,gBAAgB,iBAAQ;AACxB;AACA;AACA,iBAAiB,WAAW;AAC5B,4CAA4C,iBAAQ,iBAAiB,iBAAQ;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;;AAEA;AACA,aAAa,iBAAQ,YAAY,MAAC;AAClC;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,YAAY;AAC5B,gBAAgB,YAAY;AAC5B;AACA,kBAAkB,OAAO;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,YAAY;AACzC,6BAA6B,YAAY;;AAEzC;;AAEA,iCAAiC,YAAY;AAC7C;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB,iBAAQ;AACxB;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA,kCAAkC,SAAI;;AAEtC;AACA,qCAAqC,YAAY;AACjD,qCAAqC,YAAY;;AAEjD;;AAEA,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,0CAA0C,UAAU;AACpD,sCAAsC,YAAY;;AAElD;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,oCAAoC,YAAY;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uCAAuC,SAAI;AAC3C,0CAA0C,SAAI;AAC9C;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,SAAI;AAC5C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB,SAAS,UAAU;AAC5C,QAAQ,QAAQ;AAChB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,iCAAiC,MAAC,UAAU;AAC5C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,8BAA8B;;AAE9B;AACA,eAAe,MAAM;AACrB,eAAe,eAAe;AAC9B,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,QAAQ,MAAC;AACT,QAAQ,MAAC;AACT;AACA;AACA,YAAY,iBAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,YAAY,iBAAQ;AACpB;AACA;AACA,SAAS;AACT,YAAY,iBAAQ;AACpB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,YAAY,iBAAQ;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,sBAAsB,iBAAQ;AAC9B,sBAAsB,iBAAQ;AAC9B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAQ;AACpB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,QAAQ,iBAAQ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iBAAQ;AAChB,mCAAmC;AACnC,KAAK;;AAEL;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEgB;;;AChkCgC;;AAEhD,MAAM,eAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,KAAa,EAAE,EAKlB;;AAET,yBAAyB,QAAQ,GAAG,KAAK;AACzC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEmB;;;AC/CkB;AACA;AACI;AACE;;AAE3C,oBAAoB,SAAI;AACxB;AACA;;AAEA,oBAAoB,MAAM;AAC1B,kBAAkB,MAAM;AACxB,oBAAoB,MAAM;AAC1B,mBAAmB,MAAM;AACzB,mBAAmB,MAAM;AACzB,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,iBAAiB,MAAM;AACvB,gBAAgB,MAAM;;AAEtB,sBAAsB,MAAM;AAC5B,mBAAmB,MAAM;AACzB,eAAe,MAAM;AACrB,cAAc,MAAM;AACpB,kBAAkB,MAAM;;AAExB,kBAAkB,eAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,uDAAuD;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,iCAAiC;AACtC,KAAK,uDAAuD;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,sDAAsD;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,sDAAsD;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,wDAAwD;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,iCAAiC;AACtC,KAAK,sDAAsD;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kCAAkC;AACvC,KAAK,sDAAsD;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,kCAAkC;AACvC,KAAK,yDAAyD;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC;AACrC,KAAK,sDAAsD;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,CAAC;;AAEkB;;;ACtLmB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,OAAO;AACtB;;AAEoB;;;ACdpB,MAAM,kBAAQ;;AAEwB;AACA;AACF;AACM;AACF;AACJ;AACI;;AAEK;AACO;AACG;AACJ;AACJ;AACA;;AAEH;AACA;;AAE5C,kBAAQ;AACR,kBAAQ,cAAc,kBAAQ,QAAQ,IAAI;AAC1C,kBAAQ,gBAAgB,kBAAQ,UAAU,MAAM;AAChD,kBAAQ,cAAc,kBAAQ,QAAQ,SAAI;;AAE1C,kBAAQ;AACR,kBAAQ,oBAAoB,iBAAQ;AACpC,kBAAQ,wBAAwB,YAAY;AAC5C,kBAAQ,oBAAoB,QAAQ;AACpC,kBAAQ,sBAAsB,UAAU;;AAExC,kBAAQ;AACR,kBAAQ,aAAa,SAAI;AACzB,kBAAQ,YAAY,GAAG;AACvB,kBAAQ,gCAAgC,kBAAkB;;AAE1D,kBAAQ;AACR,kBAAQ,kBAAkB,QAAQ;AAClC,kBAAQ,eAAe,OAAO;;AAEf,gEAAQ,EAAC;AACJ;;AAEyC;AACL;AACf;AACrB;;;AC9CmB;;AAEvC;AACA,sBAAsB,kBAAQ;AAC9B;;AAEe,gGAAQ,EAAC","file":"baseball.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./baseball.js\");\n","import { Player } from '../Model/Player';\nimport { Game } from '../Model/Game';\nimport { out_by_t } from '../Api/outBy';\nimport { fielder_short_name_t } from '../Api/fielderShortName';\n\nconst translations = {\n    n: {\n        empty: '-',\n        ' 1st': '1番',\n        ' 2nd': '2番',\n        ' 3rd': '3番',\n        ' 4th': '4番',\n        ' 5th': '5番',\n        ' 6th': '6番',\n        ' 7th': '7番',\n        ' 8th': '8番',\n        ' 9th': '9番',\n        'Now batting': '次のバッター',\n        'way outside': '相当外角',\n        outside: '外角',\n        inside: '内角',\n        'way inside': '相当内角',\n        'way low': '相当低め',\n        low: '低め',\n        high: '高め',\n        'way high': '相当高め',\n        'down the middle': '真ん中',\n        'first baseman': 'ファースト',\n        'second baseman': 'セカンド',\n        'third baseman': 'サード',\n        shortstop: 'ショート',\n        pitcher: 'ピッチャー',\n        catcher: 'キャッチャー',\n        'left fielder': 'レフト',\n        'center fielder': 'センター',\n        'right fielder': 'ライト',\n        'Strike.': 'ストライク。',\n        'Ball.': 'ボール。',\n        'Fouled off.': 'ファウル。',\n        'In play.': 'インプレー。',\n        'Swinging strike.': '空振り。',\n        ' outs': 'アウト',\n        ' out': 'アウト',\n        '4-seam': 'ストレート',\n        '2-seam': 'シュート',\n        slider: 'スライダー',\n        fork: 'フォーク',\n        cutter: 'カット',\n        sinker: 'シンカー',\n        curve: 'カーブ',\n        change: 'チェンジ',\n        ' struck out looking.': '、見逃し三振。',\n        ' walked.': '、フォアボール。',\n        ' struck out swinging.': '、空振り三振。',\n        'Previous: ': '前：',\n        'looks like: ': '予想',\n        'breaking ball': '変化球',\n        fastball: 'ストレート',\n        'Batting, ': '打球',\n        'Catching, pitch selection': '捕球選択',\n        Season: '記録',\n        Game: '今試合',\n        Pitch: '球',\n        Control: '制球',\n        Velocity: '速度',\n        Break: '変化',\n        'At Bat': 'バッター',\n        'On Deck': '次バッター',\n        Eye: '目',\n        Power: '力',\n        Speed: '速',\n        'Up to Bat': '打席',\n        Fielding: '守備',\n        Pitching: '投球',\n        BA: '打率',\n        OBP: '出塁',\n        SLG: '長打',\n        PA: '打席',\n        'H 2B 3B HR': '安 二 三 本',\n        H: '安',\n        '2B': '二',\n        '3B': '三',\n        HR: '本塁打',\n        RBI: '打点',\n        R: '得点',\n        BB: '四球',\n        SO: '三振',\n\n        ERA: '防御率',\n        W: '勝',\n        K: '三振',\n\n        first: 'ファースト',\n        second: 'セカンド',\n        third: 'サード',\n        'Runner on': 'ランナー',\n        'Runners on': 'ランナー',\n        'Bases empty': 'ランナーなし',\n        base: '塁',\n\n        'stolen base': '盗塁成功',\n        'caught stealing': '盗塁失敗',\n\n        Steal: '盗塁',\n        Opportunistic: '自由',\n        Hold: '止まれ',\n\n        'Select Language:': '言語',\n        'Run Fast Simulation': 'シミュレーションを試合終了まで行う',\n        'Play Ball!': 'プレーボール',\n        'Spectate the CPU': 'CPU観戦',\n        'Play from the 7th': '７回からプレーする',\n\n        'Throws/Bats': ' ',\n        LHP: '左投',\n        RHP: '右投',\n        LHB: '左打',\n        RHB: '右打',\n        L: '左投',\n        'R ': '右投',\n        ' L ': '左打',\n        ' R ': '右打',\n        '#': '背番号',\n\n        'Opponent connected': '相手選手見参',\n        'Click Here': 'ここにクリック',\n\n        'Amateur Baseball Club': '野球愛好会',\n        'Amateur Baseball Team': '愛好球団',\n        'College Team': '大学球団',\n        'Industrial League Team': '社会人球団',\n        'Training Squad': '練習軍',\n        'Team Japan': '日本代表',\n\n        Substituted: '交代',\n        Bench: 'ベンチ',\n\n        'Batter Ready': '打撃準備',\n\n        // descriptors pitching\n        Ace: 'エース',\n        'Control pitcher': '技巧派',\n        Flamethrower: '速球派',\n        'Breaking ball': '変化球',\n        // descriptors batting\n        'Genius batter': '天才',\n        Contact: 'バットコントロール',\n        'Power hitter': '主砲',\n        Speedster: '足速い',\n        Inept: '不器用',\n        'Weak swing': '弱い',\n        'Strikes out': '三振がち',\n        'Leisurely runner': '悠長',\n        //'' : '',\n        //'' : '',\n        // descriptors fielding\n        'Defensive wizard': '守備万能',\n        Glove: '好守',\n        Range: 'レンジ',\n        'Strong throw': '肩強い',\n        //'' : '',\n        //'' : '',\n        'Very late': 'とても遅め',\n        Late: '遅め',\n        '': '',\n        Early: '早め',\n        'Very Early': 'とても早め',\n\n        'Sim At Bat': '自動打撃'\n    },\n    e: {\n        empty: '-',\n        Season: 'Season',\n        Fielding: 'F%',\n        Pitching: 'P',\n        Eye: 'Eye',\n        Power: 'Pow',\n        Speed: 'Spd'\n    }\n};\n\nexport type mode_t = 'e' | 'n'; // English or Japanese;\n\nconst text: {\n    /**\n     * The global i18n translation function.\n     * @param phrase - key to translate.\n     * @param override - language override.\n     */\n    (phrase: string, override?: mode_t): string;\n    /**\n     * Denotes which language the app UI is running in.\n     */\n    mode: mode_t;\n    /**\n     * Describe a bench substitution that has occurred.\n     * @param sub - new player.\n     * @param player - outgoing player.\n     * @param mode - lang override.\n     */\n    substitution: (sub: Player, player: Player, mode?: mode_t) => string;\n    /**\n     * Locale description of how a batter sees an incoming pitch.\n     * @param game - will use pitchInFlight, probably.\n     */\n    getBattersEye: (game: Game) => Record<mode_t, string>;\n    /**\n     * @param base\n     * @returns locale description of which base a ball was batted to, or outfield area.\n     */\n    baseShortName: (base: keyof typeof baseShort) => string;\n    /**\n     * Locale fielder short name.\n     * @param fielder - key.\n     * @param override - language overrride.\n     * @returns e.g. 'short' or 'ショート'.\n     */\n    fielderShortName: (fielder: fielder_short_name_t | string, override?: mode_t) => string;\n    /**\n     * Locale slash / spacer.\n     */\n    slash: () => '/' | '・';\n    /**\n     * @param fielder - short name key.\n     * @param override - language override.\n     * @returns long name of fielder.\n     * @example 'short' -> shortstop, 'center' -> center fielder.\n     */\n    fielderLongName: (fielder: fielder_short_name_t, override?: mode_t) => string;\n    /**\n     * Locale comma.\n     */\n    comma: () => string;\n    /**\n     * A space in English, otherwise an empty string.\n     */\n    space: () => string;\n    /**\n     * A period.\n     */\n    stop: () => string;\n    /**\n     * @param pitch - thrown.\n     * @returns name of the pitch for UI.\n     */\n    namePitch: (pitch: { name: string }) => string;\n    /**\n     * Narrative for a contact result (ball in play).\n     * @param batter - batter for the play.\n     * @param fielder - fielder for the play.\n     * @param bases - bases gained.\n     * @param outBy - method of out.\n     * @param sacrificeAdvances - any sacrifice advances.\n     * @param out - any runners that were out.\n     */\n    contactResult: (\n        batter: Player,\n        fielder: string | fielder_short_name_t,\n        bases: 0 | 1 | 2 | 3 | 4,\n        outBy: out_by_t,\n        sacrificeAdvances: string[],\n        out: string[] & { doublePlay: boolean }\n    ) => string;\n} = (phrase, override) => {\n    if (!text.mode) text.mode = 'e';\n    const dictionary = translations[override ? override : text.mode];\n    const translatedText = dictionary[phrase as keyof typeof dictionary];\n    return translatedText ? translatedText : phrase;\n};\n\ntext.mode = 'e';\n\ntext.substitution = (sub, player, mode) => {\n    const originalMode = text.mode;\n    mode = mode || text.mode;\n    const order = {\n        0: text(' 1st', mode),\n        1: text(' 2nd', mode),\n        2: text(' 3rd', mode),\n        3: text(' 4th', mode),\n        4: text(' 5th', mode),\n        5: text(' 6th', mode),\n        6: text(' 7th', mode),\n        7: text(' 8th', mode),\n        8: text(' 9th', mode)\n    }[player.order as 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8];\n    const position = text.fielderShortName(player.position, mode);\n\n    if (mode === 'n') {\n        text.mode = 'n';\n        var output = `${sub.getName() +\n            text.comma() +\n            player.getName()}の交代${text.comma()}${order}(${position})`;\n    } else {\n        text.mode = 'e';\n        output = `${sub.getName()} replaces ${player.getName()} at ${position}, batting${order}`;\n    }\n    text.mode = originalMode;\n    return output;\n};\n\ntext.getBattersEye = (game) => {\n    const eye: Record<mode_t, string> = {\n            e: '',\n            n: ''\n        },\n        breaking =\n            Math.abs(game.pitchInFlight.breakDirection[0]) +\n                Math.abs(game.pitchInFlight.breakDirection[1]) >\n            40;\n    eye.e =\n        text('looks like: ', 'e') + breaking ? text('breaking ball', 'e') : text('fastball', 'e');\n    eye.n =\n        text('looks like: ', 'n') + breaking ? text('breaking ball', 'n') : text('fastball', 'n');\n    return eye;\n};\n\nconst baseShort = {\n    '1st': '一',\n    '2nd': '二',\n    '3rd': '三',\n    home: '本',\n    Home: '本',\n\n    left: '左',\n    center: '中',\n    right: '右'\n};\n\ntext.baseShortName = (base: keyof typeof baseShort) => {\n    if (text.mode == 'n') {\n        return baseShort[base];\n    }\n    return base;\n};\n\nconst fielderShort = {\n    first: '一',\n    second: '二',\n    third: '三',\n    short: '遊',\n    pitcher: '投',\n    catcher: '捕',\n    left: '左',\n    center: '中',\n    right: '右'\n};\n\ntext.fielderShortName = (fielder, override) => {\n    const mode = override || text.mode;\n    if (mode === 'n') {\n        return fielderShort[fielder as fielder_short_name_t];\n    }\n    return fielder;\n};\n\ntext.slash = () => {\n    if (text.mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = (fielder) => {\n    if (text.mode == 'n') {\n        return {\n            first: 'ファースト',\n            second: 'セカンド',\n            third: 'サード',\n            short: 'ショート',\n            pitcher: 'ピッチャー',\n            catcher: 'キャッチャー',\n            left: 'レフト',\n            center: 'センター',\n            right: 'ライト'\n        }[fielder];\n    }\n    return {\n        first: text('first baseman'),\n        second: text('second baseman'),\n        third: text('third baseman'),\n        short: text('shortstop'),\n        pitcher: text('pitcher'),\n        catcher: text('catcher'),\n        left: text('left fielder'),\n        center: text('center fielder'),\n        right: text('right fielder')\n    }[fielder];\n};\n\ntext.comma = () => ({ n: '、', e: ', ' }[text.mode]);\ntext.space = () => ({ n: '', e: ' ' }[text.mode]);\ntext.stop = () => ({ n: '。', e: '. ' }[text.mode]);\n\ntext.namePitch = (pitch) => {\n    if (text.mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1);\n    }\n    return text(pitch.name);\n};\n\ntext.contactResult = (batter, fielder, bases, outBy, sacrificeAdvances, out) => {\n    let statement = '';\n    const infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    const doublePlay = out.doublePlay;\n    if (text.mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'fieldersChoice':\n                    play = out.length === 2 ? 'double play ' : '';\n                    statement += ` reached on a <span class=\"txt-red\">fielder's choice</span> ${play}by ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 'line':\n                    statement += ` <span class=\"txt-red\">lined out</span> to ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 'fly':\n                    statement += ` <span class=\"txt-red\">flew out</span> to ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 'error':\n                    statement += ` <span class=\"txt-blue\">reached on error</span> by ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 'pop':\n                    statement += ` <span class=\"txt-red\">popped out</span> to ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 'ground':\n                    var play = doublePlay ? 'into a double play by' : 'out to';\n                    statement += ` <span class=\"txt-red\">grounded ${play}</span> ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 'thrown':\n                    play = doublePlay ? ' on a double play' : '';\n                    statement += ` was <span class=\"txt-red\">thrown out</span> by ${text.fielderShortName(\n                        fielder\n                    )}${play}`;\n                    break;\n            }\n            if (out.length) {\n                const plural = out.length > 1;\n                const runner = plural ? 'Runners' : 'Runner';\n                const is = plural ? 'are' : 'is';\n                statement += `. ${runner} from ${text(\n                    out.join(text.comma())\n                )} ${is} <span class=\"txt-red\">out</span>`;\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ` reached on an <span class=\"txt-blue\">infield hit</span> to ${text.fielderShortName(\n                            fielder\n                        )}`;\n                    } else {\n                        statement += ` reached on a <span class=\"txt-blue\">single</span> to ${text.fielderShortName(\n                            fielder\n                        )}`;\n                    }\n                    break;\n                case 2:\n                    statement += ` <span class=\"txt-blue\">doubled</span> past ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 3:\n                    statement += ` <span class=\"txt-blue\">tripled</span> past ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n                case 4:\n                    statement += ` <span class=\"txt-blue\">homered</span> to ${text.fielderShortName(\n                        fielder\n                    )}`;\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map((base) => {\n                if (base == 'third') {\n                    statement += `${text.stop()}Runner on third <span class=\"txt-blue\">scores</span>`;\n                } else {\n                    statement += `${text.stop()}Runner on ${base} <span class=\"txt-green\">advances</span>`;\n                }\n            });\n        }\n        statement += text.stop();\n    }\n    if (text.mode == 'n') {\n        const stop = text.stop();\n        statement += `${batter}は`;\n        if (outBy) {\n            const fielderLong = text.fielderLongName(fielder as fielder_short_name_t);\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'fieldersChoice':\n                    statement += `野選(${fielder})で<span class=\"txt-red\">出塁</span>`;\n                    break;\n                case 'line':\n                    statement += `<span class=\"txt-red\">${fielder}直</span>`;\n                    break;\n                case 'fly':\n                    statement += `<span class=\"txt-red\">${fielder}飛</span>`;\n                    break;\n                case 'error':\n                    statement += `<span class=\"txt-blue\">エラー(${fielder})で出塁</span>`;\n                    break;\n                case 'pop':\n                    statement += `<span class=\"txt-red\">ポップフライで${fielder}飛</span>`;\n                    break;\n                case 'ground':\n                    statement += `<span class=\"txt-red\">${fielderLong}ゴロに封殺</span>`;\n                    break;\n                case 'thrown':\n                    statement += `<span class=\"txt-red\">${fielder}ゴロ</span>`;\n                    break;\n            }\n            if (out.length) {\n                statement += `。${out\n                    .map((runner) => text(runner))\n                    .join(text.comma())}ランナーは<span class=\"txt-red\">アウト</span>`;\n            }\n            if (doublePlay) {\n                statement += '。<span class=\"txt-red\">ゲッツー</span>';\n            }\n        } else {\n            fielder = text.fielderShortName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += `<span class=\"txt-blue\">内野安打</span>(${fielder})で出塁`;\n                    } else {\n                        statement += `<span class=\"txt-blue\">安打</span>(${fielder})で出塁`;\n                    }\n                    break;\n                case 2:\n                    statement += `<span class=\"txt-blue\">二塁打</span>（${fielder}）で出塁`;\n                    break;\n                case 3:\n                    statement += `<span class=\"txt-blue\">三塁打</span>（${fielder}）で出塁`;\n                    break;\n                case 4:\n                    statement += `<span class=\"txt-blue\">本塁打</span>（${fielder}）`;\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map((base) => {\n                if (base === 'third') {\n                    statement += `${stop}サードランナー<span class=\"txt-blue\">ホームイン</span>`;\n                } else {\n                    statement += `${stop + text(base)}ランナー<span class=\"txt-green\">進塁</span>`;\n                }\n            });\n        }\n        statement += stop;\n    }\n    return statement;\n};\n\nexport { text };\n\nconst positionAbbreviation = {\n    pitcher: 'P',\n    catcher: 'C',\n    first: '1B',\n    second: '2B',\n    short: 'SS',\n    third: '3B',\n    left: 'LF',\n    center: 'CF',\n    right: 'RF'\n};\n\n/**\n * @param position - short name.\n * @returns 1 or 2 letter abbreviation\n *\n * @example pitcher -> P, center -> CF\n */\nexport const abbreviatePosition = function(position: keyof typeof positionAbbreviation) {\n    if (text.mode === 'e') {\n        return positionAbbreviation[position];\n    }\n    return text.fielderShortName(position);\n};\n","import { text } from '../Utility/text';\n\nconst Log = function() {\n    this.init();\n};\n\nLog.prototype = {\n    game: 'instance of Game',\n    init() {\n        this.lastSwing = '';\n        this.lastSwingJ = '';\n        this.stabilized = {\n            pitchRecord: {\n                e: ['', '', '', '', '', ''],\n                n: ['', '', '', '', '', '']\n            },\n            shortRecord: {\n                e: ['', '', '', '', '', ''],\n                n: ['', '', '', '', '', '']\n            }\n        };\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.shortRecord = {\n            e: [],\n            n: []\n        };\n        this.record = {\n            e: [],\n            n: []\n        };\n    },\n    SINGLE: 'H',\n    DOUBLE: '2B',\n    TRIPLE: '3B',\n    HOMERUN: 'HR',\n    WALK: 'BB',\n    GROUNDOUT: 'GO',\n    FLYOUT: 'FO',\n    LINEOUT: 'LO',\n    RUN: 'R',\n    STRIKEOUT: 'SO',\n    SACRIFICE: 'SAC',\n    REACHED_ON_ERROR: 'ROE',\n    FIELDERS_CHOICE: 'FC',\n    GIDP: '(IDP)',\n    GITP: '(ITP)',\n    STOLEN_BASE: 'SB',\n    CAUGHT_STEALING: 'CS',\n    stabilizeShortRecord() {\n        const rec = this.record.e.slice(0, 6);\n        this.shortRecord.e = rec;\n        this.stabilized.shortRecord.e = rec.concat(['', '', '', '', '', '']).slice(0, 6);\n\n        const rec2 = this.record.n.slice(0, 6);\n        this.shortRecord.n = rec2;\n        this.stabilized.shortRecord.n = rec2.concat(['', '', '', '', '', '']).slice(0, 6);\n    },\n    note(note, noteJ, only) {\n        //todo fix don't double language when specifying param [only]\n        if (only === 'e') {\n            this.record.e.unshift(note);\n            this.async(() => {\n                console.log(note);\n            });\n        } else if (only === 'n') {\n            this.record.n.unshift(noteJ);\n            this.async(() => {\n                console.log(noteJ);\n            });\n        } else {\n            this.record.e.unshift(note);\n            this.record.n.unshift(noteJ);\n            this.async(() => {\n                if (text.mode === 'n') {\n                    console.log(noteJ);\n                } else {\n                    console.log(note);\n                }\n            });\n        }\n        this.stabilizeShortRecord();\n    },\n    getBatter(batter) {\n        let order = batter.team.nowBatting;\n        order = {\n            0: text(' 1st'),\n            1: text(' 2nd'),\n            2: text(' 3rd'),\n            3: text(' 4th'),\n            4: text(' 5th'),\n            5: text(' 6th'),\n            6: text(' 7th'),\n            7: text(' 8th'),\n            8: text(' 9th')\n        }[order];\n        const positions = this.longFormFielder();\n        return (\n            text('Now batting') +\n            order +\n            text.comma() +\n            positions[batter.position] +\n            text.comma() +\n            batter.getUniformNumber() +\n            text.comma() +\n            batter.getName()\n        );\n    },\n    noteBatter(batter) {\n        const m = text.mode;\n        let record;\n        let recordJ;\n        text.mode = 'e';\n        record = this.getBatter(batter);\n        text.mode = 'n';\n        recordJ = this.getBatter(batter);\n        text.mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription(pitchInFlight, batterIsLefty) {\n        let x = pitchInFlight.x;\n        const y = pitchInFlight.y;\n        let say = '';\n        let noComma = false,\n            noComma2 = false;\n        let ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += text('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += text('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += text('inside');\n        } else {\n            say += text('way inside');\n            ball = true;\n        }\n        if (say) say += text.comma();\n        if (y < 35) {\n            say += text('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += text('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += text('high');\n        } else {\n            say += text('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(text.comma()).join('');\n            if (noComma && noComma2) {\n                say = text('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\n        return say;\n    },\n    notePitch(pitchInFlight, batter) {\n        const m = text.mode;\n        let record;\n        let recordJ;\n        text.mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.pop();\n        text.mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.pop();\n        text.mode = m;\n    },\n    broadcastCount(justOuts) {\n        if (!this.game.umpire) return '';\n        const count = this.game.umpire.count;\n        if (this.lastOuts == 2 && count.outs == 0) {\n            outs = 3 + text(' outs');\n        } else {\n            var outs = count.outs + (count.outs == 1 ? text(' out') : text(' outs'));\n        }\n        this.lastOuts = count.outs;\n        if (justOuts) {\n            return outs + text.stop();\n        }\n        return `${this.game.getInning()}: ${count.strikes}-${count.balls}, ${outs}${text.stop()}`;\n    },\n    broadcastScore() {\n        return `${this.game.teams.away.getName()} ${\n            this.game.tally.away.R\n        }, ${this.game.teams.home.getName()} ${this.game.tally.home.R}${text.stop()}`;\n    },\n    broadcastRunners() {\n        const field = this.game.field;\n        const runners = [\n            (field.first && text('first')) || '',\n            (field.second && text('second')) || '',\n            (field.third && text('third')) || ''\n        ].filter((x) => x);\n\n        let runnerCount = 0;\n        runners.map((runner) => {\n            if (runner) {\n                runnerCount++;\n            }\n        });\n\n        switch (runnerCount) {\n            case 0:\n                return text('Bases empty') + text.stop();\n            case 1:\n                return `${text('Runner on')}: ${runners.join(text.comma())}${text.stop()}`;\n            default:\n                return `${text('Runners on')}: ${runners.join(text.comma())}${text.stop()}`;\n        }\n    },\n    getSwing(swingResult) {\n        let result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += `<span class=\"txt-orange\">${text('Strike.')}</span>`;\n            } else {\n                result += `<span class=\"txt-green\">${text('Ball.')}</span>`;\n            }\n        } else {\n            const timing = ['Very late', 'Late', '', 'Early', 'Very Early'][\n                Math.max(0, Math.min(4, (((swingResult.timing | 0) + 175) / 70) | 0))\n            ];\n            if (timing) {\n                result += '(' + text(timing) + ')' + text.space();\n            }\n\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += `<span class=\"txt-orange\">${text('Fouled off.')}</span>`;\n                } else {\n                    if (swingResult.caught) {\n                        result += `<span class=\"txt-blue\">${text('In play.')}</span>`;\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += `<span class=\"txt-blue\">${text('In play.')}</span>`;\n                        } else {\n                            result += `<span class=\"txt-blue\">${text('In play.')}</span>`;\n                        }\n                    }\n                }\n            } else {\n                result += `<span class=\"txt-orange\">${text('Swinging strike.')}</span>`;\n            }\n        }\n        let steal = '';\n        const lineup = this.game.batter.team.lineup;\n        if (!isNaN(swingResult.stoleABase)) {\n            const thief = lineup[swingResult.stoleABase];\n            steal = this.noteStealAttempt(thief, true, swingResult.attemptedBase);\n        }\n        if (!isNaN(swingResult.caughtStealing)) {\n            const thief = lineup[swingResult.caughtStealing];\n            steal = this.noteStealAttempt(thief, false, swingResult.attemptedBase);\n        }\n        if (steal) {\n            this.note(steal, steal, text.mode);\n        }\n        return result + steal;\n    },\n    noteSwing(swingResult) {\n        const m = text.mode;\n        let record;\n        let recordJ;\n        const pitchRecord = this.pitchRecord;\n        const stabilized = this.stabilized.pitchRecord;\n        text.mode = 'e';\n        record = this.getSwing(swingResult);\n        pitchRecord.e[0] += record;\n        stabilized.e[0] += record;\n        text.mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        pitchRecord.n[0] += recordJ;\n        stabilized.n[0] += recordJ;\n        text.mode = m;\n        recordJ = stabilized.n[0];\n        record = stabilized.e[0];\n        const giraffe = this;\n\n        this.lastSwing = record;\n        this.lastSwingJ = recordJ;\n\n        record.indexOf('Previous') !== 0 &&\n            this.async(() => {\n                if (record.indexOf('In play') > -1 && record.indexOf('struck out') > -1) {\n                    if (text.mode === 'n') {\n                        console.log(recordJ);\n                    } else {\n                        console.log(record);\n                    }\n                } else {\n                    if (text.mode === 'n') {\n                        console.log(giraffe.broadcastCount(), recordJ);\n                    } else {\n                        console.log(giraffe.broadcastCount(), record);\n                    }\n                }\n            });\n    },\n    async(fn) {\n        if (!this.game.console) {\n            setTimeout(fn, 100);\n        }\n    },\n    noteStealAttempt(thief, success, base) {\n        return `${text.space() +\n            thief.getName() +\n            text.comma() +\n            (success ? text('stolen base') : text('caught stealing')) +\n            text.space()}(${text.baseShortName(base)})${text.stop()}`;\n    },\n    noteSubstitution(sub, player) {\n        return this.note(text.substitution(sub, player, 'e'), text.substitution(sub, player, 'n'));\n    },\n    getPlateAppearanceResult(game) {\n        const r = game.swingResult;\n        let record = '';\n        const batter = game.batter.getName();\n        let out = [];\n        if (r.looking) {\n            if (r.strike) {\n                record = batter + `<span class=\"txt-red\">${text(' struck out looking.')}</span>`;\n            } else {\n                record = batter + `<span class=\"txt-blue\">${text(' walked.')}</span>`;\n            }\n            let steal = '';\n            const lineup = this.game.batter.team.lineup;\n            if (!isNaN(r.stoleABase)) {\n                const thief = lineup[r.stoleABase];\n                steal = this.noteStealAttempt(thief, true, r.attemptedBase);\n            }\n            if (!isNaN(r.caughtStealing)) {\n                const thief = lineup[r.caughtStealing];\n                steal = this.noteStealAttempt(thief, false, r.attemptedBase);\n            }\n            record += steal;\n        } else {\n            if (r.contact) {\n                let fielder = r.fielder,\n                    bases = r.bases,\n                    outBy;\n                if (r.caught) {\n                    if (r.flyAngle < 15) {\n                        outBy = 'line';\n                    } else {\n                        if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                            outBy = 'pop';\n                        } else {\n                            outBy = 'fly';\n                        }\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                        if (r.error) {\n                            bases = 1;\n                            outBy = 'error';\n                        } else {\n                            if (r.thrownOut) {\n                                if (Math.random() < 0.5) {\n                                    outBy = 'ground';\n                                } else {\n                                    outBy = 'thrown';\n                                }\n                            } else {\n                                switch (r.bases) {\n                                    case 1:\n                                    case 2:\n                                    case 3:\n                                        bases = r.bases;\n                                        break;\n                                    case 4:\n                                        bases = 4;\n                                        if (r.splay < -15) {\n                                            fielder = 'left';\n                                        } else if (r.splay < 15) {\n                                            fielder = 'center';\n                                        } else {\n                                            fielder = 'right';\n                                        }\n                                        break;\n                                }\n                            }\n                            if (r.firstOut) {\n                                out = out.concat(\n                                    r.additionalOuts.filter((runner) => runner !== 'batter')\n                                );\n                                out.doublePlay = r.doublePlay;\n                            }\n                            if (r.fieldersChoice) {\n                                out.push(r.fieldersChoice);\n                                if (r.outs == 3) {\n                                    outBy = 'ground';\n                                } else {\n                                    outBy = 'fieldersChoice';\n                                }\n                            }\n                        }\n                    }\n                }\n                record = text.contactResult(\n                    batter,\n                    fielder,\n                    bases,\n                    outBy,\n                    r.outs === 3 ? [] : r.sacrificeAdvances,\n                    out\n                );\n            } else {\n                record = batter + `<span class=\"txt-red\">${text(' struck out swinging.')}</span>`;\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult(game) {\n        const m = text.mode,\n            prevJ = text('Previous: ', 'n'),\n            prev = text('Previous: ', 'e');\n\n        let statement;\n        const record = this.record;\n        const pitchRecord = this.pitchRecord;\n        const stabilized = this.stabilized.pitchRecord;\n\n        text.mode = 'e';\n        const result = this.getPlateAppearanceResult(game);\n        record.e.unshift(result);\n        statement = prev + this.lastSwing + text.space() + result;\n        pitchRecord.e = [statement];\n        stabilized.e = [statement, '', '', '', '', ''];\n\n        text.mode = 'n';\n        const resultJ = this.getPlateAppearanceResult(game);\n        record.n.unshift(resultJ);\n        statement = prevJ + this.lastSwingJ + text.space() + resultJ;\n        pitchRecord.n = [statement];\n        stabilized.n = [statement, '', '', '', '', ''];\n\n        text.mode = m;\n        const giraffe = this;\n        this.async(() => {\n            if (text.mode === 'n') {\n                console.log(\n                    [\n                        `%c${resultJ}`,\n                        giraffe.broadcastCount(true),\n                        giraffe.broadcastScore(),\n                        giraffe.broadcastRunners()\n                    ].join(' '),\n                    'color: darkgreen;'\n                );\n            } else {\n                console.log(\n                    [\n                        `%c${result}`,\n                        giraffe.broadcastCount(true),\n                        giraffe.broadcastScore(),\n                        giraffe.broadcastRunners()\n                    ].join(' '),\n                    'color: darkgreen;'\n                );\n            }\n        });\n    },\n    pointer: 0,\n    stabilized: {\n        pitchRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        },\n        shortRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        }\n    },\n    pitchRecord: {\n        e: [],\n        n: []\n    },\n    shortRecord: {\n        e: [],\n        n: []\n    },\n    record: {\n        e: [],\n        n: []\n    },\n    longFormFielder() {\n        return {\n            first: text('first baseman'),\n            second: text('second baseman'),\n            third: text('third baseman'),\n            short: text('shortstop'),\n            pitcher: text('pitcher'),\n            catcher: text('catcher'),\n            left: text('left fielder'),\n            center: text('center fielder'),\n            right: text('right fielder')\n        };\n    }\n};\n\nexport { Log };\n","import { Log } from '../Utility/Log';\n\n/**\n *\n * e.g. \"HR++\" (HR and 2 extra runs), \"SO\" strikeout, \"FO\" flyout\n * string formatting encapsulation for an at-bat.\n *\n */\nclass AtBat {\n    public static readonly INFIELD_HIT_INDICATOR: string = '';\n    public static readonly RBI_INDICATOR: string = '+';\n\n    public infield: string;\n    public text: string;\n    public rbi: string;\n    public beneficial: boolean = false;\n\n    constructor(text: string) {\n        this.infield = text.includes(AtBat.INFIELD_HIT_INDICATOR)\n            ? AtBat.INFIELD_HIT_INDICATOR\n            : '';\n        text = text.replace(AtBat.INFIELD_HIT_INDICATOR, '');\n        this.text = text.split(AtBat.RBI_INDICATOR)[0];\n        this.rbi = `${text.split(this.text)[1]}`;\n\n        const log = new Log();\n\n        const beneficial = [\n            log.WALK,\n            log.SINGLE,\n            log.HOMERUN,\n            log.DOUBLE,\n            log.TRIPLE,\n            log.SACRIFICE,\n            log.REACHED_ON_ERROR,\n            log.STOLEN_BASE,\n            log.RUN\n        ];\n        if (~beneficial.indexOf(this.text)) {\n            this.beneficial = true;\n        }\n    }\n    toString() {\n        return `${this.infield}${this.text}${this.rbi}`;\n    }\n}\n\nexport { AtBat };\n","const data = {\n    surnames: [\n        'Sato',\n        'Suzuki',\n        'Takahashi',\n        'Tanaka',\n        'Watanabe',\n        'Ito',\n        'Nakamura',\n        'Kobayashi',\n        'Yamamoto',\n        'Kato',\n        'Yoshida',\n        'Yamada',\n        'Sasaki',\n        'Yamaguchi',\n        'Matsumoto',\n        'Inoue',\n        'Kimura',\n        'Shimizu',\n        'Hayashi',\n        'Saito',\n        'Saito',\n        'Yamazaki',\n        'Nakajima',\n        'Mori',\n        'Abe',\n        'Ikeda',\n        'Hashimoto',\n        'Ishikawa',\n        'Yamashita',\n        'Ogawa',\n        'Ishii',\n        'Hasegawa',\n        'Goto',\n        'Okada',\n        'Kondo',\n        'Maeda',\n        'Fujita',\n        'Endo',\n        'Aoki',\n        'Sakamoto',\n        'Murakami',\n        'Ota',\n        'Kaneko',\n        'Fujii',\n        'Fukuda',\n        'Nishimura',\n        'Miura',\n        'Takeuchi',\n        'Nakagawa',\n        'Okamoto',\n        'Matsuda',\n        'Harada',\n        'Nakano'\n    ],\n    surnamesJ: [\n        '佐藤',\n        '鈴木',\n        '高橋',\n        '田中',\n        '渡辺',\n        '伊藤',\n        '中村',\n        '小林',\n        '山本',\n        '加藤',\n        '吉田',\n        '山田',\n        '佐々木',\n        '山口',\n        '松本',\n        '井上',\n        '木村',\n        '清水',\n        '林',\n        '斉藤',\n        '斎藤',\n        '山崎',\n        '中島',\n        '森',\n        '阿部',\n        '池田',\n        '橋本',\n        '石川',\n        '山下',\n        '小川',\n        '石井',\n        '長谷川',\n        '後藤',\n        '岡田',\n        '近藤',\n        '前田',\n        '藤田',\n        '遠藤',\n        '青木',\n        '坂本',\n        '村上',\n        '太田',\n        '金子',\n        '藤井',\n        '福田',\n        '西村',\n        '三浦',\n        '竹内',\n        '中川',\n        '岡本',\n        '松田',\n        '原田',\n        '中野'\n    ],\n\n    namesJ: [\n        '匠',\n        'ヒカル',\n        'ゆうき',\n        '翔太',\n        '冬馬',\n        '漣',\n        '港区',\n        'ルイ',\n        '樹',\n        '賢治',\n        '五木',\n        '春',\n        '光一',\n        '宗介',\n        'こうすけ',\n        '雄太',\n        '大樹',\n        '瑛太',\n        // newer set\n        '宏',\n        '亨',\n        '道夫',\n        '聡',\n        '昭',\n        '茂雄',\n        '勝',\n        '純一',\n        '和夫',\n        '勲',\n        '省三',\n        '隆',\n        '達夫',\n        '正一',\n        '輝夫',\n        '俊夫',\n        '史郎',\n        '勇',\n        '義弘',\n        '良雄',\n        '登',\n        '義明',\n        '正義',\n        '秀夫',\n        '肇',\n        '月',\n        '克己',\n        '正男',\n        '光男',\n        '久',\n        '耕三',\n        '清',\n        '次郎',\n        '正博',\n        '明子',\n        '武',\n        '勉',\n        '晴夫',\n        '裕二',\n        '稔',\n        '障子',\n        '和子',\n        '敦',\n        '茂',\n        '信夫',\n        '恵一',\n        '忠',\n        '高尾',\n        '薫',\n        'ケン',\n        '健治',\n        '哲夫',\n        '啓二',\n        '光一',\n        '真一',\n        '貞夫',\n        '靖',\n        '武',\n        '雄',\n        '文雄',\n        '久雄',\n        '一朗',\n        '健一',\n        '正明',\n        '五郎',\n        '誠',\n        '昭夫',\n        '誠司',\n        '洋一',\n        '康夫',\n        '誠一',\n        '正美',\n        '則夫',\n        '幸雄',\n        '忠雄',\n        '仁',\n        'シンジ',\n        '豊',\n        '邦雄',\n        '修',\n        '雅之',\n        '三郎',\n        '英治',\n        '浩二',\n        '栄一',\n        '恒夫',\n        '義郎',\n        '進',\n        '博之',\n        '巌'\n    ],\n    names: [\n        'Takumi',\n        'Hikaru',\n        'Yuuki',\n        'Shouta',\n        'Touma',\n        'Ren',\n        'Minato',\n        'Rui',\n        'Tatsuki',\n        'Kenji',\n        'Itsuki',\n        'Haru',\n        'Kouichi',\n        'Sousuke',\n        'Kousuke',\n        'Yuuta',\n        'Daiki',\n        'Eita',\n        // newer set\n        'Hiroshi',\n        'Toru',\n        'Michio',\n        'Satoshi',\n        'Akira',\n        'Shigeo',\n        'Masaru',\n        'Junichi',\n        'Kazuo',\n        'Isao',\n        'Shozo',\n        'Takashi',\n        'Tatsuo',\n        'Shoichi',\n        'Teruo',\n        'Toshio',\n        'Shiro',\n        'Isamu',\n        'Yoshihiro',\n        'Yoshio',\n        'Noboru',\n        'Yoshiaki',\n        'Tadayoshi',\n        'Hideo',\n        'Hajime',\n        'Akari',\n        'Katsumi',\n        'Masao',\n        'Mitsuo',\n        'Hisashi',\n        'Kozo',\n        'Kiyoshi',\n        'Jiro',\n        'Masahiro',\n        'Akiko',\n        'Takeshi',\n        'Tsutomu',\n        'Haruo',\n        'Yuji',\n        'Minoru',\n        'Shoji',\n        'Kazuko',\n        'Atsushi',\n        'Shigeru',\n        'Shinobu',\n        'Keiichi',\n        'Tadashi',\n        'Takao',\n        'Kaoru',\n        'Ken',\n        'Kenji',\n        'Tetsuo',\n        'Keiji',\n        'Koichi',\n        'Shinichi',\n        'Sadao',\n        'Yasushi',\n        'Takeshi',\n        'Yu',\n        'Fumio',\n        'Hisao',\n        'Ichiro',\n        'Kenichi',\n        'Masaaki',\n        'Goro',\n        'Makoto',\n        'Akio',\n        'Seiji',\n        'Yoichi',\n        'Yasuo',\n        'Seiichi',\n        'Masami',\n        'Norio',\n        'Yukio',\n        'Tadao',\n        'Hitoshi',\n        'Shinji',\n        'Yutaka',\n        'Kunio',\n        'Osamu',\n        'Masayuki',\n        'Saburo',\n        'Eiji',\n        'Koji',\n        'Eiichi',\n        'Tsuneo',\n        'Yoshio',\n        'Susumu',\n        'Hiroyuki',\n        'Iwao'\n    ],\n    teamNamesJ: [\n        '横浜',\n        '大阪',\n        '名古屋',\n        '札幌',\n        '神戸',\n        '京都',\n        '福岡',\n        '川崎',\n        '埼玉県',\n        '広島',\n        '仙台',\n        '千葉県',\n        '新潟',\n        '浜松',\n        '静岡',\n        '相模原',\n        '岡山',\n        '熊本',\n        '鹿児島',\n        '船橋',\n        '川口',\n        '姫路',\n        '松山',\n        '宇都宮',\n        '松戸',\n        '西宮',\n        '倉敷',\n        '市川',\n        '福山',\n        '尼崎',\n        '金沢',\n        '長崎',\n        '横須賀',\n        '富山',\n        '高松',\n        '町田',\n        '岐阜',\n        '枚方',\n        '藤沢',\n        '柏',\n        '豊中',\n        '長野県',\n        '豊橋',\n        '一宮',\n        '和歌山',\n        '岡崎',\n        '宮崎',\n        '奈良',\n        '吹田',\n        '高槻',\n        '旭川',\n        'いわき',\n        '高崎',\n        '所沢',\n        '川越',\n        '秋田',\n        '越谷',\n        '前橋',\n        '那覇',\n        '四日市',\n        '青森',\n        '久留米',\n        '春日井',\n        '盛岡',\n        '明石',\n        '福島',\n        '下関',\n        '長岡',\n        '市原',\n        '函館',\n        '茨城県',\n        '福井',\n        '加古川',\n        '徳島',\n        '水戸',\n        '平塚',\n        '佐世保',\n        '呉',\n        '八戸',\n        '佐賀',\n        '寝屋川',\n        '富士',\n        '春日部',\n        '茅ヶ崎',\n        '松本',\n        '厚木',\n        '大和',\n        '上尾',\n        '宝塚',\n        '筑波',\n        '沼津',\n        '熊谷',\n        '伊勢崎',\n        '岸和田',\n        '鳥取',\n        '小田原',\n        '鈴鹿',\n        '松江',\n        '日立'\n    ],\n    teamNames: [\n        'Yokohama',\n        'Osaka',\n        'Nagoya',\n        'Sapporo',\n        'Kobe',\n        'Kyoto',\n        'Fukuoka',\n        'Kawasaki',\n        'Saitama',\n        'Hiroshima',\n        'Sendai',\n        'Chiba',\n        'Niigata',\n        'Hamamatsu',\n        'Shizuoka',\n        'Sagamihara',\n        'Okayama',\n        'Kumamoto',\n        'Kagoshima',\n        'Funabashi',\n        'Kawaguchi',\n        'Himeji',\n        'Matsuyama',\n        'Utsunomiya',\n        'Matsudo',\n        'Nishinomiya',\n        'Kurashiki',\n        'Ichikawa',\n        'Fukuyama',\n        'Amagasaki',\n        'Kanazawa',\n        'Nagasaki',\n        'Yokosuka',\n        'Toyama',\n        'Takamatsu',\n        'Machida',\n        'Gifu',\n        'Hirakata',\n        'Fujisawa',\n        'Kashiwa',\n        'Toyonaka',\n        'Nagano',\n        'Toyohashi',\n        'Ichinomiya',\n        'Wakayama',\n        'Okazaki',\n        'Miyazaki',\n        'Nara',\n        'Suita',\n        'Takatsuki',\n        'Asahikawa',\n        'Iwaki',\n        'Takasaki',\n        'Tokorozawa',\n        'Kawagoe',\n        'Akita',\n        'Koshigaya',\n        'Maebashi',\n        'Naha',\n        'Yokkaichi',\n        'Aomori',\n        'Kurume',\n        'Kasugai',\n        'Morioka',\n        'Akashi',\n        'Fukushima',\n        'Shimonoseki',\n        'Nagaoka',\n        'Ichihara',\n        'Hakodate',\n        'Ibaraki',\n        'Fukui',\n        'Kakogawa',\n        'Tokushima',\n        'Mito',\n        'Hiratsuka',\n        'Sasebo',\n        'Kure',\n        'Hachinohe',\n        'Saga',\n        'Neyagawa',\n        'Fuji',\n        'Kasukabe',\n        'Chigasaki',\n        'Matsumoto',\n        'Atsugi',\n        'Yamato',\n        'Ageo',\n        'Takarazuka',\n        'Tsukuba',\n        'Numazu',\n        'Kumagaya',\n        'Isesaki',\n        'Kishiwada',\n        'Tottori',\n        'Odawara',\n        'Suzuka',\n        'Matsue',\n        'Hitachi'\n    ]\n};\n\nexport { data };\n","const helper = {\n    /**\n     * rotation angle from 0 to 360 where 180 is a fastball's backspin and 90 is a slider's, 0 for curveball\n     * in the direction (CW for righty), CCW for lefty.\n     *\n     * x movement, y movement, speed ratio, rotation angle, RPM from RHP perspective where left is smaller X\n     */\n    pitchDefinitions: {\n        // fastball, kinda\n        '4-seam': [0, 0, 1, 180, 1000],\n        '2-seam': [20, -20, 0.9, -45, 1200],\n        cutter: [-25, -20, 0.95, 75, 1200],\n        sinker: [15, -30, 0.95, -45, 1500],\n\n        // breaking ball\n        slider: [-50, -35, 0.88, 80, 2000],\n        fork: [0, -70, 0.87, 20, 500],\n        curve: [0, -110, 0.82, 10, 2500],\n\n        // change-up\n        change: [0, -10, 0.86, -15, 1000]\n    },\n    selectRandomPitch() {\n        return ['4-seam', '2-seam', 'cutter', 'sinker', 'slider', 'fork', 'curve', 'change'][\n            Math.floor(Math.random() * 8)\n        ];\n    }\n};\n\nexport { helper };\n","import { data } from '../Utility/data';\nimport { helper } from '../Utility/helper';\nimport { Log } from '../Utility/Log';\nimport { text } from '../Utility/text';\n\nexport { data, helper, Log, text };\n","import { helper } from '../Utility/helper';\nconst pitchDefinitions = helper.pitchDefinitions;\n\nconst { random, min, max, floor, ceil, abs, pow, sqrt } = Math;\n\n/**\n * For Probability!\n * @constructor\n */\nconst DistributionCtor = function() {};\n\nconst Distribution = Object.assign(DistributionCtor, {\n    identifier: 'Distribution',\n    constructor: DistributionCtor,\n    /**\n     * @param scale {number}\n     * @returns {number}\n     */\n    chance(scale) {\n        if (!scale) scale = 1;\n        return random() * scale;\n    },\n    /**\n     * @param fielder {Player}\n     * @returns {boolean}\n     */\n    error(fielder) {\n        return (100 - fielder.skill.defense.fielding) * 0.1 + 3.25 > random() * 100;\n    },\n    /**\n     * @param power\n     * @param flyAngle\n     * @param x {number} batting offset horizontal\n     * @param y {number} batting offset vertical\n     * @returns {number}\n     */\n    landingDistance(power, flyAngle, x, y) {\n        x = min(5, abs(x) | 0);\n        y = min(5, abs(y) | 0);\n        const goodContactBonus = 8 - sqrt(x * x + y * y);\n\n        const scalar = pow(random(), 1 - goodContactBonus * 0.125);\n        const staticPowerContribution = power / 300;\n        const randomPowerContribution = (random() * power) / 75;\n\n        /**\n         * The launch angle scalar should ideally be around these values based on flyAngle.\n         * 0 -> liner that goes no farther than infield.\n         * 10 -> max 120 or so\n         * 30 to 45 -> any distance\n         * over 50 -> risk of pop fly\n         * @type {number}\n         */\n        const launchAngleScalar =\n            (1 - abs(flyAngle - 30) / 60) *\n            (1 - ((10 - Math.max(Math.min(10, flyAngle), -10)) / 20) * 0.83);\n\n        return (\n            (10 + scalar * 320 + staticPowerContribution + randomPowerContribution * 150) *\n            launchAngleScalar\n        );\n    },\n    /**\n     * @param count {{strikes: number, balls: number}}\n     * @returns {{x: number, y: number}}\n     */\n    pitchLocation(count) {\n        let x, y;\n        if (random() < 0.5) {\n            x = 50 + floor(random() * 90) - floor(random() * 30);\n        } else {\n            x = 150 + floor(random() * 30) - floor(random() * 90);\n        }\n        y = 30 + (170 - floor(sqrt(random() * 28900)));\n\n        const sum = count.strikes + count.balls + 3;\n\n        x = ((3 + count.strikes) * x + count.balls * 100) / sum;\n        y = ((3 + count.strikes) * y + count.balls * 100) / sum;\n\n        return { x, y };\n    },\n    /**\n     * swing centering basis, gives number near 100.\n     * @returns {number}\n     */\n    centralizedNumber() {\n        return 100 + floor(random() * 15) - floor(random() * 15);\n    },\n    /**\n     * @param eye {Player.skill.offense.eye}\n     * @param x\n     * @param y\n     * @param {Umpire} umpire\n     * @param {number} certainty - -100 to 100 relative certainty of pitch location by the batter.\n     *                             negative indicates wrongful certainty (fooled).\n     * @returns {number} on scale of 100.\n     */\n    swingLikelihood: function(eye, x, y, umpire, certainty = 50) {\n        /**\n         * Initially the batter may have planned on whether or not to swing\n         * before seeing the pitch, depending on the count, for example.\n         * @type {number} scale to 1.\n         */\n        let planToSwing = 30;\n        const count = String(umpire.count.balls) + String(umpire.count.strikes);\n        switch (count) {\n            case '01':\n                planToSwing = 65;\n                break; // saw a pitch, ready to swing.\n            case '02':\n                planToSwing = 70;\n                break; // expecting a waste pitch.\n            case '10':\n                planToSwing = 55;\n                break; // saw a pitch, ready to swing.\n            case '11':\n                planToSwing = 70;\n                break; // no particular strategy.\n            case '12':\n                planToSwing = 90;\n                break; // defensive on 2 strikes, but maybe waste pitch.\n            case '20':\n                planToSwing = 50;\n                break; // waiting on a strike, ahead in count.\n            case '21':\n                planToSwing = 60;\n                break; // no particular strategy.\n            case '22':\n                planToSwing = 110;\n                break; // defensive on 2 strikes.\n            case '30':\n                planToSwing = 10;\n                break; // expecting a walk.\n            case '31':\n                planToSwing = 40;\n                break; // waiting for a good pitch.\n            case '32':\n                planToSwing = 130;\n                break; // all in.\n            case '00':\n            default:\n                planToSwing = 33;\n                break;\n        }\n\n        // @todo consider number of outs or runners in position.\n\n        if (umpire.game.field.second || umpire.game.field.third) {\n            planToSwing += 20; // RISP increases desire to swing.\n        }\n\n        /**\n         * Positional likelihood based on where the pitch location is perceived to be.\n         * @type {number}\n         */\n        const positionalLikelihood = (180 - abs(100 - x) - abs(100 - y)) / 2;\n\n        const inStrikezone = Distribution.inStrikezone(x, y);\n\n        if (!inStrikezone) {\n            // ball\n            /** based on avg O-Swing of 30%, decreased by better eye */\n            var eyeEvaluatedSwingLikelihood = 30 - eye * 0.3;\n        } else {\n            /** based on avg Z-Swing of 65%, increased by better eye */\n            eyeEvaluatedSwingLikelihood = 65 + eye * 0.3;\n        }\n\n        const swingLikelihood =\n            (positionalLikelihood * 30 +\n                eyeEvaluatedSwingLikelihood * 40 +\n                planToSwing * 20 +\n                abs(certainty) * 10) /\n            100;\n\n        const reflex = random() * 100 < eye;\n        let finalSwingLikelihood = swingLikelihood;\n\n        if (reflex) {\n            // Roll reflex to be able to override the initial impulse, making a purely reflexive decision to swing.\n            if (\n                (eyeEvaluatedSwingLikelihood > planToSwing && inStrikezone) ||\n                (eyeEvaluatedSwingLikelihood < planToSwing && !inStrikezone)\n            ) {\n                // the planning (guess) component is removed from the swing decision.\n\n                finalSwingLikelihood =\n                    (positionalLikelihood * 20 +\n                        eyeEvaluatedSwingLikelihood * 70 +\n                        abs(certainty) * 10) /\n                    100;\n            }\n        }\n\n        return finalSwingLikelihood;\n    },\n    /**\n     * @param target {number} 0-200\n     * @param control {number} 0-100\n     * @returns {number}\n     */\n    pitchControl(target, control) {\n        const effect = (50 - random() * 100) / (1 + control / 100);\n        return min(199.9, max(0.1, target + effect));\n    },\n    /**\n     * @param pitch {Game.pitchInFlight}\n     * @param pitcher {Player}\n     * @param x {number}\n     * @param y {number}\n     * @returns {object|{x: number, y: number}}\n     * 0.5 to 1.5 of the pitch's nominal breaking effect X\n     * 0.5 to 1.5 of the pitch's nominal breaking effect Y, magnified for lower Y\n     */\n    breakEffect(pitch, pitcher, x, y) {\n        const effect = {};\n        effect.x = floor(\n            x +\n                pitch.breakDirection[0] *\n                    (0.5 + 0.5 * random() + pitcher.pitching[pitch.name].break / 200)\n        );\n        effect.y = floor(\n            y +\n                pitch.breakDirection[1] *\n                    ((0.5 + 0.5 * random() + pitcher.pitching[pitch.name].break / 200) /\n                        (0.5 + y / 200))\n        );\n        return effect;\n    },\n    /**\n     * Determine the swing target along an axis\n     * @param target {number} 0-200\n     * @param actual {number} 0-200\n     * @param eye {number} 0-100\n     * @returns {number} 0-200\n     */\n    cpuSwing(target, actual, eye) {\n        eye = min(eye, 100); // higher eye would overcompensate here\n        return 100 + (target - 100) * (0.5 + (random() * eye) / 200) - actual;\n    },\n    /**\n     * @param {number} x - 0-200.\n     * @param {number} y - 0-200.\n     * @returns {boolean}\n     */\n    inStrikezone(x, y) {\n        return x > 50 && x < 150 && y > 35 && y < 165;\n    },\n    /**\n     * Determine the swing scalar\n     * @param eye {number} 0-100\n     * @returns {number}\n     */\n    swing(eye) {\n        return 100 / (eye + 25 + random() * 50);\n    },\n    /**\n     * @param pitch {Object} game.pitchInFlight\n     * @param catcher {Player}\n     * @param thief {Player}\n     * @param base {Number} 1,2,3,4\n     * @param volitional {boolean} whether the runner decided to steal\n     * @returns {boolean}\n     */\n    stealSuccess(pitch, catcher, thief, base, volitional) {\n        let rand = random();\n        const rand2 = random();\n\n        if (base == 4) {\n            rand = rand / 100;\n        }\n\n        const smoothedRand2 = (1 + rand2) / 2;\n\n        const pitchBaseSpeedMultiplier = (pitchDefinitions[pitch.name] || ['', '', 0.6])[2];\n\n        return (\n            ((volitional | 0) * 35 + thief.skill.offense.eye + (base * -25 + 45)) * rand +\n                10 +\n                thief.skill.offense.speed * 2 -\n                thief.fatigue >\n            pitchBaseSpeedMultiplier * pitch.velocity * smoothedRand2 +\n                (catcher.skill.defense.catching + catcher.skill.defense.throwing) * rand2\n        );\n    },\n    /**\n     * @param pitch {Object} game.pitchInFlight\n     * @param catcher {Player}\n     * @param thief {Player}\n     * @param base {Number} 1,2,3,4\n     * @returns {boolean}\n     */\n    willSteal(pitch, catcher, thief, base) {\n        if (base == 4) return false;\n        return (\n            random() < 0.15 &&\n            this.stealSuccess(pitch, catcher, thief, base, false) &&\n            random() < 0.5\n        );\n    }\n});\n\nDistribution.main = () => {\n    const ump = {\n        count: {\n            balls: 0,\n            strikes: 0\n        }\n    };\n    while (ump.count.balls < 4) {\n        while (ump.count.strikes < 3) {\n            console.log('S', ump.count.strikes, 'B', ump.count.balls);\n            console.log(\n                'middle',\n                [15, 35, 55, 75, 95].map((x) => {\n                    return Distribution.swingLikelihood(x, 100, 100, ump) | 0;\n                })\n            );\n            console.log(\n                'corner',\n                [15, 35, 55, 75, 95].map((x) => {\n                    return Distribution.swingLikelihood(x, 50, 50, ump) | 0;\n                })\n            );\n            console.log(\n                'ball',\n                [15, 35, 55, 75, 95].map((x) => {\n                    return Distribution.swingLikelihood(x, 15, 15, ump) | 0;\n                })\n            );\n            ump.count.strikes++;\n        }\n        ump.count.balls++;\n        ump.count.strikes = 0;\n    }\n};\n\nexport { Distribution };\n","/**\n * For Math!\n * @constructor\n */\nconst Mathinator = function() {};\n\n/**\n * @param n\n * @returns {number}\n */\nMathinator.square = (n) => n * n;\n\nMathinator.prototype = {\n    identifier: 'Mathinator',\n    constructor: Mathinator,\n    /**\n     * CONST\n     */\n    RADIAN: Math.PI / 180,\n    SPLAY_INDICATOR_LEFT: -4,\n    /**\n     * @param offset {{x: number, y: number}}\n     * @param angle {number}\n     * @returns {{x: number, y: number}}\n     */\n    getAngularOffset(offset, angle) {\n        const xScalar = offset.x < 0 ? -1 : 1,\n            yScalar = offset.y < 0 ? -1 : 1;\n        const originalAngle = Math.atan(offset.x / offset.y) / this.RADIAN;\n        const distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\n        return {\n            x: angledX,\n            y: angledY\n        };\n    },\n    /**\n     * @param a {Array<Number>}\n     * @param b {Array<Number>}\n     * @returns {number}\n     */\n    getPolarDistance(a, b) {\n        const radians = this.RADIAN;\n        return Math.sqrt(\n            a[1] * a[1] + b[1] * b[1] - 2 * a[1] * b[1] * Math.cos(a[0] * radians - b[0] * radians)\n        );\n    },\n    /**\n     * @param origin\n     * @param target\n     * @returns {number}\n     * 0 is flat (left-right), positive is clockwise.\n     * We use 125 instead of 180 to account for natural hand-height adjustments\n     * of various swing heights.\n     */\n    battingAngle(origin, target) {\n        return (Math.atan((origin.y - target.y) / (target.x - origin.x)) / Math.PI) * 125;\n    },\n    memory: {},\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalTrajectory(\n        percent,\n        quarter,\n        step,\n        givenApexHeight,\n        givenDistance,\n        givenSplayAngle\n    ) {\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\n        const apexHeight = Mathinator.prototype.memory.apexHeight,\n            distance = Mathinator.prototype.memory.distance,\n            splay = Mathinator.prototype.memory.splay;\n        let bottom, left, padding, borderWidth;\n        const bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            quarter *= 4;\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        bottom = (((Math.cos(splay * radian) * percent) / 100) * distance * 95) / 300;\n        left =\n            (((Math.sin(splay * radian) * percent) / 100) * distance * 95) / 300 +\n            this.SPLAY_INDICATOR_LEFT;\n\n        const apexRatio = Math.sqrt((50 - Math.abs(percent - 50)) / 100) * (1 / 0.7071);\n        if (bounding) {\n            padding = 1;\n            borderWidth = 1;\n        } else {\n            padding = ((apexRatio * apexHeight) / 90) * 15;\n            borderWidth = 2 + apexRatio * 2;\n        }\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n        padding = Math.max(Math.min(padding, 12), 0);\n\n        const { Power4, Linear } = TweenMax;\n\n        return {\n            bottom,\n            left,\n            padding,\n            borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @param [givenOrigin] Object with x, y -- pitchInFlight\n     * @returns {{top: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalCatcherPerspectiveTrajectory(\n        percent,\n        quarter,\n        step,\n        givenApexHeight,\n        givenDistance,\n        givenSplayAngle,\n        givenOrigin\n    ) {\n        const memory = Mathinator.prototype.memory;\n        if (givenApexHeight) memory.apexHeight = givenApexHeight;\n        if (givenDistance) memory.distance = givenDistance;\n        if (givenSplayAngle) memory.splay = givenSplayAngle;\n        if (givenOrigin) memory.origin = givenOrigin;\n        const apexHeight = memory.apexHeight,\n            distance = memory.distance,\n            splay = memory.splay,\n            origin = memory.origin;\n        let top, left, padding, borderWidth;\n        const bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        const height = apexHeight - Math.pow(Math.abs(50 - percent) / 50, 1.2) * apexHeight,\n            currentDistance = (distance * percent) / 100;\n\n        const projection = Math.pow((500 - currentDistance) / 500, 2); // reduction of dimensions due to distance\n\n        top =\n            200 -\n            origin.y -\n            height * 20 * projection +\n            (percent / 100) * (origin.y - 85) * projection;\n        left = origin.x + Math.sin(splay * radian) * (currentDistance * 8) * projection;\n        padding = 12 * projection * projection;\n        borderWidth = Math.max(Math.min(padding / 3, 4), 0);\n\n        top = Math.max(Math.min(top, 500), -10000);\n        left = Math.max(Math.min(left, 10000), -10000);\n        padding = Math.max(Math.min(padding, 24), 1);\n\n        //console.log('height', height|0, apexHeight|0, projection, 'left/pad/border', left|0, padding|0, borderWidth|0, 'top', top);\n\n        return {\n            top,\n            left,\n            padding,\n            borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param swingResult\n     * @returns {Game.swingResult}\n     */\n    translateSwingResultToStylePosition(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        let bottom, left;\n\n        bottom =\n            (Math.cos((swingResult.splay / 180) * Math.PI) * swingResult.travelDistance * 95) / 300;\n        left =\n            (Math.sin((swingResult.splay / 180) * Math.PI) * swingResult.travelDistance * 95) /\n                300 +\n            this.SPLAY_INDICATOR_LEFT;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n\n        swingResult.bottom = `${bottom}px`;\n        swingResult.left = `${left}px`;\n        return swingResult;\n    },\n    /**\n     * @param left {number} 0-200\n     * @param top {number} 0-200\n     * @param originLeft {number} 0-200\n     * @param originTop {number} 0-200\n     * @param quarter {number} seconds\n     * @param maxPadding {number} px padding at full size\n     * @param maxBorderWidth {number} px border width at full size\n     * @returns {Function}\n     */\n    pitchTransition(top, left, originTop, originLeft, quarter, maxPadding, maxBorderWidth) {\n        /**\n         * @param percent {number} 0-100\n         * @param step {number} 0 and up\n         * @param [breakTop] {number} 0-200 override\n         * @param [breakLeft] {number} 0-200 override\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\n         */\n        return (percent, step, breakTop, breakLeft) => {\n            let _top, _left;\n            _top = breakTop || top;\n            _left = breakLeft || left;\n            _top = originTop + Mathinator.square(percent / 100) * (_top - originTop);\n            if (step == 1) {\n                _top -= 2;\n            }\n            if (step == 2) {\n                _top -= 1;\n            }\n            _left = originLeft + Mathinator.square(percent / 100) * (_left - originLeft);\n            const padding = Math.max(Mathinator.square(percent / 100) * maxPadding, 1),\n                borderWidth = Math.max(Mathinator.square(percent / 100) * maxBorderWidth, 1);\n            return {\n                top: _top,\n                left: _left,\n                padding: `${padding}px`,\n                borderWidth: `${borderWidth}px`,\n                transform: 'translateZ(0)',\n                delay: quarter * step,\n                ease: Linear.easeNone\n            };\n        };\n    },\n    /**\n     * @param {number} distance - travel distance for the fielder (not the batted ball).\n     * @param {number} throwing - skill rating 0-1\n     * @param {number} fielding - skill rating 0-1\n     * @param {number} intercept - approx. -140 to 140\n     * @returns {number} seconds\n     */\n    fielderReturnDelay(distance, throwing, fielding, intercept) {\n        const distanceContribution = distance / 60;\n        return (\n            distanceContribution + // bip distance (up to 3s+)\n            (6 *\n            (distance / 310) * // worst case time to reach the ball,\n                Math.min(intercept - 120, 0)) /\n                -240 + // a good intercept rating will cut the base down to 0\n            1 -\n            (1.8 + fielding * 0.8) + // gather time (up to 1.8s)\n            distanceContribution / (0.5 + throwing / 2)\n        ); // throwing distance (up to 2s)\n    },\n    /**\n     * @param player {Player}\n     * @returns {number} ~2.0\n     */\n    infieldThrowDelay(player) {\n        const fielding = player.skill.defense.fielding,\n            throwing = player.skill.defense.throwing;\n        return 3.5 - (fielding + throwing) / 200;\n    },\n    /**\n     * @param speed {number} 0-100\n     * @returns {number} seconds\n     */\n    baseRunningTime(speed) {\n        return 7.0 - (speed / 100) * 4.1;\n    },\n    /**\n     * @param x {Number} bat offset\n     * @param y {Number} bat offset\n     * @param angle {Number} batting angle where 0 is horizontal, RHB clockwise increasing\n     * {\n     *   splay: -90 to 90 where 0 is up the middle,\n     *   fly: 0, flat, to 90, vertical pop up\n     * }\n     * @param eye {Number} 0 - 100 skill rating\n     * @param timing {Number} milliseconds early\n     * @param lefty {Boolean} whether the batter is lefty\n     * @returns {{splay: number, fly: number}}\n     */\n    getSplayAndFlyAngle(x, y, angle, eye, timing, lefty) {\n        const pullDirection = lefty ? 1 : -1;\n        // Let's say that you have a 100ms window in which to hit the ball fair, with an additional 40ms for\n        // playing this game interface.\n        // With this formula, 140ms early will pull the ball by ~50 degrees\n        let pull = pullDirection * ((50 / 140) * timing + Math.random() * 10 * (100 / (50 + eye)));\n\n        pull /= Math.abs(100 / (100 + angle)); // diluted by angle\n\n        let splay = -1.5 * x - (y * angle) / 20 + pull;\n\n        return {\n            splay,\n            fly: (-3 * y) / ((Math.abs(angle) + 25) / 35) // more difficult to hit a pop fly on a angled bat\n        };\n    },\n    /**\n     * @param velocityRating {Number} 0-100\n     * @param velocityScalar {Number} approx 1\n     * @returns {number}\n     */\n    getFlightTime(velocityRating, velocityScalar) {\n        return (1.3 - (0.6 * (velocityRating + 300)) / 400) / velocityScalar;\n    }\n};\n\nfor (const fn in Mathinator.prototype) {\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\n        Mathinator[fn] = Mathinator.prototype[fn];\n    }\n}\n\nexport { Mathinator };\n","const Iterator = () => {};\n\nIterator.prototype = {\n    identifier: 'Iterator',\n    constructor: Iterator,\n    each(collection, map) {\n        let keys, i;\n        if (collection instanceof Array) {\n            for (i = 0; i < collection.length; i++) {\n                map(i, collection[i]);\n            }\n        } else {\n            keys = Object.keys(collection);\n            for (i = 0; i < keys.length; i++) {\n                map(keys[i], collection[keys[i]]);\n            }\n        }\n    }\n};\n\nfor (const fn in Iterator.prototype) {\n    if (Iterator.prototype.hasOwnProperty(fn)) {\n        Iterator[fn] = Iterator.prototype[fn];\n    }\n}\n\nexport { Iterator };\n","export default {\n    RUNNERS_DISCRETION: 'runnersDiscretion',\n    RUNNER_GO: 'go',\n    RUNNER_HOLD: 'hold'\n};\n","import { data, text } from '../Utility/_utils';\nimport { Distribution } from '../Services/Distribution';\nimport { Mathinator } from '../Services/Mathinator';\nimport { Iterator } from '../Services/Iterator';\nimport { AtBat } from '../Model/AtBat';\nimport k from '../Model/TeamConstants';\n\n/**\n *\n * @param team \\the team to assign the player to (bench)\n * @param hero \\whether the player should be generated with elite skills\n * @constructor\n *\n */\nconst Player = function(team, hero) {\n    this.init(team, hero);\n    this.resetStats((this.team.game && this.team.game.gamesIntoSeason) || 72);\n};\n\nPlayer.prototype = {\n    constructor: Player,\n    /**\n     * @see {Player}\n     */\n    init(team, hero) {\n        this.position = 'bench';\n        this.ready = false;\n        this.fatigue = 0;\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = { averaging: [] };\n        this.number = 0;\n        this.randomizeSkills(hero || Math.random() > 0.9);\n        const surnameKey = Math.floor(Math.random() * data.surnames.length),\n            nameKey = Math.floor(Math.random() * data.names.length);\n\n        this.name = `${data.surnames[surnameKey]} ${data.names[nameKey]}`;\n        const jSurname = data.surnamesJ[surnameKey],\n            jGivenName = data.namesJ[nameKey];\n        this.spaceName(jSurname, jGivenName);\n        this.surname = data.surnames[surnameKey];\n        this.surnameJ = data.surnamesJ[surnameKey];\n        this.atBats = [];\n        this.definingBattingCharacteristic = {};\n        this.definingPitchingCharacteristic = {};\n        this.definingCharacteristic = {};\n        this.lastPitchCertainty = 0;\n    },\n    /**\n     * inserts the Japanese middle dot at the correct position, allowing a 4-width\n     * @param jSurname\n     * @param jGivenName\n     */\n    spaceName(jSurname, jGivenName) {\n        if (jSurname.length === 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length === 1 && !jSurname.includes('・') && jSurname.length <= 2)\n            jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surnameJ = jSurname;\n    },\n    /**\n     * for websocket transfer\n     */\n    toData() {\n        const team = this.team;\n        delete this.team;\n        const data = JSON.parse(JSON.stringify(this));\n        this.team = team;\n        return data;\n    },\n    /**\n     * @param data\n     * inverts @see #serialize()\n     */\n    fromData(data) {\n        const giraffe = this;\n        Iterator.each(data, (key, value) => {\n            giraffe[key] = value;\n        });\n        delete this.atBatObjects;\n        this.getAtBats();\n    },\n\n    /**\n     *\n     * take over the other player's position and batting order immediately, sending him/her to the bench\n     * @param {Player} player\n     * @returns {boolean}\n     *\n     */\n    substitute(player) {\n        if (player.team !== this.team) return false;\n        const order = player.order,\n            position = player.position;\n        player.team.substituted.push(player);\n        player.team.positions[position] = this;\n        player.team.lineup[order] = this;\n\n        this.position = position;\n        this.order = order;\n\n        const game = this.team.game;\n        if (game.pitcher === player) game.pitcher = this;\n        if (game.batter === player) game.batter = this;\n        if (game.deck === player) game.deck = this;\n        if (game.hole === player) game.hole = this;\n\n        const field = game.field;\n        if (field.first === player) field.first = this;\n        if (field.second === player) field.second = this;\n        if (field.third === player) field.third = this;\n\n        const bench = this.team.bench,\n            bullpen = this.team.bullpen;\n        if (bench.includes(this)) {\n            bench.splice(bench.indexOf(this), 1);\n        }\n        if (bullpen.includes(this)) {\n            bullpen.splice(bullpen.indexOf(this), 1);\n        }\n        game.log.noteSubstitution(this, player);\n    },\n    /**\n     * resets the player's statistics\n     * @param gamesIntoSeason\n     * @returns {*}\n     */\n    resetStats(gamesIntoSeason = 72) {\n        const offense = this.skill.offense;\n        const defense = this.skill.defense;\n        const randBetween = (a, b, skill) => {\n            let total = 0,\n                count = 0;\n            skill += '';\n            if (!skill) skill = '';\n            Iterator.each(skill.split(' '), (key, value) => {\n                let skill = value;\n                if (offense[skill]) skill = offense[skill];\n                if (defense[skill]) skill = defense[skill];\n                if (isNaN(skill)) skill = 50;\n                total += skill;\n                count++;\n            });\n\n            skill = Math.sqrt(0.05 + Math.random() * 0.95) * (total / (count * 0.97));\n            return Math.floor((skill / 100) * (b - a) + a);\n        };\n        let IP, ER, GS, W, L;\n        if (this.skill.pitching > 65) {\n            IP = ((this.skill.pitching - 65) * gamesIntoSeason) / 20;\n            ER = ((IP / 9) * randBetween(800, 215, this.skill.pitching)) / 100;\n            if (IP > gamesIntoSeason) {\n                //starter\n                GS = Math.floor(gamesIntoSeason / 5);\n                W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching / 1.2);\n                L = randBetween(GS - W, 0, this.skill.pitching / 3);\n            } else {\n                //reliever\n                GS = Math.floor(gamesIntoSeason / 40);\n                W = randBetween(0, GS * 0.6, this.skill.pitching);\n                L = randBetween(GS - W, 0, this.skill.pitching);\n            }\n        } else {\n            IP = 0;\n            ER = 0;\n            GS = 0;\n            W = 0;\n            L = 0;\n        }\n        const pa = randBetween(gamesIntoSeason * 3, gamesIntoSeason * 5, 'speed eye');\n        let paRemaining = pa;\n        const bb = Math.floor((randBetween(0, 18, 'power eye') * paRemaining) / 100);\n        paRemaining -= bb;\n        const ab = paRemaining;\n        const so = Math.floor((randBetween(25, 2, 'eye') * paRemaining) / 100);\n        paRemaining -= so;\n        const h = Math.floor((randBetween(185, 372, 'eye power speed') * paRemaining) / 1000);\n        paRemaining -= h;\n        const sb = randBetween(0, (h + bb) / 6, 'speed') | 0;\n        const cs = randBetween(sb, 0, 'speed eye') | 0;\n\n        const doubles = randBetween(0, h / 4, 'power speed');\n        const triples = randBetween(0, h / 12, 'speed');\n        const hr = Math.max(0, randBetween(-h / 20, h / 5, 'power eye'));\n        const r = randBetween(h / 8, (h + bb) / 3, 'speed') + hr;\n        const rbi = randBetween(h / 8, h / 2, 'power eye') + hr;\n        const hbp = randBetween(0, gamesIntoSeason / 25);\n        const sac = randBetween(0, gamesIntoSeason / 5, 'eye');\n\n        const chances = randBetween(gamesIntoSeason * 5, pa - bb - so - hr, 'fielding');\n        const E = randBetween(chances / 10, 0, 'fielding');\n        const PO = chances - E;\n\n        const oSwings = randBetween(gamesIntoSeason * 9, gamesIntoSeason, 'eye');\n        const zSwings = randBetween(gamesIntoSeason, gamesIntoSeason * 6, 'eye');\n        const ps = randBetween(2 * pa, 4.2 * pa, 'eye'); // pitches seen.\n        const swings = oSwings + zSwings;\n\n        this.stats = {\n            pitching: {\n                pitches: 0, // in game\n                GS,\n                W,\n                L,\n                strikes: 0, // in game\n                K: 0, // in game\n                getK9() {\n                    return this.K / (this.IP[0] / 9);\n                },\n                getERA() {\n                    const val = (9 * this.ER) / Math.max(1 / 3, this.IP[0] + this.IP[1] / 3);\n                    return (val + '00').slice(0, 4);\n                },\n                ERA: null,\n                ER,\n                H: 0, // in game\n                HR: 0, // in game\n                BB: 0, // in game\n                IP: [IP, 0],\n                WHIP: 0,\n                getWHIP() {\n                    return (this.H + this.BB) / (this.IP[0] ? this.IP[0] : 1);\n                }\n            },\n            batting: {\n                getBA() {\n                    return this.h / Math.max(1, this.ab);\n                },\n                getBABIP() {\n                    return (this.h - this.hr) / (this.ab - this.so - this.hr + this.sac);\n                },\n                ba: null,\n                getOBP() {\n                    return (\n                        (this.h + this.bb + this.hbp) / (this.ab + this.bb + this.hbp + this.sac)\n                    );\n                },\n                obp: null,\n                getSLG() {\n                    return (\n                        (this.h -\n                            this['2b'] -\n                            this['3b'] -\n                            this.hr +\n                            2 * this['2b'] +\n                            3 * this['3b'] +\n                            4 * this.hr) /\n                        this.ab\n                    );\n                },\n                getSlash() {\n                    this.slash =\n                        this.slash ||\n                        [this.getBA() || '.---', this.getOBP(), this.getSLG()]\n                            .map((x) => {\n                                if (isNaN(x)) return '.---';\n                                if (x < 1) return `${x}0000`.slice(1, 5);\n                                return `${x}0000`.slice(0, 5);\n                            })\n                            .join('/');\n                    return this.slash;\n                },\n                slg: null,\n                pa,\n                ab,\n                so,\n                bb,\n                h,\n                '2b': doubles,\n                '3b': triples,\n                hr,\n                r,\n                rbi,\n                hbp,\n                sac,\n                sb,\n                cs,\n                getPPA() {\n                    return this.ps / this.pa;\n                },\n                ps,\n                oSwings,\n                getOSwing() {\n                    return this.oSwings / this.swings;\n                },\n                zSwings,\n                getZSwing() {\n                    return this.zSwings / this.swings;\n                },\n                swings,\n                getSwing() {\n                    return this.swings / this.ps;\n                }\n            },\n            fielding: {\n                E,\n                PO, // should depend on position\n                A: Math.floor(Math.random() * 5) + 1 // ehh should depend on position\n            }\n        };\n        this.stats.pitching.ERA = this.stats.pitching.getERA();\n        this.stats.pitching.K9 = this.stats.pitching.getK9();\n        this.stats.pitching.WHIP = this.stats.pitching.getWHIP();\n        this.stats.batting.ba = this.stats.batting.getBA();\n    },\n    /**\n     * a list of at bat results {AtBat[]}\n     */\n    atBatObjects: [],\n    getAtBats() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            this.atBatObjects = this.atBats.map((item) => new AtBat(item));\n        }\n        return this.atBatObjects;\n    },\n    recordRBI() {\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\n    },\n    recordInfieldHit() {\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\n    },\n    /**\n     * @returns {number}\n     */\n    getBaseRunningTime() {\n        return Mathinator.baseRunningTime(this.skill.offense.speed);\n    },\n    /**\n     * live game steal\n     * @param game\n     * @param base\n     * @returns {Player.attemptSteal}\n     */\n    attemptSteal(game, base) {\n        const pitch = game.pitchInFlight;\n        const success = Distribution.stealSuccess(\n            pitch,\n            game.pitcher.team.positions.catcher,\n            this,\n            base,\n            this.team.stealAttempt === k.RUNNERS_DISCRETION\n        );\n        if (success) {\n            game.swingResult.stoleABase = this.order;\n            game.swingResult.caughtStealing = undefined;\n        } else {\n            game.swingResult.stoleABase = undefined;\n            game.swingResult.caughtStealing = this.order;\n        }\n        switch (base) {\n            case 1:\n                base = '1st';\n                break;\n            case 2:\n                base = '2nd';\n                break;\n            case 3:\n                base = '3rd';\n                break;\n            case 4:\n                base = 'Home';\n        }\n        game.swingResult.attemptedBase = base;\n        return this;\n    },\n    /**\n     * used for other calculations/orderings\n     * @returns {number}\n     */\n    defensiveAverage() {\n        const _this = this.skill.defense;\n        return (_this.speed + _this.fielding + _this.throwing) / 3;\n    },\n    /**\n     * randomizes the player's skills, usually called at init\n     * @param hero\n     * @param allPitches\n     */\n    randomizeSkills(hero, allPitches) {\n        this.hero = hero;\n        const giraffe = this;\n        const randValue = (isPitching) => {\n            let value = Math.floor(Math.pow(Math.random(), 0.75) * 80 + Math.random() * 20);\n            if (hero) {\n                value += Math.floor((100 - value) * Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value;\n        };\n        this.skill.offense = {\n            eye: randValue(),\n            power: randValue(),\n            speed: randValue()\n        };\n        this.skill.defense = {\n            catching: randValue(),\n            fielding: randValue(),\n            speed: randValue(),\n            throwing: randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity: randValue(true),\n            break: randValue(true),\n            control: randValue(true)\n        };\n        this.pitching.slider = {\n            velocity: randValue(true),\n            break: randValue(true),\n            control: randValue(true)\n        };\n        if (Math.random() < 0.85 || allPitches) {\n            // can pitch!\n            if (Math.random() > 0.6 || allPitches) {\n                this.pitching['2-seam'] = {\n                    velocity: randValue(true),\n                    break: randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.18 || allPitches) {\n                this.pitching.fork = {\n                    velocity: randValue(true),\n                    break: randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() > 0.77 || allPitches) {\n                this.pitching.cutter = {\n                    velocity: randValue(true),\n                    break: randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.21 || allPitches) {\n                this.pitching.sinker = {\n                    velocity: randValue(true),\n                    break: randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.4 || allPitches) {\n                this.pitching.curve = {\n                    velocity: randValue(true),\n                    break: randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.9 || allPitches) {\n                this.pitching.change = {\n                    velocity: randValue(true),\n                    break: randValue(true),\n                    control: randValue(true)\n                };\n            }\n        }\n\n        const averages = this.pitching.averaging.sort((a, b) => b - a).slice(0, 4);\n        const pitchingAverage = averages.reduce((a, b) => a + b) / 4;\n\n        this.skill.pitching = Math.floor(pitchingAverage);\n        delete this.pitching.averaging;\n    },\n    /**\n     * language-sensitive\n     * @returns {String}\n     */\n    getSurname() {\n        return text.mode === 'n' ? this.surnameJ : this.surname;\n    },\n    /**\n     * language-sensitive\n     * @returns {String}\n     */\n    getName() {\n        return text.mode === 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber() {\n        return text('#') + this.number;\n    },\n    /**\n     * language-sensitive, for text representation of batting order\n     * @returns {String}\n     */\n    getOrder() {\n        return text(\n            [' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]\n        );\n    },\n    /**\n     * Where positive is an early swing and negative is a late swing.\n     * @returns {number} in milliseconds between -200ms and 200ms\n     */\n    getAISwingTiming() {\n        return (\n            (Math.random() - 0.5) *\n            280 *\n            (60 / (60 + this.skill.offense.eye)) *\n            ((200 - this.lastPitchCertainty) / (200 + this.lastPitchCertainty) || 1)\n        );\n    },\n    /**\n     * a localized description of this player's defining batting characteristic e.g. \"contact hitter\"\n     * @returns {string}\n     */\n    getDefiningBattingCharacteristic() {\n        if (!this.definingBattingCharacteristic[text.mode]) {\n            this.definingBattingCharacteristic[text.mode] = this.getDefiningCharacteristic(true);\n        }\n        return this.definingBattingCharacteristic[text.mode];\n    },\n    /**\n     * a localized description of this player's defining pitching characteristic e.g. \"control pitcher\"\n     * @returns {string}\n     */\n    getDefiningPitchingCharacteristic() {\n        if (!this.definingPitchingCharacteristic[text.mode]) {\n            this.definingPitchingCharacteristic[text.mode] = this.getDefiningCharacteristic(\n                false,\n                true\n            );\n        }\n        return this.definingPitchingCharacteristic[text.mode];\n    },\n    /**\n     * a localized phrase describing a strong trait of this player e.g. \"ace\" or \"power hitter\".\n     * @param {boolean} [battingOnly] to return only their defining batting characteristic.\n     * @param {boolean} [pitchingOnly] to return only a pitching characteristic.\n     * @returns {string}\n     */\n    getDefiningCharacteristic(battingOnly, pitchingOnly) {\n        if (this.definingCharacteristic[text.mode] && !battingOnly) {\n            return this.definingCharacteristic[text.mode];\n        }\n        let out = '';\n        const o = this.skill.offense,\n            d = this.skill.defense,\n            pitcherRating = this.skill.pitching;\n        const p = this.pitching;\n        const ELITE = 90;\n        const EXCELLENT = 80;\n        const GOOD = 60;\n\n        const POOR = 40;\n        const BAD = 30;\n        const INEPT = 20;\n\n        const skills = [o.eye, o.power, o.speed, d.fielding, d.speed, d.throwing, pitcherRating];\n        const offense = [o.eye, o.power, o.speed];\n        const defense = [d.fielding, d.speed, d.throwing];\n\n        const sum = (x) => x.reduce((a, b) => a + b);\n\n        let pitching = [0, 0, 0]; // control, speed, break\n        const pitchingKeys = Object.keys(p);\n        pitchingKeys.map((x) => {\n            pitching[0] += p[x].control;\n            pitching[1] += p[x].velocity;\n            pitching[2] += p[x].break;\n        });\n        const pitches = pitchingKeys.length;\n        pitching = pitching.map((x) => (x / pitches) | 0);\n\n        if (pitchingOnly || (pitcherRating > 90 && !battingOnly)) {\n            if (pitcherRating > 94) {\n                out = text('Ace');\n            } else if (pitching[0] > EXCELLENT) {\n                out = text('Control pitcher');\n            } else if (pitching[1] > EXCELLENT) {\n                out = text('Flamethrower');\n            } else if (pitching[2] > EXCELLENT) {\n                out = text('Breaking ball');\n            }\n        } else {\n            if (battingOnly || sum([offense[0] * 2, offense[1] * 0.5, offense[2]]) > sum(defense)) {\n                if (offense[0] > 98 || sum(offense) > ELITE * 3) {\n                    out = text('Genius batter');\n                } else if (offense[1] > EXCELLENT && offense[1] > offense[0]) {\n                    out = text('Power hitter');\n                } else if (offense[0] > EXCELLENT) {\n                    out = text('Contact');\n                } else if (offense[2] > EXCELLENT) {\n                    out = text('Speedster');\n                } else if (offense[0] < INEPT || sum(offense) < POOR * 3) {\n                    out = text('Inept');\n                } else if (offense[1] < INEPT && offense[1] < offense[0]) {\n                    out = text('Weak swing');\n                } else if (offense[0] < BAD) {\n                    out = text('Strikes out');\n                } else if (offense[2] < POOR) {\n                    out = text('Leisurely runner');\n                }\n            } else {\n                if (sum(defense) > EXCELLENT * 3) {\n                    out = text('Defensive wizard');\n                } else if (defense[0] > EXCELLENT) {\n                    out = text('Glove');\n                } else if (defense[1] > EXCELLENT) {\n                    out = text('Range');\n                } else if (defense[2] > ELITE) {\n                    out = text('Strong throw');\n                }\n            }\n        }\n        if (battingOnly || pitchingOnly) return out;\n        return (this.definingCharacteristic[text.mode] = out);\n    },\n    /**\n     * to ease comparison in Angular (?)\n     */\n    toString() {\n        return `${this.name} #${this.number}`;\n    }\n};\n\nexport { Player };\n","/**\n * Each class should adhere to this pattern.\n * When a scene object has been positioned correctly and its trajectory set,\n * it should use ::join to attach itself to the scene.\n *\n * While attached, the animate method will be called on each frame.\n * Typically the animate method can run through the trajectory queue and then\n * detach itself. @see Ball\n *\n * For static meshes the animate method will do nothing, leaving the mesh permanently attached.\n */\nclass AbstractMesh {\n    /**\n     * attach and detach should be used to maintain the correct object list\n     * todo use the built in object list of the scene object\n     */\n    attach() {\n        const objects = this.loop.objects;\n        if (objects.indexOf(this) === -1) {\n            objects.push(this);\n        }\n        this.loop.scene.add(this.mesh);\n    }\n    detach() {\n        const objects = this.loop.objects;\n        const index = objects.indexOf(this);\n        if (index !== -1) {\n            this.loop.objects.splice(index, 1);\n        }\n        this.loop.scene.remove(this.mesh);\n    }\n    join(loop) {\n        this.loop = loop || this.loop;\n        // Non-circular typecheck for [Loop]\n        if (this.loop && this.loop.loop) {\n            this.attach();\n        }\n    }\n    animate() {}\n}\n\n/**\n * since we are using (0, 0, 0) vector for the center of the strike zone, the actual ground level will be offset\n * downward\n * @type {number}\n */\nAbstractMesh.WORLD_BASE_Y = -4;\n\nexport { AbstractMesh };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Indicator extends AbstractMesh {\n    constructor(loop) {\n        super();\n        let n = 60;\n        this.trajectory = [];\n        while (n--) {\n            this.trajectory.push(1);\n        }\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const THREE = window.THREE;\n        const geometry = new THREE.CircleGeometry(0.3, 32);\n        const material = new THREE.MeshPhongMaterial({\n            color: 0xffffff\n        });\n        this.mesh = new THREE.Mesh(geometry, material);\n        return this.mesh;\n    }\n    animate() {\n        this.trajectory.shift();\n\n        if (!this.trajectory.length) {\n            this.detach();\n        }\n    }\n}\n\nexport { Indicator };\n","/**\n * the constants should be tuned so that the camera coincides with the DOM's strike zone overlay\n * @type {number}\n */\nexport const VERTICAL_CORRECTION = -0.2;\nexport const INITIAL_CAMERA_DISTANCE = 8;\n","import { AbstractMesh } from './AbstractMesh';\nimport { Mathinator } from '../../Services/Mathinator';\nimport { Indicator } from './Indicator';\nimport { helper } from '../../Utility/helper';\nimport { VERTICAL_CORRECTION } from './../LoopConstants';\n\n/**\n * on the DOM the pitch zone is 200x200 pixels\n * here we scale the strike zone to 4.2 units (feet)\n * for display purposes. It is only approximately related to actual pitch zone dimensions.\n * @type {number}\n */\nconst SCALE = 2.1 / 100;\n\nconst INDICATOR_DEPTH = -5;\n\nclass Ball extends AbstractMesh {\n    /**\n     *\n     * @param loop\n     * @param trajectory {Array<Vector3>} incremental vectors applied each frame\n     * e.g. for 1 second of flight time there should be 60 incremental vectors\n     */\n    constructor(loop, trajectory) {\n        super();\n        if (!(loop && loop.loop) && loop instanceof Array) {\n            trajectory = loop;\n        }\n        this.hasIndicator = false;\n        this.trajectory = trajectory ? trajectory : [];\n        this.breakingTrajectory = [];\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n        this.setType('4-seam', 1);\n        this.bounce = 1;\n    }\n    getMesh() {\n        /** @see threex.sportballs */\n        const baseURL = 'public/';\n        const THREE = window.THREE;\n        const loader = new THREE.TextureLoader();\n        const textureColor = loader.load(`${baseURL}images/BaseballColor.jpg`);\n        const textureBump = loader.load(`${baseURL}images/BaseballBump.jpg`);\n        const geometry = new THREE.SphereGeometry(0.36, 32, 16); // real scale is 0.12\n        const material = new THREE.MeshPhongMaterial({\n            map: textureColor,\n            bumpMap: textureBump,\n            bumpScale: 0.01\n        });\n        this.mesh = new THREE.Mesh(geometry, material);\n        return this.mesh;\n    }\n\n    /**\n     * Leave an indicator when crossing the home plate front plane,\n     * and rotate while moving (default 1000 RPM)\n     */\n    animate() {\n        const frame = this.trajectory.shift(),\n            pos = this.mesh.position;\n\n        if (frame) {\n            pos.x += frame.x;\n            pos.y += frame.y * this.bounce;\n            pos.z += frame.z;\n            if (pos.y < AbstractMesh.WORLD_BASE_Y) {\n                this.bounce *= -1;\n            }\n            if (frame.x + frame.y + frame.z !== 0) {\n                this.rotate();\n            }\n        }\n        if (pos.z > INDICATOR_DEPTH && !this.hasIndicator) {\n            this.spawnIndicator();\n        }\n        if (!frame) {\n            this.detach();\n            this.loop.resetCamera();\n        }\n    }\n    setType(type, handednessScalar) {\n        const rpm = helper.pitchDefinitions[type][4];\n        const rotationAngle = helper.pitchDefinitions[type][3];\n        this.setRotation(rpm, rotationAngle * (handednessScalar || 1));\n    }\n    rotate() {\n        const rotation = this.rotation;\n        const meshRotation = this.mesh.rotation;\n        meshRotation.x += rotation.x;\n        meshRotation.y += rotation.y;\n    }\n    setRotation(rpm, rotationAngle) {\n        this.RPM = rpm;\n        this.RPS = this.RPM / 60;\n        const rotationalIncrement = (this.RP60thOfASecond = this.RPS / 60);\n\n        // calculate rotational components\n        // +x is CCW along x axis increasing\n        // +y is CW along y axis increasing\n        // +z (unused) is CW along z axis increasing\n\n        // 0   --> x:1 y:0\n        // 45  --> x:+ y:+\n        // 90  --> x:0 y:1\n        // 180 --> x:-1 y:0\n\n        const xComponent = rotationalIncrement * Math.cos((rotationAngle / 180) * Math.PI);\n        const yComponent = rotationalIncrement * Math.sin((rotationAngle / 180) * Math.PI);\n\n        this.rotation = {\n            x: (xComponent * 360 * Math.PI) / 180,\n            y: (yComponent * 360 * Math.PI) / 180\n        };\n    }\n    exportPositionTo(mesh) {\n        mesh.position.x = this.mesh.position.x;\n        mesh.position.y = this.mesh.position.y;\n        mesh.position.z = this.mesh.position.z;\n    }\n    spawnIndicator() {\n        if (this.hasIndicator) {\n            return;\n        }\n        this.hasIndicator = true;\n        const indicator = new Indicator();\n        indicator.mesh.position.x = this.mesh.position.x;\n        indicator.mesh.position.y = this.mesh.position.y;\n        indicator.mesh.position.z = this.mesh.position.z;\n        indicator.join(this.loop.background);\n    }\n    derivePitchingTrajectory(game) {\n        this.setType(game.pitchInFlight.name, game.pitcher.throws === 'right' ? 1 : -1);\n        const top = 200 - game.pitchTarget.y,\n            left = game.pitchTarget.x,\n            breakTop = 200 - game.pitchInFlight.y,\n            breakLeft = game.pitchInFlight.x,\n            flightTime = Mathinator.getFlightTime(\n                game.pitchInFlight.velocity,\n                helper.pitchDefinitions[game.pitchInFlight.name][2]\n            );\n\n        const scale = SCALE;\n        const origin = {\n            x: game.pitcher.throws == 'left' ? 1.5 : -1.5,\n            y: AbstractMesh.WORLD_BASE_Y + 6,\n            z: -60.5 // mound distance\n        };\n        this.mesh.position.x = origin.x;\n        this.mesh.position.y = origin.y;\n        this.mesh.position.z = origin.z;\n\n        const ARC_APPROXIMATION_Y_ADDITIVE = 38; // made up number\n        const terminus = {\n            x: (left - 100) * scale,\n            y: (100 - top + 2 * ARC_APPROXIMATION_Y_ADDITIVE) * scale + VERTICAL_CORRECTION,\n            z: INDICATOR_DEPTH\n        };\n        const breakingTerminus = {\n            x: (breakLeft - 100) * scale,\n            y: (100 - breakTop) * scale + VERTICAL_CORRECTION,\n            z: INDICATOR_DEPTH\n        };\n\n        let lastPosition = {\n                x: origin.x,\n                y: origin.y,\n                z: origin.z\n            },\n            lastBreakingPosition = {\n                x: origin.x,\n                y: origin.y,\n                z: origin.z\n            };\n\n        const frames = [];\n        const breakingFrames = [];\n        const frameCount = (flightTime * 60) | 0;\n        let counter = (frameCount * 1.08) | 0;\n        let frame = 0;\n\n        const xBreak = breakingTerminus.x - terminus.x,\n            yBreak = breakingTerminus.y - terminus.y;\n        const breakingDistance = Math.sqrt(Math.pow(xBreak, 2) + Math.pow(yBreak, 2));\n        /**\n         * @type {number} 1.0+, an expression of how late the pitch breaks\n         */\n        const breakingLateness = breakingDistance / (2 * ARC_APPROXIMATION_Y_ADDITIVE) / scale,\n            breakingLatenessMomentumExponent = 0.2 + Math.pow(0.45, breakingLateness);\n\n        while (counter--) {\n            const progress = ++frame / frameCount;\n\n            // linear position\n            const position = {\n                x: origin.x + (terminus.x - origin.x) * progress,\n                y: origin.y + (terminus.y - origin.y) * progress,\n                z: origin.z + (terminus.z - origin.z) * progress\n            };\n            // linear breaking position\n            const breakingInfluencePosition = {\n                x: origin.x + (breakingTerminus.x - origin.x) * progress,\n                y: origin.y + (breakingTerminus.y - origin.y) * progress,\n                z: origin.z + (breakingTerminus.z - origin.z) * progress\n            };\n            if (progress > 1) {\n                momentumScalar = 1 - Math.pow(progress, breakingLateness);\n            } else {\n                var momentumScalar = Math.pow(1 - progress, breakingLatenessMomentumExponent);\n            }\n            const breakingScalar = 1 - momentumScalar,\n                scalarSum = momentumScalar + breakingScalar;\n            // adjustment toward breaking ball position\n            const breakingPosition = {\n                x:\n                    (position.x * momentumScalar + breakingInfluencePosition.x * breakingScalar) /\n                    scalarSum,\n                y:\n                    (position.y * momentumScalar + breakingInfluencePosition.y * breakingScalar) /\n                    scalarSum,\n                z:\n                    (position.z * momentumScalar + breakingInfluencePosition.z * breakingScalar) /\n                    scalarSum\n            };\n            const increment = {\n                x: position.x - lastPosition.x,\n                y: position.y - lastPosition.y,\n                z: position.z - lastPosition.z\n            };\n            const breakingIncrement = {\n                x: breakingPosition.x - lastBreakingPosition.x,\n                y: breakingPosition.y - lastBreakingPosition.y,\n                z: breakingPosition.z - lastBreakingPosition.z\n            };\n\n            lastPosition = position;\n            lastBreakingPosition = breakingPosition;\n\n            breakingFrames.push(breakingIncrement);\n            frames.push(increment);\n        }\n\n        let pause = 60;\n        while (pause--) {\n            breakingFrames.push({ x: 0, y: 0, z: 0 });\n            frames.push({ x: 0, y: 0, z: 0 });\n        }\n\n        this.breakingTrajectory = breakingFrames;\n        this.trajectory = frames;\n        return frames;\n    }\n    deriveTrajectory(result, pitch) {\n        const dragScalarApproximation = {\n            distance: 1,\n            apexHeight: 0.57,\n            airTime: 0.96\n        };\n\n        // a.k.a. launch angle in Baseball terminology.\n        let flyAngle = result.flyAngle;\n\n        // distance the ball travels before hitting the ground the first time.\n        let distance = Math.abs(result.travelDistance);\n\n        const scalar = result.travelDistance < 0 ? -1 : 1;\n\n        // Using a different scalar for ground balls.\n        const flightScalar = flyAngle < 7 ? -1 : 1;\n        const splay = result.splay;\n\n        if (flightScalar < 0 && result.travelDistance > 0) {\n            switch (true) {\n                case result.fielder in\n                    {\n                        first: 1,\n                        second: 1,\n                        short: 1,\n                        third: 1\n                    }:\n                    // If we're using the ground ball animation trajectory,\n                    // have the rendered travel distance be at least to the\n                    // infield arc if the fielder\n                    // is a non-battery infielder.\n                    distance = Math.max(110, distance);\n                    break;\n            }\n        }\n\n        flyAngle = 1 + Math.abs(flyAngle); // todo why plus 1?\n        if (flyAngle > 90) flyAngle = 180 - flyAngle;\n\n        // exit velocity in mph.\n        const velocity =\n            dragScalarApproximation.distance *\n            Math.sqrt((9.81 * distance) / Math.sin((2 * Math.PI * Math.max(flyAngle, 8)) / 180));\n        const velocityVerticalComponent = Math.sin(Mathinator.RADIAN * flyAngle) * velocity;\n\n        let groundTime = 0;\n\n        // if the ball was caught, stop animation at the landing point.\n        // otherwise, add fielder travel to the tail of the animation as the ball rolls.\n        if (result.fieldingDelay) {\n            groundTime = result.fieldingDelay;\n        }\n\n        // in feet\n        const apexHeight =\n            ((velocityVerticalComponent * velocityVerticalComponent) / (2 * 9.81)) *\n            dragScalarApproximation.apexHeight;\n\n        // in seconds\n        const airTime = 1.5 * Math.sqrt((2 * apexHeight) / 9.81) * dragScalarApproximation.airTime; // 2x freefall equation\n\n        this.airTime = airTime;\n\n        const scale = SCALE;\n\n        const origin = {\n            x: pitch.x + result.x - 100,\n            y: pitch.y + result.y - 100,\n            z: 0\n        };\n\n        this.mesh.position.x = origin.x * scale;\n        this.mesh.position.y = origin.y * scale;\n        this.mesh.position.z = origin.z;\n\n        const extrema = {\n            x: Math.sin((splay / 180) * Math.PI) * distance,\n            y: apexHeight,\n            z: -Math.cos((splay / 180) * Math.PI) * distance\n        };\n\n        const frames = [];\n        let frameCount = (airTime * 60 + groundTime * 20) | 0;\n        let counter = frameCount;\n        let frame = 0;\n\n        let lastHeight = 0;\n        let lastWaveDirection = 0;\n\n        // travel rate reduction from hitting the ground.\n        // decreases each bounce.\n        let slow = 1;\n        let bounces = 0;\n\n        while (counter-- > 0) {\n            let y;\n            /** @type {number} 0 to 1. */\n            let progress;\n            /** @type {number} 0 to 100. */\n            let percent;\n\n            progress = Math.pow(\n                ++frame / frameCount,\n                0.87 // ease out / trend toward 1.0 to simulate higher initial speed.\n            );\n            percent = progress * 100;\n\n            // this equation is approximate\n            if (flightScalar < 0) {\n                const currentDistance = progress * distance;\n\n                const tapering = Math.max(0, (100 - bounces * 20) / 100);\n                const startingHeight = origin.y * scale;\n                const finalHeight = AbstractMesh.WORLD_BASE_Y;\n\n                // lets say 3 bounces per 90 feet.\n                // in practice, this effect will be invisible after a certain distance due to\n                // tapering.\n                const averageBounceRate = 3;\n\n                // a map of distance to sine wave position.\n                // the multiplication of bounce rate means that as distance approaches the\n                // final distance, the sine wave will have been traversed that many times, giving that\n                // many bounces.\n                const waveProgress =\n                    (averageBounceRate * Math.pow(currentDistance, 1.1)) / distance;\n                const waveComponent = Math.sin((waveProgress * Math.PI) / 2);\n                const waveHeight = Math.abs(waveComponent);\n\n                if (waveComponent * lastWaveDirection < 0) {\n                    bounces += 1;\n                    slow *= 0.75;\n                    frameCount /= slow;\n                    frameCount |= 0;\n                    frame /= slow;\n                    frame |= 0;\n                }\n                lastWaveDirection = waveComponent;\n\n                /**\n                 * SIN wave with tapering gives a ground ball the bouncing trajectory.\n                 * @type {number}\n                 */\n                y = (startingHeight + apexHeight * waveHeight) * tapering + finalHeight * progress;\n            } else {\n                /**\n                 * Note the pow(n, 2) gives the flyball a parabolic trajectory.\n                 * @type {number}\n                 */\n                y = apexHeight - Math.pow(Math.abs(50 - percent) / 50, 2) * apexHeight;\n            }\n\n            frames.push({\n                x: (extrema.x / frameCount) * slow,\n                y: y - lastHeight,\n                z: (extrema.z / frameCount) * slow\n            });\n\n            lastHeight = y;\n        }\n\n        this.trajectory = frames;\n        return frames;\n    }\n}\n\nBall.prototype.DEFAULT_RPM = 1000;\nBall.prototype.RPM = 1000;\nBall.prototype.RPS = 1000 / 60;\nBall.prototype.RP60thOfASecond = 1000 / 60 / 60;\nBall.prototype.rotation = {\n    x: (Ball.prototype.RP60thOfASecond * 360 * Math.PI) / 180, // in radians per 60th of a second\n    y: (Ball.prototype.RP60thOfASecond * 360 * Math.PI) / 180\n};\n\nexport { Ball };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Mound extends AbstractMesh {\n    constructor(loop) {\n        super();\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0xdcb096\n        });\n\n        const mesh = new THREE.Mesh(new THREE.CircleGeometry(9), material);\n\n        mesh.rotation.x = (-90 / 180) * Math.PI;\n        mesh.rotation.y = 0;\n        mesh.rotation.z = (45 / 180) * Math.PI;\n\n        mesh.position.x = 0;\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0.9;\n        mesh.position.z = -60.5;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { Mound };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Base extends AbstractMesh {\n    constructor(loop, base) {\n        super();\n        this.base = base;\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0xffffff\n        });\n\n        const mesh = new THREE.Mesh(new THREE.BoxGeometry(1.5, 0.3, 1.5, 8, 8, 8), material);\n\n        mesh.rotation.x = (-0 / 180) * Math.PI;\n        mesh.rotation.y = (45 / 180) * Math.PI;\n        mesh.rotation.z = (0 / 180) * Math.PI;\n\n        switch (this.base) {\n            case 'first':\n                mesh.position.x = 69;\n                mesh.position.z = -64;\n                break;\n            case 'second':\n                mesh.position.x = 0;\n                mesh.position.z = -128;\n                break;\n            case 'third':\n                mesh.position.x = -69;\n                mesh.position.z = -64;\n                break;\n            case 'home':\n                mesh.position.x = 0;\n                mesh.position.z = 0;\n\n                mesh.rotation.y = 0;\n        }\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0.5;\n        mesh.position.z -= 0;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { Base };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass FoulLine extends AbstractMesh {\n    constructor(loop, side) {\n        super();\n        this.side = side;\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0xffffff\n        });\n\n        const mesh = new THREE.Mesh(new THREE.PlaneGeometry(0.35, 300, 1, 1), material);\n\n        const left = this.side === 'left';\n\n        mesh.rotation.x = (-90 / 180) * Math.PI;\n        mesh.rotation.y = (0 / 180) * Math.PI;\n\n        if (left) {\n            mesh.rotation.z = (45 / 180) * Math.PI;\n            mesh.position.x = -108;\n            mesh.position.z = -102;\n        } else {\n            mesh.rotation.z = (-45 / 180) * Math.PI;\n            mesh.position.x = 108;\n            mesh.position.z = -102;\n        }\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0.35;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { FoulLine };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass FoulPole extends AbstractMesh {\n    constructor(loop, side) {\n        super();\n        this.side = side;\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0xe3ef6e\n        });\n\n        const mesh = new THREE.Mesh(new THREE.CylinderGeometry(0.35, 0.35, 180, 8, 8), material);\n\n        const left = this.side === 'left';\n\n        if (left) {\n            mesh.position.x = -218;\n            mesh.position.z = -212;\n        } else {\n            mesh.position.x = 218;\n            mesh.position.z = -212;\n        }\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { FoulPole };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Field extends AbstractMesh {\n    constructor(loop) {\n        super();\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0xdcb096\n        });\n\n        const mesh = new THREE.Mesh(new THREE.PlaneGeometry(160, 160, 32, 32), material);\n\n        mesh.rotation.x = (-90 / 180) * Math.PI;\n        mesh.rotation.y = 0;\n        mesh.rotation.z = (45 / 180) * Math.PI;\n\n        mesh.position.x = 0;\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y;\n        mesh.position.z = -102;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { Field };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Grass extends AbstractMesh {\n    constructor(loop, infield) {\n        super();\n        this.infield = infield;\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: this.infield ? 0x284c19 : 0x284c19 //0x486D1F\n        });\n\n        const mesh = new THREE.Mesh(\n            new THREE.PlaneGeometry(this.infield ? 94 : 8000, this.infield ? 94 : 8000, 16, 16),\n            material\n        );\n\n        if (this.infield) {\n            mesh.rotation.x = (-90 / 180) * Math.PI;\n            mesh.rotation.y = 0;\n            mesh.rotation.z = (45 / 180) * Math.PI;\n\n            mesh.position.x = 0;\n            mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0.2;\n            mesh.position.z = -62;\n        } else {\n            mesh.rotation.x = (-90 / 180) * Math.PI;\n            mesh.rotation.y = 0;\n            mesh.rotation.z = (45 / 180) * Math.PI;\n\n            mesh.position.x = 0;\n            mesh.position.y = AbstractMesh.WORLD_BASE_Y - 0.2;\n            mesh.position.z = -570;\n        }\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { Grass };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass BaseDirt extends AbstractMesh {\n    constructor(loop, base) {\n        super();\n        this.base = base;\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0xdcb096\n        });\n        const home = this.base.base === 'home';\n\n        const mesh = new THREE.Mesh(new THREE.CircleGeometry(home ? 18 : 12, 32), material);\n\n        mesh.rotation.x = (-90 / 180) * Math.PI;\n        mesh.rotation.y = 0;\n        mesh.rotation.z = (45 / 180) * Math.PI;\n\n        const base = this.base.getMesh().position;\n\n        mesh.position.x = base.x * 0.9;\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0.3;\n        mesh.position.z = base.z;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { BaseDirt };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass BattersEye extends AbstractMesh {\n    constructor(loop) {\n        super();\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0x3f4045\n        });\n\n        const mesh = new THREE.Mesh(new THREE.BoxGeometry(200, 45, 4, 16, 16, 16), material);\n\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0;\n        mesh.position.z -= 310;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { BattersEye };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Wall extends AbstractMesh {\n    constructor(loop, angle) {\n        super();\n        this.angle = angle;\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    getMesh() {\n        const material = new THREE.MeshLambertMaterial({\n            color: 0x3f4045\n        });\n\n        const mesh = new THREE.Mesh(new THREE.BoxGeometry(120, 15, 4, 16, 16, 16), material);\n\n        const radians = (this.angle / 180) * Math.PI;\n        mesh.rotation.y = -radians;\n\n        const hypotenuse = 300;\n        const distance = Math.cos(radians) * hypotenuse;\n        const offset = Math.sin(radians) * hypotenuse;\n\n        mesh.position.x += offset;\n        mesh.position.y = AbstractMesh.WORLD_BASE_Y + 0;\n        mesh.position.z -= distance;\n\n        this.mesh = mesh;\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { Wall };\n","/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n */\n\nconst loadSkyShader = () => {\n    THREE.ShaderLib['sky'] = {\n        uniforms: {\n            luminance: { type: 'f', value: 1 },\n            turbidity: { type: 'f', value: 2 },\n            reileigh: { type: 'f', value: 1 },\n            mieCoefficient: { type: 'f', value: 0.005 },\n            mieDirectionalG: { type: 'f', value: 0.8 },\n            sunPosition: { type: 'v3', value: new THREE.Vector3() }\n        },\n\n        vertexShader: [\n            'varying vec3 vWorldPosition;',\n\n            'void main() {',\n\n            'vec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n            'vWorldPosition = worldPosition.xyz;',\n\n            'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n            '}'\n        ].join('\\n'),\n\n        fragmentShader: [\n            'uniform sampler2D skySampler;',\n            'uniform vec3 sunPosition;',\n            'varying vec3 vWorldPosition;',\n\n            'vec3 cameraPos = vec3(0., 0., 0.);',\n            '// uniform sampler2D sDiffuse;',\n            '// const float turbidity = 10.0; //',\n            '// const float reileigh = 2.; //',\n            '// const float luminance = 1.0; //',\n            '// const float mieCoefficient = 0.005;',\n            '// const float mieDirectionalG = 0.8;',\n\n            'uniform float luminance;',\n            'uniform float turbidity;',\n            'uniform float reileigh;',\n            'uniform float mieCoefficient;',\n            'uniform float mieDirectionalG;',\n\n            '// constants for atmospheric scattering',\n            'const float e = 2.71828182845904523536028747135266249775724709369995957;',\n            'const float pi = 3.141592653589793238462643383279502884197169;',\n\n            'const float n = 1.0003; // refractive index of air',\n            'const float N = 2.545E25; // number of molecules per unit volume for air at',\n            '// 288.15K and 1013mb (sea level -45 celsius)',\n            'const float pn = 0.035;\t// depolatization factor for standard air',\n\n            '// wavelength of used primaries, according to preetham',\n            'const vec3 lambda = vec3(680E-9, 550E-9, 450E-9);',\n\n            '// mie stuff',\n            '// K coefficient for the primaries',\n            'const vec3 K = vec3(0.686, 0.678, 0.666);',\n            'const float v = 4.0;',\n\n            '// optical length at zenith for molecules',\n            'const float rayleighZenithLength = 8.4E3;',\n            'const float mieZenithLength = 1.25E3;',\n            'const vec3 up = vec3(0.0, 1.0, 0.0);',\n\n            'const float EE = 1000.0;',\n            'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n            '// 66 arc seconds -> degrees, and the cosine of that',\n\n            '// earth shadow hack',\n            'const float cutoffAngle = pi/1.95;',\n            'const float steepness = 1.5;',\n\n            'vec3 totalRayleigh(vec3 lambda)',\n            '{',\n            'return (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn));',\n            '}',\n\n            // see http://blenderartists.org/forum/showthread.php?321110-Shaders-and-Skybox-madness\n            '// A simplied version of the total Reayleigh scattering to works on browsers that use ANGLE',\n            'vec3 simplifiedRayleigh()',\n            '{',\n            'return 0.0005 / vec3(94, 40, 18);',\n            // return 0.00054532832366 / (3.0 * 2.545E25 * pow(vec3(680E-9, 550E-9, 450E-9), vec3(4.0)) * 6.245);\n            '}',\n\n            'float rayleighPhase(float cosTheta)',\n            '{\t ',\n            'return (3.0 / (16.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\n            '//\treturn (1.0 / (3.0*pi)) * (1.0 + pow(cosTheta, 2.0));',\n            '//\treturn (3.0 / 4.0) * (1.0 + pow(cosTheta, 2.0));',\n            '}',\n\n            'vec3 totalMie(vec3 lambda, vec3 K, float T)',\n            '{',\n            'float c = (0.2 * T ) * 10E-18;',\n            'return 0.434 * c * pi * pow((2.0 * pi) / lambda, vec3(v - 2.0)) * K;',\n            '}',\n\n            'float hgPhase(float cosTheta, float g)',\n            '{',\n            'return (1.0 / (4.0*pi)) * ((1.0 - pow(g, 2.0)) / pow(1.0 - 2.0*g*cosTheta + pow(g, 2.0), 1.5));',\n            '}',\n\n            'float sunIntensity(float zenithAngleCos)',\n            '{',\n            'return EE * max(0.0, 1.0 - exp(-((cutoffAngle - acos(zenithAngleCos))/steepness)));',\n            '}',\n\n            '// float logLuminance(vec3 c)',\n            '// {',\n            '// \treturn log(c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722);',\n            '// }',\n\n            '// Filmic ToneMapping http://filmicgames.com/archives/75',\n            'float A = 0.15;',\n            'float B = 0.50;',\n            'float C = 0.10;',\n            'float D = 0.20;',\n            'float E = 0.02;',\n            'float F = 0.30;',\n            'float W = 1000.0;',\n\n            'vec3 Uncharted2Tonemap(vec3 x)',\n            '{',\n            'return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;',\n            '}',\n\n            'void main() ',\n            '{',\n            'float sunfade = 1.0-clamp(1.0-exp((sunPosition.y/450000.0)),0.0,1.0);',\n\n            '// luminance =  1.0 ;// vWorldPosition.y / 450000. + 0.5; //sunPosition.y / 450000. * 1. + 0.5;',\n\n            '// gl_FragColor = vec4(sunfade, sunfade, sunfade, 1.0);',\n\n            'float reileighCoefficient = reileigh - (1.0* (1.0-sunfade));',\n\n            'vec3 sunDirection = normalize(sunPosition);',\n\n            'float sunE = sunIntensity(dot(sunDirection, up));',\n\n            '// extinction (absorbtion + out scattering) ',\n            '// rayleigh coefficients',\n\n            // \"vec3 betaR = totalRayleigh(lambda) * reileighCoefficient;\",\n            'vec3 betaR = simplifiedRayleigh() * reileighCoefficient;',\n\n            '// mie coefficients',\n            'vec3 betaM = totalMie(lambda, K, turbidity) * mieCoefficient;',\n\n            '// optical length',\n            '// cutoff angle at 90 to avoid singularity in next formula.',\n            'float zenithAngle = acos(max(0.0, dot(up, normalize(vWorldPosition - cameraPos))));',\n            'float sR = rayleighZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\n            'float sM = mieZenithLength / (cos(zenithAngle) + 0.15 * pow(93.885 - ((zenithAngle * 180.0) / pi), -1.253));',\n\n            '// combined extinction factor\t',\n            'vec3 Fex = exp(-(betaR * sR + betaM * sM));',\n\n            '// in scattering',\n            'float cosTheta = dot(normalize(vWorldPosition - cameraPos), sunDirection);',\n\n            'float rPhase = rayleighPhase(cosTheta*0.5+0.5);',\n            'vec3 betaRTheta = betaR * rPhase;',\n\n            'float mPhase = hgPhase(cosTheta, mieDirectionalG);',\n            'vec3 betaMTheta = betaM * mPhase;',\n\n            'vec3 Lin = pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * (1.0 - Fex),vec3(1.5));',\n            'Lin *= mix(vec3(1.0),pow(sunE * ((betaRTheta + betaMTheta) / (betaR + betaM)) * Fex,vec3(1.0/2.0)),clamp(pow(1.0-dot(up, sunDirection),5.0),0.0,1.0));',\n\n            '//nightsky',\n            'vec3 direction = normalize(vWorldPosition - cameraPos);',\n            'float theta = acos(direction.y); // elevation --> y-axis, [-pi/2, pi/2]',\n            'float phi = atan(direction.z, direction.x); // azimuth --> x-axis [-pi/2, pi/2]',\n            'vec2 uv = vec2(phi, theta) / vec2(2.0*pi, pi) + vec2(0.5, 0.0);',\n            '// vec3 L0 = texture2D(skySampler, uv).rgb+0.1 * Fex;',\n            'vec3 L0 = vec3(0.1) * Fex;',\n\n            '// composition + solar disc',\n            '//if (cosTheta > sunAngularDiameterCos)',\n            'float sundisk = smoothstep(sunAngularDiameterCos,sunAngularDiameterCos+0.00002,cosTheta);',\n            '// if (normalize(vWorldPosition - cameraPos).y>0.0)',\n            'L0 += (sunE * 19000.0 * Fex)*sundisk;',\n\n            'vec3 whiteScale = 1.0/Uncharted2Tonemap(vec3(W));',\n\n            'vec3 texColor = (Lin+L0);   ',\n            'texColor *= 0.04 ;',\n            'texColor += vec3(0.0,0.001,0.0025)*0.3;',\n\n            'float g_fMaxLuminance = 1.0;',\n            'float fLumScaled = 0.1 / luminance;     ',\n            'float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (g_fMaxLuminance * g_fMaxLuminance)))) / (1.0 + fLumScaled); ',\n\n            'float ExposureBias = fLumCompressed;',\n\n            'vec3 curr = Uncharted2Tonemap((log2(2.0/pow(luminance,4.0)))*texColor);',\n            'vec3 color = curr*whiteScale;',\n\n            'vec3 retColor = pow(color,vec3(1.0/(1.2+(1.2*sunfade))));',\n\n            'gl_FragColor.rgb = retColor;',\n\n            'gl_FragColor.a = 1.0;',\n            '}'\n        ].join('\\n')\n    };\n\n    return function() {\n        const skyShader = THREE.ShaderLib['sky'];\n        const skyUniforms = THREE.UniformsUtils.clone(skyShader.uniforms);\n\n        const skyMat = new THREE.ShaderMaterial({\n            fragmentShader: skyShader.fragmentShader,\n            vertexShader: skyShader.vertexShader,\n            uniforms: skyUniforms,\n            side: THREE.BackSide\n        });\n\n        const skyGeo = new THREE.SphereBufferGeometry(450000, 32, 15);\n        const skyMesh = new THREE.Mesh(skyGeo, skyMat);\n\n        // Expose variables\n        this.mesh = skyMesh;\n        this.uniforms = skyUniforms;\n    };\n};\n\nexport { loadSkyShader };\n","import { AbstractMesh } from './AbstractMesh';\nimport { loadSkyShader } from '../Shaders/SkyShader';\n\nclass Sky extends AbstractMesh {\n    constructor(loop) {\n        super();\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n    }\n    setUniforms(uniforms) {\n        this.uniforms = uniforms;\n        const sky = this.sky;\n        for (const key in uniforms) {\n            if (uniforms.hasOwnProperty(key)) {\n                if (!sky.uniforms[key]) {\n                    sky.uniforms[key] = uniforms[key];\n                }\n                if (typeof uniforms[key] === 'object') {\n                    sky.uniforms[key].value = uniforms[key].value;\n                }\n            }\n        }\n    }\n    getMesh() {\n        const uniforms = (this.uniforms = {\n            luminance: { type: 'f', value: 1.1 },\n            turbidity: { type: 'f', value: 1 },\n            reileigh: { type: 'f', value: 1.3 },\n            mieCoefficient: { type: 'f', value: 0.0022 },\n            mieDirectionalG: { type: 'f', value: 0.99 },\n            sunPosition: { type: 'v3', value: new THREE.Vector3() },\n            inclination: 0.18, // elevation / inclination\n            azimuth: 0.75,\n            sun: false\n        });\n        if (!AbstractMesh.Sky) {\n            AbstractMesh.Sky = loadSkyShader();\n        }\n        const sky = new AbstractMesh.Sky();\n        this.sky = sky;\n        this.mesh = sky.mesh;\n\n        this.setUniforms(uniforms);\n\n        return this.mesh;\n    }\n    animate() {}\n}\n\nexport { Sky };\n","import { AbstractMesh } from './AbstractMesh';\n\nclass Sun extends AbstractMesh {\n    constructor(loop) {\n        super();\n        this.getMesh();\n        if (loop && loop.loop) {\n            this.join(loop);\n        }\n        this.targetTime = {\n            h: 6,\n            m: 0\n        };\n        this.time = {\n            h: 6,\n            m: 0\n        };\n    }\n    setTargetTime(hours, minutes) {\n        this.targetTime.h = hours;\n        this.targetTime.m = minutes;\n    }\n    getMesh() {\n        const sun = new THREE.Mesh(\n            new THREE.SphereGeometry(20000, 16, 8),\n            new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true })\n        );\n        sun.position.z = -950000; // initialize away from scene\n        sun.position.y = -100000;\n        sun.position.x = -200000;\n        sun.visible = false;\n\n        this.mesh = sun;\n        return this.mesh;\n    }\n\n    /**\n     * @param sky Sky\n     */\n    derivePosition(sky) {\n        const distance = 400000;\n        const uniforms = sky.uniforms;\n\n        const theta = Math.PI * (uniforms.inclination - 0.5);\n        const phi = 2 * Math.PI * (uniforms.azimuth - 0.5);\n\n        const mesh = this.mesh;\n\n        mesh.position.z = distance * Math.cos(phi);\n        mesh.position.y = distance * Math.sin(phi) * Math.sin(theta);\n        mesh.position.x = -(distance * Math.sin(phi) * Math.cos(theta));\n\n        mesh.visible = uniforms.sun;\n\n        sky.uniforms.sunPosition.value.copy(mesh.position);\n    }\n    animate() {\n        if (this.time.h !== this.targetTime.h || this.time.m !== this.targetTime.m) {\n            this.loop.addMinutes(1);\n            this.time.m += 1;\n            if (this.time.m >= 60) {\n                this.time.h++;\n                this.time.m -= 60;\n                this.time.h %= 24;\n            }\n        }\n    }\n}\n\nexport { Sun };\n","const lighting = {\n    addTo(scene) {\n        const light = new THREE.HemisphereLight(0xffffbb, 0x080820, 1.0);\n        scene.add(light);\n        const sun = new THREE.DirectionalLight(0xffffbb, 0.45);\n        light.position.set(-1, 1, 1);\n        this.light = light;\n        this.sun = sun;\n        scene.add(sun);\n    },\n    setLuminosity(level) {\n        this.light.intensity = level;\n        this.sun.intensity = level / 2;\n    }\n};\n\nexport { lighting };\n","import { Ball } from './Mesh/Ball';\nimport { Mound } from './Mesh/Mound';\nimport { Base } from './Mesh/Base';\nimport { FoulLine } from './Mesh/FoulLine';\nimport { FoulPole } from './Mesh/FoulPole';\nimport { Field } from './Mesh/Field';\nimport { Grass } from './Mesh/Grass';\nimport { BaseDirt } from './Mesh/BaseDirt';\nimport { BattersEye } from './Mesh/BattersEye';\nimport { Wall } from './Mesh/Wall';\nimport { Sky } from './Mesh/Sky';\nimport { Sun } from './Mesh/Sun';\nimport { lighting } from './scene/lighting';\nimport { AbstractMesh } from './Mesh/AbstractMesh';\nimport { loadSkyShader } from './Shaders/SkyShader';\n\nimport { VERTICAL_CORRECTION, INITIAL_CAMERA_DISTANCE } from './LoopConstants';\n\nlet ahead, initialPosition;\n\nconst AHEAD = () => {\n    if (ahead) {\n        return ahead;\n    }\n    if (typeof THREE !== 'undefined') {\n        return (ahead = new THREE.Vector3(0, VERTICAL_CORRECTION, -60.5));\n    }\n};\nconst INITIAL_POSITION = () => {\n    if (initialPosition) {\n        return initialPosition;\n    }\n    if (typeof THREE !== 'undefined') {\n        return (initialPosition = new THREE.Vector3(\n            0,\n            VERTICAL_CORRECTION,\n            INITIAL_CAMERA_DISTANCE\n        ));\n    }\n};\n\n/**\n * manager for the rendering loop\n */\nclass Loop {\n    /**\n     * @param {string} elementClass\n     * @param {boolean} background\n     * @param {Class} Animator\n     */\n    constructor(elementClass, background, Animator) {\n        this.overwatchMoveTarget = null;\n        this.lighting = lighting;\n        this.Animator = Animator;\n        this.loop = this.loop.bind(this);\n        this.onResize = this.onResize.bind(this);\n\n        this.elementClass = elementClass;\n\n        /** @type {HTMLElement} */\n        this.element = null;\n\n        /** @type {Loop} */\n        this.foreground = null;\n\n        /** @type {Loop} */\n        this.background = null;\n\n        window.loop = this;\n        this.timeOfDay = {\n            h: 5,\n            m: 30\n        };\n        this.main(background);\n    }\n\n    /**\n     *\n     * Caution: this is the main animation loop, do activate more than one per rendering layer.\n     * Individual objects<AbstractMesh> can attach and detach to the manager to be rendered.\n     *\n     */\n    loop() {\n        this.loop.active = true;\n        requestAnimationFrame(this.loop);\n\n        this.panToward(this.target);\n        const omt = this.overwatchMoveTarget;\n        this.moveToward(\n            this.moveTarget || {\n                x: omt.x,\n                y: omt.y + 12,\n                z: omt.z\n            }\n        );\n\n        this.moveSpeed = 0.05;\n        this.panSpeed = 0.3;\n\n        this.objects.forEach((object) => object.animate());\n        //this.breathe();\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    /**\n     * initialize lights, camera, action\n     */\n    main(background) {\n        this.objects = [];\n\n        if (this.getThree()) {\n            const THREE = this.THREE;\n\n            const scene = (this.scene = new THREE.Scene());\n            scene.fog = new THREE.FogExp2(0x838888, 0.002);\n            if (this.attach()) {\n                lighting.addTo(scene);\n                const camera = (this.camera = new THREE.PerspectiveCamera(\n                    60,\n                    this.getAspect(),\n                    0.1,\n                    1000000\n                ));\n\n                this.target = new THREE.Vector3(0, 0, -60.5);\n                this._target = new THREE.Vector3(0, 0, -60.5);\n                this.moveTarget = camera.position;\n\n                this.resetCamera();\n                if (!this.loop.active) {\n                    this.loop();\n                }\n                if (background) {\n                    this.addStaticMeshes();\n                }\n            } else {\n                setTimeout(() => {\n                    this.main(background);\n                }, 2000);\n            }\n        }\n    }\n\n    /**\n     * @param addition\n     */\n    addMinutes(addition) {\n        let hours = this.timeOfDay.h,\n            minutes = this.timeOfDay.m;\n        minutes += addition;\n        while (minutes >= 60) {\n            minutes -= 60;\n            hours += 1;\n            hours %= 24;\n        }\n        this.setTimeOfDay(hours, minutes);\n    }\n\n    /**\n     * @param hours\n     * @param minutes\n     * gradual transition\n     */\n    setTargetTimeOfDay(hours, minutes) {\n        if (this.background) {\n            var sun = this.background.sun;\n        } else {\n            sun = this.sun;\n        }\n        if (sun) {\n            sun.setTargetTime(hours, minutes);\n        } else {\n            setTimeout(() => {\n                this.setTargetTimeOfDay(hours, minutes);\n            }, 500);\n        }\n    }\n\n    /**\n     * @param hours {Number} 0-24\n     * @param minutes {Number} 0-60\n     * instant transition\n     */\n    setTimeOfDay(hours, minutes) {\n        this.timeOfDay = {\n            h: hours,\n            m: minutes\n        };\n        if (this.background) {\n            var sky = this.background.sky,\n                sun = this.background.sun;\n        } else {\n            sky = this.sky;\n            sun = this.sun;\n        }\n        if (hours < 7.5) {\n            hours += 24;\n        }\n        const azimuth = (hours - 7.5) / 24 + minutes / 60 / 24;\n        sky.uniforms.azimuth = azimuth;\n\n        //if (azimuth > 0.5) {\n        //    sky.uniforms.inclination = 0.48;\n        //} else {\n        sky.uniforms.inclination = 0.31;\n        //}\n        sun.time.h = hours;\n        sun.time.m = minutes;\n        sun.derivePosition(sky);\n        const luminosity =\n            (-0.5 + Math.max(Math.abs(1.25 - azimuth), Math.abs(0.25 - azimuth))) * 2;\n        if (this.Animator) {\n            this.Animator.setLuminosity(0.1 + luminosity / 1.4);\n        }\n    }\n\n    /**\n     * used by the background layer\n     */\n    addStaticMeshes() {\n        new Field().join(this);\n        new Mound().join(this);\n        new Grass().join(this);\n        new Grass(this, true);\n        new BattersEye().join(this);\n        const sun = new Sun(),\n            sky = new Sky();\n        sun.derivePosition(sky);\n        sky.join(this);\n        sun.join(this);\n\n        this.sky = sky;\n        this.sun = sun;\n\n        new Wall(this, -34);\n        new Wall(this, -15);\n        new Wall(this, 15);\n        new Wall(this, 34);\n\n        const b1 = new Base(this, 'first');\n        const b2 = new Base(this, 'second');\n        const b3 = new Base(this, 'third');\n        const b4 = new Base(this, 'home');\n\n        new BaseDirt(this, b1);\n        new BaseDirt(this, b2);\n        new BaseDirt(this, b3);\n        new BaseDirt(this, b4);\n\n        new FoulLine(this, 'left');\n        new FoulLine(this, 'right');\n\n        new FoulPole(this, 'left');\n        new FoulPole(this, 'right');\n    }\n\n    /**\n     * experimental camera bobbing\n     */\n    breathe() {\n        const pos = this.camera.position;\n        const x = pos.x,\n            y = pos.y,\n            z = pos.z;\n        const rate = 0.0005 * this.bob || 1;\n        if (y > 0.6) {\n            this.bob = -1;\n        } else if (y < -0.6) {\n            this.bob = 1;\n        }\n        //pos.x += rate;\n        pos.y += rate;\n        pos.z += rate;\n    }\n    getThree() {\n        if (this.THREE === Loop.prototype.THREE && typeof window === 'object' && window.THREE) {\n            return (this.THREE = window.THREE);\n        }\n        return true;\n    }\n\n    /**\n     * attach to the DOM\n     * @returns {THREE.WebGLRenderer|Boolean}\n     */\n    attach() {\n        window.removeEventListener('resize', this.onResize, false);\n        window.addEventListener('resize', this.onResize, false);\n\n        this.element = document.getElementsByClassName(this.elementClass)[0];\n\n        const { element } = this;\n        if (element) {\n            element.innerHTML = '';\n            const THREE = this.THREE;\n            const renderer = new THREE.WebGLRenderer({ alpha: true });\n            this.setSize(renderer);\n            //renderer.setClearColor(0xffffff, 0);\n\n            element.appendChild(renderer.domElement);\n\n            this.renderer = renderer;\n            return renderer;\n        }\n        return false;\n    }\n\n    /**\n     * higher FOV on lower view widths\n     */\n    onResize() {\n        const element = this.element;\n        this.camera.aspect = this.getAspect();\n        this.camera.fov = Math.max(90 - 30 * (element.offsetWidth / 1200), 55);\n        this.camera.updateProjectionMatrix();\n        this.setSize(this.renderer);\n    }\n    setSize(renderer) {\n        const element = this.element;\n        const width = element.offsetWidth;\n        renderer.setSize(width, HEIGHT);\n    }\n    getAspect() {\n        const element = this.element;\n        return element.offsetWidth / HEIGHT;\n    }\n\n    /**\n     * incrementally pan toward the vector given\n     * @param vector\n     */\n    panToward(vector) {\n        const maxIncrement = this.panSpeed;\n        this.forAllLoops((loop) => {\n            const target = loop._target;\n            if (target) {\n                target.x =\n                    target.x +\n                    Math.max(Math.min((vector.x - target.x) / 100, maxIncrement), -maxIncrement);\n                target.y =\n                    target.y +\n                    Math.max(Math.min((vector.y - target.y) / 100, maxIncrement), -maxIncrement);\n                target.z =\n                    target.z +\n                    Math.max(Math.min((vector.z - target.z) / 100, maxIncrement), -maxIncrement);\n                loop.camera.lookAt(target);\n            }\n        });\n    }\n\n    /**\n     * incrementally move the camera to the vector\n     * @param vector\n     */\n    moveToward(vector) {\n        const maxIncrement = this.moveSpeed;\n        this.forAllLoops((loop) => {\n            const position = loop.camera && loop.camera.position;\n            if (position) {\n                position.x += Math.max(\n                    Math.min(vector.x - position.x, maxIncrement),\n                    -maxIncrement\n                );\n                position.y += Math.max(\n                    Math.min(vector.y - position.y, maxIncrement),\n                    -maxIncrement\n                );\n                position.z += Math.max(\n                    Math.min(vector.z - position.z, maxIncrement),\n                    -maxIncrement\n                );\n            }\n        });\n    }\n\n    /**\n     * setting a target will cause the camera to pan toward it using the pan method above\n     * @param vector\n     * @param panSpeed\n     */\n    setLookTarget(vector, panSpeed) {\n        this.forAllLoops((loop) => {\n            loop.panSpeed = panSpeed;\n            loop.panning = vector !== AHEAD();\n            loop.target = vector;\n        });\n    }\n\n    /**\n     * setting a target will cause the camera to move toward it using the incremental method above\n     * @param vector\n     * @param moveSpeed\n     */\n    setMoveTarget(vector, moveSpeed) {\n        this.forAllLoops((loop) => {\n            loop.moveSpeed = moveSpeed;\n            loop.moveTarget = vector;\n            loop.overwatchMoveTarget = null;\n        });\n    }\n    setOverwatchMoveTarget(vector, moveSpeed) {\n        this.forAllLoops((loop) => {\n            loop.moveSpeed = moveSpeed;\n            loop.overwatchMoveTarget = vector;\n            loop.moveTarget = null;\n        });\n    }\n    resetCamera() {\n        let moveSpeed = 0.5;\n        if (this.camera.position.z !== INITIAL_POSITION().z) {\n            moveSpeed = 2.5;\n        }\n        this.setLookTarget(AHEAD(), moveSpeed);\n        this.setMoveTarget(INITIAL_POSITION(), moveSpeed / 10);\n    }\n    moveCamera(x, y, z) {\n        if (typeof x === 'object') {\n            return this.moveCamera(x.x, x.y, x.z);\n        }\n        this.forAllLoops((loop) => {\n            loop.camera.position.x = x;\n            loop.camera.position.y = y;\n            loop.camera.position.z = z;\n        });\n    }\n\n    /**\n     * execute the function on all loops\n     * @param fn {Function}\n     */\n    forAllLoops(fn) {\n        if (this.background) {\n            fn(this.background);\n        }\n        if (this.foreground) {\n            fn(this.foreground);\n        }\n        fn(this);\n    }\n\n    test() {\n        const ball = new Ball();\n        window.Ball = Ball;\n        window.ball = ball;\n        ball.setType('4-seam');\n        //with (ball.mesh.rotation) {x=0,y=0,z=0}; ball.rotation = {x:0.00, y:0.00};\n        ball.animate = () => {\n            ball.rotate();\n        };\n        ball.join(this);\n        // Baseball.service.Animator.loop.test();\n    }\n\n    testTrajectory(data) {\n        const ball = new Ball();\n        window.Ball = Ball;\n        window.ball = ball;\n        ball.deriveTrajectory(\n            data || {\n                splay: -35,\n                travelDistance: 135,\n                flyAngle: -15,\n                x: 100,\n                y: 100\n            },\n            {\n                x: 0,\n                y: 0\n            }\n        );\n        ball.join(this);\n    }\n}\n\nvar HEIGHT = 700;\n\nLoop.prototype.THREE = {};\nLoop.prototype.constructors = {\n    Ball,\n    Mound,\n    Field\n};\n\nexport { Loop };\n","import { Mathinator } from '../Services/Mathinator';\nimport { Loop } from '../Render/Loop';\nimport { helper } from '../Utility/helper';\nimport { INITIAL_CAMERA_DISTANCE } from './../Render/LoopConstants';\n\nconst Animator = function() {\n    this.init();\n    throw new Error('No need to instantiate Animator');\n};\nAnimator.TweenMax = {};\nAnimator.prototype = {\n    identifier: 'Animator',\n    constructor: Animator,\n    /**\n     * console mode disables most animator functions\n     */\n    get console() {\n        return Animator.console;\n    },\n    set console(value) {\n        Animator.console = value;\n    },\n    TweenMax: {},\n    THREE: {},\n    /**\n     * anything other than webgl will use TweenMax for JS animations\n     */\n    renderingMode: 'webgl',\n    init() {\n        if (Animator.console) return;\n        if (!this.loop && this.renderingMode === 'webgl') {\n            this.beginRender();\n        }\n    },\n    /**\n     * @returns {Loop}\n     */\n    beginRender() {\n        this.background = new Loop('webgl-bg-container', true, Animator);\n        this.loop = new Loop('webgl-container', false, Animator);\n\n        this.loop.background = this.background;\n        this.background.foreground = this.loop;\n\n        return this.loop;\n    },\n    /**\n     * @param level {Number} 0 to 1\n     */\n    setLuminosity(level) {\n        if (this.console) return;\n        this.loop.lighting.setLuminosity(level);\n        this.background.lighting.setLuminosity(level);\n    },\n    loadTweenMax() {\n        if (this.console || typeof window !== 'object') {\n            Animator.TweenMax = {\n                set() {},\n                to() {},\n                from() {},\n                killAll() {}\n            };\n        } else {\n            Animator.TweenMax = window.TweenMax;\n        }\n        return Animator.TweenMax;\n    },\n    TIME_FROM_SET: 2300, //ms\n    TIME_FROM_WINDUP: 3600, //ms\n    HOLD_UP_ALLOWANCE: 0.25, // seconds\n    pitchTarget: null,\n    pitchBreak: null,\n    /**\n     * this is called with $scope context binding\n     * @param callback\n     */\n    updateFlightPath(callback) {\n        if (Animator.console) return;\n\n        if (Animator.renderingMode === 'webgl') {\n            return Animator.renderFlightPath(callback, this);\n        }\n        return Animator.tweenFlightPath(callback, this);\n    },\n    /**\n     * @param callback\n     * @param $scope\n     * animates the pitch's flight path\n     */\n    tweenFlightPath(callback, $scope) {\n        const TweenMax = Animator.loadTweenMax();\n        TweenMax.killAll();\n        const game = $scope.y,\n            top = 200 - game.pitchTarget.y,\n            left = game.pitchTarget.x,\n            breakTop = 200 - game.pitchInFlight.y,\n            breakLeft = game.pitchInFlight.x,\n            $baseballs = $('.baseball'),\n            flightSpeed = 1.3 - (0.6 * (game.pitchInFlight.velocity + 300)) / 400,\n            originTop = 50,\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\n        const pitch = (this.pitchTarget = $('.main-area .target .baseball.pitch')),\n            henka = (this.pitchBreak = $('.main-area .target .baseball.break')),\n            quarter = flightSpeed / 4;\n\n        const pitchTransition = Mathinator.pitchTransition(\n                top,\n                left,\n                originTop,\n                originLeft,\n                quarter,\n                12,\n                4\n            ),\n            targetTransition = Mathinator.pitchTransition(\n                top,\n                left,\n                originTop,\n                originLeft,\n                quarter,\n                10,\n                3\n            );\n\n        const transitions = [\n            pitchTransition(0, 0),\n            pitchTransition(10, 0),\n            pitchTransition(30, 1),\n            pitchTransition(50, 2),\n\n            targetTransition(100, 3),\n            pitchTransition(100, 3, breakTop, breakLeft)\n        ];\n\n        TweenMax.set([pitch, henka], transitions[0]);\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\n        TweenMax.to(pitch, quarter, transitions[4]);\n        TweenMax.to(henka, quarter, transitions[5]);\n\n        $scope.lastTimeout = setTimeout(() => {\n            $scope.allowInput = true;\n            if (typeof callback == 'function') {\n                callback();\n            }\n        }, flightSpeed * 1000);\n\n        if (!game.pitchInFlight.x) {\n            $baseballs.addClass('hide');\n        } else {\n            if (game.humanBatting() && Math.random() * 180 > game.batter.skill.offense.eye) {\n                $('.baseball.break').addClass('hide');\n            } else {\n                $('.baseball.break').removeClass('hide');\n            }\n            $('.baseball.pitch').removeClass('hide');\n        }\n\n        if (game.humanBatting() && !game.humanPitching()) {\n            $scope.holdUpTimeouts.push(\n                setTimeout(() => {\n                    $scope.holdUp();\n                }, (flightSpeed + Animator.HOLD_UP_ALLOWANCE) * 1000)\n            );\n        }\n    },\n    /**\n     * @param callback\n     * @param $scope Angular scope\n     * webgl version of tweenFlightPath\n     */\n    renderFlightPath(callback, $scope) {\n        const TweenMax = Animator.loadTweenMax();\n        TweenMax.killAll();\n        const game = $scope.y,\n            flightSpeed = Mathinator.getFlightTime(\n                game.pitchInFlight.velocity,\n                helper.pitchDefinitions[game.pitchInFlight.name][2]\n            );\n\n        game.expectedSwingTiming = Date.now() + flightSpeed * 1000;\n\n        if (!this.loop) {\n            this.beginRender();\n        }\n        const ball = new this.loop.constructors.Ball();\n        Animator._ball = ball;\n        ball.derivePitchingTrajectory(game);\n        ball.trajectory = ball.breakingTrajectory;\n        ball.join(this.loop);\n\n        $scope.lastTimeout = setTimeout(() => {\n            $scope.allowInput = true;\n            if (typeof callback === 'function') {\n                callback();\n            }\n        }, flightSpeed * 1000);\n\n        const $baseballs = $('.baseball');\n        $baseballs.addClass('hide');\n\n        if (game.humanBatting()) {\n            $scope.holdUpTimeouts.push(\n                setTimeout(() => {\n                    $scope.holdUp();\n                }, (flightSpeed + Animator.HOLD_UP_ALLOWANCE) * 1000)\n            );\n        }\n    },\n    /**\n     * @param game\n     * @returns {*}\n     * This only animates the flight arc of the ball in play.\n     */\n    animateFieldingTrajectory(game) {\n        if (Animator.console) return game.swingResult;\n\n        if (this.renderingMode === 'webgl') {\n            setTimeout(() => {\n                Animator.tweenFieldingTrajectory(game, true);\n            }, 50);\n            return Animator.renderFieldingTrajectory(game);\n        }\n        return Animator.tweenFieldingTrajectory(game);\n    },\n    /**\n     * @param game\n     * @param splayOnly\n     * @returns {Game.swingResult|*|swingResult|Field.game.swingResult}\n     * JS/CSS animation\n     */\n    tweenFieldingTrajectory(game, splayOnly) {\n        const TweenMax = Animator.loadTweenMax();\n        let ball = $('.splay-indicator-ball');\n        TweenMax.killAll();\n        const result = game.swingResult;\n\n        const linearApproximateDragScalar = {\n            distance: 1,\n            apexHeight: 0.57,\n            airTime: 0.96\n        };\n\n        let angle = result.flyAngle;\n        const distance = Math.abs(result.travelDistance);\n        const scalar = result.travelDistance < 0 ? -1 : 1;\n\n        Mathinator.memory.bounding = angle < 0;\n        angle = 1 + Math.abs(angle);\n        if (angle > 90) angle = 180 - angle;\n\n        const velocity =\n            linearApproximateDragScalar.distance *\n            Math.sqrt((9.81 * distance) / Math.sin((2 * Math.PI * angle) / 180));\n        const velocityVerticalComponent = Math.sin(Mathinator.RADIAN * angle) * velocity;\n        const apexHeight =\n            ((velocityVerticalComponent * velocityVerticalComponent) / (2 * 9.81)) *\n            linearApproximateDragScalar.apexHeight;\n        const airTime =\n            1.5 * Math.sqrt((2 * apexHeight) / 9.81) * linearApproximateDragScalar.airTime; // 2x freefall equation\n\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\n        const quarter = airTime / 4;\n        const mathinator = new Mathinator();\n        let transitions = [\n            mathinator.transitionalTrajectory(\n                0,\n                quarter,\n                0,\n                apexHeight,\n                scalar * distance,\n                result.splay\n            ),\n            mathinator.transitionalTrajectory(25, quarter, 0),\n            mathinator.transitionalTrajectory(50, quarter, 1),\n            mathinator.transitionalTrajectory(75, quarter, 2),\n            mathinator.transitionalTrajectory(100, quarter, 3)\n        ];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, quarter, transitions[1]);\n        TweenMax.to(ball, quarter, transitions[2]);\n        TweenMax.to(ball, quarter, transitions[3]);\n        TweenMax.to(ball, quarter, transitions[4]);\n\n        if (!splayOnly) {\n            ball = $('.indicator.baseball.break')\n                .removeClass('hide')\n                .show();\n            const time = quarter / 2;\n            transitions = [\n                mathinator.transitionalCatcherPerspectiveTrajectory(\n                    0,\n                    time,\n                    0,\n                    apexHeight,\n                    scalar * distance,\n                    result.splay,\n                    game.pitchInFlight\n                ),\n                mathinator.transitionalCatcherPerspectiveTrajectory(12.5, time * 0.75, 0),\n                mathinator.transitionalCatcherPerspectiveTrajectory(25, time * 0.8, 1),\n                mathinator.transitionalCatcherPerspectiveTrajectory(37.5, time * 0.85, 2),\n                mathinator.transitionalCatcherPerspectiveTrajectory(50, time * 0.9, 3),\n                mathinator.transitionalCatcherPerspectiveTrajectory(62.5, time * 0.95, 4),\n                mathinator.transitionalCatcherPerspectiveTrajectory(75, time, 5),\n                mathinator.transitionalCatcherPerspectiveTrajectory(87.5, time, 6),\n                mathinator.transitionalCatcherPerspectiveTrajectory(100, time, 7)\n            ];\n            TweenMax.set(ball, transitions[0]);\n            TweenMax.to(ball, time, transitions[1]);\n            TweenMax.to(ball, time, transitions[2]);\n            TweenMax.to(ball, time, transitions[3]);\n            TweenMax.to(ball, time, transitions[4]);\n            TweenMax.to(ball, time, transitions[5]);\n            TweenMax.to(ball, time, transitions[6]);\n            TweenMax.to(ball, time, transitions[7]);\n            TweenMax.to(ball, time, transitions[8]);\n\n            setTimeout(() => {\n                // hack\n                $('.indicator.baseball.break')\n                    .removeClass('hide')\n                    .show();\n            }, 50);\n        }\n\n        return game.swingResult;\n    },\n    /**\n     * @param game\n     * @returns {Game.swingResult|*|swingResult|Field.game.swingResult}\n     * WebGL version of tweenFieldingTrajectory\n     */\n    renderFieldingTrajectory(game) {\n        if (!this.loop) {\n            this.beginRender();\n        }\n        const result = game.swingResult;\n\n        const ball = Animator._ball || new this.loop.constructors.Ball();\n        ball.deriveTrajectory(result, game.pitchInFlight);\n        ball.join(this.loop);\n\n        if (result.thrownOut || result.caught || result.bases) {\n            if (\n                (Math.random() < 0.15 && ball.airTime > 1.5) ||\n                (Math.random() < 0.5 && ball.airTime > 2.5)\n            ) {\n                var scale = 1;\n                if (result.splay > 0) {\n                    scale = -1;\n                }\n                this.loop.setLookTarget(ball.mesh.position, 0.3);\n                this.loop.setOverwatchMoveTarget(ball.mesh.position, 0.32);\n            } else {\n                this.loop.setLookTarget(ball.mesh.position, 0.5);\n                this.loop.setMoveTarget({ x: 0, y: 6, z: INITIAL_CAMERA_DISTANCE }, 0.05);\n            }\n        } else if (Math.abs(result.splay) < 60) {\n            this.loop.setLookTarget(ball.mesh.position, 0.5);\n            this.loop.setMoveTarget({ x: 0, y: 6, z: INITIAL_CAMERA_DISTANCE }, 0.05);\n        }\n\n        return game.swingResult;\n    }\n};\n\nfor (const fn in Animator.prototype) {\n    if (Animator.prototype.hasOwnProperty(fn)) {\n        Animator[fn] = Animator.prototype[fn];\n    }\n}\n\nexport { Animator };\n","import { Player } from '../Model/Player';\nimport { Distribution } from '../Services/Distribution';\nimport { Mathinator } from '../Services/Mathinator';\nimport { Animator } from '../Services/Animator';\n\n/**\n * The baseball field tracks the ball's movement, fielders, and what runners are on\n * @param game\n * @constructor\n */\nconst Field = function(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor: Field,\n    init(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    /**\n     * @returns {boolean}\n     */\n    hasRunnersOn() {\n        return (\n            this.first instanceof Player ||\n            this.second instanceof Player ||\n            this.third instanceof Player\n        );\n    },\n    /**\n     * @param swing\n     * @returns {object}\n     */\n    determineSwingContactResult(swing) {\n        if (this.first) this.first.fatigue += 4;\n        if (this.second) this.second.fatigue += 4;\n        if (this.third) this.third.fatigue += 4;\n\n        const x = swing.x,\n            y = swing.y;\n        const game = this.game;\n        const eye = game.batter.skill.offense.eye;\n        /**\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\n         * increase the left/right effect.\n         */\n        const angles = Mathinator.getSplayAndFlyAngle(\n            x,\n            y,\n            swing.angle,\n            eye,\n            swing.timing,\n            game.batter.bats === 'left'\n        );\n        const splayAngle = angles.splay;\n\n        const flyAngle = angles.fly;\n        const power = this.game.batter.skill.offense.power + (this.game.batter.eye.bonus || 0) / 5;\n        let landingDistance = Distribution.landingDistance(power, flyAngle, x, y);\n        if (flyAngle < 0 && landingDistance > 95) {\n            landingDistance = (landingDistance - 95) / 4 + 95;\n        }\n\n        if (Math.abs(splayAngle) > 50) swing.foul = true;\n        swing.fielder = this.findFielder(splayAngle, landingDistance, power, flyAngle);\n\n        // previous code was here to bracket the distance based on fielder, but\n        // that should have been taken into account by #findFielder()\n\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        /**\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\n         * @type {number}\n         */\n        swing.splay = splayAngle;\n        swing.sacrificeAdvances = [];\n\n        if (swing.fielder) {\n            const fielder =\n                game.half === 'top'\n                    ? game.teams.home.positions[swing.fielder]\n                    : game.teams.away.positions[swing.fielder];\n            const isOutfielder = fielder.position in { left: true, center: true, right: true };\n            fielder.fatigue += 4;\n            swing.error = false;\n            let fieldingEase = fielder.skill.defense.fielding / 100;\n            const throwingEase = fielder.skill.defense.throwing / 100;\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [\n                splayAngle + 90,\n                landingDistance\n            ]);\n            const speedComponent = ((1 + Math.sqrt(fielder.skill.defense.speed / 100)) / 2) * 100;\n\n            /**\n             * This is an important calculation, since it decides\n             * whether a ball was caught in the air, or\n             * how quickly a fielder reaches a landed ball.\n             *\n             * Higher is better for the defense.\n             * @type {number}\n             */\n            const interceptRating =\n                speedComponent * 1.8 + flyAngle * 2.4 - swing.fielderTravel * 1.35 - 25;\n\n            if (interceptRating > 0 && flyAngle > 10) {\n                //caught cleanly?\n                if (Distribution.error(fielder)) {\n                    //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    fielder.stats.fielding.E++;\n                    swing.caught = false;\n                } else {\n                    fielder.stats.fielding.PO++;\n                    swing.caught = true;\n                    if (game.umpire.count.outs < 2 && isOutfielder) {\n                        const sacrificeThrowInTime = Mathinator.fielderReturnDelay(\n                            swing.travelDistance,\n                            throwingEase,\n                            fieldingEase,\n                            100\n                        );\n                        // todo ran into outfield assist\n                        if (\n                            this.first &&\n                            sacrificeThrowInTime > this.first.getBaseRunningTime() + 4.5\n                        ) {\n                            swing.sacrificeAdvances.push('first');\n                        }\n                        if (\n                            this.second &&\n                            sacrificeThrowInTime > this.second.getBaseRunningTime()\n                        ) {\n                            swing.sacrificeAdvances.push('second');\n                        }\n                        if (\n                            this.third &&\n                            sacrificeThrowInTime > this.third.getBaseRunningTime() - 0.5\n                        ) {\n                            swing.sacrificeAdvances.push('third');\n                        }\n                    }\n                }\n            } else {\n                swing.caught = false;\n            }\n\n            if (!swing.caught) {\n                swing.bases = 0;\n                swing.thrownOut = false; // default value\n                let fieldingReturnDelay = Mathinator.fielderReturnDelay(\n                    swing.travelDistance,\n                    throwingEase,\n                    fieldingEase,\n                    interceptRating\n                );\n                swing.fieldingDelay = fieldingReturnDelay;\n                swing.outfielder = { left: 1, center: 1, right: 1 }[swing.fielder] === 1;\n                const speed = game.batter.skill.offense.speed;\n                let baseRunningTime = Mathinator.baseRunningTime(speed);\n\n                if (swing.outfielder) {\n                    swing.bases = 1;\n                    baseRunningTime *= 1.05;\n                    fieldingReturnDelay -= baseRunningTime;\n\n                    while (\n                        ((fieldingReturnDelay > baseRunningTime &&\n                            Math.random() < 0.25 + speed / 200) ||\n                            Math.random() < 0.04 + speed / 650) &&\n                        swing.bases < 3\n                    ) {\n                        baseRunningTime *= 0.95;\n                        swing.bases++;\n                        fieldingReturnDelay -= baseRunningTime;\n                    }\n                } else {\n                    const first = this.first,\n                        second = this.second,\n                        third = this.third;\n                    swing.fieldersChoice = null;\n                    swing.bases = fieldingReturnDelay >= baseRunningTime ? 1 : 0;\n                    if (first && fieldingReturnDelay < first.getBaseRunningTime())\n                        swing.fieldersChoice = 'first';\n                    if (first && second && fieldingReturnDelay < second.getBaseRunningTime() + 0.6)\n                        swing.fieldersChoice = 'second';\n                    if (third && fieldingReturnDelay < third.getBaseRunningTime())\n                        swing.fieldersChoice = 'third';\n                    // double play\n                    let outs = game.umpire.count.outs;\n                    if (swing.fieldersChoice) {\n                        outs++;\n                        swing.bases = 1;\n                        const fielders = fielder.team.positions;\n                        let force = this.forcePlaySituation();\n                        if (force) {\n                            const additionalOuts = [];\n                            let throwingDelay = fieldingReturnDelay;\n                            if (\n                                third &&\n                                force === 'third' &&\n                                Mathinator.infieldThrowDelay(fielders.catcher) + throwingDelay <\n                                    second.getBaseRunningTime() &&\n                                outs < 3\n                            ) {\n                                throwingDelay += Mathinator.infieldThrowDelay(fielders.catcher);\n                                fielders.catcher.fatigue += 4;\n                                additionalOuts.push('second');\n                                outs++;\n                                force = 'second';\n                            }\n                            if (\n                                second &&\n                                force === 'second' &&\n                                Mathinator.infieldThrowDelay(fielders.third) + throwingDelay <\n                                    first.getBaseRunningTime() &&\n                                outs < 3\n                            ) {\n                                throwingDelay += Mathinator.infieldThrowDelay(fielders.third);\n                                fielders.third.fatigue += 4;\n                                additionalOuts.push('first');\n                                outs++;\n                                force = 'first';\n                            }\n                            if (\n                                first &&\n                                force === 'first' &&\n                                Mathinator.infieldThrowDelay(fielders.second) + throwingDelay <\n                                    game.batter.getBaseRunningTime() &&\n                                outs < 3\n                            ) {\n                                throwingDelay += Mathinator.infieldThrowDelay(fielders.second);\n                                fielders.second.fatigue += 4;\n                                additionalOuts.push('batter');\n                                swing.bases = 0;\n                                // todo (or shortstop)\n                                outs++;\n                            }\n                            if (outs - game.umpire.count.outs === 2) {\n                                swing.doublePlay = true;\n                            }\n                            if (additionalOuts.length) {\n                                swing.additionalOuts = additionalOuts;\n                                swing.firstOut = swing.fieldersChoice;\n                                if (additionalOuts.includes('batter')) {\n                                    delete swing.fieldersChoice;\n                                }\n                            }\n                        }\n                        //console.log('DP?', !!this.forcePlaySituation(), 'throwingDelay', throwingDelay,\n                        //    'fielding delay', fieldingReturnDelay, 'runner', game.batter.getBaseRunningTime());\n                        //if (typeof additionalOuts !== 'undefined' && additionalOuts.length) {\n                        //    console.log('omg dp', additionalOuts);\n                        //}\n                    } else {\n                        delete swing.additionalOuts;\n                        delete swing.firstOut;\n                        delete swing.doublePlay;\n                        delete swing.fieldersChoice;\n                    }\n                }\n                swing.thrownOut = swing.bases === 0;\n                if (swing.thrownOut) {\n                    fielder.stats.fielding.PO++; // todo A to PO\n                    swing.thrownOut = true;\n                    swing.error = false;\n                }\n            }\n        } else {\n            if (Math.abs(splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        this.game.swingResult = swing;\n        if (!Animator.console) {\n            Animator._ball.hasIndicator = true;\n            Animator.animateFieldingTrajectory(this.game);\n        }\n    },\n    forcePlaySituation() {\n        const first = this.first,\n            second = this.second,\n            third = this.third;\n        return (\n            (first && second && third && 'third') ||\n            (first && second && 'second') ||\n            (first && 'first')\n        );\n    },\n    /**\n     * @returns {Player}\n     * the best steal candidate.\n     */\n    getLeadRunner() {\n        const first = this.first,\n            second = this.second,\n            third = this.third;\n        if (third && first && !second) return first;\n        return third || second || first;\n    },\n    //printRunnerNames : function() {\n    //    return [this.first ? this.first.getName() : '', this.second ? this.second.getName() : '', this.third ? this.third.getname() : ''];\n    //},\n    /**\n     * @param splayAngle {Number} -45 to 45.\n     * @param landingDistance {Number} in feet, up to 310 or so\n     * @param power {Number} 0-100\n     * @param flyAngle {Number} roughly -15 to 90\n     * @returns {string|boolean}\n     */\n    findFielder(splayAngle, landingDistance, power, flyAngle) {\n        const angle = splayAngle; // 0 is up the middle, clockwise increasing\n\n        let fielder;\n\n        if (Math.abs(angle) > 50) return false; // foul\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 45 && angle < 5) {\n            return 'pitcher';\n        }\n\n        let infield = landingDistance < 145 - (Math.abs(angle) / 90) * 50;\n        if (flyAngle < 7) {\n            // 7 degrees straight would fly over the infielder, but add some for arc\n            let horizontalVelocity =\n                Math.cos((flyAngle / 180) * Math.PI) * (85 + (power / 100) * 10); // mph toward infielder\n            if (flyAngle < 0) horizontalVelocity *= 0.5; // velocity loss on bounce\n            const fielderLateralReachDegrees = 1 + (22.5 * (100 - horizontalVelocity)) / 100; // up to 90/4 = 22.5\n            if (angle < -20) {\n                fielder = 'third';\n            } else if (angle < 5) {\n                fielder = 'short';\n            } else if (angle < 30) {\n                fielder = 'second';\n            } else {\n                // first has reduced arc to receive the throw\n                fielder = 'first';\n            }\n            const fielderArcPosition = this.positions[fielder][0] - 90;\n            // a good infielder can field a hard hit grounder even with a high terminal distance\n            infield = infield || Math.abs(angle - fielderArcPosition) < fielderLateralReachDegrees;\n        }\n\n        if (infield) {\n            if (angle < -20) {\n                fielder = 'third';\n            } else if (angle < 5) {\n                fielder = 'short';\n            } else if (angle < 30) {\n                fielder = 'second';\n            } else {\n                // first has reduced arc to receive the throw\n                fielder = 'first';\n            }\n        } else if (landingDistance < 310) {\n            // past the infield or fly ball to outfielder\n            if (angle < -15) {\n                fielder = 'left';\n            } else if (angle < 16) {\n                fielder = 'center';\n            } else {\n                fielder = 'right';\n            }\n        } else {\n            fielder = false;\n        }\n        return fielder;\n    },\n    /**\n     * approximate fielder positions (polar degrees where 90 is up the middle, distance from origin (home plate))\n     */\n    positions: {\n        pitcher: [90, 66],\n        catcher: [0, 0],\n        first: [90 + 45 - 7, 98],\n        second: [90 + 12.5, 130],\n        short: [90 - 12.5, 130],\n        third: [90 - 45 + 7, 98],\n        left: [45 + 14, 280],\n        center: [90, 280],\n        right: [135 - 14, 280]\n    },\n    getPolarDistance(a, b) {\n        return Mathinator.getPolarDistance(a, b);\n    }\n};\n\nexport { Field };\n","import { Iterator } from '../Services/Iterator';\n\nconst Manager = function(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor: Manager,\n    init(team) {\n        this.team = team;\n    },\n    makeLineup() {\n        let jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        if (!this.team.positions.pitcher.number) {\n            this.team.positions.pitcher.number = jerseyNumber++;\n        }\n        this.team.positions.catcher = this.selectForSkill(\n            this.team.bench,\n            ['defense', 'catching'],\n            'right'\n        );\n        this.team.positions.catcher.position = 'catcher';\n        if (!this.team.positions.catcher.number) {\n            this.team.positions.catcher.number = jerseyNumber++;\n        }\n        Iterator.each(this.team.bench, (key, player) => {\n            if (!player.number) {\n                jerseyNumber += 1 + ((Math.random() * 5) | 0);\n                player.number = jerseyNumber;\n            }\n        });\n        this.team.positions.short = this.selectForSkill(\n            this.team.bench,\n            ['defense', 'fielding'],\n            'right'\n        );\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(\n            this.team.bench,\n            ['defense', 'fielding'],\n            'right'\n        );\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(\n            this.team.bench,\n            ['defense', 'fielding'],\n            'right'\n        );\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(\n            this.team.bench,\n            ['defense', 'fielding'],\n            'left'\n        );\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill(pool, skillset, requiredThrowingHandedness) {\n        if (this.team.bench.length || pool === this.team.positions) {\n            let selection = this.team.bench[0];\n            let rating = 0;\n            let index = 0;\n            Iterator.each(pool, (key, player) => {\n                const skills = skillset.slice();\n                let cursor = player.skill;\n                let property = skills.shift();\n                while (property) {\n                    cursor = cursor[property];\n                    property = skills.shift();\n                }\n                if (\n                    !(player.order + 1) &&\n                    cursor >= rating &&\n                    (!requiredThrowingHandedness || player.throws === requiredThrowingHandedness)\n                ) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            if (pool === this.team.bench) {\n                delete this.team.bench[index];\n                this.team.bench = this.team.bench.filter(\n                    (player) => player instanceof selection.constructor\n                );\n            }\n            return selection;\n        }\n        return 'no players available';\n    },\n    /**\n     * used by the AI to substitute a fatigued pitcher\n     * @param {Number} fatigueAllowed\n     * only execute if the pitcher's fatigue is greater than this number\n     */\n    checkPitcherFatigue(fatigueAllowed = 120) {\n        const team = this.team;\n        const pitcher = team.positions.pitcher;\n\n        const sub = this.selectForSkill(team.bench, ['pitching']);\n        if (!(sub && sub.substitute)) {\n            return;\n        }\n\n        const replace = pitcher.fatigue - pitcher.skill.pitching;\n        const remain = fatigueAllowed - sub.skill.pitching;\n\n        if (replace > remain) {\n            sub.substitute(pitcher);\n        } else {\n            team.bench.push(sub);\n        }\n    }\n};\n\nexport { Manager };\n","import { Player } from './Player';\nimport { Manager } from './Manager';\nimport { Game } from './Game';\n\nimport { data, text } from '../Utility/_utils';\n\nimport k from './TeamConstants';\nimport { fielder_short_name_t } from '../Api/fielderShortName';\n\nclass Team {\n    public stealAttempt: string = k.RUNNERS_DISCRETION;\n    public lineup = [];\n    public game: Game = (null as unknown) as Game;\n    public positions: Record<fielder_short_name_t, Player>;\n    public manager: Manager = null;\n    public bench: Player[] = [];\n    public bullpen = [];\n    public nowBatting = 0;\n    public substituted = [];\n    public sub: { toString(): string; toValue(): boolean };\n    public expanded: Player = (null as unknown) as Player;\n\n    public name: string = '';\n    public nameJ: string = '';\n\n    public noSubstituteSelected = {\n        toString() {\n            return '';\n        },\n        toValue() {\n            return false;\n        }\n    };\n\n    constructor(game: Game | 'no init', heroRate: number) {\n        this.sub = this.noSubstituteSelected;\n        heroRate = heroRate || 0.1;\n        this.substituted = [];\n        this.pickName();\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher: (null as unknown) as Player,\n            catcher: (null as unknown) as Player,\n            first: (null as unknown) as Player,\n            second: (null as unknown) as Player,\n            short: (null as unknown) as Player,\n            third: (null as unknown) as Player,\n            left: (null as unknown) as Player,\n            center: (null as unknown) as Player,\n            right: (null as unknown) as Player\n        };\n        this.manager = new Manager(this);\n        if (game !== 'no init') {\n            this.game = game;\n            for (let j = 0; j < 20; j++) {\n                this.bench.push(new Player(this, Math.random() < heroRate));\n            }\n            if (this.bench.length === 20) {\n                this.manager.makeLineup();\n            }\n        }\n    }\n\n    pickName() {\n        const teamNameIndex = Math.floor(Math.random() * data.teamNames.length);\n        this.name = data.teamNames[teamNameIndex];\n        this.nameJ = data.teamNamesJ[teamNameIndex];\n    }\n    getName() {\n        return text.mode === 'n' ? this.nameJ : this.name;\n    }\n}\n\nexport { Team };\n","import { Log } from '../Utility/_utils';\nimport { Player } from '../Model/Player';\nimport { Distribution } from '../Services/Distribution';\n\nconst Umpire = function(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor: Umpire,\n    init(game) {\n        this.game = game;\n        this.playBall();\n        this.count = {\n            strikes: 0,\n            balls: 0,\n            outs: 0\n        };\n    },\n    /**\n     * starts the game by announcing it and signalling the first batter up\n     */\n    playBall() {\n        const game = this.game;\n        game.half = 'top';\n        game.inning = 1;\n        game.batter = game.teams.away.lineup[0];\n        game.batterRunner = game.teams.away.lineup[0];\n        game.deck = game.teams.away.lineup[1];\n        game.hole = game.teams.away.lineup[2];\n        game.pitcher = game.teams.home.positions.pitcher;\n        const n = `一回のオモテ、${game.teams.away.nameJ}の攻撃対${game.teams.home.nameJ}、ピッチャーは${game.teams.home.positions.pitcher.nameJ}。`,\n            e = `Top 1, ${game.teams.away.name} offense vs. ${game.teams.home.positions.pitcher.name} starting for ${game.teams.home.name}`;\n        game.log.note(e, n);\n        game.batter.ready = true;\n        game.log.noteBatter(game.batter);\n    },\n    /**\n     * makes the call based on the last pitch and swing (or no swing)\n     * @todo add margin of error to Umpire to simulate real umpiring, haha\n     */\n    makeCall() {\n        this.says = '';\n        const game = this.game;\n        const result = game.swingResult;\n        const pitcher = game.pitcher;\n        const batter = game.batter;\n        const field = game.field;\n\n        if (game.swingResult.fielder) {\n            var fielder =\n                game.teams[game.half === 'top' ? 'home' : 'away'].positions[result.fielder];\n        } else {\n            fielder = null;\n        }\n\n        game.batterRunner = game.batter;\n\n        if (!isNaN(result.stoleABase)) {\n            var thief = game.batter.team.lineup[result.stoleABase];\n            thief.atBats.push(Log.prototype.STOLEN_BASE);\n            switch (thief) {\n                case field.first:\n                    field.second = thief;\n                    field.first = null;\n                    break;\n                case field.second:\n                    field.third = thief;\n                    field.second = null;\n                    break;\n                case field.third:\n                    field.third = null;\n                    thief.stats.batting.r++;\n                    thief.atBats.push(Log.prototype.RUN);\n                    this.runScores();\n            }\n            thief.stats.batting.sb++;\n        }\n        if (!isNaN(result.caughtStealing)) {\n            game.teams[game.half === 'top' ? 'home' : 'away'].positions['catcher'].stats.fielding\n                .PO++;\n            this.count.outs++;\n            thief = game.batter.team.lineup[result.caughtStealing];\n            thief.stats.batting.cs++;\n            thief.atBats.push(Log.prototype.CAUGHT_STEALING);\n            switch (thief) {\n                case field.first:\n                    field.first = null;\n                    break;\n                case field.second:\n                    field.second = null;\n                    break;\n                case field.third:\n                    field.third = null;\n            }\n            if (this.count.outs >= 3) {\n                this.says = 'Three outs, change.';\n                this.count.outs = this.count.balls = this.count.strikes = 0;\n                pitcher.stats.pitching.IP[0]++;\n                pitcher.stats.pitching.IP[1] = 0;\n                return this.changeSides();\n            }\n        }\n\n        pitcher.stats.pitching.pitches++;\n\n        const inStrikezone = Distribution.inStrikezone(game.pitchInFlight.x, game.pitchInFlight.y);\n\n        batter.stats.batting.ps++;\n\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            batter.stats.batting.swings++;\n            if (inStrikezone) {\n                batter.stats.batting.zSwings++;\n            } else {\n                batter.stats.batting.oSwings++;\n            }\n            pitcher.stats.pitching.strikes++;\n            if (result.contact) {\n                game.passMinutes(1);\n                if (result.caught) {\n                    batter.stats.batting.pa++;\n                    pitcher.stats.pitching.IP[1]++;\n                    if (result.sacrificeAdvances.length && this.count.outs < 2) {\n                        batter.stats.batting.sac++;\n                        game.batter.atBats.push(Log.prototype.SACRIFICE);\n                        this.advanceRunners(false, null, result.sacrificeAdvances);\n                    } else {\n                        batter.stats.batting.ab++;\n                        if (result.flyAngle < 15) {\n                            game.batter.atBats.push(Log.prototype.LINEOUT);\n                        } else {\n                            game.batter.atBats.push(Log.prototype.FLYOUT);\n                        }\n                    }\n                    this.count.outs++;\n                    fielder.stats.fielding.PO++;\n                    this.newBatter();\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.firstOut) {\n                            game.field[result.firstOut] = null;\n                            result.additionalOuts.map((runner) => {\n                                if (runner !== 'batter') {\n                                    game.field[runner] = null;\n                                }\n                            });\n                            this.count.outs += result.additionalOuts.length;\n                        }\n                        if (result.fieldersChoice && this.count.outs < 2) {\n                            result.bases = 0;\n                            this.count.outs++;\n                            fielder.stats.fielding.PO++;\n                            pitcher.stats.pitching.IP[1]++;\n                            game.batter.atBats.push(Log.prototype.FIELDERS_CHOICE);\n                            this.advanceRunners(false, result.fieldersChoice);\n                            result.doublePlay && game.batter.atBats.push(Log.prototype.GIDP);\n                            this.reachBase();\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        } else if (result.fieldersChoice) {\n                            result.bases = 0;\n                            result.thrownOut = true;\n                        }\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            fielder.stats.fielding.PO++;\n                            pitcher.stats.pitching.IP[1]++;\n                            game.batter.atBats.push(Log.prototype.GROUNDOUT);\n                            result.doublePlay && game.batter.atBats.push(Log.prototype.GIDP);\n                            if (this.count.outs < 3) {\n                                this.advanceRunners(false);\n                            }\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        }\n                        if (result.hitByPitch) {\n                            batter.stats.batting.ab--;\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                game.tally[game.half === 'top' ? 'away' : 'home'][\n                                    Log.prototype.SINGLE\n                                ]++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    game.tally[game.half === 'top' ? 'home' : 'away'].E++;\n                                    fielder.stats.fielding.E++;\n                                }\n                            }\n                            let bases = result.bases;\n                            switch (bases) {\n                                case 0:\n                                    game.batter.atBats.push(Log.prototype.GROUNDOUT);\n                                    break;\n                                case 1:\n                                    if (result.error) {\n                                        game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\n                                        break;\n                                    }\n                                    game.batter.atBats.push(Log.prototype.SINGLE);\n                                    batter.stats.batting.h++;\n                                    break;\n                                case 2:\n                                    if (result.error) {\n                                        game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\n                                        break;\n                                    }\n                                    game.batter.atBats.push(Log.prototype.DOUBLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3:\n                                    if (result.error) {\n                                        game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\n                                        break;\n                                    }\n                                    game.batter.atBats.push(Log.prototype.TRIPLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4:\n                                    if (result.error) {\n                                        game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\n                                        break;\n                                    }\n                                    game.batter.atBats.push(Log.prototype.HOMERUN);\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            if (bases > 0 && bases < 4 && !result.error) {\n                                if (['left', 'right', 'center'].includes(result.fielder)) {\n                                    batter.recordInfieldHit();\n                                }\n                            }\n                            if (bases >= 1) {\n                                this.advanceRunners();\n                                this.reachBase();\n                                bases -= 1;\n                            }\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                this.count.strikes++;\n            }\n        }\n\n        this.says = `${this.count.balls} and ${this.count.strikes}`;\n\n        result.outs = this.count.outs;\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            batter.atBats.push(Log.prototype.STRIKEOUT);\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            batter.atBats.push(Log.prototype.WALK);\n            this.advanceRunners(true)\n                .reachBase()\n                .newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    /**\n     * awards first base to the batter\n     */\n    reachBase() {\n        const game = this.game;\n        game.field.first = game.batter;\n        game.field.first.fatigue += 2;\n        return this;\n    },\n    /**\n     * advance the runners (ball in play or walk)\n     *\n     * @param isWalk {boolean}\n     * @param fieldersChoice \\results in an out to someone other than the batter\n     * @param sacrificeAdvances \\advances on a sacrifice\n     */\n    advanceRunners(isWalk, fieldersChoice, sacrificeAdvances) {\n        isWalk = Boolean(isWalk);\n        const game = this.game;\n        let first = game.field.first;\n        let second = game.field.second;\n        let third = game.field.third;\n        const swing = game.swingResult;\n\n        if (isWalk) {\n            if (first) {\n                if (second) {\n                    if (third) {\n                        //bases loaded\n                        game.batter.recordRBI();\n                        game.batter.stats.batting.rbi++;\n                        third.atBats.push(Log.prototype.RUN);\n                        third.stats.batting.r++;\n                        game.pitcher.stats.pitching.ER++;\n                        this.runScores();\n                        game.field.third = second;\n                        game.field.second = first;\n                        first = null;\n                    } else {\n                        // 1st and second\n                        game.field.third = second;\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                } else {\n                    if (third) {\n                        // first and third\n                        game.field.second = first;\n                        game.field.first = null;\n                    } else {\n                        // first only\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n            if (fieldersChoice) {\n                game.field[fieldersChoice] = null;\n                first = game.field.first;\n                second = game.field.second;\n                third = game.field.third;\n            }\n            let canAdvance = (position) => true;\n            if (sacrificeAdvances) {\n                canAdvance = (position) => {\n                    switch (position) {\n                        case 'first':\n                            return sacrificeAdvances.includes('first') && !game.field.second;\n                        case 'second':\n                            return sacrificeAdvances.includes('second') && !game.field.third;\n                        case 'third':\n                            return sacrificeAdvances.includes('third');\n                    }\n                };\n            }\n            let arm = 0;\n            if (swing.fielder) {\n                const fielder = game.pitcher.team.positions[swing.fielder];\n                if (['left', 'center', 'right'].includes(fielder.position)) {\n                    arm = fielder.skill.defense.throwing;\n                } else {\n                    arm = fielder.skill.defense.throwing + 120; // very rare extra bases on infield BIP\n                }\n            }\n            if (third && canAdvance('third')) {\n                // run scored\n                this.runScores();\n                if (game.batter != third) {\n                    game.batter.recordRBI();\n                    third.atBats.push(Log.prototype.RUN);\n                }\n                game.batter.stats.batting.rbi++;\n                third.stats.batting.r++;\n                game.pitcher.stats.pitching.ER++;\n                game.field.third = null;\n            }\n            if (second && canAdvance('second')) {\n                game.field.third = second;\n                game.field.second = null;\n                if (\n                    second != game.batter &&\n                    !sacrificeAdvances &&\n                    Math.random() * (second.skill.offense.speed + 120) > arm + 50\n                ) {\n                    this.runScores();\n                    if (game.batter != second) {\n                        game.batter.recordRBI();\n                        second.atBats.push(Log.prototype.RUN);\n                    }\n                    game.field.third = null;\n                }\n            }\n            if (first && canAdvance('first')) {\n                game.field.second = first;\n                game.field.first = null;\n                if (\n                    first != game.batter &&\n                    !game.field.third &&\n                    !sacrificeAdvances &&\n                    Math.random() * (first.skill.offense.speed + 120) > arm + 60\n                ) {\n                    game.field.third = first;\n                    game.field.second = null;\n                }\n            }\n        }\n        return this;\n    },\n    /**\n     * \"run scores!\"\n     */\n    runScores() {\n        const game = this.game;\n        game.scoreboard[game.half === 'top' ? 'away' : 'home'][game.inning]++;\n        game.tally[game.half === 'top' ? 'away' : 'home'].R++;\n    },\n    /**\n     * lets the on deck batter into the batter's box\n     */\n    newBatter() {\n        const game = this.game;\n        game.passMinutes(2);\n        game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        game.log.notePlateAppearanceResult(game);\n        const team = game.half === 'bottom' ? game.teams.home : game.teams.away;\n        game.lastBatter = game.batter;\n        game.batter = team.lineup[(team.nowBatting + 1) % 9];\n        game.batter.ready = !game.humanBatting();\n        game.deck = team.lineup[(team.nowBatting + 2) % 9];\n        game.hole = team.lineup[(team.nowBatting + 3) % 9];\n        team.nowBatting = (team.nowBatting + 1) % 9;\n        if (this.count.outs < 3) {\n            game.log.noteBatter(game.batter);\n        }\n        //game.showPlayResultPanels(game.lastBatter);\n        if (!game.humanPitching()) {\n            game.pitcher.team.manager.checkPitcherFatigue();\n        }\n    },\n    /**\n     * 3 outs\n     */\n    changeSides() {\n        const game = this.game;\n        game.passMinutes(5);\n        game.swingResult = {};\n        game.swingResult.looking = true; // hide bat\n        game.pitchInFlight.x = null; // hide ball\n        game.pitchInFlight.y = null; // hide ball\n        game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        let offense, defense;\n        game.field.first = null;\n        game.field.second = null;\n        game.field.third = null;\n        if (game.half === 'top') {\n            if (game.inning == 9 && game.tally.home.R > game.tally.away.R) {\n                return game.end();\n            }\n            game.half = 'bottom';\n        } else {\n            if (game.inning + 1 > 9) {\n                return game.end();\n            }\n            game.inning++;\n            game.half = 'top';\n        }\n        offense = game.half === 'top' ? 'away' : 'home';\n        defense = game.half === 'top' ? 'home' : 'away';\n        const n = `${game.inning}回の${game.half === 'top' ? 'オモテ' : 'ウラ'}、${game.teams[\n                game.half === 'top' ? 'away' : 'home'\n            ].getName()}の攻撃。`,\n            e = `${game.half === 'top' ? 'Top' : 'Bottom'} ${game.inning}`;\n        game.log.note(e, n);\n        const team = game.teams[offense];\n        game.batter = team.lineup[team.nowBatting];\n        game.batterRunner = game.batter;\n        game.deck = team.lineup[(team.nowBatting + 1) % 9];\n        game.hole = team.lineup[(team.nowBatting + 2) % 9];\n\n        game.pitcher = game.teams[defense].positions.pitcher;\n        game.log.noteBatter(game.batter);\n        game.autoPitchSelect();\n        game.field.defense = team.positions;\n        this.onSideChange();\n    },\n    onSideChange() {}, // will be be bound externally\n    says: 'Play ball!',\n    game: null\n};\n\nexport { Umpire };\n","import { Field } from '../Model/Field';\nimport { Team } from '../Model/Team';\nimport { Umpire } from '../Model/Umpire';\nimport { Player } from '../Model/Player';\nimport { Log } from '../Utility/Log';\n\nimport { helper, text } from '../Utility/_utils';\n\nimport { Animator } from '../Services/Animator';\nimport { Distribution } from '../Services/Distribution';\nimport { Mathinator } from '../Services/Mathinator';\nimport { Iterator } from '../Services/Iterator';\n\nconst $ = typeof window === 'object' ? window.$ : () => {};\n\n/**\n * Apologies for the godclass here.\n * @param m - language mode.\n * @constructor\n */\nconst Game = function(m) {\n    this.gamesIntoSeason = 72;\n    this.humanControl = 'home'; //home, away, both, none\n    this.debug = [];\n    this.pitcher = null; // Player&\n    this.batter = null; // Player&\n    this.stage = 'pitch'; //pitch, swing\n    /**\n     * websocket opponent is connected\n     */\n    this.opponentConnected = false;\n    this.batterReadyTimeout = -1;\n    /**\n     * language sensitive string describing what kind of pitch the batter sees\n     */\n    this.battersEye = {\n        e: '',\n        n: ''\n    };\n    this.startOpponentPitching = null; // late function\n    this.pitchTarget = { x: 100, y: 100 };\n    this.pitchInFlight = {\n        x: 100,\n        y: 100,\n        breakDirection: [0, 0],\n        name: 'slider',\n        velocity: 50,\n        break: 50,\n        control: 50\n    };\n    this.swingResult = {\n        x: 100, //difference to pitch location\n        y: 100, //difference to pitch location\n        strike: false,\n        foul: false,\n        caught: false,\n        contact: false,\n        looking: true,\n        bases: 0,\n        fielder: 'short',\n        outs: 0\n    };\n    this.playResult = {\n        batter: '',\n        fielder: ''\n    };\n    this.field = null;\n    this.teams = {\n        away: null,\n        home: null\n    };\n    this.log = null;\n    this.half = 'top';\n    this.inning = 1;\n    this.scoreboard = {\n        away: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        },\n        home: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        }\n    };\n    this.tally = {\n        away: {\n            H: 0,\n            R: 0,\n            E: 0\n        },\n        home: {\n            H: 0,\n            R: 0,\n            E: 0\n        }\n    };\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor: Game,\n    init(m) {\n        this.expectedSwingTiming = 0;\n        this.reset();\n        this.startTime = {\n            h: (Math.random() * 6 + 11) | 0,\n            m: (Math.random() * 60) | 0\n        };\n        this.timeOfDay = {\n            h: 8,\n            m: 0\n        }; // @see {Loop} for time initialization\n        if (m) text.mode = m;\n        this.gamesIntoSeason = 72 + Math.floor(Math.random() * 72);\n        this.field = new Field(this);\n        this.teams.away = new Team(this);\n        this.teams.home = new Team(this);\n        this.log = new Log();\n        this.log.game = this;\n        this.debug = [];\n        this.helper = helper;\n        while (this.teams.away.name === this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n        this.autoPitchSelect();\n        Animator.init();\n        this.passMinutes(5);\n    },\n    get console() {\n        return Animator.console;\n    },\n    set console(value) {\n        Animator.console = value;\n    },\n    passMinutes(minutes) {\n        const time = this.timeOfDay;\n        time.m = parseInt(time.m);\n        time.m += parseInt(minutes);\n        while (time.m >= 60) {\n            time.m = parseInt(time.m) - 60;\n            time.h = (parseInt(time.h) + 1) % 24;\n        }\n        if (!Animator.console) Animator.loop.setTargetTimeOfDay(time.h, time.m);\n    },\n    getInning() {\n        return text.mode === 'n'\n            ? this.inning + (this.half === 'top' ? 'オモテ' : 'ウラ')\n            : `${this.half.toUpperCase()} ${this.inning}`;\n    },\n    /**\n     * @returns {boolean} is a human player is batting\n     */\n    humanBatting() {\n        const humanControl = this.humanControl;\n        if (humanControl === 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return humanControl === 'both' || humanControl === 'away';\n            case 'bottom':\n                return humanControl === 'both' || humanControl === 'home';\n        }\n    },\n    /**\n     * @returns {boolean}\n     */\n    humanPitching() {\n        const humanControl = this.humanControl;\n        if (humanControl === 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return humanControl === 'both' || humanControl === 'home';\n            case 'bottom':\n                return humanControl === 'both' || humanControl === 'away';\n        }\n    },\n    /**\n     * ends the game\n     */\n    end() {\n        this.stage = 'end';\n        let e, n;\n        e =\n            this.tally.home.R > this.tally.away.R\n                ? 'Home team wins!'\n                : this.tally.home.R === this.tally.away.R\n                ? 'You tied. Yes, you can do that.'\n                : 'Visitors win!';\n        n =\n            this.tally.home.R > this.tally.away.R\n                ? `${this.teams.home.getName()}の勝利`\n                : this.tally.home.R === this.tally.away.R\n                ? '引き分け'\n                : `${this.teams.away.getName()}の勝利`;\n        if (this.tally.home.R > this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.W++;\n            this.teams.away.positions.pitcher.stats.pitching.L++;\n        } else if (this.tally.home.R < this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.L++;\n            this.teams.away.positions.pitcher.stats.pitching.W++;\n        }\n        this.log.note(e, n);\n        this.log.note('Reload to play again', 'リロるは次の試合へ');\n    },\n    /**\n     * advances an AI turn (response to the previous action) by pitching or swinging\n     * @param callback\n     */\n    simulateInput(callback) {\n        const stage = this.stage,\n            pitchTarget = this.pitchTarget;\n        if (stage === 'end') {\n            return;\n        }\n        if (stage === 'pitch') {\n            this.autoPitch(callback);\n        } else if (stage === 'swing') {\n            if (typeof pitchTarget != 'object') {\n                this.pitchTarget = { x: 100, y: 100 };\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    /**\n     * usually for spectator mode in which the AI plays against itself\n     * @param callback\n     */\n    simulatePitchAndSwing(callback) {\n        if (this.stage === 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        const giraffe = this;\n        setTimeout(\n            () => {\n                if (typeof giraffe.pitchTarget != 'object') {\n                    giraffe.pitchTarget = { x: 100, y: 100 };\n                }\n                giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, (callback) => {\n                    callback();\n                });\n            },\n            giraffe.field.hasRunnersOn()\n                ? Animator.TIME_FROM_SET + 2500\n                : Animator.TIME_FROM_WINDUP + 2500\n        );\n    },\n    /**\n     * generically receive click input and decide what to do\n     * @param x\n     * @param y\n     * @param callback\n     */\n    receiveInput(x, y, callback) {\n        if (this.humanControl === 'none') {\n            return;\n        }\n        if (this.stage === 'end') {\n            return;\n        }\n        if (this.stage === 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage === 'swing' && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    /**\n     * select a pitch for the AI\n     * @todo use an out pitch at 2 strikes?\n     * @todo use more fastballs against weak batters?\n     */\n    autoPitchSelect() {\n        const pitchNames = Object.keys(this.pitcher.pitching);\n        const pitchName = pitchNames[(Math.random() * pitchNames.length) | 0];\n        const pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    /**\n     * delayed pitch\n     * @param callback {Function}\n     */\n    windupThen(callback) {\n        const pitcher = this.pitcher;\n        pitcher.windingUp = true;\n\n        if (!Animator.console) {\n            $('.baseball').addClass('hide');\n            var windup = $('.windup');\n            windup.css('width', '100%');\n        }\n        if (Animator.console) {\n            callback();\n            pitcher.windingUp = false;\n        } else {\n            if (!Animator.console) {\n                Animator.loop.resetCamera();\n            }\n            windup.animate(\n                { width: 0 },\n                this.field.hasRunnersOn() ? Animator.TIME_FROM_SET : Animator.TIME_FROM_WINDUP,\n                () => {\n                    pitcher.windingUp = false;\n                    callback();\n                }\n            );\n        }\n    },\n    /**\n     * AI pitcher winds up and throws\n     * @param callback \\usually a function to resolve the animations resulting from the pitch\n     */\n    autoPitch(callback) {\n        this.autoPitchSelect();\n\n        const count = this.umpire.count;\n        let x, y, pitch;\n        pitch = Distribution.pitchLocation(count);\n        x = pitch.x;\n        y = pitch.y;\n\n        this.windupThen(() => {\n            !Animator.console && $('.baseball.pitch').removeClass('hide');\n            this.thePitch(x, y, callback);\n        });\n    },\n    /**\n     * AI batter decides whether to swing\n     *\n     * The \"deceptive\" location is the apparent trajectory. If the batter has good eyes, they will see the\n     * actual trajectory instead.\n     *\n     * Hitting the ball, of course, is another matter.\n     *\n     * @param deceptiveX \\the apparent X target of the pitch\n     * @param deceptiveY \\the apparent Y target of the pitch\n     * @param callback\n     */\n    autoSwing(deceptiveX, deceptiveY, callback) {\n        const giraffe = this;\n        const bonus = this.batter.eye.bonus || 0;\n        const eye =\n            this.batter.skill.offense.eye +\n            6 * (this.umpire.count.balls + this.umpire.count.strikes) +\n            bonus;\n        let convergence;\n        let convergenceSum;\n\n        // if swinging blindly, aim at the center.\n        let x = Distribution.centralizedNumber(),\n            y = Distribution.centralizedNumber();\n        /**\n         * @type {number} -100 to 100 negative: fooled on pitch, positive: certain of pitch location.\n         */\n        let certainty = (Math.random() * -100) / ((100 + eye) / 100);\n\n        if (100 * Math.random() < eye) {\n            // identified the break, now swinging at the real location.\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n            certainty = (certainty + 200) / 3;\n        } else {\n            certainty = (certainty - 50) / 2;\n        }\n\n        if (100 * Math.random() < eye) {\n            // identified the location more precisely, making a larger adjustment.\n            convergence = eye / 25;\n            convergenceSum = 1 + convergence;\n            certainty = (certainty + 300) / 4;\n        } else {\n            convergence = eye / 100;\n            certainty = (certainty - 50) / 2;\n            convergenceSum = 1 + convergence;\n        }\n\n        x = (deceptiveX * convergence + x) / convergenceSum;\n        y = (deceptiveY * convergence + y) / convergenceSum;\n\n        this.swingResult.x = Distribution.cpuSwing(x, this.pitchInFlight.x, eye);\n        this.swingResult.y = Distribution.cpuSwing(y, this.pitchInFlight.y, eye * 0.75);\n\n        this.batter.lastPitchCertainty = certainty;\n\n        const swingProbability = Distribution.swingLikelihood(eye, x, y, this.umpire, certainty);\n        if (swingProbability < 100 * Math.random()) {\n            x = -20;\n        }\n\n        callback(() => {\n            giraffe.theSwing(x, y);\n        });\n    },\n    /**\n     * variable function for what to do when the batter becomes ready for a pitch (overwritten many times)\n     */\n    onBatterReady() {},\n    /**\n     * @param setValue\n     * @returns {boolean|*}\n     * trigger batter readiness passively, or actively with setValue, i.e. ready to see pitch\n     */\n    batterReady(setValue) {\n        clearTimeout(this.batterReadyTimeout);\n        if (setValue !== undefined) {\n            this.batter.ready = !!setValue;\n        }\n        if (this.batter.ready) {\n            this.onBatterReady();\n        }\n        return this.batter.ready;\n    },\n    waitingCallback() {},\n    /**\n     * signals readiness for the next pitch. This behavior varies depending on whether AI or human is pitching\n     * @param callback\n     * @param swingResult\n     */\n    awaitPitch(callback, swingResult) {\n        const giraffe = this;\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitSwing(swingResult);\n            this.onBatterReady = () => {};\n        } else {\n            giraffe.onBatterReady = () => {\n                giraffe.autoPitch(callback);\n            };\n            if (Animator.console) {\n                giraffe.batterReady();\n            } else {\n                this.batterReadyTimeout = setTimeout(() => {\n                    giraffe.batterReady();\n                }, 5200);\n            }\n        }\n    },\n    /**\n     * Signals readiness for the batter's response to a pitch in flight.\n     * In case of a human pitching to AI, the AI batter is automatically ready.\n     * @param x\n     * @param y\n     * @param callback\n     * @param pitchInFlight\n     * @param pitchTarget\n     */\n    awaitSwing(x, y, callback, pitchInFlight, pitchTarget) {\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitPitch({\n                inFlight: pitchInFlight,\n                target: pitchTarget\n            });\n        } else {\n            this.autoSwing(x, y, callback);\n        }\n    },\n    /**\n     * triggers a pitch to aspirational target (x,y) from the current pitcher on the mound.\n     * @param x \\coordinate X in the strike zone (0, 200)\n     * @param y \\coordinate Y (0, 200), origin being bottom left.\n     * @param callback \\typically to resolve animations and move to the next step (batting this pitch)\n     * @param override \\a websocket opponent will override the engine's pitch location calculations with their actual\n     */\n    thePitch(x, y, callback, override) {\n        if (override) {\n            this.pitchInFlight = override.inFlight;\n            this.pitchTarget = override.target;\n        }\n\n        const pitch = this.pitchInFlight;\n\n        if (this.stage === 'pitch') {\n            if (override) {\n                callback = this.waitingCallback;\n            } else {\n                this.pitcher.fatigue++;\n                this.pitchTarget.x = x;\n                this.pitchTarget.y = y;\n\n                pitch.breakDirection = this.helper.pitchDefinitions[pitch.name].slice(0, 2);\n                this.battersEye = text.getBattersEye(this);\n\n                const control = Math.floor(pitch.control - this.pitcher.fatigue / 2);\n                this.pitchTarget.x = Distribution.pitchControl(this.pitchTarget.x, control);\n                this.pitchTarget.y = Distribution.pitchControl(this.pitchTarget.y, control);\n\n                if (this.pitcher.throws === 'right') pitch.breakDirection[0] *= -1;\n\n                const breakEffect = Distribution.breakEffect(\n                    pitch,\n                    this.pitcher,\n                    this.pitchTarget.x,\n                    this.pitchTarget.y\n                );\n\n                pitch.x = breakEffect.x;\n                pitch.y = breakEffect.y;\n            }\n\n            this.log.notePitch(pitch, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanBatting()) {\n                callback();\n            } else {\n                if (this.opponentConnected && this.humanPitching()) {\n                    this.windupThen(() => {});\n                }\n                this.awaitSwing(x, y, callback, pitch, this.pitchTarget);\n            }\n        }\n    },\n    /**\n     * makes an aspirational swing to (x,y) by the current player in the batter's box\n     * @param x\n     * @param y\n     * @param callback \\resolves animations\n     * @param override\n     */\n    theSwing(x, y, callback, override) {\n        const pitch = this.pitchInFlight;\n        if (this.stage === 'swing') {\n            if (override) {\n                var result = (this.swingResult = override);\n                callback = this.waitingCallback;\n            } else {\n                this.swingResult = result = {};\n\n                result.timing = this.humanBatting()\n                    ? this.expectedSwingTiming - Date.now()\n                    : this.batter.getAISwingTiming();\n                const inTime = Math.abs(result.timing) < 900;\n\n                const bonus = this.batter.eye.bonus || 0,\n                    eye =\n                        this.batter.skill.offense.eye +\n                        6 * (this.umpire.count.balls + this.umpire.count.strikes) +\n                        bonus;\n\n                if (x >= 0 && x <= 200) {\n                    this.batter.fatigue++;\n\n                    result.x = x - pitch.x;\n                    result.y = y - pitch.y;\n                    result.angle = this.setBatAngle();\n\n                    const recalculation = Mathinator.getAngularOffset(result, result.angle);\n                    const precision = Distribution.swing(eye);\n\n                    result.x = recalculation.x * precision;\n                    result.y = -5 + recalculation.y * precision;\n\n                    //log(recalculation.y, precision);\n\n                    result.looking = false;\n\n                    if (Math.abs(result.x) < 60 && Math.abs(result.y) < 35 && inTime) {\n                        result.contact = true;\n                        this.field.determineSwingContactResult(result);\n                        // log(result.flyAngle, Math.floor(result.x), Math.floor(result.y));\n                        this.debug.push(result);\n                    } else {\n                        result.contact = false;\n                    }\n                } else {\n                    result.strike = Distribution.inStrikezone(pitch.x, pitch.y);\n                    this.batter.eye.bonus = Math.max(\n                        0,\n                        eye -\n                            Math.sqrt(\n                                Math.pow(this.batter.eye.x - pitch.x, 2) +\n                                    Math.pow(this.batter.eye.y - pitch.y, 2)\n                            ) *\n                                1.5\n                    );\n                    result.contact = false;\n                    result.looking = true;\n                    this.batter.eye.x = pitch.x;\n                    this.batter.eye.y = pitch.y;\n                }\n            }\n\n            // stealing bases\n            const field = this.field;\n            const team = this.batter.team;\n            if (\n                (team.stealAttempt === Team.RUNNER_GO ||\n                    team.stealAttempt === Team.RUNNERS_DISCRETION) &&\n                !this.opponentConnected\n            ) {\n                const thief = field.getLeadRunner();\n                if (thief instanceof Player) {\n                    let base;\n                    switch (thief) {\n                        case field.first:\n                            base = 2;\n                            break;\n                        case field.second:\n                            base = 3;\n                            break;\n                        case field.third:\n                            base = 4;\n                    }\n                    let validToSteal = true;\n                    if (result.looking) {\n                        const count = this.umpire.count;\n                        if (count.strikes >= 2 && result.strike && count.outs >= 2)\n                            validToSteal = false;\n                        if (count.balls >= 3 && !result.strike && field.first) validToSteal = false;\n                    }\n                    if (result.foul || result.caught) {\n                        validToSteal = false;\n                    }\n                    const discretion =\n                        team.stealAttempt === 'go' ||\n                        Distribution.willSteal(\n                            pitch,\n                            this.pitcher.team.positions.catcher,\n                            thief,\n                            base\n                        );\n                    if (discretion && validToSteal) {\n                        thief.attemptSteal(this, base);\n                    }\n                    team.stealAttempt = Team.RUNNERS_DISCRETION;\n                }\n            }\n\n            this.log.noteSwing(result);\n            this.stage = 'pitch';\n\n            const half = this.half;\n            this.umpire.makeCall();\n            let lastPlayOfHalfInning = false;\n            if (half !== this.half) {\n                callback = this.startOpponentPitching;\n                lastPlayOfHalfInning = !override;\n            }\n\n            if (typeof callback === 'function') {\n                if (this.humanPitching()) {\n                    callback();\n                    if (lastPlayOfHalfInning) {\n                        if (this.opponentService && this.opponentConnected) {\n                            this.opponentService.emitSwing(result);\n                        }\n                    }\n                } else {\n                    this.awaitPitch(callback, result);\n                }\n            }\n        }\n    },\n    /**\n     * for CSS\n     * @param x\n     * @param y\n     * @returns {*|number}\n     */\n    setBatAngle(x, y) {\n        const giraffe = this,\n            pitchInFlight = this.pitchInFlight,\n            swingResult = this.swingResult;\n        const origin = {\n            x: giraffe.batter.bats === 'right' ? -10 : 210,\n            y: 199\n        };\n        const swing = {\n            x: x ? x : pitchInFlight.x + swingResult.x,\n            y: y ? y : pitchInFlight.y + swingResult.y\n        };\n        return Mathinator.battingAngle(origin, swing);\n    },\n    debugOut() {\n        log(\n            'slugging',\n            this.debug.filter((a) => a.bases == 1).length,\n            this.debug.filter((a) => a.bases == 2).length,\n            this.debug.filter((a) => a.bases == 3).length,\n            this.debug.filter((a) => a.bases == 4).length\n        );\n        log(\n            'grounders',\n            this.debug.filter((a) => !a.caught && !a.foul && a.flyAngle < 0).length,\n            'thrown out',\n            this.debug.filter((a) => !a.caught && !a.foul && a.flyAngle < 0 && a.thrownOut).length\n        );\n        log(\n            'flies/liners',\n            this.debug.filter((a) => !a.foul && a.flyAngle > 0).length,\n            'caught',\n            this.debug.filter((a) => a.caught && a.flyAngle > 0).length\n        );\n\n        const PO = {};\n        this.debug.map((a) => {\n            if (!a.fielder) return;\n            if (!PO[a.fielder]) {\n                PO[a.fielder] = 0;\n            }\n            if (!a.bases && a.fielder) {\n                PO[a.fielder]++;\n            }\n        });\n        log('fielding outs', JSON.stringify(PO));\n\n        const hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\n        let atBats = [];\n        hitters.map((a) => {\n            atBats = atBats.concat(a.getAtBats().map((ab) => ab.text));\n        });\n\n        const LO = atBats.filter((ab) => ab === 'LO').length;\n        const FO = atBats.filter((ab) => ab === 'FO').length;\n        const GO = atBats.filter((ab) => ab === 'GO').length;\n        const GIDP = atBats.filter((ab) => ab === '(IDP)').length;\n        const SO = atBats.filter((ab) => ab === 'SO').length;\n        const BB = atBats.filter((ab) => ab === 'BB').length;\n        const SAC = atBats.filter((ab) => ab === 'SAC').length;\n        const FC = atBats.filter((ab) => ab === 'FC').length;\n        const CS = atBats.filter((ab) => ab === 'CS').length;\n        const SB = atBats.filter((ab) => ab === 'SB').length;\n\n        log(\n            'line outs',\n            LO,\n            'fly outs',\n            FO,\n            'groundouts',\n            GO,\n            'strikeouts',\n            SO,\n            'sacrifices',\n            SAC,\n            'FC',\n            FC,\n            'gidp',\n            GIDP,\n            'CS',\n            CS,\n            'total',\n            LO + FO + GO + SO + SAC + FC + GIDP + CS\n        );\n\n        log('BB', BB, 'SB', SB);\n        log('fouls', this.debug.filter((a) => a.foul).length);\n        log('fatigue, home vs away');\n        const teams = this.teams;\n        const fatigue = { home: {}, away: {} };\n        Iterator.each(this.teams.home.positions, (key) => {\n            const position = key;\n            fatigue.home[position] = teams.home.positions[position].fatigue;\n            fatigue.away[position] = teams.away.positions[position].fatigue;\n        });\n        console.table(fatigue);\n        console.table(this.scoreboard);\n        console.table(this.tally);\n    },\n    /**\n     * for websocket serialization\n     */\n    toData() {\n        const data = {};\n        data.half = this.half;\n        data.inning = this.inning;\n        data.tally = this.tally;\n        const giraffe = this;\n        const players = this.teams.away.lineup.concat(this.teams.home.lineup);\n        // note: bench not included\n        data.field = {\n            first: players.indexOf(this.field.first),\n            second: players.indexOf(this.field.second),\n            third: players.indexOf(this.field.third)\n        };\n        data.batter = players.indexOf(this.batter);\n        data.deck = players.indexOf(this.deck);\n        data.hole = players.indexOf(this.hole);\n        data.teams = {\n            home: {\n                name: giraffe.teams.home.name,\n                nameJ: giraffe.teams.home.nameJ\n            },\n            away: {\n                name: giraffe.teams.away.name,\n                nameJ: giraffe.teams.away.nameJ\n            }\n        };\n        data.umpire = {\n            says: giraffe.umpire.says,\n            count: {\n                strikes: giraffe.umpire.count.strikes,\n                balls: giraffe.umpire.count.balls,\n                outs: giraffe.umpire.count.outs\n            }\n        };\n        // data.players = players.map(player => player.toData());\n        data.log = {\n            pitchRecord: giraffe.log.pitchRecord,\n            record: giraffe.log.record\n        };\n        data.gamesIntoSeason = this.gamesIntoSeason;\n        return data;\n    },\n    fromData(data) {\n        this.half = data.half;\n        this.inning = data.inning;\n        this.tally = data.tally;\n        // const giraffe = this;\n        const players = data.players || this.teams.away.lineup.concat(this.teams.home.lineup);\n        //     .map((playerJson, index) => {\n        //     const playerData = (playerJson);\n        //     if (index > 8) {\n        //         var side = 'home';\n        //         index = index - 9;\n        //     } else {\n        //         side = 'away';\n        //     }\n        //     const player = giraffe.teams[side].positions[playerData.position];\n        //     player.fromData(playerData);\n        //     giraffe.teams[side].lineup[index] = player;\n        //     player.resetStats(data.gamesIntoSeason);\n        //     return player;\n        // });\n        this.field.first = players[data.field.first];\n        this.field.second = players[data.field.second];\n        this.field.third = players[data.field.third];\n        this.batter = players[data.batter];\n        this.deck = players[data.deck];\n        this.hole = players[data.hole];\n        this.umpire.says = data.umpire.says;\n        this.umpire.count = data.umpire.count;\n        this.teams.away.name = data.teams.away.name;\n        this.teams.away.nameJ = data.teams.away.nameJ;\n        this.teams.home.name = data.teams.home.name;\n        this.teams.home.nameJ = data.teams.home.nameJ;\n        this.log.pitchRecord = data.log.pitchRecord;\n        this.log.record = data.log.record;\n        this.log.stabilizeShortRecord();\n        this.gamesIntoSeason = data.gamesIntoSeason;\n        if (this.humanPitching()) {\n            this.autoPitchSelect();\n        }\n        return this;\n    },\n    pitchSelect() {},\n    reset() {\n        this.scoreboard = {\n            away: {\n                1: 0,\n                2: 0,\n                3: 0,\n                4: 0,\n                5: 0,\n                6: 0,\n                7: 0,\n                8: 0,\n                9: 0\n            },\n            home: {\n                1: 0,\n                2: 0,\n                3: 0,\n                4: 0,\n                5: 0,\n                6: 0,\n                7: 0,\n                8: 0,\n                9: 0\n            }\n        };\n        this.resetTally();\n    },\n    resetTally() {\n        this.tally = {\n            away: {\n                H: 0,\n                R: 0,\n                E: 0\n            },\n            home: {\n                H: 0,\n                R: 0,\n                E: 0\n            }\n        };\n    },\n\n    /* user-interaction implementations */\n\n    /**\n     * Assign specialist opponent.\n     */\n    teamJapan() {\n        const provider = new Baseball.teams.Provider();\n        provider.assignTeam(this, 'TeamJapan', 'away');\n        const game = this;\n        if (game.half === 'top') {\n            game.batter = game.teams.away.lineup[game.batter.order];\n            game.deck = game.teams.away.lineup[(game.batter.order + 1) % 9];\n            game.hole = game.teams.away.lineup[(game.batter.order + 2) % 9];\n        } else {\n            game.pitcher = game.teams.away.positions.pitcher;\n        }\n    },\n\n    /**\n     * @param {Player} player\n     */\n    selectSubstitute(player) {\n        const game = this;\n        if (game.humanControl === 'home' && player.team !== game.teams.home) return;\n        if (game.humanControl === 'away' && player.team !== game.teams.away) return;\n        player.team.sub = player.team.sub === player ? player.team.noSubstituteSelected : player;\n    },\n\n    /**\n     * User selects a pitch.\n     * @param {string} pitchName\n     */\n    selectPitch(pitchName) {\n        const game = this;\n        if (game.stage === 'pitch') {\n            game.pitchInFlight = $.extend({}, game.pitcher.pitching[pitchName]);\n            game.pitchInFlight.name = pitchName;\n            game.swingResult.looking = true;\n        }\n    },\n\n    /**\n     * Used for substitutions or player info expansion.\n     * @param player\n     * @returns {*|boolean}\n     */\n    clickLineup(player) {\n        if (player.team.sub !== player.team.noSubstituteSelected) {\n            const sub = player.team.sub;\n            player.team.sub = null;\n            if (sub) {\n                return sub.substitute(player);\n            }\n            return;\n        }\n        player.team.expanded = player.team.expanded === player ? null : player;\n    },\n\n    /**\n     * Generate a new opponent team (mid-game).\n     * @param heroRate\n     */\n    generateTeam(heroRate) {\n        this.teams.away = new Baseball.model.Team(this, heroRate);\n    },\n\n    /**\n     * Bound externally using the UI + Animator service.\n     */\n    updateFlightPath: () => {},\n\n    /**\n     * @param {Class} SocketService\n     * @param {boolean|number} quickMode - 7 for playing from the 7th inning.\n     * @param {boolean|number} spectateCpu\n     */\n    proceedToGame(SocketService, quickMode, spectateCpu) {\n        const game = this;\n        game.humanControl = spectateCpu ? 'none' : 'home';\n        game.console = !!quickMode && quickMode !== 7;\n        const field = window.location.hash\n            ? window.location.hash.slice(1)\n            : game.teams.home.name + Math.ceil(Math.random() * 47);\n        if (typeof window.SockJS !== 'undefined') {\n            var socketService = new SocketService(game);\n            socketService.start(field);\n        } else {\n            console.log('no socket client');\n        }\n        window.location.hash = '#' + field;\n        $('.blocking').remove();\n        $('.play-begins').show();\n        if (game.humanControl === 'none' && game.console) {\n            let n = 0;\n            Animator.console = true;\n            game.console = true;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback === 'function' && callback();\n                });\n            } while (game.stage !== 'end' && n < 500);\n            Animator.console = game.console = false;\n            log('sim ended');\n            game.debugOut();\n        } else if (quickMode === 7 && spectateCpu === 1) {\n            Animator.console = game.console = true;\n            do {\n                game.simulateInput(function(callback) {\n                    typeof callback === 'function' && callback();\n                });\n            } while (game.inning < 7);\n            log('sim halted in 7th');\n            game.debugOut();\n            Animator.console = game.console = false;\n            game.stage = 'pitch';\n            game.half = 'top';\n            game.humanControl = 'home';\n            game.umpire.onSideChange();\n        } else if (game.humanControl === 'none') {\n            const scalar = game.console ? 0.05 : 1;\n            const auto = setInterval(function() {\n                if (game.stage === 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.updateFlightPath(callback);\n                });\n            }, scalar *\n                (game.field.hasRunnersOn()\n                    ? Animator.TIME_FROM_SET + 2000\n                    : Animator.TIME_FROM_WINDUP + 2000));\n        }\n        if (game.humanControl === 'away') {\n            game.simulateInput(function(callback) {\n                game.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl === 'home') {\n            game.showMessage = true;\n        }\n        if (!quickMode || quickMode === 7) {\n            Animator.loop.setTargetTimeOfDay(game.startTime.h, game.startTime.m);\n            game.timeOfDay.h = game.startTime.h;\n            game.timeOfDay.m = game.startTime.m;\n        }\n    },\n\n    /**\n     * Proceed to the end of the current at bat.\n     */\n    simulateAtBat() {\n        const game = this;\n        Animator.console = game.console = true;\n        const batter = game.batter;\n        const control = game.humanControl;\n        game.humanControl = 'none';\n        do {\n            game.simulateInput(function(callback) {\n                typeof callback === 'function' && callback();\n            });\n        } while (game.batter === batter && this.stage !== 'end');\n        log('-- At Bat Simulated --');\n        if (this.stage === 'end') {\n            return;\n        }\n        if (game.humanControl === 'none') {\n            game.humanControl = control;\n        }\n        game.stage = 'pitch';\n        Animator.console = game.console = false;\n        game.umpire.onSideChange(); // rebind hover UI, not actual change sides :\\...\n    },\n\n    /**\n     * @returns {boolean}\n     */\n    allowSimAtBat() {\n        if (this.opponentConnected) return false;\n        return true;\n    }\n};\n\nexport { Game };\n","import { Iterator } from '../Services/Iterator';\n\nclass Trainer {\n    makePlayer(\n        player,\n        name,\n        surname,\n        surnameJ,\n        nameJ,\n        pitching,\n        offense,\n        defense,\n        bats,\n        throws,\n        number\n    ) {\n        player.hero = true;\n\n        if ('rights' && 0) {\n            surnameJ = '代表';\n            nameJ = '選手';\n            name = 'TEAM';\n            surname = 'JPN';\n        }\n\n        player.name = `${surname} ${name}`;\n        player.nameJ = surnameJ + nameJ;\n        player.surname = surname;\n        player.surnameJ = surnameJ;\n\n        player.spaceName(surnameJ, nameJ);\n        player.randomizeSkills(true, true);\n        player.skill.offense = offense;\n        player.skill.defense = defense;\n        player.skill.pitching = pitching;\n        player.bats = bats;\n        player.throws = throws;\n        player.number = number;\n        Iterator.each(player.pitching, (key, value) => {\n            player.pitching[key].velocity += (pitching / 5) | 0;\n            player.pitching[key].break += (pitching / 5) | 0;\n            player.pitching[key].control += (pitching / 5) | 0;\n        });\n        player.resetStats(0);\n    }\n}\n\nexport { Trainer };\n","import { Game } from '../Model/Game';\nimport { Team } from '../Model/Team';\nimport { Player } from '../Model/Player';\nimport { Trainer } from '../Teams/Trainer';\n\nconst samurai = new Team('no init');\nsamurai.name = 'Japan';\nsamurai.nameJ = '日本';\n\nconst darvish = new Player(samurai),\n    johjima = new Player(samurai),\n    ogasawara = new Player(samurai),\n    nishioka = new Player(samurai),\n    kawasaki = new Player(samurai),\n    murata = new Player(samurai),\n    matsui = new Player(samurai),\n    ichiro = new Player(samurai),\n    inaba = new Player(samurai);\n\nconst matsuzaka = new Player(samurai),\n    fukudome = new Player(samurai),\n    aoki = new Player(samurai),\n    abe = new Player(samurai),\n    iwamura = new Player(samurai);\n\nconst coach = new Trainer();\n\ncoach.makePlayer(\n    darvish,\n    'Yu',\n    'Darvish',\n    'ダルビッシュ',\n    '有',\n    150,\n    { eye: 80, power: 80, speed: 80 },\n    { catching: 50, fielding: 70, throwing: 100, speed: 80 },\n    'right',\n    'right',\n    11\n);\n\ncoach.makePlayer(\n    johjima,\n    'Kenji',\n    'Johjima',\n    '城島',\n    '健司',\n    60,\n    { eye: 90, power: 108, speed: 70 },\n    { catching: 140, fielding: 88, throwing: 75, speed: 75 },\n    'right',\n    'right',\n    2\n);\n\ncoach.makePlayer(\n    ogasawara,\n    'Michihiro',\n    'Ogasawara',\n    '小笠原',\n    '道大',\n    80,\n    { eye: 96, power: 90, speed: 90 },\n    { catching: 50, fielding: 96, throwing: 85, speed: 70 },\n    'left',\n    'right',\n    36\n);\n\ncoach.makePlayer(\n    nishioka,\n    'Tsuyoshi',\n    'Nishioka',\n    '西岡',\n    '剛',\n    80,\n    { eye: 95, power: 75, speed: 92 },\n    { catching: 90, fielding: 88, throwing: 88, speed: 90 },\n    'right',\n    'right',\n    7\n);\n\ncoach.makePlayer(\n    kawasaki,\n    'Munenori',\n    'Kawasaki',\n    '川崎',\n    '宗則',\n    80,\n    { eye: 95, power: 75, speed: 95 },\n    { catching: 90, fielding: 120, throwing: 99, speed: 100 },\n    'left',\n    'right',\n    52\n);\n\ncoach.makePlayer(\n    murata,\n    'Shuichi',\n    'Murata',\n    '村田',\n    '修一',\n    80,\n    { eye: 82, power: 110, speed: 70 },\n    { catching: 80, fielding: 80, throwing: 90, speed: 60 },\n    'right',\n    'right',\n    25\n);\n\ncoach.makePlayer(\n    matsui,\n    'Hideki',\n    'Matsui',\n    '松井',\n    '秀樹',\n    75,\n    { eye: 104, power: 120, speed: 50 },\n    { catching: 40, fielding: 85, throwing: 70, speed: 60 },\n    'left',\n    'right',\n    55\n);\n\ncoach.makePlayer(\n    ichiro,\n    '',\n    'Ichiro',\n    'イチロー',\n    '',\n    89,\n    { eye: 115, power: 80, speed: 115 },\n    { catching: 80, fielding: 115, throwing: 115, speed: 115 },\n    'left',\n    'right',\n    51\n);\n\ncoach.makePlayer(\n    inaba,\n    'Atsunori',\n    'Inaba',\n    '稲葉',\n    '篤紀',\n    80,\n    { eye: 92, power: 95, speed: 75 },\n    { catching: 50, fielding: 95, throwing: 95, speed: 75 },\n    'right',\n    'right',\n    41\n);\n\nsamurai.bench = [darvish, johjima, ogasawara, nishioka, kawasaki, murata, matsui, ichiro, inaba];\n//matsuzaka, fukudome, aoki, abe, iwamura];\nsamurai.manager.makeLineup();\nsamurai.positions = {\n    pitcher: darvish,\n    catcher: johjima,\n\n    first: ogasawara,\n    second: nishioka,\n    short: kawasaki,\n    third: murata,\n\n    left: matsui,\n    center: ichiro,\n    right: inaba\n};\n\nfor (const position in samurai.positions) {\n    if (samurai.positions.hasOwnProperty(position)) {\n        samurai.positions[position].position = position;\n    }\n}\n\nsamurai.lineup = [ichiro, kawasaki, inaba, matsui, ogasawara, johjima, murata, nishioka, darvish];\n\nsamurai.lineup.map((player, order) => {\n    player.order = order;\n});\n\nexport { samurai };\n","import { samurai } from './TeamJapan';\n\nclass Provider {\n    assignTeam(game, team, side) {\n        const special = this.teams[team];\n        special.game = game;\n        game.teams[side] = special;\n    }\n}\n\nProvider.prototype.teams = {\n    TeamJapan: samurai\n};\n\nexport { Provider };\n","const Baseball = {};\n\nimport { AtBat } from './Model/AtBat';\nimport { Field } from './Model/Field';\nimport { Game } from './Model/Game';\nimport { Manager } from './Model/Manager';\nimport { Player } from './Model/Player';\nimport { Team } from './Model/Team';\nimport { Umpire } from './Model/Umpire';\n\nimport { text, Log } from './Utility/_utils';\nimport { abbreviatePosition } from './Utility/text';\nimport { Distribution } from './Services/Distribution';\nimport { Mathinator } from './Services/Mathinator';\nimport { Animator } from './Services/Animator';\nimport { Iterator } from './Services/Iterator';\n\nimport { Provider } from './Teams/Provider';\nimport { samurai } from './Teams/TeamJapan';\n\nBaseball.model = {};\nBaseball.model.Game = Baseball.Game = Game;\nBaseball.model.Player = Baseball.Player = Player;\nBaseball.model.Team = Baseball.Team = Team;\n\nBaseball.service = {};\nBaseball.service.Animator = Animator;\nBaseball.service.Distribution = Distribution;\nBaseball.service.Iterator = Iterator;\nBaseball.service.Mathinator = Mathinator;\n\nBaseball.util = {};\nBaseball.util.text = text;\nBaseball.util.Log = Log;\nBaseball.util.text.abbreviatePosition = abbreviatePosition;\n\nBaseball.teams = {};\nBaseball.teams.Provider = Provider;\nBaseball.teams.Japan = samurai;\n\nexport default Baseball;\nexport { Baseball };\n\nexport { Game, Player, Team, AtBat, Field, Manager, Umpire };\nexport { Animator, Distribution, Iterator, Mathinator };\nexport { text, abbreviatePosition, Log };\nexport { Provider };\n","import { Baseball } from './namespace';\n\nif (typeof window === 'object') {\n    window.Baseball = Baseball;\n}\n\nexport default Baseball;\n"],"sourceRoot":""}
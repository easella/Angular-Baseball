{"version":3,"sources":["text.js","data.js","helper.js","log.js","Animator.js","atBat.js","field.js","game.js","manager.js","player.js","team.js","umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["mode","text","phrase","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","OPS","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","Math","floor","random","Log","this","init","prototype","game","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","shortRecord","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","pitchInFlight","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","splay","notePlateAppearanceResult","pointer","Animator","square","constructor","pitchTarget","pitchBreak","transitional","percent","top","step","originLeft","originTop","padding","max","borderWidth","transform","delay","quarter","ease","Linear","easeNone","updateFlightPath","callback","$scope","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","henka","transitions","horizontalBreak","abs","addClass","css","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","eye","removeClass","humanPitching","holdUpTimeouts","push","holdUp","translateSwingResultToStylePosition","bottom","cos","PI","travelDistance","sin","min","memory","transitionalTrajectory","givenApexHeight","givenDistance","givenSplayAngle","apexHeight","distance","bounding","apexRatio","sqrt","Power4","easeOut","animateFieldingTrajectory","killAll","linearApproximateDragScalar","airTime","angle","flyAngle","scalar","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","identifier","Field","hasRunnersOn","Player","determineSwingContactResult","swing","splayAngle","power","bonus","landingDistance","findFielder","debug","debugData","dd","half","teams","home","away","fatigue","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","grounder","plus","gatherAndThrowSuccess","outFielder","fieldingReturnDelay","a","b","fieldingTest","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","i","returnFielder","minDistance","giraffe","each","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","window","field","Team","pickName","umpire","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","hasOwnProperty","windingUp","windup","animate","width","deceptiveX","deceptiveY","count","balls","strikes","convergence","convergenceSum","swingLikelihood","chance","totalLikelihood","breakDirection","battersEye","control","setBatAngle","pow","makeCall","startOpponentPitching","origin","atan","debugOut","filter","length","lineup","map","p","atBats","reduce","ab","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","property","selection","rating","index","skills","cursor","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sf","chances","PO","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","hero","randValue","isPitching","value","catching","prev","current","arr","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","batterRunner","deck","hole","says","newBatter","onBase","advanceRunners","reachBase","changeSides","isWalk","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","spectateCpu","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","offset","relativeOffset","pageX","pageY","hide","show","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"AAAA,GAAAA,MAAA,GAEAC,MAAA,SAAAC,QACAF,OAAAA,KAAA,IACA,IAAAG,SACAC,GACAC,MAAA,IACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,cAAA,SACAC,cAAA,OACAC,QAAA,KACAC,OAAA,KACAC,aAAA,OACAC,UAAA,OACAC,IAAA,KACAC,KAAA,KACAC,WAAA,OACAC,kBAAA,MACAC,gBAAA,QACAC,iBAAA,OACAC,gBAAA,MACAC,UAAA,OACAC,QAAA,QACAC,QAAA,SACAC,eAAA,MACAC,iBAAA,OACAC,gBAAA,MACAC,UAAA,SACAC,QAAA,OACAC,cAAA,QACAC,WAAA,SACAC,mBAAA,OACAC,SAAA,QACAC,SAAA,OACAC,OAAA,QACAC,KAAA,OACAC,OAAA,MACAC,OAAA,OACAC,MAAA,MACAC,OAAA,OACAC,uBAAA,UACAC,WAAA,WACAC,wBAAA,UACAC,aAAA,KACAC,eAAA,KACAC,gBAAA,MACAC,SAAA,QACAC,YAAA,KACAC,4BAAA,OACAC,OAAA,KACAC,KAAA,MACAC,MAAA,IACAC,QAAA,KACAC,SAAA,KACAC,MAAA,KACAC,WAAA,MACAC,YAAA,OACAC,QAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,KACAC,SAAA,KACAC,GAAA,KACAC,IAAA,KACAC,IAAA,KACAC,GAAA,KACAC,aAAA,UACAC,EAAA,IACAC,KAAA,IACAC,KAAA,IACAC,GAAA,MACAC,IAAA,KACAC,EAAA,KACAC,GAAA,KACAC,GAAA,KAEAC,mBAAA,KACAC,sBAAA,oBACAC,aAAA,SACAC,mBAAA,QAEAC,cAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,EAAA,KACAC,KAAA,KACAC,MAAA,KACAC,MAAA,KACAC,IAAA,OAEAC,GACA3F,MAAA,IACAmD,OAAA,WAEAxD,MAAAE,OACA,OAAAC,QAAAA,OAAAD,QAGAD,KAAAgG,iBAAA,SAAAC,SACA,MAAA,KAAAlG,MAEAmG,MAAA,IACAC,OAAA,IACAC,MAAA,IACAC,QAAA,IACAzE,QAAA,IACAC,QAAA,IACAyE,KAAA,IACAC,OAAA,IACAC,MAAA,KACAP,SAEAA,SAGAjG,KAAAyG,MAAA,WACA,MAAA,KAAA1G,KACA,IAEA,KAGAC,KAAA0G,gBAAA,SAAAT,SACA,MAAA,KAAAlG,MAEAmG,MAAA,QACAC,OAAA,OACAC,MAAA,MACAC,QAAA,OACAzE,QAAA,QACAC,QAAA,SACAyE,KAAA,MACAC,OAAA,OACAC,MAAA,OACAP,UAGAC,MAAAlG,KAAA,iBACAmG,OAAAnG,KAAA,kBACAoG,MAAApG,KAAA,iBACAqG,QAAArG,KAAA,aACA4B,QAAA5B,KAAA,WACA6B,QAAA7B,KAAA,WACAsG,KAAAtG,KAAA,gBACAuG,OAAAvG,KAAA,kBACAwG,MAAAxG,KAAA,kBACAiG,UAGAjG,KAAA2G,MAAA,WACA,OAAAxG,EAAA,IAAA4F,EAAA,MAAAhG,OAEAC,KAAA4G,KAAA,WACA,OAAAzG,EAAA,IAAA4F,EAAA,MAAAhG,OAGAC,KAAA6G,UAAA,SAAAC,OACA,MAAA,KAAA/G,KACA+G,MAAAC,KAAAC,OAAA,GAAAC,cAAAH,MAAAC,KAAAG,MAAA,GAEA,KAAAnH,KACAC,KAAA8G,MAAAC,MADA,QAKA/G,KAAAmH,cAAA,SAAAC,OAAAnB,QAAAoB,MAAAC,OACA,GAAAC,WAAA,GACAC,SAAA,OAAA,SAAA,SAAAC,QAAAxB,SAAA,CACA,IAAA,KAAAlG,KAAA,CAEA,GADAwH,WAAAH,OACAE,MACA,OAAAA,OACA,IAAA,QACAC,WAAA,wBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,MACAsB,WAAA,kBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,MACAsB,WAAA,gBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,SACAsB,WAAA,oBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,SACAsB,WAAA,sBAAAvH,KAAAgG,iBAAAC,aAIA,QAAAoB,OACA,IAAA,GAEAE,WADAC,QACA,iCAAAxH,KAAAgG,iBAAAC,SAEA,2BAAAjG,KAAAgG,iBAAAC,QAEA,MACA,KAAA,GACAsB,WAAA,iBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,iBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,eAAAvH,KAAAgG,iBAAAC,SAIAsB,WAAAvH,KAAA4G,OAEA,GAAA,KAAA7G,KAAA,CAEA,GADAwH,WAAAH,OAAA,IACAE,MAEA,OADArB,QAAAjG,KAAAgG,iBAAAC,SACAqB,OACA,IAAA,QACAC,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,MACAsB,WAAA,UAAAtB,QAAA,GACA,MACA,KAAA,MACAsB,WAAAtB,QAAA,GACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,IACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,SAKA,QADAA,QAAAjG,KAAA0G,gBAAAT,SACAoB,OACA,IAAA,GAEAE,WADAC,QACA,QAAAvB,QAAA,OAEA,MAAAA,QAAA,MAEA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,IAIAsB,WAAAvH,KAAA4G,OAEA,MAAAW,YCxQAG,MACAC,UACA,OACA,SACA,YACA,SACA,WACA,MACA,WACA,YACA,WACA,OACA,UACA,SACA,SACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,QACA,WACA,WACA,OACA,MACA,QACA,YACA,WACA,YACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,SACA,OACA,OACA,WACA,WACA,MACA,SACA,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,UACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,aACA,WACA,UACA,WACA,OACA,QACA,YACA,YACA,QACA,WACA,aACA,UACA,QACA,YACA,WACA,OACA,YACA,SACA,SACA,UACA,UACA,SACA,YACA,cACA,UACA,WACA,WACA,UACA,QACA,WACA,YACA,OACA,YACA,SACA,OACA,YACA,OACA,WACA,OACA,WACA,YACA,YACA,SACA,SACA,OACA,aACA,UACA,SACA,WACA,UACA,YACA,UACA,UACA,SACA,SACA,YCthBAC,QACAC,kBACA5F,UAAA,EAAA,EAAA,GACAC,UAAA,GAAA,IAAA,IACAG,QAAA,IAAA,IAAA,KACAC,QAAA,IAAA,IAAA,KAEAH,QAAA,IAAA,IAAA,IACAC,MAAA,EAAA,IAAA,KACAG,OAAA,EAAA,IAAA,KAEAC,QAAA,EAAA,IAAA,MAEAsF,kBAAA,WACA,OACA,SAAA,SAAA,SAAA,SACA,SAAA,OAAA,QACA,UACAC,KAAAC,MAAA,EAAAD,KAAAE,YClB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","file":"application.js","sourcesContent":["var mode = 'n';\r\n\r\ntext = function(phrase) {\r\n    if (!mode) mode = 'n';\r\n    var string = {\r\n        n : {\r\n            empty: '-',\r\n            ' 1st' : '1番',\r\n            ' 2nd' : '2番',\r\n            ' 3rd' : '3番',\r\n            ' 4th' : '4番',\r\n            ' 5th' : '5番',\r\n            ' 6th' : '6番',\r\n            ' 7th' : '7番',\r\n            ' 8th' : '8番',\r\n            ' 9th' : '9番',\r\n            'Now batting' : '次のバッタ、',\r\n            'way outside' : '相当外角',\r\n            'outside' : '外角',\r\n            'inside' : '内角',\r\n            'way inside' : '相当内角',\r\n            'way low' : '相当低め',\r\n            'low' : '低め',\r\n            'high' : '高め',\r\n            'way high' : '相当高め',\r\n            'down the middle' : '真ん中',\r\n            'first baseman': 'ファースト',\r\n            'second baseman': 'セカンド',\r\n            'third baseman': 'サード',\r\n            'shortstop': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left fielder': 'レフト',\r\n            'center fielder': 'センター',\r\n            'right fielder': 'ライト',\r\n            'Strike.' : 'ストライク。',\r\n            'Ball.' : 'ボール。',\r\n            'Fouled off.': 'ファウル。',\r\n            'In play.': 'インプレー。',\r\n            'Swinging strike.': '空振り。',\r\n            '4-seam': 'ストレート',\r\n            '2-seam': 'シュート',\r\n            'slider': 'スライダー',\r\n            'fork': 'フォーク',\r\n            'cutter': 'カット',\r\n            'sinker': 'シンカー',\r\n            'curve': 'カーブ',\r\n            'change': 'チェンジ',\r\n            ' struck out looking.': '、見逃し三振。',\r\n            ' walked.': '、フォアボール。',\r\n            ' struck out swinging.': '、空振り三振。',\r\n            'Previous: ': '前：',\r\n            'looks like: ': '予想',\r\n            'breaking ball': '変化球',\r\n            'fastball': 'ストレート',\r\n            'Batting, ': '打球',\r\n            'Catching, pitch selection': '捕球選択',\r\n            'Season': '記録',\r\n            'Game': '今試合',\r\n            'Pitch': '球',\r\n            'Control': '制球',\r\n            'Velocity': '速度',\r\n            'Break': '変化',\r\n            'At Bat :': 'バッタ',\r\n            'On Deck :': '次バッタ',\r\n            'Eye :': '目',\r\n            'Power :': '力',\r\n            'Speed :': '速',\r\n            'Up to Bat': '打席',\r\n            'Fielding': '守備',\r\n            'BA' : '打率',\r\n            'OBP' : '出塁',\r\n            'OPS' : '出長',\r\n            'PA' : '打席',\r\n            'H/2B/3B/HR' : '安／二／三／本',\r\n            'H' : '安',\r\n            '2B' : '二',\r\n            '3B' : '三',\r\n            'HR' : '本塁打',\r\n            'RBI' : '打点',\r\n            'R' : '得点',\r\n            'BB' : '四球',\r\n            'SO' : '三振',\r\n\r\n            'Select Language:' : '言語',\r\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\r\n            'Play Ball!' : 'プレーボール',\r\n            'Spectate the CPU': 'CPU観戦',\r\n\r\n            'Throws/Bats' : ' ',\r\n            'LHP' : '左投',\r\n            'RHP' : '右投',\r\n            'LHB' : '左打',\r\n            'RHB' : '右打',\r\n            'L' : '左投',\r\n            'R ' : '右投',\r\n            ' L ' : '左打',\r\n            ' R ' : '右打',\r\n            '#' : '背番号'\r\n        },\r\n        e : {\r\n            empty: '-',\r\n            'Season': 'Career'\r\n        }\r\n    }[mode][phrase];\r\n    return string ? string : phrase;\r\n};\r\n\r\ntext.fielderShortName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': '一',\r\n            'second': '二',\r\n            'third': '三',\r\n            'short': '遊',\r\n            'pitcher': '投',\r\n            'catcher': '捕',\r\n            'left': '左',\r\n            'center': '中',\r\n            'right': '右'\r\n        }[fielder];\r\n    }\r\n    return fielder;\r\n};\r\n\r\ntext.slash = function() {\r\n    if (mode == 'n') {\r\n        return '・';\r\n    }\r\n    return '/';\r\n};\r\n\r\ntext.fielderLongName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': 'ファースト',\r\n            'second': 'セカンド',\r\n            'third': 'サード',\r\n            'short': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left': 'レフト',\r\n            'center': 'センター',\r\n            'right': 'ライト'\r\n        }[fielder]\r\n    }\r\n    return {\r\n        first : text('first baseman'),\r\n        second : text('second baseman'),\r\n        third : text('third baseman'),\r\n        short : text('shortstop'),\r\n        pitcher : text('pitcher'),\r\n        catcher : text('catcher'),\r\n        left : text('left fielder'),\r\n        center : text('center fielder'),\r\n        right : text('right fielder')\r\n    }[fielder];\r\n};\r\n\r\ntext.comma = function() {\r\n    return {n: '、', e: ', '}[mode];\r\n};\r\ntext.stop = function() {\r\n    return {n: '。', e: '. '}[mode];\r\n};\r\n\r\ntext.namePitch = function(pitch) {\r\n    if (mode == 'e') {\r\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\r\n    }\r\n    if (mode == 'n') {\r\n        return text(pitch.name)\r\n    }\r\n};\r\n\r\ntext.contactResult = function(batter, fielder, bases, outBy) {\r\n    var statement = '';\r\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\r\n    if (mode == 'e') {\r\n        statement += batter;\r\n        if (outBy) {\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'pop':\r\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'fly':\r\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'ground':\r\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'thrown':\r\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\r\n                    } else {\r\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 3:\r\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 4:\r\n                    statement += ' homered to ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    if (mode == 'n') {\r\n        statement += batter + 'は';\r\n        if (outBy) {\r\n            fielder = text.fielderShortName(fielder);\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += 'エラー('+fielder+')で出塁';\r\n                    break;\r\n                case 'pop':\r\n                    statement += 'ポップフライで' + fielder + '飛';\r\n                    break;\r\n                case 'fly':\r\n                    statement += fielder + '飛';\r\n                    break;\r\n                case 'ground':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n                case 'thrown':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n            }\r\n        } else {\r\n            fielder = text.fielderLongName(fielder);\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\r\n                    } else {\r\n                        statement += '安打('+fielder+')' + 'で出塁';\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += '二塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 3:\r\n                    statement += '三塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 4:\r\n                    statement += '本塁打（'+fielder+'）';\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    return statement;\r\n};","data = {\r\n    surnames : [\r\n        'Sato',\r\n        'Suzuki',\r\n        'Takahashi',\r\n        'Tanaka',\r\n        'Watanabe',\r\n        'Ito',\r\n        'Nakamura',\r\n        'Kobayashi',\r\n        'Yamamoto',\r\n        'Kato',\r\n        'Yoshida',\r\n        'Yamada',\r\n        'Sasaki',\r\n        'Yamaguchi',\r\n        'Matsumoto',\r\n        'Inoue',\r\n        'Kimura',\r\n        'Shimizu',\r\n        'Hayashi',\r\n        'Saito',\r\n        'Saito',\r\n        'Yamazaki',\r\n        'Nakajima',\r\n        'Mori',\r\n        'Abe',\r\n        'Ikeda',\r\n        'Hashimoto',\r\n        'Ishikawa',\r\n        'Yamashita',\r\n        'Ogawa',\r\n        'Ishii',\r\n        'Hasegawa',\r\n        'Goto',\r\n        'Okada',\r\n        'Kondo',\r\n        'Maeda',\r\n        'Fujita',\r\n        'Endo',\r\n        'Aoki',\r\n        'Sakamoto',\r\n        'Murakami',\r\n        'Ota',\r\n        'Kaneko',\r\n        'Fujii',\r\n        'Fukuda',\r\n        'Nishimura',\r\n        'Miura',\r\n        'Takeuchi',\r\n        'Nakagawa',\r\n        'Okamoto',\r\n        'Matsuda',\r\n        'Harada',\r\n        'Nakano'\r\n    ],\r\n    surnamesJ : [\r\n        '佐藤',\r\n        '鈴木',\r\n        '高橋',\r\n        '田中',\r\n        '渡辺',\r\n        '伊藤',\r\n        '中村',\r\n        '小林',\r\n        '山本',\r\n        '加藤',\r\n        '吉田',\r\n        '山田',\r\n        '佐々木',\r\n        '山口',\r\n        '松本',\r\n        '井上',\r\n        '木村',\r\n        '清水',\r\n        '林',\r\n        '斉藤',\r\n        '斎藤',\r\n        '山崎',\r\n        '中島',\r\n        '森',\r\n        '阿部',\r\n        '池田',\r\n        '橋本',\r\n        '石川',\r\n        '山下',\r\n        '小川',\r\n        '石井',\r\n        '長谷川',\r\n        '後藤',\r\n        '岡田',\r\n        '近藤',\r\n        '前田',\r\n        '藤田',\r\n        '遠藤',\r\n        '青木',\r\n        '坂本',\r\n        '村上',\r\n        '太田',\r\n        '金子',\r\n        '藤井',\r\n        '福田',\r\n        '西村',\r\n        '三浦',\r\n        '竹内',\r\n        '中川',\r\n        '岡本',\r\n        '松田',\r\n        '原田',\r\n        '中野'\r\n    ],\r\n\r\n    namesJ: [\r\n        '匠',\r\n        'ヒカル',\r\n        'ゆうき',\r\n        '翔太',\r\n        '冬馬',\r\n        '漣',\r\n        '港区',\r\n        'ルイ',\r\n        '樹',\r\n        '賢治',\r\n        '五木',\r\n        '春',\r\n        '光一',\r\n        '宗介',\r\n        'こうすけ',\r\n        '雄太',\r\n        '大樹',\r\n        '瑛太',\r\n        // newer set\r\n        '宏',\r\n        '亨',\r\n        '道夫',\r\n        '聡',\r\n        '昭',\r\n        '茂雄',\r\n        '勝',\r\n        '純一',\r\n        '和夫',\r\n        '勲',\r\n        '省三',\r\n        '隆',\r\n        '達夫',\r\n        '正一',\r\n        '輝夫',\r\n        '俊夫',\r\n        '史郎',\r\n        '勇',\r\n        '義弘',\r\n        '良雄',\r\n        '登',\r\n        '義明',\r\n        '正義',\r\n        '秀夫',\r\n        '肇',\r\n        '月',\r\n        '克己',\r\n        '正男',\r\n        '光男',\r\n        '久',\r\n        '耕三',\r\n        '清',\r\n        '次郎',\r\n        '正博',\r\n        '明子',\r\n        '武',\r\n        '勉',\r\n        '晴夫',\r\n        '裕二',\r\n        '稔',\r\n        '障子',\r\n        '和子',\r\n        '敦',\r\n        '茂',\r\n        '信夫',\r\n        '恵一',\r\n        '忠',\r\n        '高尾',\r\n        '薫',\r\n        'ケン',\r\n        '健治',\r\n        '哲夫',\r\n        '啓二',\r\n        '光一',\r\n        '真一',\r\n        '貞夫',\r\n        '靖',\r\n        '武',\r\n        '雄',\r\n        '文雄',\r\n        '久雄',\r\n        '一朗',\r\n        '健一',\r\n        '正明',\r\n        '五郎',\r\n        '誠',\r\n        '昭夫',\r\n        '誠司',\r\n        '洋一',\r\n        '康夫',\r\n        '誠一',\r\n        '正美',\r\n        '則夫',\r\n        '幸雄',\r\n        '忠雄',\r\n        '仁',\r\n        'シンジ',\r\n        '豊',\r\n        '邦雄',\r\n        '修',\r\n        '雅之',\r\n        '三郎',\r\n        '英治',\r\n        '浩二',\r\n        '栄一',\r\n        '恒夫',\r\n        '義郎',\r\n        '進',\r\n        '博之',\r\n        '巌'\r\n    ],\r\n    names : [\r\n        'Takumi',\r\n        'Hikaru',\r\n        'Yuuki',\r\n        'Shouta',\r\n        'Touma',\r\n        'Ren',\r\n        'Minato',\r\n        'Rui',\r\n        'Tatsuki',\r\n        'Kenji',\r\n        'Itsuki',\r\n        'Haru',\r\n        'Kouichi',\r\n        'Sousuke',\r\n        'Kousuke',\r\n        'Yuuta',\r\n        'Daiki',\r\n        'Eita',\r\n        // newer set\r\n        'Hiroshi',\r\n        'Toru',\r\n        'Michio',\r\n        'Satoshi',\r\n        'Akira',\r\n        'Shigeo',\r\n        'Masaru',\r\n        'Junichi',\r\n        'Kazuo',\r\n        'Isao',\r\n        'Shozo',\r\n        'Takashi',\r\n        'Tatsuo',\r\n        'Shoichi',\r\n        'Teruo',\r\n        'Toshio',\r\n        'Shiro',\r\n        'Isamu',\r\n        'Yoshihiro',\r\n        'Yoshio',\r\n        'Noboru',\r\n        'Yoshiaki',\r\n        'Tadayoshi',\r\n        'Hideo',\r\n        'Hajime',\r\n        'Akari',\r\n        'Katsumi',\r\n        'Masao',\r\n        'Mitsuo',\r\n        'Hisashi',\r\n        'Kozo',\r\n        'Kiyoshi',\r\n        'Jiro',\r\n        'Masahiro',\r\n        'Akiko',\r\n        'Takeshi',\r\n        'Tsutomu',\r\n        'Haruo',\r\n        'Yuji',\r\n        'Minoru',\r\n        'Shoji',\r\n        'Kazuko',\r\n        'Atsushi',\r\n        'Shigeru',\r\n        'Shinobu',\r\n        'Keiichi',\r\n        'Tadashi',\r\n        'Takao',\r\n        'Kaoru',\r\n        'Ken',\r\n        'Kenji',\r\n        'Tetsuo',\r\n        'Keiji',\r\n        'Koichi',\r\n        'Shinichi',\r\n        'Sadao',\r\n        'Yasushi',\r\n        'Takeshi',\r\n        'Yu',\r\n        'Fumio',\r\n        'Hisao',\r\n        'Ichiro',\r\n        'Kenichi',\r\n        'Masaaki',\r\n        'Goro',\r\n        'Makoto',\r\n        'Akio',\r\n        'Seiji',\r\n        'Yoichi',\r\n        'Yasuo',\r\n        'Seiichi',\r\n        'Masami',\r\n        'Norio',\r\n        'Yukio',\r\n        'Tadao',\r\n        'Hitoshi',\r\n        'Shinji',\r\n        'Yutaka',\r\n        'Kunio',\r\n        'Osamu',\r\n        'Masayuki',\r\n        'Saburo',\r\n        'Eiji',\r\n        'Koji',\r\n        'Eiichi',\r\n        'Tsuneo',\r\n        'Yoshio',\r\n        'Susumu',\r\n        'Hiroyuki',\r\n        'Iwao'\r\n    ],\r\n    teamNamesJ : [\r\n        '横浜',\r\n        '大阪',\r\n        '名古屋',\r\n        '札幌',\r\n        '神戸',\r\n        '京都',\r\n        '福岡',\r\n        '川崎',\r\n        '埼玉県',\r\n        '広島',\r\n        '仙台',\r\n        '千葉県',\r\n        '新潟',\r\n        '浜松',\r\n        '静岡',\r\n        '相模原',\r\n        '岡山',\r\n        '熊本',\r\n        '鹿児島',\r\n        '船橋',\r\n        '川口',\r\n        '姫路',\r\n        '松山',\r\n        '宇都宮',\r\n        '松戸',\r\n        '西宮',\r\n        '倉敷',\r\n        '市川',\r\n        '福山',\r\n        '尼崎',\r\n        '金沢',\r\n        '長崎',\r\n        '横須賀',\r\n        '富山',\r\n        '高松',\r\n        '町田',\r\n        '岐阜',\r\n        '枚方',\r\n        '藤沢',\r\n        '柏',\r\n        '豊中',\r\n        '長野県',\r\n        '豊橋',\r\n        '一宮',\r\n        '和歌山',\r\n        '岡崎',\r\n        '宮崎',\r\n        '奈良',\r\n        '吹田',\r\n        '高槻',\r\n        '旭川',\r\n        'いわき',\r\n        '高崎',\r\n        '所沢',\r\n        '川越',\r\n        '秋田',\r\n        '越谷',\r\n        '前橋',\r\n        '那覇',\r\n        '四日市',\r\n        '青森',\r\n        '久留米',\r\n        '春日井',\r\n        '盛岡',\r\n        '明石',\r\n        '福島',\r\n        '下関',\r\n        '長岡',\r\n        '市原',\r\n        '函館',\r\n        '茨城県',\r\n        '福井',\r\n        '加古川',\r\n        '徳島',\r\n        '水戸',\r\n        '平塚',\r\n        '佐世保',\r\n        '呉',\r\n        '八戸',\r\n        '佐賀',\r\n        '寝屋川',\r\n        '富士',\r\n        '春日部',\r\n        '茅ヶ崎',\r\n        '松本',\r\n        '厚木',\r\n        '大和',\r\n        '上尾',\r\n        '宝塚',\r\n        '筑波',\r\n        '沼津',\r\n        '熊谷',\r\n        '伊勢崎',\r\n        '岸和田',\r\n        '鳥取',\r\n        '小田原',\r\n        '鈴鹿',\r\n        '松江',\r\n        '日立'\r\n    ],\r\n    teamNames : [\r\n        'Yokohama',\r\n        'Osaka',\r\n        'Nagoya',\r\n        'Sapporo',\r\n        'Kobe',\r\n        'Kyoto',\r\n        'Fukuoka',\r\n        'Kawasaki',\r\n        'Saitama',\r\n        'Hiroshima',\r\n        'Sendai',\r\n        'Chiba',\r\n        'Niigata',\r\n        'Hamamatsu',\r\n        'Shizuoka',\r\n        'Sagamihara',\r\n        'Okayama',\r\n        'Kumamoto',\r\n        'Kagoshima',\r\n        'Funabashi',\r\n        'Kawaguchi',\r\n        'Himeji',\r\n        'Matsuyama',\r\n        'Utsunomiya',\r\n        'Matsudo',\r\n        'Nishinomiya',\r\n        'Kurashiki',\r\n        'Ichikawa',\r\n        'Fukuyama',\r\n        'Amagasaki',\r\n        'Kanazawa',\r\n        'Nagasaki',\r\n        'Yokosuka',\r\n        'Toyama',\r\n        'Takamatsu',\r\n        'Machida',\r\n        'Gifu',\r\n        'Hirakata',\r\n        'Fujisawa',\r\n        'Kashiwa',\r\n        'Toyonaka',\r\n        'Nagano',\r\n        'Toyohashi',\r\n        'Ichinomiya',\r\n        'Wakayama',\r\n        'Okazaki',\r\n        'Miyazaki',\r\n        'Nara',\r\n        'Suita',\r\n        'Takatsuki',\r\n        'Asahikawa',\r\n        'Iwaki',\r\n        'Takasaki',\r\n        'Tokorozawa',\r\n        'Kawagoe',\r\n        'Akita',\r\n        'Koshigaya',\r\n        'Maebashi',\r\n        'Naha',\r\n        'Yokkaichi',\r\n        'Aomori',\r\n        'Kurume',\r\n        'Kasugai',\r\n        'Morioka',\r\n        'Akashi',\r\n        'Fukushima',\r\n        'Shimonoseki',\r\n        'Nagaoka',\r\n        'Ichihara',\r\n        'Hakodate',\r\n        'Ibaraki',\r\n        'Fukui',\r\n        'Kakogawa',\r\n        'Tokushima',\r\n        'Mito',\r\n        'Hiratsuka',\r\n        'Sasebo',\r\n        'Kure',\r\n        'Hachinohe',\r\n        'Saga',\r\n        'Neyagawa',\r\n        'Fuji',\r\n        'Kasukabe',\r\n        'Chigasaki',\r\n        'Matsumoto',\r\n        'Atsugi',\r\n        'Yamato',\r\n        'Ageo',\r\n        'Takarazuka',\r\n        'Tsukuba',\r\n        'Numazu',\r\n        'Kumagaya',\r\n        'Isesaki',\r\n        'Kishiwada',\r\n        'Tottori',\r\n        'Odawara',\r\n        'Suzuka',\r\n        'Matsue',\r\n        'Hitachi'\r\n    ]\r\n};","helper = {\r\n    pitchDefinitions : {\r\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\r\n        '2-seam' :      [20, -20, 0.90],\r\n        'cutter' :      [-25, -20, 0.95],\r\n        'sinker' :      [-15, -30, 0.95],\r\n\r\n        'slider' :      [-50, -35, 0.9],\r\n        'fork'   :      [0, -70, 0.87],\r\n        'curve'  :      [0, -90, 0.82],\r\n\r\n        'change' :    [0, -10, 0.88]\r\n    },\r\n    selectRandomPitch : function() {\r\n        return [\r\n            '4-seam', '2-seam', 'cutter', 'sinker',\r\n            'slider', 'fork', 'curve',\r\n            'change'\r\n        ][Math.floor(Math.random()*8)]\r\n    }\r\n};\r\n","var Log = function() {\r\n    this.init();\r\n};\r\n\r\nLog.prototype = {\r\n    game : 'instance of Game',\r\n    init : function() {\r\n        this.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n    },\r\n    SINGLE : 'H',\r\n    DOUBLE : '2B',\r\n    TRIPLE : '3B',\r\n    HOMERUN : 'HR',\r\n    WALK : 'BB',\r\n    GROUNDOUT : 'GO',\r\n    FLYOUT : 'FO',\r\n    LINEOUT : 'L',\r\n    RUN : 'R',\r\n    STRIKEOUT : 'SO',\r\n    SACRIFICE : 'SAC',\r\n    REACHED_ON_ERROR : 'ROE',\r\n    FIELDERS_CHOICE : 'FC',\r\n    note : function(note, noteJ) {\r\n        this.record.e.unshift(note);\r\n        this.shortRecord.e = this.record.e.slice(0, 6);\r\n\r\n        this.record.n.unshift(noteJ);\r\n        this.shortRecord.n = this.record.n.slice(0, 6);\r\n    },\r\n    getBatter : function(batter) {\r\n        var order = batter.team.nowBatting;\r\n        order = {\r\n            0 : text(' 1st'),\r\n            1 : text(' 2nd'),\r\n            2 : text(' 3rd'),\r\n            3 : text(' 4th'),\r\n            4 : text(' 5th'),\r\n            5 : text(' 6th'),\r\n            6 : text(' 7th'),\r\n            7 : text(' 8th'),\r\n            8 : text(' 9th')\r\n        }[order];\r\n        var positions = this.longFormFielder();\r\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\r\n            batter.getUniformNumber()+text.comma()+\r\n            batter.getName();\r\n    },\r\n    noteBatter : function(batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getBatter(batter);\r\n        mode = 'n';\r\n        recordJ = this.getBatter(batter);\r\n        mode = m;\r\n        this.note(record, recordJ);\r\n    },\r\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\r\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\r\n        var noComma = false, noComma2 = false;\r\n        var ball = false;\r\n        if (!batterIsLefty) x = 200 - x;\r\n        if (x < 50) {\r\n            say += text('way outside');\r\n            ball = true;\r\n        } else if (x < 70) {\r\n            say += text('outside');\r\n        } else if (x < 100) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 130) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 150) {\r\n            say += text('inside');\r\n        } else {\r\n            say += text('way inside');\r\n            ball = true;\r\n        }\r\n        if (say != '') say += text.comma();\r\n        if (y < 35) {\r\n            say += text('way low');\r\n            ball = true;\r\n        } else if (y < 65) {\r\n            say += text('low');\r\n        } else if (y < 135) {\r\n            say += '';\r\n            noComma2 = true;\r\n        } else if (y < 165) {\r\n            say += text('high');\r\n        } else {\r\n            say += text('way high');\r\n            ball = true;\r\n        }\r\n        if (noComma || noComma2) {\r\n            say = say.split(text.comma()).join('');\r\n            if (noComma && noComma2) {\r\n                say = text('down the middle');\r\n            }\r\n        }\r\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\r\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\r\n        return say;\r\n    },\r\n    notePitch : function(pitchInFlight, batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.e.unshift(record);\r\n        mode = 'n';\r\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.n.unshift(recordJ);\r\n        mode = m;\r\n    },\r\n    getSwing : function(swingResult) {\r\n        var result = '';\r\n        if (swingResult.looking) {\r\n            if (swingResult.strike) {\r\n                result += text('Strike.')\r\n            } else {\r\n                result += text('Ball.')\r\n            }\r\n        } else {\r\n            if (swingResult.contact) {\r\n                if (swingResult.foul) {\r\n                    result += text('Fouled off.')\r\n                } else {\r\n                    if (swingResult.caught) {\r\n                        result += text('In play.')\r\n                    } else {\r\n                        if (swingResult.thrownOut) {\r\n                            result += text('In play.')\r\n                        } else {\r\n                            result += text('In play.')\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                result += text('Swinging strike.')\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    noteSwing : function(swingResult) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getSwing(swingResult);\r\n        this.pitchRecord.e[0] += record;\r\n        mode = 'n';\r\n        recordJ = this.getSwing(swingResult);\r\n        this.pitchRecord.n[0] += recordJ;\r\n        mode = m;\r\n    },\r\n    getPlateAppearanceResult : function(game) {\r\n        var r = game.swingResult;\r\n        var record = '';\r\n        var batter = game.batter.getName();\r\n        if (r.looking) {\r\n            if (r.strike) {\r\n                record = (batter + text(' struck out looking.'));\r\n            } else {\r\n                record = (batter + text(' walked.'));\r\n            }\r\n        } else {\r\n            if (r.contact) {\r\n                var fielder = r.fielder, bases = r.bases, outBy;\r\n                if (r.caught) {\r\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\r\n                        outBy = 'pop';\r\n                    } else {\r\n                        outBy = 'fly';\r\n                    }\r\n                } else {\r\n                    if (r.foul) {\r\n                        // not possible to end PA on foul?\r\n                    } else {\r\n                        if (r.error) {\r\n                            bases = 1;\r\n                            outBy = 'error';\r\n                        } else {\r\n                            if (r.thrownOut) {\r\n                                if (Math.random() > 0.5) {\r\n                                    outBy = 'ground';\r\n                                } else {\r\n                                    outBy = 'thrown';\r\n                                }\r\n                            } else {\r\n                                switch (r.bases) {\r\n                                    case 1:\r\n                                    case 2:\r\n                                    case 3:\r\n                                        bases = r.bases;\r\n                                        break;\r\n                                    case 4:\r\n                                        bases = 4;\r\n                                        if (r.splay < -15) {\r\n                                            fielder = 'left';\r\n                                        } else if (r.splay < 15) {\r\n                                            fielder = 'center';\r\n                                        } else {\r\n                                            fielder = 'right';\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                record = text.contactResult(batter, fielder, bases, outBy);\r\n            } else {\r\n                record = (batter+text(' struck out swinging.'));\r\n            }\r\n        }\r\n        return record;\r\n    },\r\n    notePlateAppearanceResult : function(game) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPlateAppearanceResult(game);\r\n        this.record.e.unshift(record);\r\n        this.pitchRecord.e = [text('Previous: ')+record];\r\n        mode = 'n';\r\n        recordJ = this.getPlateAppearanceResult(game);\r\n        this.record.n.unshift(recordJ);\r\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\r\n        mode = m;\r\n    },\r\n    pointer : 0,\r\n    pitchRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    shortRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    record : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    longFormFielder : function() {\r\n        return {\r\n            first : text('first baseman'),\r\n            second : text('second baseman'),\r\n            third : text('third baseman'),\r\n            short : text('shortstop'),\r\n            pitcher : text('pitcher'),\r\n            catcher : text('catcher'),\r\n            left : text('left fielder'),\r\n            center : text('center fielder'),\r\n            right : text('right fielder')\r\n        }\r\n    }\r\n};","var Animator = function() {\r\n    this.init();\r\n    Math.square = function(x) { return x*x };\r\n};\r\n\r\nAnimator.prototype = {\r\n    name : 'Animator',\r\n    constructor : Animator,\r\n    init : function() {\r\n\r\n    },\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    transitional : function(percent, top, left, step, originLeft, originTop) {\r\n        left = originLeft + Math.square(percent/100)*(left - originLeft);\r\n        top = originTop + Math.square(percent/100)*(top - originTop);\r\n        var padding = Math.max(Math.square(percent/100)*13, 1);\r\n        var borderWidth = Math.max(Math.square(percent/100)*4, 1);\r\n        return {\r\n            top: top,\r\n            left: left ,\r\n            padding: padding + 'px',\r\n            borderWidth: borderWidth + 'px',\r\n            transform: 'translateZ(0)',\r\n            delay: quarter * step,\r\n            ease: Linear.easeNone\r\n        };\r\n    },\r\n    updateFlightPath: function(callback) {\r\n        var $scope = this;\r\n        var game = $scope.y;\r\n        var top = 200-game.pitchTarget.y;\r\n        var left = game.pitchTarget.x;\r\n        var breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x;\r\n        var $baseballs = jQ('.baseball');\r\n        var flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400;\r\n        var originTop = 50;\r\n        var originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        this.pitchTarget = jQ('.main-area .target .baseball.pitch');\r\n        this.pitchBreak = jQ('.main-area .target .baseball.break');\r\n        var pitch = this.pitchTarget, henka = this.pitchBreak;\r\n        var quarter = flightSpeed/4;\r\n\r\n        var transitional = function(percent, top, left, step) {\r\n            left = originLeft + Math.square(percent/100)*(left - originLeft);\r\n            top = originTop + Math.square(percent/100)*(top - originTop);\r\n            var padding = Math.max(Math.square(percent/100)*13, 1);\r\n            var borderWidth = Math.max(Math.square(percent/100)*4, 1);\r\n            return {\r\n                top: top,\r\n                left: left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        };\r\n\r\n        var transitions = [\r\n            transitional(0, top, left, 0),\r\n\r\n            transitional(10, top, left, 0),\r\n            transitional(30, top, left, 1),\r\n            transitional(50, top, left, 2),\r\n\r\n            transitional(100, top, left, 3),\r\n            transitional(100, breakTop, breakLeft, 3)\r\n        ];\r\n\r\n        var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        jQ('.baseball').addClass('spin');\r\n        jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + 1.2) * 1000));\r\n        }\r\n    },\r\n    translateSwingResultToStylePosition: function(swingResult) {\r\n        // CF HR bottom: 95px, centerline: left: 190px;\r\n        var bottom = 0, left = 190;\r\n\r\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\r\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\r\n\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n\r\n        swingResult.bottom = bottom + 'px';\r\n        swingResult.left = left + 'px';\r\n        return swingResult;\r\n    },\r\n    memory : {},\r\n    transitionalTrajectory : function(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\r\n        if (givenApexHeight) Animator.prototype.memory.apexHeight = givenApexHeight;\r\n        if (givenDistance) Animator.prototype.memory.distance = givenDistance;\r\n        if (givenSplayAngle) Animator.prototype.memory.splay = givenSplayAngle;\r\n        var apexHeight = Animator.prototype.memory.apexHeight,\r\n            distance = Animator.prototype.memory.distance,\r\n            splay = Animator.prototype.memory.splay;\r\n        var bottom, left, padding, borderWidth;\r\n        var bounding = Animator.prototype.memory.bounding;\r\n\r\n        bottom = Math.cos(splay / 180 * Math.PI) * percent/100 * distance * 95/300;\r\n        left = Math.sin(splay / 180 * Math.PI) * percent/100 * distance * 95/300 + 190;\r\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50))/100)*(1/0.7071);\r\n        if (bounding) {\r\n            padding = 1;\r\n            borderWidth = 1;\r\n        } else {\r\n            padding = apexRatio * apexHeight/90 * 15;\r\n            borderWidth = 2 + (apexRatio * 2);\r\n        }\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n        return {\r\n            bottom: bottom,\r\n            left: left,\r\n            padding: padding,\r\n            borderWidth: borderWidth,\r\n            delay: quarter * step,\r\n            ease: bounding ? Power4.easeOut : Linear.easeNone\r\n        }\r\n    },\r\n    animateFieldingTrajectory: function(game) {\r\n        var ball = jQ('.splay-indicator-ball');\r\n        TweenMax.killAll();\r\n        var result = game.swingResult;\r\n\r\n        var linearApproximateDragScalar = {\r\n            distance: 1,\r\n            apexHeight: 0.37,\r\n            airTime: 0.66\r\n        };\r\n\r\n        var angle = result.flyAngle,\r\n            distance = Math.abs(result.travelDistance),\r\n            scalar = result.travelDistance < 0 ? -1 : 1;\r\n\r\n        Animator.prototype.memory.bounding = angle < 0;\r\n        angle = 1 + Math.abs(angle);\r\n        if (angle > 90) angle = 180 - angle;\r\n\r\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2*Math.PI*angle/180));\r\n        var apexHeight = velocity*velocity/(2*9.81) * linearApproximateDragScalar.apexHeight;\r\n        var airTime = Math.sqrt(2*apexHeight/9.81) * linearApproximateDragScalar.airTime;\r\n\r\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\r\n        var quarter = airTime/4;\r\n        var transitions = [\r\n            this.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay),\r\n            this.transitionalTrajectory(25, quarter, 0),\r\n            this.transitionalTrajectory(50, quarter, 1),\r\n            this.transitionalTrajectory(75, quarter, 2),\r\n            this.transitionalTrajectory(100, quarter, 3)\r\n        ];\r\n        TweenMax.set(ball, transitions[0]);\r\n        TweenMax.to(ball, quarter, transitions[1]);\r\n        TweenMax.to(ball, quarter, transitions[2]);\r\n        TweenMax.to(ball, quarter, transitions[3]);\r\n        TweenMax.to(ball, quarter, transitions[4]);\r\n\r\n        return game.swingResult;\r\n    }\r\n};","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';","var Field = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nField.prototype = {\r\n    constructor : Field,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.first = null;\r\n        this.second = null;\r\n        this.third = null;\r\n    },\r\n    hasRunnersOn : function() {\r\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\r\n    },\r\n    determineSwingContactResult : function(swing) {\r\n        if (typeof swing == 'undefined') swing = this;\r\n        var x = swing.x, y = swing.y;\r\n        var splayAngle = 90 - 1.5*x;\r\n        var flyAngle = -3*y;\r\n        var power = this.game.batter.skill.offense.power + this.game.batter.eye.bonus;\r\n        var landingDistance = (50 + Math.random()*300 + (power/100)*75) * (1 - Math.abs(flyAngle - 30)/60);\r\n        if (flyAngle < 0 && landingDistance > 120) {\r\n            landingDistance = (landingDistance - 120)/4 + 120;\r\n        }\r\n\r\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\r\n\r\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\r\n        swing.travelDistance = landingDistance;\r\n        swing.flyAngle = flyAngle;\r\n        swing.splay = splayAngle - 90;\r\n\r\n        if (!this.game.debug) {\r\n            this.game.debug = [];\r\n        }\r\n\r\n        var debugData = {}, dd = debugData;\r\n\r\n        if (swing.fielder) {\r\n            var fielder = (this.game.half == top ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\r\n            fielder.fatigue += 4;\r\n            swing.error = false;\r\n            var fieldingEase = fielder.skill.defense.fielding/100,\r\n                throwingEase = (fielder.skill.defense.throwing/100);\r\n            //reach the batted ball?\r\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\r\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\r\n            if (interceptRating > 0 && flyAngle > -10) {\r\n                //caught cleanly?\r\n                if ((100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100) { //error\r\n                    fieldingEase *= 0.5;\r\n                    swing.error = true;\r\n                    swing.caught = false;\r\n                } else {\r\n                    swing.caught = true;\r\n                }\r\n            } else {\r\n                swing.caught = false;\r\n            }\r\n            dd.caught = swing.caught;\r\n            dd.grounder = flyAngle < 0;\r\n\r\n            if (!swing.caught) {\r\n                // intercept rating is negative\r\n                var plus = interceptRating + 100*throwingEase*fieldingEase;\r\n                var gatherAndThrowSuccess = plus - this.game.batter.skill.offense.speed/2 > -50;\r\n\r\n                //log('flew at angle', flyAngle, 'distance of', swing.fielderTravel,\r\n                //    'gives intercept rating of', interceptRating, 'fielder throw/fielding', fielder.skill.defense.throwing, fielder.skill.defense.fielding,\r\n                //    '+', plus, '-runner speed', this.game.batter.skill.offense.speed,\r\n                //    'success', gatherAndThrowSuccess\r\n                //);\r\n\r\n                dd.thrownOut = gatherAndThrowSuccess;\r\n                dd.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\r\n\r\n                if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] != 1 && gatherAndThrowSuccess) {\r\n                    swing.thrownOut = true;\r\n                    swing.error = false;\r\n                } else {\r\n                    swing.thrownOut = false;\r\n                    swing.bases = 1;\r\n                    if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1) {\r\n                        var fieldingReturnDelay = -1*(interceptRating + 100*throwingEase*fieldingEase) + this.game.batter.skill.offense.speed;\r\n                        dd.delay = fieldingReturnDelay;\r\n                        while (fieldingReturnDelay - 125 > 0 && swing.bases < 3) {\r\n                            swing.bases++;\r\n                            fieldingReturnDelay  -= 65;\r\n                        }\r\n                        dd.bases = swing.bases;\r\n                    }\r\n                }\r\n                // log('fielder return delay', fieldingReturnDelay, interceptRating, fielder.skill.defense);\r\n            }\r\n        } else {\r\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\r\n                swing.bases = 4;\r\n                dd.bases = 4;\r\n            } else {\r\n                swing.foul = true;\r\n                swing.caught = false;\r\n            }\r\n        }\r\n        dd.foul = swing.foul;\r\n        this.game.debug.push(dd);\r\n\r\n        return Animator.prototype.animateFieldingTrajectory(this.game);\r\n        // return Animator.prototype.translateSwingResultToStylePosition(swing);\r\n    },\r\n    findFielder : function(splayAngle, landingDistance) {\r\n        if (Math.abs(90 - splayAngle) > 50) return false;\r\n        if (landingDistance < 10 && landingDistance > -20) {\r\n            return 'catcher';\r\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\r\n            return 'pitcher';\r\n        }\r\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\r\n            if (splayAngle < 45 + 23) {\r\n                return 'third';\r\n            } else if (splayAngle < 45 + 23 + 23) {\r\n                return 'short';\r\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\r\n                return 'second';\r\n            } else {\r\n                return 'first';\r\n            }\r\n        } else if (landingDistance > 90 && landingDistance < 310) {\r\n            if (splayAngle < 45 + 28) {\r\n                return 'left';\r\n            } else if (splayAngle < 45 + 28 + 34) {\r\n                return 'center';\r\n            } else {\r\n                return 'right';\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    positions : {\r\n        pitcher : [90, 66],\r\n        catcher : [0, 0],\r\n        first : [90 + 45 - 7, 98],\r\n        second : [90 + 12.5, 130],\r\n        short : [90 - 12.5, 130],\r\n        third : [90 - 45 + 7, 98],\r\n        left : [45 + 14, 280],\r\n        center : [90, 280],\r\n        right : [135 - 14, 280]\r\n    },\r\n    getPolarDistance : function(a, b) {\r\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*Math.PI/180 - b[0]*Math.PI/180));\r\n    },\r\n    fieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var angle = Math.random()*90+45;\r\n        var distance = Math.random()*320;\r\n        var fielder = this.findFielder(angle, distance);\r\n        var data = {};\r\n        if (fielder) {\r\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\r\n                data.fielder = fielderCandidates[1];\r\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\r\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]])\r\n            return data;\r\n        }\r\n    },\r\n    aggregateFieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var selections = [];\r\n        for (var i = 0; i < 1000; i++) {\r\n            var angle = Math.random()*90+45;\r\n            var distance = Math.random()*320;\r\n            var fielder = this.findFielder(angle, distance);\r\n            fielders[fielder].tally++;\r\n            if (fielder) {\r\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\r\n            }\r\n            selections.push([angle, distance]);\r\n            selections.push(this.fielderSelectionTest(angle, distance, true));\r\n        }\r\n        return [fielders, selections];\r\n    },\r\n    fielderSelectionTest : function(angle, distance, returnFielder) {\r\n        var distances = [];\r\n        var minDistance = 300;\r\n        var giraffe = this;\r\n        var fielder = false;\r\n        jQ.each(this.positions, function(position, spot) {\r\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\r\n            distances[thisDistance] = position;\r\n            if (minDistance > thisDistance) {\r\n                minDistance = thisDistance;\r\n                fielder = position;\r\n            }\r\n        });\r\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\r\n    }\r\n};","var Game = function(m) {\r\n    this.init(m);\r\n};\r\n\r\nGame.prototype = {\r\n    constructor : Game,\r\n    gamesIntoSeason : 0,\r\n    humanControl : 'none', //home, away, both, none\r\n    quickMode : true,\r\n    init : function(m) {\r\n        if (m) window.mode = m;\r\n        this.gamesIntoSeason = 60 + Math.floor(Math.random()*20);\r\n        this.field = new Field(this);\r\n        this.teams.away = new Team(this);\r\n        this.teams.home = new Team(this);\r\n        this.log = new Log();\r\n        this.log.game = this;\r\n        this.helper = helper;\r\n        while (this.teams.away.name == this.teams.home.name) {\r\n            this.teams.away.pickName();\r\n        }\r\n        this.umpire = new Umpire(this);\r\n        if (this.humanPitching()) {\r\n            this.stage = 'pitch';\r\n        }\r\n    },\r\n    getInning : function() {\r\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\r\n    },\r\n    humanBatting : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n                break;\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n                break;\r\n        }\r\n    },\r\n    humanPitching : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n                break;\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n                break;\r\n        }\r\n    },\r\n    end : function() {\r\n        this.stage = 'end';\r\n        var e, n;\r\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        n = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        this.log.note(e, n);\r\n    },\r\n    stage : 'pitch', //pitch, swing\r\n    simulateInput : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch') {\r\n            this.autoPitch(callback);\r\n        } else if (this.stage == 'swing') {\r\n            if (typeof this.pitchTarget != 'object') {\r\n                this.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\r\n        }\r\n    },\r\n    simulatePitchAndSwing : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        this.autoPitch(callback);\r\n        var giraffe = this;\r\n        setTimeout(function() {\r\n            if (typeof giraffe.pitchTarget != 'object') {\r\n                giraffe.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback()});\r\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\r\n    },\r\n    receiveInput : function(x, y, callback) {\r\n        if (this.humanControl == 'none') {\r\n            return;\r\n        }\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch' && this.humanPitching()) {\r\n            this.thePitch(x, y, callback);\r\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\r\n            this.theSwing(x, y, callback);\r\n        }\r\n    },\r\n    autoPitchSelect : function() {\r\n        var pitchName = this.helper.selectRandomPitch();\r\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\r\n            pitchName = this.helper.selectRandomPitch();\r\n        }\r\n        var pitch = this.pitcher.pitching[pitchName];\r\n        pitch.name = pitchName;\r\n        this.pitchInFlight = pitch;\r\n    },\r\n    autoPitch : function(callback) {\r\n        var pitcher = this.pitcher;\r\n        if (this.stage == 'pitch') {\r\n            jQ('.baseball').addClass('hide');\r\n            pitcher.windingUp = true;\r\n            this.swingResult.looking = true;\r\n            var windup = jQ('.windup');\r\n            windup.css('width', '100%');\r\n            var giraffe = this;\r\n            this.autoPitchSelect();\r\n            if (Math.random() < 0.5) {\r\n                var x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\r\n            } else {\r\n                x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\r\n            }\r\n            var y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\r\n            if (this.quickMode) {\r\n                giraffe.thePitch(x, y, callback);\r\n            } else {\r\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\r\n                    jQ('.baseball.pitch').removeClass('hide');\r\n                    giraffe.thePitch(x, y, callback);\r\n                    pitcher.windingUp = false;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\r\n        var giraffe = this;\r\n        var bonus = this.batter.eye.bonus || 0,\r\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n\r\n        var x = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15),\r\n            y = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\r\n        if (100*Math.random() < eye) {\r\n            var convergence = 1.35 * 5*eye/100,\r\n                convergenceSum = 1 + convergence;\r\n            deceptiveX = this.pitchInFlight.x;\r\n            deceptiveY = this.pitchInFlight.y;\r\n        } else {\r\n            convergence = 1.35 * 2*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n        }\r\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\r\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\r\n\r\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\r\n\r\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\r\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*this.umpire.count.balls;\r\n        } else {\r\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\r\n        }\r\n        var chance = Math.random()*100,\r\n            totalLikelihood = swingLikelihood - 35 + 10*(this.umpire.count.balls + 2*this.umpire.count.strikes);\r\n\r\n        if (totalLikelihood < chance ) {\r\n            x = -20;\r\n        }\r\n        callback(function() {\r\n            giraffe.theSwing(x, y);\r\n        });\r\n    },\r\n    thePitch : function(x, y, callback) {\r\n        if (this.stage == 'pitch') {\r\n            this.pitcher.fatigue++;\r\n            this.pitchTarget.x = x;\r\n            this.pitchTarget.y = y;\r\n\r\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\r\n            this.battersEye = text('looks like: ')+(Math.abs(this.pitchInFlight.breakDirection[0])+Math.abs(this.pitchInFlight.breakDirection[1]) > 40 ?\r\n                text('breaking ball') : text('fastball'));\r\n\r\n            var control = this.pitchInFlight.control;\r\n            this.pitchTarget.x = Math.min(199.9, Math.max(0.1, this.pitchTarget.x + (50 - Math.random()*100)/(1+control/100)));\r\n            this.pitchTarget.y = Math.min(199.9, Math.max(0.1, this.pitchTarget.y + (50 - Math.random()*100)/(1+control/100)));\r\n\r\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\r\n\r\n            this.pitchInFlight.x = Math.floor(this.pitchTarget.x + (this.pitchInFlight.breakDirection[0]\r\n                *((0.5+Math.random()*this.pitchInFlight.break)/100)));\r\n            this.pitchInFlight.y = Math.floor(this.pitchTarget.y + (this.pitchInFlight.breakDirection[1]\r\n                *((0.5+Math.random()*this.pitchInFlight.break)/100))/(0.5 + this.pitchTarget.y/200));\r\n            this.log.notePitch(this.pitchInFlight, this.batter);\r\n\r\n            this.stage = 'swing';\r\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.batter.team)) {\r\n                callback();\r\n            } else {\r\n                this.autoSwing(x, y, callback);\r\n            }\r\n        }\r\n    },\r\n    battersEye : '',\r\n    theSwing : function(x, y, callback) {\r\n        if (this.stage == 'swing') {\r\n            this.batter.fatigue++;\r\n            this.swingResult = {};\r\n            var bonus = this.batter.eye.bonus || 0,\r\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n            this.swingResult.x = 100 + (x - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.x;\r\n            this.swingResult.y = 100 + (y - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.y;\r\n            this.swingResult.angle = this.setBatAngle();\r\n            if (!(x < 0 || x > 200)) {\r\n                this.swingResult.looking = false;\r\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\r\n                    this.swingResult.contact = true;\r\n                    this.batter.eye.bonus = Math.max(0, eye -\r\n                        Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\r\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\r\n                } else {\r\n                    this.swingResult.contact = false;\r\n                }\r\n            } else {\r\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\r\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\r\n                this.swingResult.contact = false;\r\n                this.swingResult.looking = true;\r\n                this.batter.eye.x = this.pitchInFlight.x;\r\n                this.batter.eye.y = this.pitchInFlight.y;\r\n            }\r\n\r\n            this.log.noteSwing(this.swingResult);\r\n            this.stage = 'pitch';\r\n\r\n            var half = this.half;\r\n            this.umpire.makeCall();\r\n            if (half != this.half) {\r\n                callback = this.startOpponentPitching;\r\n            }\r\n\r\n            if (typeof callback == 'function') {\r\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\r\n                    callback();\r\n                } else {\r\n                    this.autoPitch(callback);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    setBatAngle : function(x, y) {\r\n        var giraffe = this;\r\n        var origin = {\r\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\r\n            y: 160\r\n        };\r\n        var swing = {\r\n            x: x ? x : giraffe.pitchInFlight.x + this.swingResult.x,\r\n            y: y ? y : giraffe.pitchInFlight.y + this.swingResult.y\r\n        };\r\n        return Math.atan((origin.y - swing.y)/(swing.x - origin.x))/Math.PI * 125;\r\n        // 0 is right, positive is clockwise\r\n    },\r\n    debugOut : function() {\r\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder}).length);\r\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder && a.thrownOut}).length);\r\n        log('weak outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && a.thrownOut}).length);\r\n        log('good outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && !a.thrownOut}).length);\r\n        log('singles', this.debug.filter(function(a){return a.bases == 1}).length);\r\n        log('2b', this.debug.filter(function(a){return a.bases == 2}).length);\r\n        log('3b', this.debug.filter(function(a){return a.bases == 3}).length);\r\n        log('homeruns', this.debug.filter(function(a){return a.bases == 4}).length);\r\n\r\n        log('fly outs', this.debug.filter(function(a){return !a.grounder && !a.bases && a.caught}).length);\r\n        log('groundouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\r\n        var SO = this.teams.away.lineup.map(function(p) {return p.atBats}).reduce(function(a, b) {\r\n            return a + b.filter(function(ab) {return ab == 'SO'}).length;\r\n        });\r\n        SO += this.teams.home.lineup.map(function(p) {return p.atBats.filter(function(ab) {return ab == 'SO'})}).reduce(function(a, b) {\r\n            return a.length + b.length;\r\n        });\r\n        log('strikeouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\r\n        log('fouls', this.debug.filter(function(a){return a.foul}).length);\r\n    },\r\n    startOpponentPitching : null, // late function\r\n    pitchTarget : {x : 100, y : 100},\r\n    pitchInFlight : {\r\n        x : 100,\r\n        y : 100,\r\n        breakDirection : [0, 0],\r\n        name : 'slider',\r\n        velocity : 50,\r\n        break : 50,\r\n        control : 50\r\n    },\r\n    swingResult : {\r\n        x : 100, //difference to pitch location\r\n        y : 100, //difference to pitch location\r\n        strike : false,\r\n        foul : false,\r\n        caught : false,\r\n        contact : false,\r\n        looking : true,\r\n        bases : 0,\r\n        fielder : 'short',\r\n        outs : 0\r\n    },\r\n    pitchSelect : function() {\r\n\r\n    },\r\n    field : null,\r\n    teams : {\r\n        away : null,\r\n        home : null\r\n    },\r\n    log : null,\r\n    half : 'top',\r\n    inning : 1,\r\n    scoreboard : {\r\n        away : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        },\r\n        home : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        }\r\n    },\r\n    tally : {\r\n        away : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        },\r\n        home : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        }\r\n    }\r\n};","var Manager = function(team) {\r\n    this.init(team);\r\n};\r\n\r\nManager.prototype = {\r\n    constructor : Manager,\r\n    init : function(team) {\r\n        this.team = team;\r\n    },\r\n    makeLineup : function() {\r\n        var jerseyNumber = 1;\r\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\r\n        this.team.positions.pitcher.position = 'pitcher';\r\n        this.team.positions.pitcher.number = jerseyNumber++;\r\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\r\n        this.team.positions.catcher.position = 'catcher';\r\n        this.team.positions.catcher.number = jerseyNumber++;\r\n        jQ.each(this.team.bench, function(key, player) {\r\n            player.number = jerseyNumber++;\r\n        });\r\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.short.position = 'short';\r\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.second.position = 'second';\r\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.third.position = 'third';\r\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.center.position = 'center';\r\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.left.position = 'left';\r\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.right.position = 'right';\r\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\r\n        this.team.positions.first.position = 'first';\r\n\r\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[3].order = 3;\r\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[2].order = 2;\r\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[4].order = 4;\r\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[0].order = 0;\r\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[1].order = 1;\r\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[5].order = 5;\r\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[6].order = 6;\r\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[7].order = 7;\r\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[8].order = 8;\r\n    },\r\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\r\n        var property;\r\n        mustBeRightHanded = !!mustBeRightHanded;\r\n        if (this.team.bench.length || pool == this.team.positions) {\r\n            var selection = this.team.bench[0];\r\n            var rating = 0;\r\n            var index = 0;\r\n            jQ.each(pool, function(key, player) {\r\n                var skills = skillset.slice();\r\n                var cursor = player.skill;\r\n                while (property = skills.shift()) {\r\n                    cursor = cursor[property];\r\n                }\r\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\r\n                    rating = cursor;\r\n                    selection = player;\r\n                    index = key;\r\n                }\r\n            });\r\n            delete this.team.bench[index];\r\n            if (pool == this.team.bench) {\r\n                this.team.bench = this.team.bench.filter(function(player) {\r\n                    return player instanceof selection.constructor;\r\n                })\r\n            }\r\n            return selection;\r\n        }\r\n        return 'no players available';\r\n    }\r\n};","var Player = function(team) {\r\n    this.init(team);\r\n    var offense = this.skill.offense;\r\n    var defense = this.skill.defense;\r\n    var randBetween = function(a, b, skill) {\r\n        if (offense[skill]) skill = offense[skill];\r\n        if (defense[skill]) skill = defense[skill];\r\n        if (isNaN(skill)) skill = 50;\r\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\r\n        return Math.floor((skill/100) * (b - a) + a);\r\n    };\r\n    // let's just say we're about X games into the season\r\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\r\n    var IP, ER, GS, W, L;\r\n    if (this.skill.pitching > 65) {\r\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\r\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\r\n        if (IP > gamesIntoSeason) {\r\n            //starter\r\n            GS = Math.floor(gamesIntoSeason/5);\r\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\r\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\r\n        } else {\r\n            //reliever\r\n            GS = Math.floor(gamesIntoSeason/40);\r\n            W = randBetween(0, GS*0.6, this.skill.pitching);\r\n            L = randBetween((GS - W), 0, this.skill.pitching);\r\n        }\r\n    }\r\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\r\n    var paRemaining = pa;\r\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\r\n    paRemaining -= bb;\r\n    var ab = paRemaining;\r\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\r\n    paRemaining -= so;\r\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\r\n    paRemaining -= h;\r\n\r\n    var doubles = randBetween(0, h/3, 'power');\r\n    var triples = randBetween(0, h/12, 'speed');\r\n    var hr = Math.max(0, randBetween(-h/5, h/5, 'power'));\r\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\r\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\r\n    var hbp = randBetween(0, gamesIntoSeason/25);\r\n    var sf = randBetween(0, gamesIntoSeason/5, 'eye');\r\n\r\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\r\n    var E = randBetween(chances/10, 0, 'fielding');\r\n    var PO = chances - E;\r\n\r\n    this.stats = {\r\n        pitching : {\r\n            pitches : 0, // in game\r\n            GS : GS,\r\n            W: W,\r\n            L: L,\r\n            strikes : 0, // in game\r\n            K : 0, // in game\r\n            getERA : function() {\r\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3)\r\n            },\r\n            ERA : null,\r\n            ER : ER,\r\n            H : 0, // in game\r\n            HR : 0, // in game\r\n            BB : 0, // in game\r\n            IP : [IP,0]\r\n        },\r\n        batting : {\r\n            getBA : function() {\r\n                return this.h / (Math.max(1, this.ab))\r\n            },\r\n            ba : null,\r\n            getOBP : function() {\r\n                return (h + bb + hbp)/(ab + bb + hbp + sf);\r\n            },\r\n            obp : null,\r\n            getSLG : function() {\r\n                return ((h - doubles - triples - hr) + 2*doubles + 3*triples + 4*hr)/ab\r\n            },\r\n            slg : null,\r\n            pa : pa,\r\n            ab : ab,\r\n            so : so,\r\n            bb : bb,\r\n            h : h,\r\n            '2b' : doubles,\r\n            '3b' : triples,\r\n            hr : hr,\r\n            r : r,\r\n            rbi : rbi,\r\n            hbp : hbp\r\n        },\r\n        fielding : {\r\n            E : E,\r\n            PO : PO, // should depend on position\r\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\r\n        }\r\n    };\r\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\r\n    this.stats.batting.ba = this.stats.batting.getBA();\r\n};\r\n\r\nPlayer.prototype = {\r\n    constructor : Player,\r\n    init : function(team) {\r\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\r\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\r\n        this.team = team;\r\n        this.skill = {};\r\n        this.eye = {\r\n            x: 100,\r\n            y: 100\r\n        };\r\n        this.pitching = {averaging : []};\r\n        this.number = 0;\r\n        this.randomizeSkills(Math.random() > 0.9);\r\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\r\n            nameKey = Math.floor(Math.random()*data.names.length);\r\n\r\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\r\n        var jSurname = data.surnamesJ[surnameKey],\r\n            jGivenName = data.namesJ[nameKey];\r\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\r\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\r\n        this.nameJ = jSurname + jGivenName;\r\n        this.surname = data.surnames[surnameKey];\r\n        this.surnameJ = data.surnamesJ[surnameKey];\r\n        this.atBats = [];\r\n    },\r\n    atBatObjects : [],\r\n    getAtBats : function() {\r\n        if (this.atBats.length > this.atBatObjects.length) {\r\n            this.atBatObjects = this.atBats.map(function(item) {\r\n                return new AtBat(item);\r\n            });\r\n        }\r\n        return this.atBatObjects;\r\n    },\r\n    recordRBI : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\r\n    },\r\n    recordInfieldHit : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\r\n    },\r\n    randomizeSkills : function(hero) {\r\n        this.hero = hero;\r\n        var giraffe = this;\r\n        var randValue = function(isPitching) {\r\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\r\n            if (hero) {\r\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\r\n            }\r\n            if (isPitching) giraffe.pitching.averaging.push(value);\r\n            return value\r\n        };\r\n        this.skill.offense = {\r\n            eye : randValue(),\r\n            power : randValue(),\r\n            speed : randValue()\r\n        };\r\n        this.skill.defense = {\r\n            catching : randValue(),\r\n            fielding : randValue(),\r\n            speed : randValue(),\r\n            throwing : randValue()\r\n        };\r\n        this.pitching.averaging = [];\r\n        this.pitching['4-seam'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        this.pitching['slider'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        if (Math.random() < 0.17) {\r\n            // can pitch!\r\n            if (Math.random() > 0.6) {\r\n                this.pitching['2-seam'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() < 0.18) {\r\n                this.pitching['fork'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() > 0.77) {\r\n                this.pitching['cutter'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() < 0.21) {\r\n                this.pitching['sinker'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n\r\n            if (Math.random() < 0.4) {\r\n                this.pitching['curve'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n\r\n            if (Math.random() < 0.9) {\r\n                this.pitching['change'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n        }\r\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current, index, arr) {\r\n            return prev + current\r\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\r\n        delete this.pitching.averaging;\r\n    },\r\n    getSurname : function() {\r\n        return mode == 'n' ? this.surnameJ : this.surname;\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    getUniformNumber : function() {\r\n        return text('#') + this.number\r\n    },\r\n    getOrder : function() {\r\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\r\n    },\r\n    eye : {},\r\n    fatigue : 0,\r\n    name : '',\r\n    number : 0,\r\n    position : '',\r\n    atBats : []\r\n};","var Team = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nTeam.prototype = {\r\n    constructor : Team,\r\n    init : function(game) {\r\n        this.lineup = [];\r\n        this.bench = [];\r\n        this.bullpen = [];\r\n        this.positions = {\r\n            pitcher : null,\r\n            catcher : null,\r\n            first : null,\r\n            second : null,\r\n            short : null,\r\n            third : null,\r\n            left : null,\r\n            center : null,\r\n            right : null\r\n        };\r\n        this.game = game;\r\n        for (var j = 0; j < 20; j++) {\r\n            this.bench.push(new Player(this));\r\n        }\r\n        this.manager = new Manager(this);\r\n        this.manager.makeLineup();\r\n        this.pickName();\r\n    },\r\n    pickName : function() {\r\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\r\n        this.name = data.teamNames[teamNameIndex];\r\n        this.nameJ = data.teamNamesJ[teamNameIndex];\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    lineup : [],\r\n    positions : {},\r\n    manager : null,\r\n    bench : [],\r\n    bullpen : [],\r\n    nowBatting : 0,\r\n    expanded : 'Player&'\r\n};","var Umpire = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nUmpire.prototype = {\r\n    constructor : Umpire,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.playBall();\r\n    },\r\n    count : {\r\n        strikes : 0,\r\n        balls : 0,\r\n        outs : 0\r\n    },\r\n    playBall : function() {\r\n        this.game.half = 'top';\r\n        this.game.inning = 1;\r\n        this.game.batter = this.game.teams.away.lineup[0];\r\n        this.game.batterRunner = this.game.teams.away.lineup[0];\r\n        this.game.deck = this.game.teams.away.lineup[1];\r\n        this.game.hole = this.game.teams.away.lineup[2];\r\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\r\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\r\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\r\n        this.game.log.note(e, n);\r\n        this.game.log.noteBatter(\r\n            this.game.batter\r\n        );\r\n    },\r\n    makeCall : function() {\r\n        this.says = '';\r\n\r\n        var result = this.game.swingResult;\r\n        var pitcher = this.game.pitcher;\r\n        var batter = this.game.batter;\r\n\r\n        this.game.batterRunner = this.game.batter;\r\n\r\n        pitcher.stats.pitching.pitches++;\r\n        if (result.looking) {\r\n            if (result.strike) {\r\n                this.count.strikes++;\r\n                pitcher.stats.pitching.strikes++;\r\n            } else {\r\n                this.count.balls++;\r\n            }\r\n        } else {\r\n            if (result.contact) {\r\n                if (result.caught) {\r\n                    this.count.outs++;\r\n                    pitcher.stats.pitching.IP[1]++;\r\n                    this.game.batter.atBats.push(Log.prototype.FLYOUT);\r\n                    batter.stats.batting.pa++;\r\n                    batter.stats.batting.ab++;\r\n                    this.newBatter(); //todo: sac fly\r\n                } else {\r\n                    if (result.foul) {\r\n                        this.count.strikes++;\r\n                        pitcher.stats.pitching.strikes++;\r\n                        if (this.count.strikes > 2) this.count.strikes = 2;\r\n                    } else {\r\n                        batter.stats.batting.pa++;\r\n                        batter.stats.batting.ab++;\r\n                        if (result.thrownOut) {\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                            this.newBatter(); //todo: sac\r\n                        }\r\n                        if (result.bases) {\r\n                            if (!result.error) {\r\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\r\n                                pitcher.stats.pitching.H++;\r\n                            } else {\r\n                                if (result.bases > 0) {\r\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away']['E']++;\r\n                                    this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder].stats.fielding.E++;\r\n                                }\r\n                            }\r\n                            var bases = result.bases;\r\n                            switch (bases) {\r\n                                case 0 :\r\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                                    break;\r\n                                case 1 :\r\n                                    if (result.error) {\r\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\r\n                                    } else {\r\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\r\n                                        batter.stats.batting.h++;\r\n                                    }\r\n                                    break;\r\n                                case 2 :\r\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['2b']++;\r\n                                    break;\r\n                                case 3 :\r\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['3b']++;\r\n                                    break;\r\n                                case 4 :\r\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\r\n                                    pitcher.stats.pitching.HR++;\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting.hr++;\r\n                                    break;\r\n                            }\r\n                            if (bases > 0 && bases < 4 && !result.error) {\r\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\r\n                                    batter.recordInfieldHit();\r\n                                }\r\n                            }\r\n                            var onBase = false;\r\n                            while (bases > 0) {\r\n                                bases -= 1;\r\n                                this.advanceRunners();\r\n                                if (!onBase) {\r\n                                    this.reachBase();\r\n                                    onBase = true;\r\n                                }\r\n                            }\r\n                            this.newBatter();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                pitcher.stats.pitching.strikes++;\r\n                this.count.strikes++;\r\n            }\r\n        }\r\n\r\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\r\n\r\n        if (this.count.strikes > 2) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.ab++;\r\n            batter.stats.batting.so++;\r\n            pitcher.stats.pitching.K++;\r\n            this.count.outs++;\r\n            pitcher.stats.pitching.IP[1]++;\r\n            this.count.balls = this.count.strikes = 0;\r\n            this.says = 'Strike three. Batter out.';\r\n            batter.atBats.push(Log.prototype.STRIKEOUT);\r\n            this.newBatter();\r\n        }\r\n        if (this.count.balls > 3) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.bb++;\r\n            pitcher.stats.pitching.BB++;\r\n            this.says = 'Ball four.';\r\n            this.count.balls = this.count.strikes = 0;\r\n            batter.atBats.push(Log.prototype.WALK);\r\n            this.advanceRunners(true).reachBase().newBatter();\r\n        }\r\n        if (this.count.outs > 2) {\r\n            this.says = 'Three outs, change.';\r\n            this.count.outs = this.count.balls = this.count.strikes = 0;\r\n            pitcher.stats.pitching.IP[0]++;\r\n            pitcher.stats.pitching.IP[1] = 0;\r\n            this.changeSides();\r\n        }\r\n    },\r\n    reachBase : function() {\r\n        this.game.field.first = this.game.batter;\r\n        this.game.field.first.fatigue += 2;\r\n        return this;\r\n    },\r\n    advanceRunners : function(isWalk) {\r\n        isWalk = !!isWalk;\r\n\r\n        if (isWalk) {\r\n            if (this.game.field.first) {\r\n                if (this.game.field.second) {\r\n                    if (this.game.field.third) {\r\n                        //bases loaded\r\n                        this.game.batter.recordRBI();\r\n                        this.game.batter.stats.batting.rbi++;\r\n                        this.game.field.third.atBats.push(Log.prototype.RUN);\r\n                        this.game.field.third.stats.batting.r++;\r\n                        this.game.pitcher.stats.pitching.ER++;\r\n                        this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\r\n                        this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\r\n                        this.game.field.third = this.game.field.second;\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    } else {\r\n                        // 1st and second\r\n                        this.game.field.third = this.game.field.second;\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    }\r\n                } else {\r\n                    if (this.game.field.third) {\r\n                        // first and third\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    } else {\r\n                        // first only\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    }\r\n                }\r\n            } else {\r\n                // no one on first\r\n            }\r\n        } else {\r\n            if (this.game.field.third instanceof this.game.batter.constructor) {\r\n                // run scored\r\n                this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\r\n                this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\r\n                if (this.game.batter != this.game.field.third) {\r\n                    this.game.batter.recordRBI();\r\n                    this.game.field.third.atBats.push(Log.prototype.RUN);\r\n                }\r\n                this.game.batter.stats.batting.rbi++;\r\n                this.game.field.third.stats.batting.r++;\r\n                this.game.pitcher.stats.pitching.ER++;\r\n            }\r\n            this.game.field.third = this.game.field.second;\r\n            this.game.field.second = this.game.field.first;\r\n            this.game.field.first = null;\r\n        }\r\n        return this;\r\n    },\r\n    newBatter : function() {\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        this.count.balls = this.count.strikes = 0;\r\n        this.game.log.notePlateAppearanceResult(this.game);\r\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\r\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\r\n        team.nowBatting = (team.nowBatting + 1)%9;\r\n        if (this.count.outs < 3) {\r\n            this.game.log.noteBatter(this.game.batter);\r\n        }\r\n    },\r\n    changeSides : function() {\r\n        this.game.swingResult.looking = true; // hide bat\r\n        this.game.pitchInFlight.x = null; // hide ball\r\n        this.game.pitchInFlight.y = null; // hide ball\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        var offense, defense;\r\n        this.game.field.first = null;\r\n        this.game.field.second = null;\r\n        this.game.field.third = null;\r\n        if (this.game.half == 'top') {\r\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\r\n                return this.game.end();\r\n            }\r\n            this.game.half = 'bottom';\r\n        } else {\r\n            if (this.game.inning + 1 > 9) {\r\n                return this.game.end();\r\n            }\r\n            this.game.inning++;\r\n            this.game.half = 'top';\r\n        }\r\n        offense = this.game.half == 'top' ? 'away' : 'home';\r\n        defense = this.game.half == 'top' ? 'home' : 'away';\r\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\r\n        +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\r\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\r\n        this.game.log.note(e, n);\r\n        var team = this.game.teams[offense];\r\n        this.game.batter = team.lineup[team.nowBatting];\r\n        this.game.batterRunner = this.game.batter;\r\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\r\n\r\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\r\n        this.game.log.noteBatter(this.game.batter);\r\n    },\r\n    says : 'Play ball!',\r\n    game : null\r\n};","var Catcher = function() {\r\n    this.init();\r\n};\r\n\r\nCatcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Fielder = function() {\r\n    this.init();\r\n};\r\n\r\nFielder.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Pitcher = function() {\r\n    this.init();\r\n};\r\n\r\nPitcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Batter = function() {\r\n    this.init();\r\n};\r\n\r\nBatter.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Runner = function() {\r\n    this.init();\r\n};\r\n\r\nRunner.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","IndexController = function($scope) {\r\n    window.s = $scope;\r\n    $scope.t = text;\r\n\r\n    $scope.mode = function(setMode) {\r\n        if (setMode) {\r\n            mode = setMode;\r\n        }\r\n        return mode;\r\n    };\r\n\r\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\r\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\r\n        Game.prototype.quickMode = !!quickMode;\r\n        $scope.y = new Game();\r\n        var game = $scope.y;\r\n        s2.y = game;\r\n        bindMethods();\r\n        jQ('.blocking').remove();\r\n        if (game.humanControl == 'none' && game.quickMode) {\r\n            var n = 0;\r\n            do {\r\n                n++;\r\n                game.simulateInput(function(callback) {\r\n                    typeof callback == 'function' && callback();\r\n                });\r\n            } while (game.stage != 'end' && n < 500);\r\n            log('sim ended');\r\n            game.debugOut();\r\n        } else if (game.humanControl == 'none') {\r\n            var scalar = game.quickMode ? 0.05 : 1;\r\n            var auto = setInterval(function() {\r\n                if (game.stage == 'end') {\r\n                    clearInterval(auto);\r\n                }\r\n                game.simulatePitchAndSwing(function(callback) {\r\n                    game.quickMode ? void 0 : $scope.$apply();\r\n                    $scope.updateFlightPath(callback);\r\n                });\r\n            }, scalar*(game.field.hasRunnersOn() ? 4000 : 5500));\r\n        }\r\n        if (game.humanControl == 'away') {\r\n            game.simulateInput(function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        }\r\n        if (game.humanControl == 'home') {\r\n\r\n        }\r\n    };\r\n\r\n    var bindMethods = function() {\r\n        var game = $scope.y;\r\n        $scope.holdUpTimeouts = [];\r\n        $scope.expandScoreboard = false;\r\n        var animator = new Animator();\r\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\r\n\r\n        // avoid scope cycles, any other easy way?\r\n        var bat = jQ('.target .swing.stance-indicator');\r\n        var showBat = function(event) {\r\n            if (game.humanBatting()) {\r\n                var offset = jQ('.target').offset();\r\n                var relativeOffset = {\r\n                    x : event.pageX - offset.left,\r\n                    y : 200 - (event.pageY - offset.top)\r\n                };\r\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\r\n                bat.css({\r\n                    top: 200-relativeOffset.y + \"px\",\r\n                    left: relativeOffset.x + \"px\",\r\n                    transform: \"rotate(\" + angle + \"deg)\"\r\n                });\r\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\r\n                    bat.hide();\r\n                } else {\r\n                    bat.show();\r\n                }\r\n            }\r\n        };\r\n        var glove = jQ('.target .glove.stance-indicator');\r\n        var showGlove = function(event) {\r\n            if (game.humanPitching()) {\r\n            }\r\n        };\r\n\r\n        $scope.selectPitch = function(pitchName) {\r\n            if (game.stage == 'pitch') {\r\n                game.pitchInFlight = jQ.extend({}, game.pitcher.pitching[pitchName]);\r\n                game.pitchInFlight.name = pitchName;\r\n                game.swingResult.looking = true;\r\n            }\r\n        };\r\n        $scope.allowInput = true;\r\n        $scope.holdUp = function() {\r\n            jQ('.no-swing').click();\r\n            $scope.$apply();\r\n        };\r\n        game.startOpponentPitching = function(callback) {\r\n            $scope.updateFlightPath(callback);\r\n        };\r\n        $scope.indicate = function($event) {\r\n            if (!$scope.allowInput) {\r\n                return;\r\n            }\r\n            if (game.pitcher.windingUp) {\r\n                return;\r\n            }\r\n            if (game.humanPitching()) $scope.allowInput = false;\r\n            var offset = jQ('.target').offset();\r\n            var relativeOffset = {\r\n                x : $event.pageX - offset.left,\r\n                y : 200 - ($event.pageY - offset.top)\r\n            };\r\n            clearTimeout($scope.lastTimeout);\r\n            while ($scope.holdUpTimeouts.length) {\r\n                clearTimeout($scope.holdUpTimeouts.shift());\r\n            }\r\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        };\r\n        $scope.abbreviatePosition = function(position) {\r\n            if (mode == 'e') {\r\n                return {\r\n                    pitcher : 'P',\r\n                    catcher : 'C',\r\n                    first : '1B',\r\n                    second : '2B',\r\n                    short : 'SS',\r\n                    third : '3B',\r\n                    left : 'LF',\r\n                    center : 'CF',\r\n                    right : 'RF'\r\n                }[position];\r\n            }\r\n            return text.fielderShortName(position);\r\n        };\r\n        $scope.$watch('y.humanBatting()', function() {\r\n            if ($scope.y.humanBatting()) {\r\n                jQ('.target').mousemove(showBat);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showBat);\r\n                bat.hide();\r\n            }\r\n        });\r\n        $scope.$watch('y.humanPitching()', function() {\r\n            if ($scope.y.humanPitching()) {\r\n                jQ('.target').mousemove(showGlove);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showGlove);\r\n                glove.hide();\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n};","ScoreboardDirective = function() {\r\n    return {\r\n        scope: {\r\n            game: '=',\r\n            text: '='\r\n        },\r\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\r\n        link: function(scope) {\r\n            window.s2 = scope;\r\n            scope.t = scope.text;\r\n            scope.y = scope.game;\r\n        }\r\n    };\r\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\r\n\r\ncacheKey = Math.floor(Math.random()*1500);\r\n\r\nangular.module('directives', [])\r\n    .directive('scoreboard', ScoreboardDirective);\r\n\r\nangular.module('controllers', [])\r\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
{"version":3,"sources":["text.js","data.js","helper.js","log.js","Animator.js","atBat.js","field.js","game.js","manager.js","player.js","team.js","umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["mode","text","phrase","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","OPS","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","Math","floor","random","Log","this","init","prototype","game","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","shortRecord","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","pitchInFlight","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","splay","notePlateAppearanceResult","pointer","Animator","square","constructor","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","transition","percent","step","padding","max","borderWidth","transform","delay","ease","Linear","easeNone","transitions","horizontalBreak","abs","addClass","css","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","eye","removeClass","humanPitching","holdUpTimeouts","push","holdUp","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","identifier","Field","hasRunnersOn","Player","translateSwingResultToStylePosition","bottom","cos","PI","travelDistance","sin","min","determineSwingContactResult","swing","splayAngle","flyAngle","power","bonus","landingDistance","findFielder","debug","debugData","dd","half","teams","home","away","fatigue","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","grounder","plus","gatherAndThrowSuccess","outFielder","fieldingReturnDelay","a","b","sqrt","fieldingTest","angle","distance","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","i","returnFielder","minDistance","giraffe","each","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","window","field","Team","pickName","umpire","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","hasOwnProperty","windingUp","windup","animate","width","deceptiveX","deceptiveY","count","balls","strikes","convergence","convergenceSum","swingLikelihood","chance","totalLikelihood","breakDirection","battersEye","control","debugOut","filter","length","lineup","map","p","atBats","reduce","ab","pow","makeCall","startOpponentPitching","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","property","selection","rating","index","skills","cursor","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sf","chances","PO","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","hero","randValue","isPitching","value","catching","prev","current","arr","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","deck","hole","says","newBatter","onBase","advanceRunners","reachBase","changeSides","isWalk","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","AIonly","s2","bindMethods","remove","scalar","auto","setInterval","clearInterval","expandScoreboard","animator","bind","selectPitch","extend","click","indicate","$event","offset","relativeOffset","pageX","pageY","clearTimeout","abbreviatePosition","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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iBAAAC,QAEA,MACA,KAAA,GACAsB,WAAA,iBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,iBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,eAAAvH,KAAAgG,iBAAAC,SAIAsB,WAAAvH,KAAA4G,OAEA,GAAA,KAAA7G,KAAA,CAEA,GADAwH,WAAAH,OAAA,IACAE,MAEA,OADArB,QAAAjG,KAAAgG,iBAAAC,SACAqB,OACA,IAAA,QACAC,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,MACAsB,WAAA,UAAAtB,QAAA,GACA,MACA,KAAA,MACAsB,WAAAtB,QAAA,GACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,IACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,SAKA,QADAA,QAAAjG,KAAA0G,gBAAAT,SACAoB,OACA,IAAA,GAEAE,WADAC,QACA,QAAAvB,QAAA,OAEA,MAAAA,QAAA,MAEA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,IAIAsB,WAAAvH,KAAA4G,OAEA,MAAAW,YCxQAG,MACAC,UACA,OACA,SACA,YACA,SACA,WACA,MACA,WACA,YACA,WACA,OACA,UACA,SACA,SACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,QACA,WACA,WACA,OACA,MACA,QACA,YACA,WACA,YACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,SACA,OACA,OACA,WACA,WACA,MACA,SACA,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,UACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,aACA,WACA,UACA,WACA,OACA,QACA,YACA,YACA,QACA,WACA,aACA,UACA,QACA,YACA,WACA,OACA,YACA,SACA,SACA,UACA,UACA,SACA,YACA,cACA,UACA,WACA,WACA,UACA,QACA,WACA,YACA,OACA,YACA,SACA,OACA,YACA,OACA,WACA,OACA,WACA,YACA,YACA,SACA,SACA,OACA,aACA,UACA,SACA,WACA,UACA,YACA,UACA,UACA,SACA,SACA,YCthBAC,QACAC,kBACA5F,UAAA,EAAA,EAAA,GACAC,UAAA,GAAA,IAAA,IACAG,QAAA,IAAA,IAAA,KACAC,QAAA,IAAA,IAAA,KAEAH,QAAA,IAAA,IAAA,IACAC,MAAA,EAAA,IAAA,KACAG,OAAA,EAAA,IAAA,KAEAC,QAAA,EAAA,IAAA,MAEAsF,kBAAA,WACA,OACA,SAAA,SAAA,SAAA,SACA,SAAA,OAAA,QACA,UACAC,KAAAC,MAAA,EAAAD,KAAAE,YClB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","file":"application.js","sourcesContent":["var mode = 'n';\r\n\r\ntext = function(phrase) {\r\n    if (!mode) mode = 'n';\r\n    var string = {\r\n        n : {\r\n            empty: '-',\r\n            ' 1st' : '1番',\r\n            ' 2nd' : '2番',\r\n            ' 3rd' : '3番',\r\n            ' 4th' : '4番',\r\n            ' 5th' : '5番',\r\n            ' 6th' : '6番',\r\n            ' 7th' : '7番',\r\n            ' 8th' : '8番',\r\n            ' 9th' : '9番',\r\n            'Now batting' : '次のバッタ、',\r\n            'way outside' : '相当外角',\r\n            'outside' : '外角',\r\n            'inside' : '内角',\r\n            'way inside' : '相当内角',\r\n            'way low' : '相当低め',\r\n            'low' : '低め',\r\n            'high' : '高め',\r\n            'way high' : '相当高め',\r\n            'down the middle' : '真ん中',\r\n            'first baseman': 'ファースト',\r\n            'second baseman': 'セカンド',\r\n            'third baseman': 'サード',\r\n            'shortstop': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left fielder': 'レフト',\r\n            'center fielder': 'センター',\r\n            'right fielder': 'ライト',\r\n            'Strike.' : 'ストライク。',\r\n            'Ball.' : 'ボール。',\r\n            'Fouled off.': 'ファウル。',\r\n            'In play.': 'インプレー。',\r\n            'Swinging strike.': '空振り。',\r\n            '4-seam': 'ストレイト',\r\n            '2-seam': 'シュート',\r\n            'slider': 'スライダー',\r\n            'fork': 'フォーク',\r\n            'cutter': 'カット',\r\n            'sinker': 'シンカー',\r\n            'curve': 'カーブ',\r\n            'change': 'チェンジ',\r\n            ' struck out looking.': '、見逃し三振。',\r\n            ' walked.': '、フォアボール。',\r\n            ' struck out swinging.': '、空振り三振。',\r\n            'Previous: ': '前：',\r\n            'looks like: ': '予想',\r\n            'breaking ball': '変化球',\r\n            'fastball': 'ストレート',\r\n            'Batting, ': '打球',\r\n            'Catching, pitch selection': '捕球選択',\r\n            'Season': '記録',\r\n            'Game': '今試合',\r\n            'Pitch': '球',\r\n            'Control': '制球',\r\n            'Velocity': '速度',\r\n            'Break': '変化',\r\n            'At Bat :': 'バッタ',\r\n            'On Deck :': '次バッタ',\r\n            'Eye :': '目',\r\n            'Power :': '力',\r\n            'Speed :': '速',\r\n            'Up to Bat': '打席',\r\n            'Fielding': '守備',\r\n            'BA' : '打率',\r\n            'OBP' : '出塁',\r\n            'OPS' : '出長',\r\n            'PA' : '打席',\r\n            'H/2B/3B/HR' : '安／二／三／本',\r\n            'H' : '安',\r\n            '2B' : '二',\r\n            '3B' : '三',\r\n            'HR' : '本塁打',\r\n            'RBI' : '打点',\r\n            'R' : '得点',\r\n            'BB' : '四球',\r\n            'SO' : '三振',\r\n\r\n            'Select Language:' : '言語',\r\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\r\n            'Play Ball!' : 'プレーボール',\r\n            'Spectate the CPU': 'CPU観戦',\r\n\r\n            'Throws/Bats' : ' ',\r\n            'LHP' : '左投',\r\n            'RHP' : '右投',\r\n            'LHB' : '左打',\r\n            'RHB' : '右打',\r\n            'L' : '左投',\r\n            'R ' : '右投',\r\n            ' L ' : '左打',\r\n            ' R ' : '右打',\r\n            '#' : '背番号'\r\n        },\r\n        e : {\r\n            empty: '-',\r\n            'Season': 'Career'\r\n        }\r\n    }[mode][phrase];\r\n    return string ? string : phrase;\r\n};\r\n\r\ntext.fielderShortName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': '一',\r\n            'second': '二',\r\n            'third': '三',\r\n            'short': '遊',\r\n            'pitcher': '投',\r\n            'catcher': '捕',\r\n            'left': '左',\r\n            'center': '中',\r\n            'right': '右'\r\n        }[fielder];\r\n    }\r\n    return fielder;\r\n};\r\n\r\ntext.slash = function() {\r\n    if (mode == 'n') {\r\n        return '・';\r\n    }\r\n    return '/';\r\n};\r\n\r\ntext.fielderLongName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': 'ファースト',\r\n            'second': 'セカンド',\r\n            'third': 'サード',\r\n            'short': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left': 'レフト',\r\n            'center': 'センター',\r\n            'right': 'ライト'\r\n        }[fielder]\r\n    }\r\n    return {\r\n        first : text('first baseman'),\r\n        second : text('second baseman'),\r\n        third : text('third baseman'),\r\n        short : text('shortstop'),\r\n        pitcher : text('pitcher'),\r\n        catcher : text('catcher'),\r\n        left : text('left fielder'),\r\n        center : text('center fielder'),\r\n        right : text('right fielder')\r\n    }[fielder];\r\n};\r\n\r\ntext.comma = function() {\r\n    return {n: '、', e: ', '}[mode];\r\n};\r\ntext.stop = function() {\r\n    return {n: '。', e: '. '}[mode];\r\n};\r\n\r\ntext.namePitch = function(pitch) {\r\n    if (mode == 'e') {\r\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\r\n    }\r\n    if (mode == 'n') {\r\n        return text(pitch.name)\r\n    }\r\n};\r\n\r\ntext.contactResult = function(batter, fielder, bases, outBy) {\r\n    var statement = '';\r\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\r\n    if (mode == 'e') {\r\n        statement += batter;\r\n        if (outBy) {\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'pop':\r\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'fly':\r\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'ground':\r\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'thrown':\r\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\r\n                    } else {\r\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 3:\r\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 4:\r\n                    statement += ' homered to ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    if (mode == 'n') {\r\n        statement += batter + 'は';\r\n        if (outBy) {\r\n            fielder = text.fielderShortName(fielder);\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += 'エラー('+fielder+')で出塁';\r\n                    break;\r\n                case 'pop':\r\n                    statement += 'ポップフライで' + fielder + '飛';\r\n                    break;\r\n                case 'fly':\r\n                    statement += fielder + '飛';\r\n                    break;\r\n                case 'ground':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n                case 'thrown':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n            }\r\n        } else {\r\n            fielder = text.fielderLongName(fielder);\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\r\n                    } else {\r\n                        statement += '安打('+fielder+')' + 'で出塁';\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += '二塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 3:\r\n                    statement += '三塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 4:\r\n                    statement += '本塁打（'+fielder+'）';\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    return statement;\r\n};","data = {\r\n    surnames : [\r\n        'Sato',\r\n        'Suzuki',\r\n        'Takahashi',\r\n        'Tanaka',\r\n        'Watanabe',\r\n        'Ito',\r\n        'Nakamura',\r\n        'Kobayashi',\r\n        'Yamamoto',\r\n        'Kato',\r\n        'Yoshida',\r\n        'Yamada',\r\n        'Sasaki',\r\n        'Yamaguchi',\r\n        'Matsumoto',\r\n        'Inoue',\r\n        'Kimura',\r\n        'Shimizu',\r\n        'Hayashi',\r\n        'Saito',\r\n        'Saito',\r\n        'Yamazaki',\r\n        'Nakajima',\r\n        'Mori',\r\n        'Abe',\r\n        'Ikeda',\r\n        'Hashimoto',\r\n        'Ishikawa',\r\n        'Yamashita',\r\n        'Ogawa',\r\n        'Ishii',\r\n        'Hasegawa',\r\n        'Goto',\r\n        'Okada',\r\n        'Kondo',\r\n        'Maeda',\r\n        'Fujita',\r\n        'Endo',\r\n        'Aoki',\r\n        'Sakamoto',\r\n        'Murakami',\r\n        'Ota',\r\n        'Kaneko',\r\n        'Fujii',\r\n        'Fukuda',\r\n        'Nishimura',\r\n        'Miura',\r\n        'Takeuchi',\r\n        'Nakagawa',\r\n        'Okamoto',\r\n        'Matsuda',\r\n        'Harada',\r\n        'Nakano'\r\n    ],\r\n    surnamesJ : [\r\n        '佐藤',\r\n        '鈴木',\r\n        '高橋',\r\n        '田中',\r\n        '渡辺',\r\n        '伊藤',\r\n        '中村',\r\n        '小林',\r\n        '山本',\r\n        '加藤',\r\n        '吉田',\r\n        '山田',\r\n        '佐々木',\r\n        '山口',\r\n        '松本',\r\n        '井上',\r\n        '木村',\r\n        '清水',\r\n        '林',\r\n        '斉藤',\r\n        '斎藤',\r\n        '山崎',\r\n        '中島',\r\n        '森',\r\n        '阿部',\r\n        '池田',\r\n        '橋本',\r\n        '石川',\r\n        '山下',\r\n        '小川',\r\n        '石井',\r\n        '長谷川',\r\n        '後藤',\r\n        '岡田',\r\n        '近藤',\r\n        '前田',\r\n        '藤田',\r\n        '遠藤',\r\n        '青木',\r\n        '坂本',\r\n        '村上',\r\n        '太田',\r\n        '金子',\r\n        '藤井',\r\n        '福田',\r\n        '西村',\r\n        '三浦',\r\n        '竹内',\r\n        '中川',\r\n        '岡本',\r\n        '松田',\r\n        '原田',\r\n        '中野'\r\n    ],\r\n\r\n    namesJ: [\r\n        '匠',\r\n        'ヒカル',\r\n        'ゆうき',\r\n        '翔太',\r\n        '冬馬',\r\n        '漣',\r\n        '港区',\r\n        'ルイ',\r\n        '樹',\r\n        '賢治',\r\n        '五木',\r\n        '春',\r\n        '光一',\r\n        '宗介',\r\n        'こうすけ',\r\n        '雄太',\r\n        '大樹',\r\n        '瑛太',\r\n        // newer set\r\n        '宏',\r\n        '亨',\r\n        '道夫',\r\n        '聡',\r\n        '昭',\r\n        '茂雄',\r\n        '勝',\r\n        '純一',\r\n        '和夫',\r\n        '勲',\r\n        '省三',\r\n        '隆',\r\n        '達夫',\r\n        '正一',\r\n        '輝夫',\r\n        '俊夫',\r\n        '史郎',\r\n        '勇',\r\n        '義弘',\r\n        '良雄',\r\n        '登',\r\n        '義明',\r\n        '正義',\r\n        '秀夫',\r\n        '肇',\r\n        '月',\r\n        '克己',\r\n        '正男',\r\n        '光男',\r\n        '久',\r\n        '耕三',\r\n        '清',\r\n        '次郎',\r\n        '正博',\r\n        '明子',\r\n        '武',\r\n        '勉',\r\n        '晴夫',\r\n        '裕二',\r\n        '稔',\r\n        '障子',\r\n        '和子',\r\n        '敦',\r\n        '茂',\r\n        '信夫',\r\n        '恵一',\r\n        '忠',\r\n        '高尾',\r\n        '薫',\r\n        'ケン',\r\n        '健治',\r\n        '哲夫',\r\n        '啓二',\r\n        '光一',\r\n        '真一',\r\n        '貞夫',\r\n        '靖',\r\n        '武',\r\n        '雄',\r\n        '文雄',\r\n        '久雄',\r\n        '一朗',\r\n        '健一',\r\n        '正明',\r\n        '五郎',\r\n        '誠',\r\n        '昭夫',\r\n        '誠司',\r\n        '洋一',\r\n        '康夫',\r\n        '誠一',\r\n        '正美',\r\n        '則夫',\r\n        '幸雄',\r\n        '忠雄',\r\n        '仁',\r\n        'シンジ',\r\n        '豊',\r\n        '邦雄',\r\n        '修',\r\n        '雅之',\r\n        '三郎',\r\n        '英治',\r\n        '浩二',\r\n        '栄一',\r\n        '恒夫',\r\n        '義郎',\r\n        '進',\r\n        '博之',\r\n        '巌'\r\n    ],\r\n    names : [\r\n        'Takumi',\r\n        'Hikaru',\r\n        'Yuuki',\r\n        'Shouta',\r\n        'Touma',\r\n        'Ren',\r\n        'Minato',\r\n        'Rui',\r\n        'Tatsuki',\r\n        'Kenji',\r\n        'Itsuki',\r\n        'Haru',\r\n        'Kouichi',\r\n        'Sousuke',\r\n        'Kousuke',\r\n        'Yuuta',\r\n        'Daiki',\r\n        'Eita',\r\n        // newer set\r\n        'Hiroshi',\r\n        'Toru',\r\n        'Michio',\r\n        'Satoshi',\r\n        'Akira',\r\n        'Shigeo',\r\n        'Masaru',\r\n        'Junichi',\r\n        'Kazuo',\r\n        'Isao',\r\n        'Shozo',\r\n        'Takashi',\r\n        'Tatsuo',\r\n        'Shoichi',\r\n        'Teruo',\r\n        'Toshio',\r\n        'Shiro',\r\n        'Isamu',\r\n        'Yoshihiro',\r\n        'Yoshio',\r\n        'Noboru',\r\n        'Yoshiaki',\r\n        'Tadayoshi',\r\n        'Hideo',\r\n        'Hajime',\r\n        'Akari',\r\n        'Katsumi',\r\n        'Masao',\r\n        'Mitsuo',\r\n        'Hisashi',\r\n        'Kozo',\r\n        'Kiyoshi',\r\n        'Jiro',\r\n        'Masahiro',\r\n        'Akiko',\r\n        'Takeshi',\r\n        'Tsutomu',\r\n        'Haruo',\r\n        'Yuji',\r\n        'Minoru',\r\n        'Shoji',\r\n        'Kazuko',\r\n        'Atsushi',\r\n        'Shigeru',\r\n        'Shinobu',\r\n        'Keiichi',\r\n        'Tadashi',\r\n        'Takao',\r\n        'Kaoru',\r\n        'Ken',\r\n        'Kenji',\r\n        'Tetsuo',\r\n        'Keiji',\r\n        'Koichi',\r\n        'Shinichi',\r\n        'Sadao',\r\n        'Yasushi',\r\n        'Takeshi',\r\n        'Yu',\r\n        'Fumio',\r\n        'Hisao',\r\n        'Ichiro',\r\n        'Kenichi',\r\n        'Masaaki',\r\n        'Goro',\r\n        'Makoto',\r\n        'Akio',\r\n        'Seiji',\r\n        'Yoichi',\r\n        'Yasuo',\r\n        'Seiichi',\r\n        'Masami',\r\n        'Norio',\r\n        'Yukio',\r\n        'Tadao',\r\n        'Hitoshi',\r\n        'Shinji',\r\n        'Yutaka',\r\n        'Kunio',\r\n        'Osamu',\r\n        'Masayuki',\r\n        'Saburo',\r\n        'Eiji',\r\n        'Koji',\r\n        'Eiichi',\r\n        'Tsuneo',\r\n        'Yoshio',\r\n        'Susumu',\r\n        'Hiroyuki',\r\n        'Iwao'\r\n    ],\r\n    teamNamesJ : [\r\n        '横浜',\r\n        '大阪',\r\n        '名古屋',\r\n        '札幌',\r\n        '神戸',\r\n        '京都',\r\n        '福岡',\r\n        '川崎',\r\n        '埼玉県',\r\n        '広島',\r\n        '仙台',\r\n        '千葉県',\r\n        '新潟',\r\n        '浜松',\r\n        '静岡',\r\n        '相模原',\r\n        '岡山',\r\n        '熊本',\r\n        '鹿児島',\r\n        '船橋',\r\n        '川口',\r\n        '姫路',\r\n        '松山',\r\n        '宇都宮',\r\n        '松戸',\r\n        '西宮',\r\n        '倉敷',\r\n        '市川',\r\n        '福山',\r\n        '尼崎',\r\n        '金沢',\r\n        '長崎',\r\n        '横須賀',\r\n        '富山',\r\n        '高松',\r\n        '町田',\r\n        '岐阜',\r\n        '枚方',\r\n        '藤沢',\r\n        '柏',\r\n        '豊中',\r\n        '長野県',\r\n        '豊橋',\r\n        '一宮',\r\n        '和歌山',\r\n        '岡崎',\r\n        '宮崎',\r\n        '奈良',\r\n        '吹田',\r\n        '高槻',\r\n        '旭川',\r\n        'いわき',\r\n        '高崎',\r\n        '所沢',\r\n        '川越',\r\n        '秋田',\r\n        '越谷',\r\n        '前橋',\r\n        '那覇',\r\n        '四日市',\r\n        '青森',\r\n        '久留米',\r\n        '春日井',\r\n        '盛岡',\r\n        '明石',\r\n        '福島',\r\n        '下関',\r\n        '長岡',\r\n        '市原',\r\n        '函館',\r\n        '茨城県',\r\n        '福井',\r\n        '加古川',\r\n        '徳島',\r\n        '水戸',\r\n        '平塚',\r\n        '佐世保',\r\n        '呉',\r\n        '八戸',\r\n        '佐賀',\r\n        '寝屋川',\r\n        '富士',\r\n        '春日部',\r\n        '茅ヶ崎',\r\n        '松本',\r\n        '厚木',\r\n        '大和',\r\n        '上尾',\r\n        '宝塚',\r\n        '筑波',\r\n        '沼津',\r\n        '熊谷',\r\n        '伊勢崎',\r\n        '岸和田',\r\n        '鳥取',\r\n        '小田原',\r\n        '鈴鹿',\r\n        '松江',\r\n        '日立'\r\n    ],\r\n    teamNames : [\r\n        'Yokohama',\r\n        'Osaka',\r\n        'Nagoya',\r\n        'Sapporo',\r\n        'Kobe',\r\n        'Kyoto',\r\n        'Fukuoka',\r\n        'Kawasaki',\r\n        'Saitama',\r\n        'Hiroshima',\r\n        'Sendai',\r\n        'Chiba',\r\n        'Niigata',\r\n        'Hamamatsu',\r\n        'Shizuoka',\r\n        'Sagamihara',\r\n        'Okayama',\r\n        'Kumamoto',\r\n        'Kagoshima',\r\n        'Funabashi',\r\n        'Kawaguchi',\r\n        'Himeji',\r\n        'Matsuyama',\r\n        'Utsunomiya',\r\n        'Matsudo',\r\n        'Nishinomiya',\r\n        'Kurashiki',\r\n        'Ichikawa',\r\n        'Fukuyama',\r\n        'Amagasaki',\r\n        'Kanazawa',\r\n        'Nagasaki',\r\n        'Yokosuka',\r\n        'Toyama',\r\n        'Takamatsu',\r\n        'Machida',\r\n        'Gifu',\r\n        'Hirakata',\r\n        'Fujisawa',\r\n        'Kashiwa',\r\n        'Toyonaka',\r\n        'Nagano',\r\n        'Toyohashi',\r\n        'Ichinomiya',\r\n        'Wakayama',\r\n        'Okazaki',\r\n        'Miyazaki',\r\n        'Nara',\r\n        'Suita',\r\n        'Takatsuki',\r\n        'Asahikawa',\r\n        'Iwaki',\r\n        'Takasaki',\r\n        'Tokorozawa',\r\n        'Kawagoe',\r\n        'Akita',\r\n        'Koshigaya',\r\n        'Maebashi',\r\n        'Naha',\r\n        'Yokkaichi',\r\n        'Aomori',\r\n        'Kurume',\r\n        'Kasugai',\r\n        'Morioka',\r\n        'Akashi',\r\n        'Fukushima',\r\n        'Shimonoseki',\r\n        'Nagaoka',\r\n        'Ichihara',\r\n        'Hakodate',\r\n        'Ibaraki',\r\n        'Fukui',\r\n        'Kakogawa',\r\n        'Tokushima',\r\n        'Mito',\r\n        'Hiratsuka',\r\n        'Sasebo',\r\n        'Kure',\r\n        'Hachinohe',\r\n        'Saga',\r\n        'Neyagawa',\r\n        'Fuji',\r\n        'Kasukabe',\r\n        'Chigasaki',\r\n        'Matsumoto',\r\n        'Atsugi',\r\n        'Yamato',\r\n        'Ageo',\r\n        'Takarazuka',\r\n        'Tsukuba',\r\n        'Numazu',\r\n        'Kumagaya',\r\n        'Isesaki',\r\n        'Kishiwada',\r\n        'Tottori',\r\n        'Odawara',\r\n        'Suzuka',\r\n        'Matsue',\r\n        'Hitachi'\r\n    ]\r\n};","helper = {\r\n    pitchDefinitions : {\r\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\r\n        '2-seam' :      [20, -20, 0.90],\r\n        'cutter' :      [-25, -20, 0.95],\r\n        'sinker' :      [-15, -30, 0.95],\r\n\r\n        'slider' :      [-50, -35, 0.9],\r\n        'fork'   :      [0, -70, 0.87],\r\n        'curve'  :      [0, -90, 0.82],\r\n\r\n        'change' :    [0, -10, 0.88]\r\n    },\r\n    selectRandomPitch : function() {\r\n        return [\r\n            '4-seam', '2-seam', 'cutter', 'sinker',\r\n            'slider', 'fork', 'curve',\r\n            'change'\r\n        ][Math.floor(Math.random()*8)]\r\n    }\r\n};\r\n","var Log = function() {\r\n    this.init();\r\n};\r\n\r\nLog.prototype = {\r\n    game : 'instance of Game',\r\n    init : function() {\r\n        this.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n    },\r\n    SINGLE : 'H',\r\n    DOUBLE : '2B',\r\n    TRIPLE : '3B',\r\n    HOMERUN : 'HR',\r\n    WALK : 'BB',\r\n    GROUNDOUT : 'GO',\r\n    FLYOUT : 'FO',\r\n    LINEOUT : 'L',\r\n    RUN : 'R',\r\n    STRIKEOUT : 'SO',\r\n    SACRIFICE : 'SAC',\r\n    REACHED_ON_ERROR : 'ROE',\r\n    FIELDERS_CHOICE : 'FC',\r\n    note : function(note, noteJ) {\r\n        this.record.e.unshift(note);\r\n        this.shortRecord.e = this.record.e.slice(0, 6);\r\n\r\n        this.record.n.unshift(noteJ);\r\n        this.shortRecord.n = this.record.n.slice(0, 6);\r\n    },\r\n    getBatter : function(batter) {\r\n        var order = batter.team.nowBatting;\r\n        order = {\r\n            0 : text(' 1st'),\r\n            1 : text(' 2nd'),\r\n            2 : text(' 3rd'),\r\n            3 : text(' 4th'),\r\n            4 : text(' 5th'),\r\n            5 : text(' 6th'),\r\n            6 : text(' 7th'),\r\n            7 : text(' 8th'),\r\n            8 : text(' 9th')\r\n        }[order];\r\n        var positions = this.longFormFielder();\r\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\r\n            batter.getUniformNumber()+text.comma()+\r\n            batter.getName();\r\n    },\r\n    noteBatter : function(batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getBatter(batter);\r\n        mode = 'n';\r\n        recordJ = this.getBatter(batter);\r\n        mode = m;\r\n        this.note(record, recordJ);\r\n    },\r\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\r\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\r\n        var noComma = false, noComma2 = false;\r\n        var ball = false;\r\n        if (!batterIsLefty) x = 200 - x;\r\n        if (x < 50) {\r\n            say += text('way outside');\r\n            ball = true;\r\n        } else if (x < 70) {\r\n            say += text('outside');\r\n        } else if (x < 100) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 130) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 150) {\r\n            say += text('inside');\r\n        } else {\r\n            say += text('way inside');\r\n            ball = true;\r\n        }\r\n        if (say != '') say += text.comma();\r\n        if (y < 35) {\r\n            say += text('way low');\r\n            ball = true;\r\n        } else if (y < 65) {\r\n            say += text('low');\r\n        } else if (y < 135) {\r\n            say += '';\r\n            noComma2 = true;\r\n        } else if (y < 165) {\r\n            say += text('high');\r\n        } else {\r\n            say += text('way high');\r\n            ball = true;\r\n        }\r\n        if (noComma || noComma2) {\r\n            say = say.split(text.comma()).join('');\r\n            if (noComma && noComma2) {\r\n                say = text('down the middle');\r\n            }\r\n        }\r\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\r\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\r\n        return say;\r\n    },\r\n    notePitch : function(pitchInFlight, batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.e.unshift(record);\r\n        mode = 'n';\r\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.n.unshift(recordJ);\r\n        mode = m;\r\n    },\r\n    getSwing : function(swingResult) {\r\n        var result = '';\r\n        if (swingResult.looking) {\r\n            if (swingResult.strike) {\r\n                result += text('Strike.')\r\n            } else {\r\n                result += text('Ball.')\r\n            }\r\n        } else {\r\n            if (swingResult.contact) {\r\n                if (swingResult.foul) {\r\n                    result += text('Fouled off.')\r\n                } else {\r\n                    if (swingResult.caught) {\r\n                        result += text('In play.')\r\n                    } else {\r\n                        if (swingResult.thrownOut) {\r\n                            result += text('In play.')\r\n                        } else {\r\n                            result += text('In play.')\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                result += text('Swinging strike.')\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    noteSwing : function(swingResult) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getSwing(swingResult);\r\n        this.pitchRecord.e[0] += record;\r\n        mode = 'n';\r\n        recordJ = this.getSwing(swingResult);\r\n        this.pitchRecord.n[0] += recordJ;\r\n        mode = m;\r\n    },\r\n    getPlateAppearanceResult : function(game) {\r\n        var r = game.swingResult;\r\n        var record = '';\r\n        var batter = game.batter.getName();\r\n        if (r.looking) {\r\n            if (r.strike) {\r\n                record = (batter + text(' struck out looking.'));\r\n            } else {\r\n                record = (batter + text(' walked.'));\r\n            }\r\n        } else {\r\n            if (r.contact) {\r\n                var fielder = r.fielder, bases = r.bases, outBy;\r\n                if (r.caught) {\r\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\r\n                        outBy = 'pop';\r\n                    } else {\r\n                        outBy = 'fly';\r\n                    }\r\n                } else {\r\n                    if (r.foul) {\r\n                        // not possible to end PA on foul?\r\n                    } else {\r\n                        if (r.error) {\r\n                            bases = 1;\r\n                            outBy = 'error';\r\n                        } else {\r\n                            if (r.thrownOut) {\r\n                                if (Math.random() > 0.5) {\r\n                                    outBy = 'ground';\r\n                                } else {\r\n                                    outBy = 'thrown';\r\n                                }\r\n                            } else {\r\n                                switch (r.bases) {\r\n                                    case 1:\r\n                                    case 2:\r\n                                    case 3:\r\n                                        bases = r.bases;\r\n                                        break;\r\n                                    case 4:\r\n                                        bases = 4;\r\n                                        if (r.splay < -15) {\r\n                                            fielder = 'left';\r\n                                        } else if (r.splay < 15) {\r\n                                            fielder = 'center';\r\n                                        } else {\r\n                                            fielder = 'right';\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                record = text.contactResult(batter, fielder, bases, outBy);\r\n            } else {\r\n                record = (batter+text(' struck out swinging.'));\r\n            }\r\n        }\r\n        return record;\r\n    },\r\n    notePlateAppearanceResult : function(game) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPlateAppearanceResult(game);\r\n        this.record.e.unshift(record);\r\n        this.pitchRecord.e = [text('Previous: ')+record];\r\n        mode = 'n';\r\n        recordJ = this.getPlateAppearanceResult(game);\r\n        this.record.n.unshift(recordJ);\r\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\r\n        mode = m;\r\n    },\r\n    pointer : 0,\r\n    pitchRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    shortRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    record : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    longFormFielder : function() {\r\n        return {\r\n            first : text('first baseman'),\r\n            second : text('second baseman'),\r\n            third : text('third baseman'),\r\n            short : text('shortstop'),\r\n            pitcher : text('pitcher'),\r\n            catcher : text('catcher'),\r\n            left : text('left fielder'),\r\n            center : text('center fielder'),\r\n            right : text('right fielder')\r\n        }\r\n    }\r\n};","var Animator = function() {\r\n    this.init();\r\n    Math.square = function(x) { return x*x };\r\n};\r\n\r\nAnimator.prototype = {\r\n    name : 'Animator',\r\n    constructor : Animator,\r\n    init : function() {\r\n\r\n    },\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    updateFlightPath: function(callback) {\r\n        var $scope = this;\r\n        var game = $scope.y;\r\n        var top = 200-game.pitchTarget.y;\r\n        var left = game.pitchTarget.x;\r\n        var breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x;\r\n        var $baseballs = jQ('.baseball');\r\n        var flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400;\r\n        var originTop = 50;\r\n        var originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        this.pitchTarget = jQ('.main-area .target .baseball.pitch');\r\n        this.pitchBreak = jQ('.main-area .target .baseball.break');\r\n        var pitch = this.pitchTarget, henka = this.pitchBreak;\r\n        var quarter = flightSpeed/4;\r\n        var transition = function(percent, top, left, step) {\r\n            left = originLeft + Math.square(percent/100)*(left - originLeft);\r\n            top = originTop + Math.square(percent/100)*(top - originTop);\r\n            var padding = Math.max(Math.square(percent/100)*13, 1);\r\n            var borderWidth = Math.max(Math.square(percent/100)*4, 1);\r\n            return {\r\n                top: top,\r\n                left: left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        };\r\n        var transitions = [\r\n            transition(0, top, left, 0),\r\n\r\n            transition(10, top, left, 0),\r\n            transition(30, top, left, 1),\r\n            transition(50, top, left, 2),\r\n\r\n            transition(100, top, left, 3),\r\n            transition(100, breakTop, breakLeft, 3)\r\n        ];\r\n\r\n        var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        jQ('.baseball').addClass('spin');\r\n        jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + 1.2) * 1000));\r\n        }\r\n    }\r\n};","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';","var Field = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nField.prototype = {\r\n    constructor : Field,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.first = null;\r\n        this.second = null;\r\n        this.third = null;\r\n    },\r\n    hasRunnersOn : function() {\r\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\r\n    },\r\n    translateSwingResultToStylePosition: function(swingResult) {\r\n        // CF HR bottom: 95px, centerline: left: 190px;\r\n        var bottom = 0, left = 190;\r\n\r\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\r\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\r\n\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n\r\n        swingResult.bottom = bottom + 'px';\r\n        swingResult.left = left + 'px';\r\n        return swingResult;\r\n    },\r\n    determineSwingContactResult : function(swing) {\r\n        if (typeof swing == 'undefined') swing = this;\r\n        var x = swing.x, y = swing.y;\r\n        var splayAngle = 90 - 1.5*x;\r\n        var flyAngle = -3*y;\r\n        var power = this.game.batter.skill.offense.power + this.game.batter.eye.bonus;\r\n        var landingDistance = (50 + Math.random()*300 + (power/100)*75) * (1 - Math.abs(flyAngle - 30)/60);\r\n\r\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\r\n\r\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\r\n        swing.travelDistance = landingDistance;\r\n        swing.flyAngle = flyAngle;\r\n        swing.splay = splayAngle - 90;\r\n\r\n        if (!this.game.debug) {\r\n            this.game.debug = [];\r\n        }\r\n\r\n        var debugData = {}, dd = debugData;\r\n\r\n        if (swing.fielder) {\r\n            var fielder = (this.game.half == top ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\r\n            fielder.fatigue += 4;\r\n            swing.error = false;\r\n            var fieldingEase = fielder.skill.defense.fielding/100,\r\n                throwingEase = (fielder.skill.defense.throwing/100);\r\n            //reach the batted ball?\r\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\r\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\r\n            if (interceptRating > 0 && flyAngle > -10) {\r\n                //caught cleanly?\r\n                if ((100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100) { //error\r\n                    fieldingEase *= 0.5;\r\n                    swing.error = true;\r\n                    swing.caught = false;\r\n                } else {\r\n                    swing.caught = true;\r\n                }\r\n            } else {\r\n                swing.caught = false;\r\n            }\r\n            dd.caught = swing.caught;\r\n            dd.grounder = flyAngle < 0;\r\n\r\n            if (!swing.caught) {\r\n                // intercept rating is negative\r\n                var plus = interceptRating + 100*throwingEase*fieldingEase;\r\n                var gatherAndThrowSuccess = plus - this.game.batter.skill.offense.speed/2 > -50;\r\n\r\n                //log('flew at angle', flyAngle, 'distance of', swing.fielderTravel,\r\n                //    'gives intercept rating of', interceptRating, 'fielder throw/fielding', fielder.skill.defense.throwing, fielder.skill.defense.fielding,\r\n                //    '+', plus, '-runner speed', this.game.batter.skill.offense.speed,\r\n                //    'success', gatherAndThrowSuccess\r\n                //);\r\n\r\n                dd.thrownOut = gatherAndThrowSuccess;\r\n                dd.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\r\n\r\n                if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] != 1 && gatherAndThrowSuccess) {\r\n                    swing.thrownOut = true;\r\n                    swing.error = false;\r\n                } else {\r\n                    swing.thrownOut = false;\r\n                    swing.bases = 1;\r\n                    if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1) {\r\n                        var fieldingReturnDelay = -1*(interceptRating + 100*throwingEase*fieldingEase) + this.game.batter.skill.offense.speed;\r\n                        dd.delay = fieldingReturnDelay;\r\n                        while (fieldingReturnDelay - 125 > 0 && swing.bases < 3) {\r\n                            swing.bases++;\r\n                            fieldingReturnDelay  -= 65;\r\n                        }\r\n                        dd.bases = swing.bases;\r\n                    }\r\n                }\r\n                // log('fielder return delay', fieldingReturnDelay, interceptRating, fielder.skill.defense);\r\n            }\r\n        } else {\r\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\r\n                swing.bases = 4;\r\n                dd.bases = 4;\r\n            } else {\r\n                swing.foul = true;\r\n                swing.caught = false;\r\n            }\r\n        }\r\n        dd.foul = swing.foul;\r\n        this.game.debug.push(dd);\r\n\r\n        return this.translateSwingResultToStylePosition(swing);\r\n    },\r\n    findFielder : function(splayAngle, landingDistance) {\r\n        if (Math.abs(90 - splayAngle) > 50) return false;\r\n        if (landingDistance < 10 && landingDistance > -20) {\r\n            return 'catcher';\r\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\r\n            return 'pitcher';\r\n        }\r\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\r\n            if (splayAngle < 45 + 23) {\r\n                return 'third';\r\n            } else if (splayAngle < 45 + 23 + 23) {\r\n                return 'short';\r\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\r\n                return 'second';\r\n            } else {\r\n                return 'first';\r\n            }\r\n        } else if (landingDistance > 90 && landingDistance < 310) {\r\n            if (splayAngle < 45 + 28) {\r\n                return 'left';\r\n            } else if (splayAngle < 45 + 28 + 34) {\r\n                return 'center';\r\n            } else {\r\n                return 'right';\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    positions : {\r\n        pitcher : [90, 66],\r\n        catcher : [0, 0],\r\n        first : [90 + 45 - 7, 98],\r\n        second : [90 + 12.5, 130],\r\n        short : [90 - 12.5, 130],\r\n        third : [90 - 45 + 7, 98],\r\n        left : [45 + 14, 280],\r\n        center : [90, 280],\r\n        right : [135 - 14, 280]\r\n    },\r\n    getPolarDistance : function(a, b) {\r\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*Math.PI/180 - b[0]*Math.PI/180));\r\n    },\r\n    fieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var angle = Math.random()*90+45;\r\n        var distance = Math.random()*320;\r\n        var fielder = this.findFielder(angle, distance);\r\n        var data = {};\r\n        if (fielder) {\r\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\r\n                data.fielder = fielderCandidates[1];\r\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\r\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]])\r\n            return data;\r\n        }\r\n    },\r\n    aggregateFieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var selections = [];\r\n        for (var i = 0; i < 1000; i++) {\r\n            var angle = Math.random()*90+45;\r\n            var distance = Math.random()*320;\r\n            var fielder = this.findFielder(angle, distance);\r\n            fielders[fielder].tally++;\r\n            if (fielder) {\r\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\r\n            }\r\n            selections.push([angle, distance]);\r\n            selections.push(this.fielderSelectionTest(angle, distance, true));\r\n        }\r\n        return [fielders, selections];\r\n    },\r\n    fielderSelectionTest : function(angle, distance, returnFielder) {\r\n        var distances = [];\r\n        var minDistance = 300;\r\n        var giraffe = this;\r\n        var fielder = false;\r\n        jQ.each(this.positions, function(position, spot) {\r\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\r\n            distances[thisDistance] = position;\r\n            if (minDistance > thisDistance) {\r\n                minDistance = thisDistance;\r\n                fielder = position;\r\n            }\r\n        });\r\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\r\n    }\r\n};","var Game = function(m) {\r\n    this.init(m);\r\n};\r\n\r\nGame.prototype = {\r\n    constructor : Game,\r\n    gamesIntoSeason : 0,\r\n    humanControl : 'none', //home, away, both, none\r\n    quickMode : true,\r\n    init : function(m) {\r\n        if (m) window.mode = m;\r\n        this.gamesIntoSeason = 60 + Math.floor(Math.random()*20);\r\n        this.field = new Field(this);\r\n        this.teams.away = new Team(this);\r\n        this.teams.home = new Team(this);\r\n        this.log = new Log();\r\n        this.log.game = this;\r\n        this.helper = helper;\r\n        while (this.teams.away.name == this.teams.home.name) {\r\n            this.teams.away.pickName();\r\n        }\r\n        this.umpire = new Umpire(this);\r\n        if (this.humanPitching()) {\r\n            this.stage = 'pitch';\r\n        }\r\n    },\r\n    getInning : function() {\r\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\r\n    },\r\n    humanBatting : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n                break;\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n                break;\r\n        }\r\n    },\r\n    humanPitching : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n                break;\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n                break;\r\n        }\r\n    },\r\n    end : function() {\r\n        this.stage = 'end';\r\n        var e, n;\r\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        n = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        this.log.note(e, n);\r\n    },\r\n    stage : 'pitch', //pitch, swing\r\n    simulateInput : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch') {\r\n            this.autoPitch(callback);\r\n        } else if (this.stage == 'swing') {\r\n            if (typeof this.pitchTarget != 'object') {\r\n                this.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\r\n        }\r\n    },\r\n    simulatePitchAndSwing : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        this.autoPitch(callback);\r\n        var giraffe = this;\r\n        setTimeout(function() {\r\n            if (typeof giraffe.pitchTarget != 'object') {\r\n                giraffe.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback()});\r\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\r\n    },\r\n    receiveInput : function(x, y, callback) {\r\n        if (this.humanControl == 'none') {\r\n            return;\r\n        }\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch' && this.humanPitching()) {\r\n            this.thePitch(x, y, callback);\r\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\r\n            this.theSwing(x, y, callback);\r\n        }\r\n    },\r\n    autoPitchSelect : function() {\r\n        var pitchName = this.helper.selectRandomPitch();\r\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\r\n            pitchName = this.helper.selectRandomPitch();\r\n        }\r\n        var pitch = this.pitcher.pitching[pitchName];\r\n        pitch.name = pitchName;\r\n        this.pitchInFlight = pitch;\r\n    },\r\n    autoPitch : function(callback) {\r\n        var pitcher = this.pitcher;\r\n        if (this.stage == 'pitch') {\r\n            jQ('.baseball').addClass('hide');\r\n            pitcher.windingUp = true;\r\n            this.swingResult.looking = true;\r\n            var windup = jQ('.windup');\r\n            windup.css('width', '100%');\r\n            var giraffe = this;\r\n            this.autoPitchSelect();\r\n            if (Math.random() < 0.5) {\r\n                var x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\r\n            } else {\r\n                x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\r\n            }\r\n            var y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\r\n            if (this.quickMode) {\r\n                giraffe.thePitch(x, y, callback);\r\n            } else {\r\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\r\n                    jQ('.baseball.pitch').removeClass('hide');\r\n                    giraffe.thePitch(x, y, callback);\r\n                    pitcher.windingUp = false;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\r\n        var giraffe = this;\r\n        var bonus = this.batter.eye.bonus || 0,\r\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n\r\n        var x = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15),\r\n            y = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\r\n        if (100*Math.random() < eye) {\r\n            var convergence = 1.35 * 5*eye/100,\r\n                convergenceSum = 1 + convergence;\r\n            deceptiveX = this.pitchInFlight.x;\r\n            deceptiveY = this.pitchInFlight.y;\r\n        } else {\r\n            convergence = 1.35 * 2*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n        }\r\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\r\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\r\n\r\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\r\n\r\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\r\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*this.umpire.count.balls;\r\n        } else {\r\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\r\n        }\r\n        var chance = Math.random()*100,\r\n            totalLikelihood = swingLikelihood - 35 + 10*(this.umpire.count.balls + 2*this.umpire.count.strikes);\r\n\r\n        if (totalLikelihood < chance ) {\r\n            x = -20;\r\n        }\r\n        callback(function() {\r\n            giraffe.theSwing(x, y);\r\n        });\r\n    },\r\n    thePitch : function(x, y, callback) {\r\n        if (this.stage == 'pitch') {\r\n            this.pitcher.fatigue++;\r\n            this.pitchTarget.x = x;\r\n            this.pitchTarget.y = y;\r\n\r\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\r\n            this.battersEye = text('looks like: ')+(Math.abs(this.pitchInFlight.breakDirection[0])+Math.abs(this.pitchInFlight.breakDirection[1]) > 40 ?\r\n                text('breaking ball') : text('fastball'));\r\n\r\n            var control = this.pitchInFlight.control;\r\n            this.pitchTarget.x = Math.min(199.9, Math.max(0.1, this.pitchTarget.x + (50 - Math.random()*100)/(1+control/100)));\r\n            this.pitchTarget.y = Math.min(199.9, Math.max(0.1, this.pitchTarget.y + (50 - Math.random()*100)/(1+control/100)));\r\n\r\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\r\n\r\n            this.pitchInFlight.x = Math.floor(this.pitchTarget.x + (this.pitchInFlight.breakDirection[0]\r\n                *((0.5+Math.random()*this.pitchInFlight.break)/100)));\r\n            this.pitchInFlight.y = Math.floor(this.pitchTarget.y + (this.pitchInFlight.breakDirection[1]\r\n                *((0.5+Math.random()*this.pitchInFlight.break)/100))/(0.5 + this.pitchTarget.y/200));\r\n            this.log.notePitch(this.pitchInFlight, this.batter);\r\n\r\n            this.stage = 'swing';\r\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.batter.team)) {\r\n                callback();\r\n            } else {\r\n                this.autoSwing(x, y, callback);\r\n            }\r\n        }\r\n    },\r\n    battersEye : '',\r\n    debugOut : function() {\r\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder}).length);\r\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder && a.thrownOut}).length);\r\n        log('weak outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && a.thrownOut}).length);\r\n        log('good outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && !a.thrownOut}).length);\r\n        log('singles', this.debug.filter(function(a){return a.bases == 1}).length);\r\n        log('2b', this.debug.filter(function(a){return a.bases == 2}).length);\r\n        log('3b', this.debug.filter(function(a){return a.bases == 3}).length);\r\n        log('homeruns', this.debug.filter(function(a){return a.bases == 4}).length);\r\n\r\n        log('fly outs', this.debug.filter(function(a){return !a.grounder && !a.bases && a.caught}).length);\r\n        log('groundouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\r\n        var SO = this.teams.away.lineup.map(function(p) {return p.atBats}).reduce(function(a, b) {\r\n            return a + b.filter(function(ab) {return ab == 'SO'}).length;\r\n        });\r\n        SO += this.teams.home.lineup.map(function(p) {return p.atBats.filter(function(ab) {return ab == 'SO'})}).reduce(function(a, b) {\r\n            return a.length + b.length;\r\n        });\r\n        log('strikeouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\r\n        log('fouls', this.debug.filter(function(a){return a.foul}).length);\r\n    },\r\n    theSwing : function(x, y, callback) {\r\n        if (this.stage == 'swing') {\r\n            this.batter.fatigue++;\r\n            this.swingResult = {};\r\n            var bonus = this.batter.eye.bonus || 0,\r\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n            this.swingResult.x = 100 + (x - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.x;\r\n            this.swingResult.y = 100 + (y - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.y;\r\n\r\n            if (!(x < 0 || x > 200)) {\r\n                this.swingResult.looking = false;\r\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\r\n                    this.swingResult.contact = true;\r\n                    this.batter.eye.bonus = Math.max(0, eye -\r\n                        Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\r\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\r\n                } else {\r\n                    this.swingResult.contact = false;\r\n                }\r\n            } else {\r\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\r\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\r\n                this.swingResult.contact = false;\r\n                this.swingResult.looking = true;\r\n                this.batter.eye.x = this.pitchInFlight.x;\r\n                this.batter.eye.y = this.pitchInFlight.y;\r\n            }\r\n\r\n            this.log.noteSwing(this.swingResult);\r\n            this.stage = 'pitch';\r\n\r\n            var half = this.half;\r\n            this.umpire.makeCall();\r\n            if (half != this.half) {\r\n                callback = this.startOpponentPitching;\r\n            }\r\n\r\n            if (typeof callback == 'function') {\r\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\r\n                    callback();\r\n                } else {\r\n                    this.autoPitch(callback);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    startOpponentPitching : null, // late function\r\n    pitchTarget : {x : 100, y : 100},\r\n    pitchInFlight : {\r\n        x : 100,\r\n        y : 100,\r\n        breakDirection : [0, 0],\r\n        name : 'slider',\r\n        velocity : 50,\r\n        break : 50,\r\n        control : 50\r\n    },\r\n    swingResult : {\r\n        x : 100, //difference to pitch location\r\n        y : 100, //difference to pitch location\r\n        strike : false,\r\n        foul : false,\r\n        caught : false,\r\n        contact : false,\r\n        looking : true,\r\n        bases : 0,\r\n        fielder : 'short',\r\n        outs : 0\r\n    },\r\n    pitchSelect : function() {\r\n\r\n    },\r\n    field : null,\r\n    teams : {\r\n        away : null,\r\n        home : null\r\n    },\r\n    log : null,\r\n    half : 'top',\r\n    inning : 1,\r\n    scoreboard : {\r\n        away : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        },\r\n        home : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        }\r\n    },\r\n    tally : {\r\n        away : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        },\r\n        home : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        }\r\n    }\r\n};","var Manager = function(team) {\r\n    this.init(team);\r\n};\r\n\r\nManager.prototype = {\r\n    constructor : Manager,\r\n    init : function(team) {\r\n        this.team = team;\r\n    },\r\n    makeLineup : function() {\r\n        var jerseyNumber = 1;\r\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\r\n        this.team.positions.pitcher.position = 'pitcher';\r\n        this.team.positions.pitcher.number = jerseyNumber++;\r\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\r\n        this.team.positions.catcher.position = 'catcher';\r\n        this.team.positions.catcher.number = jerseyNumber++;\r\n        jQ.each(this.team.bench, function(key, player) {\r\n            player.number = jerseyNumber++;\r\n        });\r\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.short.position = 'short';\r\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.second.position = 'second';\r\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.third.position = 'third';\r\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.center.position = 'center';\r\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.left.position = 'left';\r\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.right.position = 'right';\r\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\r\n        this.team.positions.first.position = 'first';\r\n\r\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[3].order = 3;\r\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[2].order = 2;\r\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[4].order = 4;\r\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[0].order = 0;\r\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[1].order = 1;\r\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[5].order = 5;\r\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[6].order = 6;\r\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[7].order = 7;\r\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[8].order = 8;\r\n    },\r\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\r\n        var property;\r\n        mustBeRightHanded = !!mustBeRightHanded;\r\n        if (this.team.bench.length || pool == this.team.positions) {\r\n            var selection = this.team.bench[0];\r\n            var rating = 0;\r\n            var index = 0;\r\n            jQ.each(pool, function(key, player) {\r\n                var skills = skillset.slice();\r\n                var cursor = player.skill;\r\n                while (property = skills.shift()) {\r\n                    cursor = cursor[property];\r\n                }\r\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\r\n                    rating = cursor;\r\n                    selection = player;\r\n                    index = key;\r\n                }\r\n            });\r\n            delete this.team.bench[index];\r\n            if (pool == this.team.bench) {\r\n                this.team.bench = this.team.bench.filter(function(player) {\r\n                    return player instanceof selection.constructor;\r\n                })\r\n            }\r\n            return selection;\r\n        }\r\n        return 'no players available';\r\n    }\r\n};","var Player = function(team) {\r\n    this.init(team);\r\n    var offense = this.skill.offense;\r\n    var defense = this.skill.defense;\r\n    var randBetween = function(a, b, skill) {\r\n        if (offense[skill]) skill = offense[skill];\r\n        if (defense[skill]) skill = defense[skill];\r\n        if (isNaN(skill)) skill = 50;\r\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\r\n        return Math.floor((skill/100) * (b - a) + a);\r\n    };\r\n    // let's just say we're about X games into the season\r\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\r\n    var IP, ER, GS, W, L;\r\n    if (this.skill.pitching > 65) {\r\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\r\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\r\n        if (IP > gamesIntoSeason) {\r\n            //starter\r\n            GS = Math.floor(gamesIntoSeason/5);\r\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\r\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\r\n        } else {\r\n            //reliever\r\n            GS = Math.floor(gamesIntoSeason/40);\r\n            W = randBetween(0, GS*0.6, this.skill.pitching);\r\n            L = randBetween((GS - W), 0, this.skill.pitching);\r\n        }\r\n    }\r\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\r\n    var paRemaining = pa;\r\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\r\n    paRemaining -= bb;\r\n    var ab = paRemaining;\r\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\r\n    paRemaining -= so;\r\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\r\n    paRemaining -= h;\r\n\r\n    var doubles = randBetween(0, h/3, 'power');\r\n    var triples = randBetween(0, h/12, 'speed');\r\n    var hr = Math.max(0, randBetween(-h/5, h/5, 'power'));\r\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\r\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\r\n    var hbp = randBetween(0, gamesIntoSeason/25);\r\n    var sf = randBetween(0, gamesIntoSeason/5, 'eye');\r\n\r\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\r\n    var E = randBetween(chances/10, 0, 'fielding');\r\n    var PO = chances - E;\r\n\r\n    this.stats = {\r\n        pitching : {\r\n            pitches : 0, // in game\r\n            GS : GS,\r\n            W: W,\r\n            L: L,\r\n            strikes : 0, // in game\r\n            K : 0, // in game\r\n            getERA : function() {\r\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3)\r\n            },\r\n            ERA : null,\r\n            ER : ER,\r\n            H : 0, // in game\r\n            HR : 0, // in game\r\n            BB : 0, // in game\r\n            IP : [IP,0]\r\n        },\r\n        batting : {\r\n            getBA : function() {\r\n                return this.h / (Math.max(1, this.ab))\r\n            },\r\n            ba : null,\r\n            getOBP : function() {\r\n                return (h + bb + hbp)/(ab + bb + hbp + sf);\r\n            },\r\n            obp : null,\r\n            getSLG : function() {\r\n                return ((h - doubles - triples - hr) + 2*doubles + 3*triples + 4*hr)/ab\r\n            },\r\n            slg : null,\r\n            pa : pa,\r\n            ab : ab,\r\n            so : so,\r\n            bb : bb,\r\n            h : h,\r\n            '2b' : doubles,\r\n            '3b' : triples,\r\n            hr : hr,\r\n            r : r,\r\n            rbi : rbi,\r\n            hbp : hbp\r\n        },\r\n        fielding : {\r\n            E : E,\r\n            PO : PO, // should depend on position\r\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\r\n        }\r\n    };\r\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\r\n    this.stats.batting.ba = this.stats.batting.getBA();\r\n};\r\n\r\nPlayer.prototype = {\r\n    constructor : Player,\r\n    init : function(team) {\r\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\r\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\r\n        this.team = team;\r\n        this.skill = {};\r\n        this.eye = {\r\n            x: 100,\r\n            y: 100\r\n        };\r\n        this.pitching = {averaging : []};\r\n        this.number = 0;\r\n        this.randomizeSkills(Math.random() > 0.9);\r\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\r\n            nameKey = Math.floor(Math.random()*data.names.length);\r\n\r\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\r\n        var jSurname = data.surnamesJ[surnameKey],\r\n            jGivenName = data.namesJ[nameKey];\r\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\r\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\r\n        this.nameJ = jSurname + jGivenName;\r\n        this.surname = data.surnames[surnameKey];\r\n        this.surnameJ = data.surnamesJ[surnameKey];\r\n        this.atBats = [];\r\n    },\r\n    atBatObjects : [],\r\n    getAtBats : function() {\r\n        if (this.atBats.length > this.atBatObjects.length) {\r\n            this.atBatObjects = this.atBats.map(function(item) {\r\n                return new AtBat(item);\r\n            });\r\n        }\r\n        return this.atBatObjects;\r\n    },\r\n    recordRBI : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\r\n    },\r\n    recordInfieldHit : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\r\n    },\r\n    randomizeSkills : function(hero) {\r\n        this.hero = hero;\r\n        var giraffe = this;\r\n        var randValue = function(isPitching) {\r\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\r\n            if (hero) {\r\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\r\n            }\r\n            if (isPitching) giraffe.pitching.averaging.push(value);\r\n            return value\r\n        };\r\n        this.skill.offense = {\r\n            eye : randValue(),\r\n            power : randValue(),\r\n            speed : randValue()\r\n        };\r\n        this.skill.defense = {\r\n            catching : randValue(),\r\n            fielding : randValue(),\r\n            speed : randValue(),\r\n            throwing : randValue()\r\n        };\r\n        this.pitching.averaging = [];\r\n        this.pitching['4-seam'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        this.pitching['slider'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        if (Math.random() < 0.17) {\r\n            // can pitch!\r\n            if (Math.random() > 0.6) {\r\n                this.pitching['2-seam'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() < 0.18) {\r\n                this.pitching['fork'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() > 0.77) {\r\n                this.pitching['cutter'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() < 0.21) {\r\n                this.pitching['sinker'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n\r\n            if (Math.random() < 0.4) {\r\n                this.pitching['curve'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n\r\n            if (Math.random() < 0.9) {\r\n                this.pitching['change'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n        }\r\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current, index, arr) {\r\n            return prev + current\r\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\r\n        delete this.pitching.averaging;\r\n    },\r\n    getSurname : function() {\r\n        return mode == 'n' ? this.surnameJ : this.surname;\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    getUniformNumber : function() {\r\n        return text('#') + this.number\r\n    },\r\n    getOrder : function() {\r\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\r\n    },\r\n    eye : {},\r\n    fatigue : 0,\r\n    name : '',\r\n    number : 0,\r\n    position : '',\r\n    atBats : []\r\n};","var Team = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nTeam.prototype = {\r\n    constructor : Team,\r\n    init : function(game) {\r\n        this.lineup = [];\r\n        this.bench = [];\r\n        this.bullpen = [];\r\n        this.positions = {\r\n            pitcher : null,\r\n            catcher : null,\r\n            first : null,\r\n            second : null,\r\n            short : null,\r\n            third : null,\r\n            left : null,\r\n            center : null,\r\n            right : null\r\n        };\r\n        this.game = game;\r\n        for (var j = 0; j < 20; j++) {\r\n            this.bench.push(new Player(this));\r\n        }\r\n        this.manager = new Manager(this);\r\n        this.manager.makeLineup();\r\n        this.pickName();\r\n    },\r\n    pickName : function() {\r\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\r\n        this.name = data.teamNames[teamNameIndex];\r\n        this.nameJ = data.teamNamesJ[teamNameIndex];\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    lineup : [],\r\n    positions : {},\r\n    manager : null,\r\n    bench : [],\r\n    bullpen : [],\r\n    nowBatting : 0,\r\n    expanded : 'Player&'\r\n};","var Umpire = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nUmpire.prototype = {\r\n    constructor : Umpire,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.playBall();\r\n    },\r\n    count : {\r\n        strikes : 0,\r\n        balls : 0,\r\n        outs : 0\r\n    },\r\n    playBall : function() {\r\n        this.game.half = 'top';\r\n        this.game.inning = 1;\r\n        this.game.batter = this.game.teams.away.lineup[0];\r\n        this.game.deck = this.game.teams.away.lineup[1];\r\n        this.game.hole = this.game.teams.away.lineup[2];\r\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\r\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\r\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\r\n        this.game.log.note(e, n);\r\n        this.game.log.noteBatter(\r\n            this.game.batter\r\n        );\r\n    },\r\n    makeCall : function() {\r\n        this.says = '';\r\n\r\n        var result = this.game.swingResult;\r\n        var pitcher = this.game.pitcher;\r\n        var batter = this.game.batter;\r\n\r\n        pitcher.stats.pitching.pitches++;\r\n        if (result.looking) {\r\n            if (result.strike) {\r\n                this.count.strikes++;\r\n                pitcher.stats.pitching.strikes++;\r\n            } else {\r\n                this.count.balls++;\r\n            }\r\n        } else {\r\n            if (result.contact) {\r\n                if (result.caught) {\r\n                    this.count.outs++;\r\n                    pitcher.stats.pitching.IP[1]++;\r\n                    this.game.batter.atBats.push(Log.prototype.FLYOUT);\r\n                    batter.stats.batting.pa++;\r\n                    batter.stats.batting.ab++;\r\n                    this.newBatter(); //todo: sac fly\r\n                } else {\r\n                    if (result.foul) {\r\n                        this.count.strikes++;\r\n                        pitcher.stats.pitching.strikes++;\r\n                        if (this.count.strikes > 2) this.count.strikes = 2;\r\n                    } else {\r\n                        batter.stats.batting.pa++;\r\n                        batter.stats.batting.ab++;\r\n                        if (result.thrownOut) {\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                            this.newBatter(); //todo: sac\r\n                        }\r\n                        if (result.bases) {\r\n                            if (!result.error) {\r\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\r\n                                pitcher.stats.pitching.H++;\r\n                            } else {\r\n                                if (result.bases > 0) {\r\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away']['E']++;\r\n                                    this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder].stats.fielding.E++;\r\n                                }\r\n                            }\r\n                            var bases = result.bases;\r\n                            switch (bases) {\r\n                                case 0 :\r\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                                    break;\r\n                                case 1 :\r\n                                    if (result.error) {\r\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\r\n                                    } else {\r\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\r\n                                        batter.stats.batting.h++;\r\n                                    }\r\n                                    break;\r\n                                case 2 :\r\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['2b']++;\r\n                                    break;\r\n                                case 3 :\r\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['3b']++;\r\n                                    break;\r\n                                case 4 :\r\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\r\n                                    pitcher.stats.pitching.HR++;\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting.hr++;\r\n                                    break;\r\n                            }\r\n                            if (bases > 0 && bases < 4 && !result.error) {\r\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\r\n                                    batter.recordInfieldHit();\r\n                                }\r\n                            }\r\n                            var onBase = false;\r\n                            while (bases > 0) {\r\n                                bases -= 1;\r\n                                this.advanceRunners();\r\n                                if (!onBase) {\r\n                                    this.reachBase();\r\n                                    onBase = true;\r\n                                }\r\n                            }\r\n                            this.newBatter();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                pitcher.stats.pitching.strikes++;\r\n                this.count.strikes++;\r\n            }\r\n        }\r\n\r\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\r\n\r\n        if (this.count.strikes > 2) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.ab++;\r\n            batter.stats.batting.so++;\r\n            pitcher.stats.pitching.K++;\r\n            this.count.outs++;\r\n            pitcher.stats.pitching.IP[1]++;\r\n            this.count.balls = this.count.strikes = 0;\r\n            this.says = 'Strike three. Batter out.';\r\n            batter.atBats.push(Log.prototype.STRIKEOUT);\r\n            this.newBatter();\r\n        }\r\n        if (this.count.balls > 3) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.bb++;\r\n            pitcher.stats.pitching.BB++;\r\n            this.says = 'Ball four.';\r\n            this.count.balls = this.count.strikes = 0;\r\n            batter.atBats.push(Log.prototype.WALK);\r\n            this.advanceRunners(true).reachBase().newBatter();\r\n        }\r\n        if (this.count.outs > 2) {\r\n            this.says = 'Three outs, change.';\r\n            this.count.outs = this.count.balls = this.count.strikes = 0;\r\n            pitcher.stats.pitching.IP[0]++;\r\n            pitcher.stats.pitching.IP[1] = 0;\r\n            this.changeSides();\r\n        }\r\n    },\r\n    reachBase : function() {\r\n        this.game.field.first = this.game.batter;\r\n        this.game.field.first.fatigue += 2;\r\n        return this;\r\n    },\r\n    advanceRunners : function(isWalk) {\r\n        isWalk = !!isWalk;\r\n\r\n        if (isWalk) {\r\n            if (this.game.field.first) {\r\n                if (this.game.field.second) {\r\n                    if (this.game.field.third) {\r\n                        //bases loaded\r\n                        this.game.batter.recordRBI();\r\n                        this.game.batter.stats.batting.rbi++;\r\n                        this.game.field.third.atBats.push(Log.prototype.RUN);\r\n                        this.game.field.third.stats.batting.r++;\r\n                        this.game.pitcher.stats.pitching.ER++;\r\n                        this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\r\n                        this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\r\n                        this.game.field.third = this.game.field.second;\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    } else {\r\n                        // 1st and second\r\n                        this.game.field.third = this.game.field.second;\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    }\r\n                } else {\r\n                    if (this.game.field.third) {\r\n                        // first and third\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    } else {\r\n                        // first only\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    }\r\n                }\r\n            } else {\r\n                // no one on first\r\n            }\r\n        } else {\r\n            if (this.game.field.third instanceof this.game.batter.constructor) {\r\n                // run scored\r\n                this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\r\n                this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\r\n                if (this.game.batter != this.game.field.third) {\r\n                    this.game.batter.recordRBI();\r\n                    this.game.field.third.atBats.push(Log.prototype.RUN);\r\n                }\r\n                this.game.batter.stats.batting.rbi++;\r\n                this.game.field.third.stats.batting.r++;\r\n                this.game.pitcher.stats.pitching.ER++;\r\n            }\r\n            this.game.field.third = this.game.field.second;\r\n            this.game.field.second = this.game.field.first;\r\n            this.game.field.first = null;\r\n        }\r\n        return this;\r\n    },\r\n    newBatter : function() {\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        this.count.balls = this.count.strikes = 0;\r\n        this.game.log.notePlateAppearanceResult(this.game);\r\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\r\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\r\n        team.nowBatting = (team.nowBatting + 1)%9;\r\n        if (this.count.outs < 3) {\r\n            this.game.log.noteBatter(this.game.batter);\r\n        }\r\n    },\r\n    changeSides : function() {\r\n        this.game.swingResult.looking = true; // hide bat\r\n        this.game.pitchInFlight.x = null; // hide ball\r\n        this.game.pitchInFlight.y = null; // hide ball\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        var offense, defense;\r\n        this.game.field.first = null;\r\n        this.game.field.second = null;\r\n        this.game.field.third = null;\r\n        if (this.game.half == 'top') {\r\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\r\n                return this.game.end();\r\n            }\r\n            this.game.half = 'bottom';\r\n        } else {\r\n            if (this.game.inning + 1 > 9) {\r\n                return this.game.end();\r\n            }\r\n            this.game.inning++;\r\n            this.game.half = 'top';\r\n        }\r\n        offense = this.game.half == 'top' ? 'away' : 'home';\r\n        defense = this.game.half == 'top' ? 'home' : 'away';\r\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\r\n        +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\r\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\r\n        this.game.log.note(e, n);\r\n        var team = this.game.teams[offense];\r\n        this.game.batter = team.lineup[team.nowBatting];\r\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\r\n\r\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\r\n        this.game.log.noteBatter(this.game.batter);\r\n    },\r\n    says : 'Play ball!',\r\n    game : null\r\n};","var Catcher = function() {\r\n    this.init();\r\n};\r\n\r\nCatcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Fielder = function() {\r\n    this.init();\r\n};\r\n\r\nFielder.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Pitcher = function() {\r\n    this.init();\r\n};\r\n\r\nPitcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Batter = function() {\r\n    this.init();\r\n};\r\n\r\nBatter.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Runner = function() {\r\n    this.init();\r\n};\r\n\r\nRunner.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","IndexController = function($scope) {\r\n    window.s = $scope;\r\n    $scope.t = text;\r\n\r\n    $scope.mode = function(setMode) {\r\n        if (setMode) {\r\n            mode = setMode;\r\n        }\r\n        return mode;\r\n    };\r\n\r\n    $scope.proceedToGame = function(quickMode, AIonly) {\r\n        Game.prototype.humanControl = AIonly ? 'none' : 'home';\r\n        Game.prototype.quickMode = !!quickMode;\r\n        $scope.y = new Game();\r\n        s2.y = $scope.y;\r\n        bindMethods();\r\n        jQ('.blocking').remove();\r\n        if ($scope.y.humanControl == 'none' && $scope.y.quickMode) {\r\n            var game = $scope.y;\r\n            var n = 0;\r\n            do {\r\n                n++;\r\n                game.simulateInput(function(callback) {\r\n                    typeof callback == 'function' && callback();\r\n                });\r\n            } while (game.stage != 'end' && n < 500);\r\n            $scope.y = game;\r\n            log('sim ended');\r\n            $scope.y.debugOut();\r\n        } else if ($scope.y.humanControl == 'none') {\r\n            var scalar = $scope.y.quickMode ? 0.05 : 1;\r\n            var auto = setInterval(function() {\r\n                if ($scope.y.stage == 'end') {\r\n                    clearInterval(auto);\r\n                }\r\n                $scope.y.simulatePitchAndSwing(function(callback) {\r\n                    $scope.y.quickMode ? void 0 : $scope.$apply();\r\n                    $scope.updateFlightPath(callback);\r\n                });\r\n            }, scalar*($scope.y.field.hasRunnersOn() ? 4000 : 5500));\r\n        }\r\n        if ($scope.y.humanControl == 'away') {\r\n            $scope.y.simulateInput(function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        }\r\n        if ($scope.y.humanControl == 'home') {\r\n\r\n        }\r\n    };\r\n\r\n    var bindMethods = function() {\r\n        $scope.holdUpTimeouts = [];\r\n        $scope.expandScoreboard = false;\r\n        var animator = new Animator();\r\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\r\n        $scope.selectPitch = function(pitchName) {\r\n            if ($scope.y.stage == 'pitch') {\r\n                $scope.y.pitchInFlight = jQ.extend({}, $scope.y.pitcher.pitching[pitchName]);\r\n                $scope.y.pitchInFlight.name = pitchName;\r\n                $scope.y.swingResult.looking = true;\r\n            }\r\n        };\r\n        $scope.allowInput = true;\r\n        $scope.holdUp = function() {\r\n            jQ('.no-swing').click();\r\n            $scope.$apply();\r\n            //$scope.y.receiveInput(-20, 100, function() {\r\n            //    $scope.updateFlightPath();\r\n            //});\r\n        };\r\n        $scope.y.startOpponentPitching = function(callback) {\r\n            $scope.updateFlightPath(callback);\r\n        };\r\n        $scope.indicate = function($event) {\r\n            if (!$scope.allowInput) {\r\n                return;\r\n            }\r\n            if ($scope.y.pitcher.windingUp) {\r\n                return;\r\n            }\r\n            if ($scope.y.humanPitching()) $scope.allowInput = false;\r\n            var offset = jQ('.target').offset();\r\n            var relativeOffset = {\r\n                x : $event.pageX - offset.left,\r\n                y : 200 - ($event.pageY - offset.top)\r\n            };\r\n            clearTimeout($scope.lastTimeout);\r\n            while ($scope.holdUpTimeouts.length) {\r\n                clearTimeout($scope.holdUpTimeouts.shift());\r\n            }\r\n            $scope.y.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        };\r\n        $scope.abbreviatePosition = function(position) {\r\n            if (mode == 'e') {\r\n                return {\r\n                    pitcher : 'P',\r\n                    catcher : 'C',\r\n                    first : '1B',\r\n                    second : '2B',\r\n                    short : 'SS',\r\n                    third : '3B',\r\n                    left : 'LF',\r\n                    center : 'CF',\r\n                    right : 'RF'\r\n                }[position];\r\n            }\r\n            return text.fielderShortName(position);\r\n        };\r\n    };\r\n\r\n\r\n};","ScoreboardDirective = function() {\r\n    return {\r\n        scope: {\r\n            game: '=',\r\n            text: '='\r\n        },\r\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\r\n        link: function(scope) {\r\n            window.s2 = scope;\r\n            scope.t = scope.text;\r\n            scope.y = scope.game;\r\n        }\r\n    };\r\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\r\n\r\ncacheKey = Math.floor(Math.random()*1500);\r\n\r\nangular.module('directives', [])\r\n    .directive('scoreboard', ScoreboardDirective);\r\n\r\nangular.module('controllers', [])\r\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
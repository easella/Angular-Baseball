{"version":3,"sources":["namespace.js","text.js","Log.js","data.js","helper.js","Animator.js","Distribution.js","Iterator.js","Mathinator.js","AtBat.js","Field.js","Game.js","Manager.js","Player.js","Team.js","Umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["Yakyuu","exports","mode","text","phrase","override","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","first","second","third","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","getBattersEye","game","eye","breaking","Math","abs","pitchInFlight","breakDirection","fielderShortName","fielder","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","sacrificeAdvances","out","statement","infield","indexOf","plural","length","runner","is","join","map","base","fielderLong","Log","this","init","prototype","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","rec","shortRecord","stabilized","concat","rec2","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","batterIsLefty","x","y","say","noComma","noComma2","ball","split","notePitch","bats","pop","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","flyAngle","error","random","splay","fieldersChoice","push","outs","notePlateAppearanceResult","pointer","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","floor","Animator","identifier","constructor","console","TIME_FROM_SET","TIME_FROM_WINDUP","HOLD_UP_ALLOWANCE","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","pitchTransition","Mathinator","transitions","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","addClass","removeClass","humanPitching","holdUpTimeouts","holdUp","animateFieldingTrajectory","killAll","linearApproximateDragScalar","distance","apexHeight","airTime","angle","travelDistance","scalar","memory","bounding","sqrt","sin","PI","velocityVerticalComponent","RADIAN","mathinator","transitionalTrajectory","fn","hasOwnProperty","Distribution","chance","scale","defense","fielding","landingDistance","power","pitchLocation","centralizedNumber","swingLikelihood","umpire","min","count","balls","max","strikes","pitchControl","target","control","breakEffect","effect","pitching","cpuSwing","actual","swing","Iterator","each","collection","keys","i","Array","Object","square","SPLAY_INDICATOR_LEFT","getAngularOffset","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","getPolarDistance","a","b","radians","battingAngle","origin","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","translateSwingResultToStylePosition","_top","_left","transform","fielderReturnDelay","throwing","intercept","baseRunningTime","speed","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","Field","hasRunnersOn","Player","determineSwingContactResult","splayAngle","bonus","findFielder","half","teams","home","away","fatigue","fieldingEase","throwingEase","fielderTravel","interceptRating","sacrificeThrowInTime","getBaseRunningTime","fieldingReturnDelay","fieldingDelay","outFielder","difficulty","fieldingTest","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","returnFielder","minDistance","giraffe","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","debug","window","field","Team","pickName","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","windingUp","windup","css","animate","width","deceptiveX","deceptiveY","convergence","convergenceSum","swingProbability","battersEye","setBatAngle","recalculation","precision","pow","makeCall","startOpponentPitching","debugOut","filter","PO","hitters","lineup","atBats","LO","ab","FO","GO","break","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","requiredThrowingHandedness","selection","rating","index","skills","cursor","property","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sac","chances","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","hero","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","randValue","isPitching","value","catching","reduce","prev","current","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","batterRunner","deck","hole","says","advanceRunners","newBatter","reachBase","hitByPitch","changeSides","isWalk","canAdvance","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","spectateCpu","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","show","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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AAA7B,KAAA,WACA8B,QAAA9B,KAAA,WACA+G,KAAA/G,KAAA,gBACAgH,OAAAhH,KAAA,kBACAiH,MAAAjH,KAAA,oBAKAF,QAAA+I,IAAAA,ICpSAgF,MACAC,UACA,OACA,SACA,YACA,SACA,WACA,MACA,WACA,YACA,WACA,OACA,UACA,SACA,SACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,QACA,WACA,WACA,OACA,MACA,QACA,YACA,WACA,YACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,SACA,OACA,OACA,WACA,WACA,MACA,SACA,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WA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","file":"application.js","sourcesContent":["Yakyuu = {};\r\nexports = {};","var mode = 'n';\r\n\r\ntext = function(phrase, override) {\r\n    if (!mode) mode = 'n';\r\n    var string = {\r\n        n : {\r\n            empty: '-',\r\n            ' 1st' : '1番',\r\n            ' 2nd' : '2番',\r\n            ' 3rd' : '3番',\r\n            ' 4th' : '4番',\r\n            ' 5th' : '5番',\r\n            ' 6th' : '6番',\r\n            ' 7th' : '7番',\r\n            ' 8th' : '8番',\r\n            ' 9th' : '9番',\r\n            'Now batting' : '次のバッター、',\r\n            'way outside' : '相当外角',\r\n            'outside' : '外角',\r\n            'inside' : '内角',\r\n            'way inside' : '相当内角',\r\n            'way low' : '相当低め',\r\n            'low' : '低め',\r\n            'high' : '高め',\r\n            'way high' : '相当高め',\r\n            'down the middle' : '真ん中',\r\n            'first baseman': 'ファースト',\r\n            'second baseman': 'セカンド',\r\n            'third baseman': 'サード',\r\n            'shortstop': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left fielder': 'レフト',\r\n            'center fielder': 'センター',\r\n            'right fielder': 'ライト',\r\n            'Strike.' : 'ストライク。',\r\n            'Ball.' : 'ボール。',\r\n            'Fouled off.': 'ファウル。',\r\n            'In play.': 'インプレー。',\r\n            'Swinging strike.': '空振り。',\r\n            '4-seam': 'ストレート',\r\n            '2-seam': 'シュート',\r\n            'slider': 'スライダー',\r\n            'fork': 'フォーク',\r\n            'cutter': 'カット',\r\n            'sinker': 'シンカー',\r\n            'curve': 'カーブ',\r\n            'change': 'チェンジ',\r\n            ' struck out looking.': '、見逃し三振。',\r\n            ' walked.': '、フォアボール。',\r\n            ' struck out swinging.': '、空振り三振。',\r\n            'Previous: ': '前：',\r\n            'looks like: ': '予想',\r\n            'breaking ball': '変化球',\r\n            'fastball': 'ストレート',\r\n            'Batting, ': '打球',\r\n            'Catching, pitch selection': '捕球選択',\r\n            'Season': '記録',\r\n            'Game': '今試合',\r\n            'Pitch': '球',\r\n            'Control': '制球',\r\n            'Velocity': '速度',\r\n            'Break': '変化',\r\n            'At Bat :': 'バッター',\r\n            'On Deck :': '次バッター',\r\n            'Eye :': '目',\r\n            'Power :': '力',\r\n            'Speed :': '速',\r\n            'Up to Bat': '打席',\r\n            'Fielding': '守備',\r\n            'BA' : '打率',\r\n            'OBP' : '出塁',\r\n            'SLG' : '長打',\r\n            'PA' : '打席',\r\n            'H/2B/3B/HR' : '安／二／三／本',\r\n            'H' : '安',\r\n            '2B' : '二',\r\n            '3B' : '三',\r\n            'HR' : '本塁打',\r\n            'RBI' : '打点',\r\n            'R' : '得点',\r\n            'BB' : '四球',\r\n            'SO' : '三振',\r\n\r\n            'first' : 'ファースト',\r\n            'second' : 'セカンド',\r\n            'third' : 'サード',\r\n\r\n            'Select Language:' : '言語',\r\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\r\n            'Play Ball!' : 'プレーボール',\r\n            'Spectate the CPU': 'CPU観戦',\r\n\r\n            'Throws/Bats' : ' ',\r\n            'LHP' : '左投',\r\n            'RHP' : '右投',\r\n            'LHB' : '左打',\r\n            'RHB' : '右打',\r\n            'L' : '左投',\r\n            'R ' : '右投',\r\n            ' L ' : '左打',\r\n            ' R ' : '右打',\r\n            '#' : '背番号'\r\n        },\r\n        e : {\r\n            empty: '-',\r\n            'Season': 'Career'\r\n        }\r\n    }[override ? override : mode][phrase];\r\n    return string ? string : phrase;\r\n};\r\n\r\ntext.getBattersEye = function(game) {\r\n    var eye = {},\r\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\r\n    eye.e =\r\n        text('looks like: ', 'e')+\r\n        breaking ? text('breaking ball', 'e') : text('fastball', 'e');\r\n    eye.n =\r\n        text('looks like: ', 'n')+\r\n        breaking ? text('breaking ball', 'n') : text('fastball', 'n');\r\n    return eye;\r\n};\r\n\r\ntext.fielderShortName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': '一',\r\n            'second': '二',\r\n            'third': '三',\r\n            'short': '遊',\r\n            'pitcher': '投',\r\n            'catcher': '捕',\r\n            'left': '左',\r\n            'center': '中',\r\n            'right': '右'\r\n        }[fielder];\r\n    }\r\n    return fielder;\r\n};\r\n\r\ntext.slash = function() {\r\n    if (mode == 'n') {\r\n        return '・';\r\n    }\r\n    return '/';\r\n};\r\n\r\ntext.fielderLongName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': 'ファースト',\r\n            'second': 'セカンド',\r\n            'third': 'サード',\r\n            'short': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left': 'レフト',\r\n            'center': 'センター',\r\n            'right': 'ライト'\r\n        }[fielder]\r\n    }\r\n    return {\r\n        first : text('first baseman'),\r\n        second : text('second baseman'),\r\n        third : text('third baseman'),\r\n        short : text('shortstop'),\r\n        pitcher : text('pitcher'),\r\n        catcher : text('catcher'),\r\n        left : text('left fielder'),\r\n        center : text('center fielder'),\r\n        right : text('right fielder')\r\n    }[fielder];\r\n};\r\n\r\ntext.comma = function() {\r\n    return {n: '、', e: ', '}[mode];\r\n};\r\ntext.stop = function() {\r\n    return {n: '。', e: '. '}[mode];\r\n};\r\n\r\ntext.namePitch = function(pitch) {\r\n    if (mode == 'e') {\r\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\r\n    }\r\n    if (mode == 'n') {\r\n        return text(pitch.name)\r\n    }\r\n};\r\n\r\ntext.contactResult = function(batter, fielder, bases, outBy, sacrificeAdvances, out) {\r\n    var statement = '';\r\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\r\n    if (mode == 'e') {\r\n        statement += batter;\r\n        if (outBy) {\r\n            switch (outBy) {\r\n                case 'fieldersChoice':\r\n                    var plural = out.length > 1;\r\n                    var runner = plural ? 'Runners' : 'Runner';\r\n                    var is = plural ? 'are' : 'is';\r\n                    statement += ' reached on a fielder\\'s choice by ' + text.fielderShortName(fielder) + '. '+runner+' from ' + text(out.join(text.comma())) + ' ' + is + ' out';\r\n                    break;\r\n                case 'line':\r\n                    statement += ' lined out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'fly':\r\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'error':\r\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'pop':\r\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'ground':\r\n                    statement += ' grounded into a force out by ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'thrown':\r\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\r\n                    } else {\r\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 3:\r\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 4:\r\n                    statement += ' homered to ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        }\r\n        if (sacrificeAdvances) {\r\n            sacrificeAdvances.map(function(base) {\r\n                if (base == 'third') {\r\n                    statement += text.stop() + 'Runner on third scores';\r\n                } else {\r\n                    statement += text.stop() + 'Runner on ' + base + ' advances';\r\n                }\r\n            });\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    if (mode == 'n') {\r\n        var stop = text.stop();\r\n        statement += batter + 'は';\r\n        if (outBy) {\r\n            var fielderLong = text.fielderLongName(fielder);\r\n            fielder = text.fielderShortName(fielder);\r\n            switch (outBy) {\r\n                case 'fieldersChoice':\r\n                    statement += '野選('+fielder+')で出塁。' + text(out.join(text.comma())) + 'ランナーはアウト';\r\n                    break;\r\n                case 'line':\r\n                    statement += fielder + '直';\r\n                    break;\r\n                case 'fly':\r\n                    statement += fielder + '飛';\r\n                    break;\r\n                case 'error':\r\n                    statement += 'エラー('+fielder+')で出塁';\r\n                    break;\r\n                case 'pop':\r\n                    statement += 'ポップフライで' + fielder + '飛';\r\n                    break;\r\n                case 'ground':\r\n                    statement += fielderLong + 'ゴロに封殺';\r\n                    break;\r\n                case 'thrown':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n            }\r\n        } else {\r\n            fielder = text.fielderShortName(fielder);\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\r\n                    } else {\r\n                        statement += '安打('+fielder+')' + 'で出塁';\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += '二塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 3:\r\n                    statement += '三塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 4:\r\n                    statement += '本塁打（'+fielder+'）';\r\n                    break;\r\n            }\r\n        }\r\n        if (sacrificeAdvances) {\r\n            sacrificeAdvances.map(function(base) {\r\n                if (base == 'third') {\r\n                    statement += stop + 'サードランナーホームイン';\r\n                } else {\r\n                    statement += stop + text(base) + 'ランナー進塁';\r\n                }\r\n            });\r\n        }\r\n        statement += stop;\r\n    }\r\n    return statement;\r\n};\r\n\r\nexports.text = text;\r\nexports.mode = mode;","var Log = function() {\r\n    this.init();\r\n};\r\n\r\nLog.prototype = {\r\n    game : 'instance of Game',\r\n    init : function() {\r\n        this.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n    },\r\n    SINGLE : 'H',\r\n    DOUBLE : '2B',\r\n    TRIPLE : '3B',\r\n    HOMERUN : 'HR',\r\n    WALK : 'BB',\r\n    GROUNDOUT : 'GO',\r\n    FLYOUT : 'FO',\r\n    LINEOUT : 'LO',\r\n    RUN : 'R',\r\n    STRIKEOUT : 'SO',\r\n    SACRIFICE : 'SAC',\r\n    REACHED_ON_ERROR : 'ROE',\r\n    FIELDERS_CHOICE : 'FC',\r\n    note : function(note, noteJ) {\r\n        this.record.e.unshift(note);\r\n        var rec = this.record.e.slice(0, 6);\r\n        this.shortRecord.e = rec;\r\n        this.stabilized.shortRecord.e = rec.concat(['', '', '', '', '', '']).slice(0, 6);\r\n\r\n        this.record.n.unshift(noteJ);\r\n        var rec2 = this.record.n.slice(0, 6);\r\n        this.shortRecord.n = rec2;\r\n        this.stabilized.shortRecord.n = rec2.concat(['', '', '', '', '', '']).slice(0, 6)\r\n    },\r\n    getBatter : function(batter) {\r\n        var order = batter.team.nowBatting;\r\n        order = {\r\n            0 : text(' 1st'),\r\n            1 : text(' 2nd'),\r\n            2 : text(' 3rd'),\r\n            3 : text(' 4th'),\r\n            4 : text(' 5th'),\r\n            5 : text(' 6th'),\r\n            6 : text(' 7th'),\r\n            7 : text(' 8th'),\r\n            8 : text(' 9th')\r\n        }[order];\r\n        var positions = this.longFormFielder();\r\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\r\n            batter.getUniformNumber()+text.comma()+\r\n            batter.getName();\r\n    },\r\n    noteBatter : function(batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getBatter(batter);\r\n        mode = 'n';\r\n        recordJ = this.getBatter(batter);\r\n        mode = m;\r\n        this.note(record, recordJ);\r\n    },\r\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\r\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\r\n        var noComma = false, noComma2 = false;\r\n        var ball = false;\r\n        if (!batterIsLefty) x = 200 - x;\r\n        if (x < 50) {\r\n            say += text('way outside');\r\n            ball = true;\r\n        } else if (x < 70) {\r\n            say += text('outside');\r\n        } else if (x < 100) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 130) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 150) {\r\n            say += text('inside');\r\n        } else {\r\n            say += text('way inside');\r\n            ball = true;\r\n        }\r\n        if (say != '') say += text.comma();\r\n        if (y < 35) {\r\n            say += text('way low');\r\n            ball = true;\r\n        } else if (y < 65) {\r\n            say += text('low');\r\n        } else if (y < 135) {\r\n            say += '';\r\n            noComma2 = true;\r\n        } else if (y < 165) {\r\n            say += text('high');\r\n        } else {\r\n            say += text('way high');\r\n            ball = true;\r\n        }\r\n        if (noComma || noComma2) {\r\n            say = say.split(text.comma()).join('');\r\n            if (noComma && noComma2) {\r\n                say = text('down the middle');\r\n            }\r\n        }\r\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\r\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\r\n        return say;\r\n    },\r\n    notePitch : function(pitchInFlight, batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.e.unshift(record);\r\n        this.stabilized.pitchRecord.e.unshift(record);\r\n        this.stabilized.pitchRecord.e.pop();\r\n        mode = 'n';\r\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.n.unshift(recordJ);\r\n        this.stabilized.pitchRecord.n.unshift(recordJ);\r\n        this.stabilized.pitchRecord.n.pop();\r\n        mode = m;\r\n    },\r\n    getSwing : function(swingResult) {\r\n        var result = '';\r\n        if (swingResult.looking) {\r\n            if (swingResult.strike) {\r\n                result += text('Strike.')\r\n            } else {\r\n                result += text('Ball.')\r\n            }\r\n        } else {\r\n            if (swingResult.contact) {\r\n                if (swingResult.foul) {\r\n                    result += text('Fouled off.')\r\n                } else {\r\n                    if (swingResult.caught) {\r\n                        result += text('In play.')\r\n                    } else {\r\n                        if (swingResult.thrownOut) {\r\n                            result += text('In play.')\r\n                        } else {\r\n                            result += text('In play.')\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                result += text('Swinging strike.')\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    noteSwing : function(swingResult) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getSwing(swingResult);\r\n        this.pitchRecord.e[0] += record;\r\n        this.stabilized.pitchRecord.e[0] += record;\r\n        mode = 'n';\r\n        recordJ = this.getSwing(swingResult);\r\n        this.pitchRecord.n[0] += recordJ;\r\n        this.stabilized.pitchRecord.n[0] += recordJ;\r\n        mode = m;\r\n    },\r\n    getPlateAppearanceResult : function(game) {\r\n        var r = game.swingResult;\r\n        var record = '';\r\n        var batter = game.batter.getName();\r\n        var out = [];\r\n        if (r.looking) {\r\n            if (r.strike) {\r\n                record = (batter + text(' struck out looking.'));\r\n            } else {\r\n                record = (batter + text(' walked.'));\r\n            }\r\n        } else {\r\n            if (r.contact) {\r\n                var fielder = r.fielder, bases = r.bases, outBy;\r\n                if (r.caught) {\r\n                    if (r.flyAngle < 15) {\r\n                        outBy = 'line';\r\n                    } else {\r\n                        if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\r\n                            outBy = 'pop';\r\n                        } else {\r\n                            outBy = 'fly';\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (r.foul) {\r\n                        // not possible to end PA on foul?\r\n                    } else {\r\n                        if (r.error) {\r\n                            bases = 1;\r\n                            outBy = 'error';\r\n                        } else {\r\n                            if (r.thrownOut) {\r\n                                if (Math.random() < 0.5) {\r\n                                    outBy = 'ground';\r\n                                } else {\r\n                                    outBy = 'thrown';\r\n                                }\r\n                            } else {\r\n                                switch (r.bases) {\r\n                                    case 1:\r\n                                    case 2:\r\n                                    case 3:\r\n                                        bases = r.bases;\r\n                                        break;\r\n                                    case 4:\r\n                                        bases = 4;\r\n                                        if (r.splay < -15) {\r\n                                            fielder = 'left';\r\n                                        } else if (r.splay < 15) {\r\n                                            fielder = 'center';\r\n                                        } else {\r\n                                            fielder = 'right';\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                            if (r.fieldersChoice) {\r\n                                out.push(r.fieldersChoice);\r\n                                if (r.outs == 3) {\r\n                                    outBy = 'ground';\r\n                                } else {\r\n                                    outBy = 'fieldersChoice';\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                record = text.contactResult(batter, fielder, bases, outBy, r.outs === 3 ? [] : r.sacrificeAdvances, out);\r\n            } else {\r\n                record = (batter+text(' struck out swinging.'));\r\n            }\r\n        }\r\n        return record;\r\n    },\r\n    notePlateAppearanceResult : function(game) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPlateAppearanceResult(game);\r\n        this.record.e.unshift(record);\r\n        this.pitchRecord.e = [text('Previous: ')+record];\r\n        this.stabilized.pitchRecord.e = [text('Previous: ')+record, '', '', '', '', ''];\r\n        mode = 'n';\r\n        recordJ = this.getPlateAppearanceResult(game);\r\n        this.record.n.unshift(recordJ);\r\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\r\n        this.stabilized.pitchRecord.n = [text('Previous: ')+recordJ, '', '', '', '', ''];\r\n        mode = m;\r\n    },\r\n    pointer : 0,\r\n    stabilized: {\r\n        pitchRecord : {\r\n            e: ['', '', '', '', '', ''],\r\n            n: ['', '', '', '', '', '']\r\n        },\r\n        shortRecord : {\r\n            e: ['', '', '', '', '', ''],\r\n            n: ['', '', '', '', '', '']\r\n        }\r\n    },\r\n    pitchRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    shortRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    record : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    longFormFielder : function() {\r\n        return {\r\n            first : text('first baseman'),\r\n            second : text('second baseman'),\r\n            third : text('third baseman'),\r\n            short : text('shortstop'),\r\n            pitcher : text('pitcher'),\r\n            catcher : text('catcher'),\r\n            left : text('left fielder'),\r\n            center : text('center fielder'),\r\n            right : text('right fielder')\r\n        }\r\n    }\r\n};\r\n\r\nexports.Log = Log;","data = {\r\n    surnames : [\r\n        'Sato',\r\n        'Suzuki',\r\n        'Takahashi',\r\n        'Tanaka',\r\n        'Watanabe',\r\n        'Ito',\r\n        'Nakamura',\r\n        'Kobayashi',\r\n        'Yamamoto',\r\n        'Kato',\r\n        'Yoshida',\r\n        'Yamada',\r\n        'Sasaki',\r\n        'Yamaguchi',\r\n        'Matsumoto',\r\n        'Inoue',\r\n        'Kimura',\r\n        'Shimizu',\r\n        'Hayashi',\r\n        'Saito',\r\n        'Saito',\r\n        'Yamazaki',\r\n        'Nakajima',\r\n        'Mori',\r\n        'Abe',\r\n        'Ikeda',\r\n        'Hashimoto',\r\n        'Ishikawa',\r\n        'Yamashita',\r\n        'Ogawa',\r\n        'Ishii',\r\n        'Hasegawa',\r\n        'Goto',\r\n        'Okada',\r\n        'Kondo',\r\n        'Maeda',\r\n        'Fujita',\r\n        'Endo',\r\n        'Aoki',\r\n        'Sakamoto',\r\n        'Murakami',\r\n        'Ota',\r\n        'Kaneko',\r\n        'Fujii',\r\n        'Fukuda',\r\n        'Nishimura',\r\n        'Miura',\r\n        'Takeuchi',\r\n        'Nakagawa',\r\n        'Okamoto',\r\n        'Matsuda',\r\n        'Harada',\r\n        'Nakano'\r\n    ],\r\n    surnamesJ : [\r\n        '佐藤',\r\n        '鈴木',\r\n        '高橋',\r\n        '田中',\r\n        '渡辺',\r\n        '伊藤',\r\n        '中村',\r\n        '小林',\r\n        '山本',\r\n        '加藤',\r\n        '吉田',\r\n        '山田',\r\n        '佐々木',\r\n        '山口',\r\n        '松本',\r\n        '井上',\r\n        '木村',\r\n        '清水',\r\n        '林',\r\n        '斉藤',\r\n        '斎藤',\r\n        '山崎',\r\n        '中島',\r\n        '森',\r\n        '阿部',\r\n        '池田',\r\n        '橋本',\r\n        '石川',\r\n        '山下',\r\n        '小川',\r\n        '石井',\r\n        '長谷川',\r\n        '後藤',\r\n        '岡田',\r\n        '近藤',\r\n        '前田',\r\n        '藤田',\r\n        '遠藤',\r\n        '青木',\r\n        '坂本',\r\n        '村上',\r\n        '太田',\r\n        '金子',\r\n        '藤井',\r\n        '福田',\r\n        '西村',\r\n        '三浦',\r\n        '竹内',\r\n        '中川',\r\n        '岡本',\r\n        '松田',\r\n        '原田',\r\n        '中野'\r\n    ],\r\n\r\n    namesJ: [\r\n        '匠',\r\n        'ヒカル',\r\n        'ゆうき',\r\n        '翔太',\r\n        '冬馬',\r\n        '漣',\r\n        '港区',\r\n        'ルイ',\r\n        '樹',\r\n        '賢治',\r\n        '五木',\r\n        '春',\r\n        '光一',\r\n        '宗介',\r\n        'こうすけ',\r\n        '雄太',\r\n        '大樹',\r\n        '瑛太',\r\n        // newer set\r\n        '宏',\r\n        '亨',\r\n        '道夫',\r\n        '聡',\r\n        '昭',\r\n        '茂雄',\r\n        '勝',\r\n        '純一',\r\n        '和夫',\r\n        '勲',\r\n        '省三',\r\n        '隆',\r\n        '達夫',\r\n        '正一',\r\n        '輝夫',\r\n        '俊夫',\r\n        '史郎',\r\n        '勇',\r\n        '義弘',\r\n        '良雄',\r\n        '登',\r\n        '義明',\r\n        '正義',\r\n        '秀夫',\r\n        '肇',\r\n        '月',\r\n        '克己',\r\n        '正男',\r\n        '光男',\r\n        '久',\r\n        '耕三',\r\n        '清',\r\n        '次郎',\r\n        '正博',\r\n        '明子',\r\n        '武',\r\n        '勉',\r\n        '晴夫',\r\n        '裕二',\r\n        '稔',\r\n        '障子',\r\n        '和子',\r\n        '敦',\r\n        '茂',\r\n        '信夫',\r\n        '恵一',\r\n        '忠',\r\n        '高尾',\r\n        '薫',\r\n        'ケン',\r\n        '健治',\r\n        '哲夫',\r\n        '啓二',\r\n        '光一',\r\n        '真一',\r\n        '貞夫',\r\n        '靖',\r\n        '武',\r\n        '雄',\r\n        '文雄',\r\n        '久雄',\r\n        '一朗',\r\n        '健一',\r\n        '正明',\r\n        '五郎',\r\n        '誠',\r\n        '昭夫',\r\n        '誠司',\r\n        '洋一',\r\n        '康夫',\r\n        '誠一',\r\n        '正美',\r\n        '則夫',\r\n        '幸雄',\r\n        '忠雄',\r\n        '仁',\r\n        'シンジ',\r\n        '豊',\r\n        '邦雄',\r\n        '修',\r\n        '雅之',\r\n        '三郎',\r\n        '英治',\r\n        '浩二',\r\n        '栄一',\r\n        '恒夫',\r\n        '義郎',\r\n        '進',\r\n        '博之',\r\n        '巌'\r\n    ],\r\n    names : [\r\n        'Takumi',\r\n        'Hikaru',\r\n        'Yuuki',\r\n        'Shouta',\r\n        'Touma',\r\n        'Ren',\r\n        'Minato',\r\n        'Rui',\r\n        'Tatsuki',\r\n        'Kenji',\r\n        'Itsuki',\r\n        'Haru',\r\n        'Kouichi',\r\n        'Sousuke',\r\n        'Kousuke',\r\n        'Yuuta',\r\n        'Daiki',\r\n        'Eita',\r\n        // newer set\r\n        'Hiroshi',\r\n        'Toru',\r\n        'Michio',\r\n        'Satoshi',\r\n        'Akira',\r\n        'Shigeo',\r\n        'Masaru',\r\n        'Junichi',\r\n        'Kazuo',\r\n        'Isao',\r\n        'Shozo',\r\n        'Takashi',\r\n        'Tatsuo',\r\n        'Shoichi',\r\n        'Teruo',\r\n        'Toshio',\r\n        'Shiro',\r\n        'Isamu',\r\n        'Yoshihiro',\r\n        'Yoshio',\r\n        'Noboru',\r\n        'Yoshiaki',\r\n        'Tadayoshi',\r\n        'Hideo',\r\n        'Hajime',\r\n        'Akari',\r\n        'Katsumi',\r\n        'Masao',\r\n        'Mitsuo',\r\n        'Hisashi',\r\n        'Kozo',\r\n        'Kiyoshi',\r\n        'Jiro',\r\n        'Masahiro',\r\n        'Akiko',\r\n        'Takeshi',\r\n        'Tsutomu',\r\n        'Haruo',\r\n        'Yuji',\r\n        'Minoru',\r\n        'Shoji',\r\n        'Kazuko',\r\n        'Atsushi',\r\n        'Shigeru',\r\n        'Shinobu',\r\n        'Keiichi',\r\n        'Tadashi',\r\n        'Takao',\r\n        'Kaoru',\r\n        'Ken',\r\n        'Kenji',\r\n        'Tetsuo',\r\n        'Keiji',\r\n        'Koichi',\r\n        'Shinichi',\r\n        'Sadao',\r\n        'Yasushi',\r\n        'Takeshi',\r\n        'Yu',\r\n        'Fumio',\r\n        'Hisao',\r\n        'Ichiro',\r\n        'Kenichi',\r\n        'Masaaki',\r\n        'Goro',\r\n        'Makoto',\r\n        'Akio',\r\n        'Seiji',\r\n        'Yoichi',\r\n        'Yasuo',\r\n        'Seiichi',\r\n        'Masami',\r\n        'Norio',\r\n        'Yukio',\r\n        'Tadao',\r\n        'Hitoshi',\r\n        'Shinji',\r\n        'Yutaka',\r\n        'Kunio',\r\n        'Osamu',\r\n        'Masayuki',\r\n        'Saburo',\r\n        'Eiji',\r\n        'Koji',\r\n        'Eiichi',\r\n        'Tsuneo',\r\n        'Yoshio',\r\n        'Susumu',\r\n        'Hiroyuki',\r\n        'Iwao'\r\n    ],\r\n    teamNamesJ : [\r\n        '横浜',\r\n        '大阪',\r\n        '名古屋',\r\n        '札幌',\r\n        '神戸',\r\n        '京都',\r\n        '福岡',\r\n        '川崎',\r\n        '埼玉県',\r\n        '広島',\r\n        '仙台',\r\n        '千葉県',\r\n        '新潟',\r\n        '浜松',\r\n        '静岡',\r\n        '相模原',\r\n        '岡山',\r\n        '熊本',\r\n        '鹿児島',\r\n        '船橋',\r\n        '川口',\r\n        '姫路',\r\n        '松山',\r\n        '宇都宮',\r\n        '松戸',\r\n        '西宮',\r\n        '倉敷',\r\n        '市川',\r\n        '福山',\r\n        '尼崎',\r\n        '金沢',\r\n        '長崎',\r\n        '横須賀',\r\n        '富山',\r\n        '高松',\r\n        '町田',\r\n        '岐阜',\r\n        '枚方',\r\n        '藤沢',\r\n        '柏',\r\n        '豊中',\r\n        '長野県',\r\n        '豊橋',\r\n        '一宮',\r\n        '和歌山',\r\n        '岡崎',\r\n        '宮崎',\r\n        '奈良',\r\n        '吹田',\r\n        '高槻',\r\n        '旭川',\r\n        'いわき',\r\n        '高崎',\r\n        '所沢',\r\n        '川越',\r\n        '秋田',\r\n        '越谷',\r\n        '前橋',\r\n        '那覇',\r\n        '四日市',\r\n        '青森',\r\n        '久留米',\r\n        '春日井',\r\n        '盛岡',\r\n        '明石',\r\n        '福島',\r\n        '下関',\r\n        '長岡',\r\n        '市原',\r\n        '函館',\r\n        '茨城県',\r\n        '福井',\r\n        '加古川',\r\n        '徳島',\r\n        '水戸',\r\n        '平塚',\r\n        '佐世保',\r\n        '呉',\r\n        '八戸',\r\n        '佐賀',\r\n        '寝屋川',\r\n        '富士',\r\n        '春日部',\r\n        '茅ヶ崎',\r\n        '松本',\r\n        '厚木',\r\n        '大和',\r\n        '上尾',\r\n        '宝塚',\r\n        '筑波',\r\n        '沼津',\r\n        '熊谷',\r\n        '伊勢崎',\r\n        '岸和田',\r\n        '鳥取',\r\n        '小田原',\r\n        '鈴鹿',\r\n        '松江',\r\n        '日立'\r\n    ],\r\n    teamNames : [\r\n        'Yokohama',\r\n        'Osaka',\r\n        'Nagoya',\r\n        'Sapporo',\r\n        'Kobe',\r\n        'Kyoto',\r\n        'Fukuoka',\r\n        'Kawasaki',\r\n        'Saitama',\r\n        'Hiroshima',\r\n        'Sendai',\r\n        'Chiba',\r\n        'Niigata',\r\n        'Hamamatsu',\r\n        'Shizuoka',\r\n        'Sagamihara',\r\n        'Okayama',\r\n        'Kumamoto',\r\n        'Kagoshima',\r\n        'Funabashi',\r\n        'Kawaguchi',\r\n        'Himeji',\r\n        'Matsuyama',\r\n        'Utsunomiya',\r\n        'Matsudo',\r\n        'Nishinomiya',\r\n        'Kurashiki',\r\n        'Ichikawa',\r\n        'Fukuyama',\r\n        'Amagasaki',\r\n        'Kanazawa',\r\n        'Nagasaki',\r\n        'Yokosuka',\r\n        'Toyama',\r\n        'Takamatsu',\r\n        'Machida',\r\n        'Gifu',\r\n        'Hirakata',\r\n        'Fujisawa',\r\n        'Kashiwa',\r\n        'Toyonaka',\r\n        'Nagano',\r\n        'Toyohashi',\r\n        'Ichinomiya',\r\n        'Wakayama',\r\n        'Okazaki',\r\n        'Miyazaki',\r\n        'Nara',\r\n        'Suita',\r\n        'Takatsuki',\r\n        'Asahikawa',\r\n        'Iwaki',\r\n        'Takasaki',\r\n        'Tokorozawa',\r\n        'Kawagoe',\r\n        'Akita',\r\n        'Koshigaya',\r\n        'Maebashi',\r\n        'Naha',\r\n        'Yokkaichi',\r\n        'Aomori',\r\n        'Kurume',\r\n        'Kasugai',\r\n        'Morioka',\r\n        'Akashi',\r\n        'Fukushima',\r\n        'Shimonoseki',\r\n        'Nagaoka',\r\n        'Ichihara',\r\n        'Hakodate',\r\n        'Ibaraki',\r\n        'Fukui',\r\n        'Kakogawa',\r\n        'Tokushima',\r\n        'Mito',\r\n        'Hiratsuka',\r\n        'Sasebo',\r\n        'Kure',\r\n        'Hachinohe',\r\n        'Saga',\r\n        'Neyagawa',\r\n        'Fuji',\r\n        'Kasukabe',\r\n        'Chigasaki',\r\n        'Matsumoto',\r\n        'Atsugi',\r\n        'Yamato',\r\n        'Ageo',\r\n        'Takarazuka',\r\n        'Tsukuba',\r\n        'Numazu',\r\n        'Kumagaya',\r\n        'Isesaki',\r\n        'Kishiwada',\r\n        'Tottori',\r\n        'Odawara',\r\n        'Suzuka',\r\n        'Matsue',\r\n        'Hitachi'\r\n    ]\r\n};\r\n\r\nexports.data = data;","helper = {\r\n    pitchDefinitions : {\r\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\r\n        '2-seam' :      [20, -20, 0.90],\r\n        'cutter' :      [-25, -20, 0.95],\r\n        'sinker' :      [-15, -30, 0.95],\r\n\r\n        'slider' :      [-50, -35, 0.9],\r\n        'fork'   :      [0, -70, 0.87],\r\n        'curve'  :      [0, -90, 0.82],\r\n\r\n        'change' :    [0, -10, 0.88]\r\n    },\r\n    selectRandomPitch : function() {\r\n        return [\r\n            '4-seam', '2-seam', 'cutter', 'sinker',\r\n            'slider', 'fork', 'curve',\r\n            'change'\r\n        ][Math.floor(Math.random()*8)]\r\n    }\r\n};\r\n\r\nexports.helper = helper;","var Animator = function() {\r\n    this.init();\r\n};\r\n\r\nAnimator.prototype = {\r\n    identifier : 'Animator',\r\n    constructor : Animator,\r\n    console : false,\r\n    init : function() {\r\n\r\n    },\r\n    TIME_FROM_SET : 2300, //ms\r\n    TIME_FROM_WINDUP : 3600, //ms\r\n    HOLD_UP_ALLOWANCE : 0.5, // seconds\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    updateFlightPath: function(callback) {\r\n        if (Animator.console) return;\r\n        var $scope = this,\r\n            game = $scope.y,\r\n            top = 200-game.pitchTarget.y,\r\n            left = game.pitchTarget.x,\r\n            breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x,\r\n            $baseballs = jQ('.baseball'),\r\n            flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400,\r\n            originTop = 50,\r\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        var pitch = this.pitchTarget = jQ('.main-area .target .baseball.pitch'),\r\n            henka = this.pitchBreak = jQ('.main-area .target .baseball.break'),\r\n            quarter = flightSpeed/4;\r\n\r\n        var pitchTransition = Mathinator.pitchTransition(top, left, originTop, originLeft, quarter);\r\n\r\n        var transitions = [\r\n            pitchTransition(0, 0),\r\n            pitchTransition(10, 0),\r\n            pitchTransition(30, 1),\r\n            pitchTransition(50, 2),\r\n\r\n            pitchTransition(100, 3),\r\n            pitchTransition(100, 3, breakTop, breakLeft)\r\n        ];\r\n\r\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        //jQ('.baseball').addClass('spin');\r\n        //jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*180 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + Animator.HOLD_UP_ALLOWANCE) * 1000));\r\n        }\r\n    },\r\n    animateFieldingTrajectory: function(game) {\r\n        if (Animator.console) return game.swingResult;\r\n        var ball = jQ('.splay-indicator-ball');\r\n        TweenMax.killAll();\r\n        var result = game.swingResult;\r\n\r\n        var linearApproximateDragScalar = {\r\n            distance: 1,\r\n            apexHeight: 0.57,\r\n            airTime: 0.96\r\n        };\r\n\r\n        var angle = result.flyAngle,\r\n            distance = Math.abs(result.travelDistance),\r\n            scalar = result.travelDistance < 0 ? -1 : 1;\r\n\r\n        Mathinator.memory.bounding = angle < 0;\r\n        angle = 1 + Math.abs(angle);\r\n        if (angle > 90) angle = 180 - angle;\r\n\r\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2*Math.PI*angle/180));\r\n        var velocityVerticalComponent = Math.sin(Mathinator.RADIAN * angle) * velocity;\r\n        var apexHeight = velocityVerticalComponent*velocityVerticalComponent/(2*9.81) * linearApproximateDragScalar.apexHeight;\r\n        var airTime = Math.sqrt(2*apexHeight/9.81) * linearApproximateDragScalar.airTime;\r\n\r\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\r\n        var quarter = airTime/4;\r\n        var mathinator = new Mathinator();\r\n        var transitions = [\r\n            mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay),\r\n            mathinator.transitionalTrajectory(25, quarter, 0),\r\n            mathinator.transitionalTrajectory(50, quarter, 1),\r\n            mathinator.transitionalTrajectory(75, quarter, 2),\r\n            mathinator.transitionalTrajectory(100, quarter, 3)\r\n        ];\r\n        TweenMax.set(ball, transitions[0]);\r\n        TweenMax.to(ball, quarter, transitions[1]);\r\n        TweenMax.to(ball, quarter, transitions[2]);\r\n        TweenMax.to(ball, quarter, transitions[3]);\r\n        TweenMax.to(ball, quarter, transitions[4]);\r\n\r\n        return game.swingResult;\r\n    }\r\n};\r\n\r\nfor (var fn in Animator.prototype) {\r\n    if (Animator.prototype.hasOwnProperty(fn)) {\r\n        Animator[fn] = Animator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Animator = Animator;","/**\r\n * For Probability!\r\n * @constructor\r\n */\r\nvar Distribution = function() {\r\n};\r\n\r\nDistribution.prototype = {\r\n    identifier : 'Distribution',\r\n    constructor : Distribution,\r\n    /**\r\n     * @param scale {number}\r\n     * @returns {number}\r\n     */\r\n    chance : function(scale) {\r\n        if (!scale) scale = 1;\r\n        return Math.random() * scale;\r\n    },\r\n    /**\r\n     * @param fielder {Player}\r\n     * @returns {boolean}\r\n     */\r\n    error : function(fielder) {\r\n        return (100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100;\r\n    },\r\n    /**\r\n     * @param power\r\n     * @param flyAngle\r\n     * @returns {number}\r\n     */\r\n    landingDistance : function(power, flyAngle) {\r\n        return (10 + power/2 + Math.random()*310 + (power/100)*30) * (1 - Math.abs(flyAngle - 30)/60);\r\n    },\r\n    /**\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    pitchLocation : function() {\r\n        var x, y;\r\n        if (Math.random() < 0.5) {\r\n            x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\r\n        } else {\r\n            x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\r\n        }\r\n        y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\r\n        return {x: x, y: y};\r\n    },\r\n    /**\r\n     * swing centering basis\r\n     * @returns {number}\r\n     */\r\n    centralizedNumber : function() {\r\n        return 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\r\n    },\r\n    /**\r\n     * @param eye {Player.skill.offense.eye}\r\n     * @param x\r\n     * @param y\r\n     * @param umpire {Umpire}\r\n     */\r\n    swingLikelihood : function(eye, x, y, umpire) {\r\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\r\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\r\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*umpire.count.balls;\r\n        } else {\r\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\r\n        }\r\n        return swingLikelihood - 35 + 10*(umpire.count.balls + 2*umpire.count.strikes);\r\n    },\r\n    /**\r\n     * @param target {number} 0-200\r\n     * @param control {number} 0-100\r\n     * @returns {number}\r\n     */\r\n    pitchControl : function(target, control) {\r\n        return Math.min(199.9, Math.max(0.1, target + (50 - Math.random()*100)/(1+control/100)));\r\n    },\r\n    /**\r\n     * @param pitch {Game.pitchInFlight}\r\n     * @param pitcher {Player}\r\n     * @param x {number}\r\n     * @param y {number}\r\n     * @returns {object|{x: number, y: number}}\r\n     */\r\n    breakEffect : function(pitch, pitcher, x, y) {\r\n        var effect = {};\r\n        effect.x = Math.floor(x + (pitch.breakDirection[0]\r\n            * ((0.8+Math.random()*(pitcher.pitching[pitch.name]).break/250))));\r\n        effect.y = Math.floor(y + (pitch.breakDirection[1]\r\n            * ((0.8+Math.random()*(pitcher.pitching[pitch.name]).break/250/(0.5 + y/200)))));\r\n        return effect;\r\n    },\r\n    /**\r\n     * Determine the swing target along an axis\r\n     * @param target {number} 0-200\r\n     * @param actual {number} 0-200\r\n     * @param eye {number} 0-100\r\n     * @returns {number} 0-200\r\n     */\r\n    cpuSwing : function(target, actual, eye) {\r\n        eye = Math.max(eye, 100);\r\n        return 100 + (target - 100)*(0.5+Math.random()*eye/200) - actual;\r\n    },\r\n    /**\r\n     * Determine the swing scalar\r\n     * @param eye {number} 0-100\r\n     * @returns {number}\r\n     */\r\n    swing : function(eye) {\r\n        return 100/(eye + 25 + Math.random()*50);\r\n    }\r\n};\r\n\r\nfor (var fn in Distribution.prototype) {\r\n    if (Distribution.prototype.hasOwnProperty(fn)) {\r\n        Distribution[fn] = Distribution.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Distribution = Distribution;","var Iterator = function() {\r\n};\r\n\r\nIterator.prototype = {\r\n    identifier : 'Iterator',\r\n    constructor : Iterator,\r\n    each : function(collection, map) {\r\n        var keys, i;\r\n        if (collection instanceof Array) {\r\n            for (i = 0; i < collection.length; i++) {\r\n                map(i, collection[i]);\r\n            }\r\n        } else {\r\n            keys = Object.keys(collection);\r\n            for (i = 0; i < keys.length; i++) {\r\n                map(keys[i], collection[keys[i]]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfor (var fn in Iterator.prototype) {\r\n    if (Iterator.prototype.hasOwnProperty(fn)) {\r\n        Iterator[fn] = Iterator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Iterator = Iterator;","/**\r\n * For Math!\r\n * @constructor\r\n */\r\nvar Mathinator = function() {\r\n};\r\n\r\n/**\r\n * @param n\r\n * @returns {number}\r\n */\r\nMathinator.square = function(n) {\r\n    return n * n;\r\n};\r\n\r\nMathinator.prototype = {\r\n    identifier : 'Mathinator',\r\n    constructor : Mathinator,\r\n    /**\r\n     * CONST\r\n     */\r\n    RADIAN : Math.PI / 180,\r\n    SPLAY_INDICATOR_LEFT : -4,\r\n    /**\r\n     * @param offset {{x: number, y: number}}\r\n     * @param angle {number}\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    getAngularOffset : function(offset, angle) {\r\n        var xScalar = offset.x < 0 ? -1 : 1,\r\n            yScalar = offset.y < 0 ? -1 : 1;\r\n        var originalAngle = Math.atan(offset.x / offset.y)/this.RADIAN;\r\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\r\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\r\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\r\n        return {\r\n            x: angledX,\r\n            y: angledY\r\n        };\r\n    },\r\n    /**\r\n     * @param a {Array<Number>}\r\n     * @param b {Array<Number>}\r\n     * @returns {number}\r\n     */\r\n    getPolarDistance : function(a, b) {\r\n        var radians = this.RADIAN;\r\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*radians - b[0]*radians));\r\n    },\r\n    /**\r\n     * @param origin\r\n     * @param target\r\n     * @returns {number}\r\n     * 0 is flat (left-right), positive is clockwise.\r\n     * We use 125 instead of 180 to account for natural hand-height adjustments\r\n     * of various swing heights.\r\n     */\r\n    battingAngle : function(origin, target) {\r\n        return Math.atan((origin.y - target.y)/(target.x - origin.x))/Math.PI * 125;\r\n    },\r\n    memory : {},\r\n    /**\r\n     * @param percent {number} 0-100\r\n     * @param quarter {number} seconds\r\n     * @param step {number} 0 and up\r\n     * @param [givenApexHeight] feet\r\n     * @param [givenDistance] in feet\r\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\r\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\r\n     */\r\n    transitionalTrajectory : function(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\r\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\r\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\r\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\r\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\r\n            distance = Mathinator.prototype.memory.distance,\r\n            splay = Mathinator.prototype.memory.splay;\r\n        var bottom, left, padding, borderWidth;\r\n        var bounding = Mathinator.prototype.memory.bounding,\r\n            radian = this.RADIAN;\r\n\r\n        if (bounding) {\r\n            quarter *= 4;\r\n            percent = Math.floor(Math.sqrt(percent/100)*100);\r\n        }\r\n\r\n        bottom = Math.cos(splay * radian) * percent/100 * distance * 95/300;\r\n        left = Math.sin(splay * radian) * percent/100 * distance * 95/300 + this.SPLAY_INDICATOR_LEFT;\r\n\r\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50))/100)*(1/0.7071);\r\n        if (bounding) {\r\n            padding = 1;\r\n            borderWidth = 1;\r\n        } else {\r\n            padding = apexRatio * apexHeight/90 * 15;\r\n            borderWidth = 2 + (apexRatio * 2);\r\n        }\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 100), -100);\r\n        padding = Math.max(Math.min(padding, 12), 0);\r\n        return {\r\n            bottom: bottom,\r\n            left: left,\r\n            padding: padding,\r\n            borderWidth: borderWidth,\r\n            delay: quarter * step,\r\n            ease: bounding ? Power4.easeOut : Linear.easeNone\r\n        };\r\n    },\r\n    /**\r\n     * @param swingResult\r\n     * @returns {Game.swingResult}\r\n     */\r\n    translateSwingResultToStylePosition: function(swingResult) {\r\n        // CF HR bottom: 95px, centerline: left: 190px;\r\n        var bottom, left;\r\n\r\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\r\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + this.SPLAY_INDICATOR_LEFT;\r\n\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 100), -100);\r\n\r\n        swingResult.bottom = bottom + 'px';\r\n        swingResult.left = left + 'px';\r\n        return swingResult;\r\n    },\r\n    /**\r\n     * @param left {number} 0-200\r\n     * @param top {number} 0-200\r\n     * @param originLeft {number} 0-200\r\n     * @param originTop {number} 0-200\r\n     * @param quarter {number} seconds\r\n     * @returns {Function}\r\n     */\r\n    pitchTransition : function(top, left, originTop, originLeft, quarter) {\r\n        /**\r\n         * @param percent {number} 0-100\r\n         * @param step {number} 0 and up\r\n         * @param [breakTop] {number} 0-200 override\r\n         * @param [breakLeft] {number} 0-200 override\r\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\r\n         */\r\n        return function(percent, step, breakTop, breakLeft) {\r\n            var _top, _left;\r\n            _top = breakTop || top;\r\n            _left = breakLeft || left;\r\n            _top = originTop + Mathinator.square(percent/100)*(_top - originTop);\r\n            if (step == 1) {\r\n                _top -= 2;\r\n            }\r\n            if (step == 2) {\r\n                _top -= 1;\r\n            }\r\n            _left = originLeft + Mathinator.square(percent/100)*(_left - originLeft);\r\n            var padding = Math.max(Mathinator.square(percent/100)*12, 1),\r\n                borderWidth = Math.max(Mathinator.square(percent/100)*4, 1);\r\n            return {\r\n                top: _top,\r\n                left: _left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        };\r\n    },\r\n    /**\r\n     * @param distance {number} feet\r\n     * @param throwing {number} 0-1\r\n     * @param fielding {number} 0-1\r\n     * @param intercept {number} approx. -140 to 140\r\n     * @returns {number} seconds\r\n     */\r\n    fielderReturnDelay : function(distance, throwing, fielding, intercept) {\r\n        return distance/90 // bip distance\r\n            + (distance/90)/(0.5 + throwing/2) // throwing distance\r\n            + 1 - (0.2 + fielding * 0.8) + (9*((distance)/310)*(Math.min(intercept - 120, 0))/-240); // gather time\r\n    },\r\n    /**\r\n     * @param speed {number} 0-100\r\n     * @returns {number} seconds\r\n     */\r\n    baseRunningTime : function(speed) {\r\n        return 6.0 - (speed/100 * 2.2)\r\n    }\r\n};\r\n\r\nfor (var fn in Mathinator.prototype) {\r\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\r\n        Mathinator[fn] = Mathinator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Mathinator = Mathinator;","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';\r\n\r\nexports.AtBat = AtBat;","/**\r\n * The baseball field tracks the ball's movement, fielders, and what runners are on\r\n * @param game\r\n * @constructor\r\n */\r\nvar Field = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nField.prototype = {\r\n    constructor : Field,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.first = null;\r\n        this.second = null;\r\n        this.third = null;\r\n    },\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    hasRunnersOn : function() {\r\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\r\n    },\r\n    /**\r\n     * @param swing\r\n     * @returns {object}\r\n     */\r\n    determineSwingContactResult : function(swing) {\r\n        var x = swing.x, y = swing.y;\r\n        /**\r\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\r\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\r\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\r\n         * increase the left/right effect.\r\n         * @type {number}\r\n         */\r\n        var splayAngle = 90 - 1.5*x + (swing.angle * y/35);\r\n        var flyAngle = -3*y - (swing.angle * y/35);\r\n        var power = this.game.batter.skill.offense.power + (this.game.batter.eye.bonus || 0)/5;\r\n        var landingDistance = Distribution.landingDistance(power, flyAngle);\r\n        if (flyAngle < 0 && landingDistance > 120) {\r\n            landingDistance = (landingDistance - 120)/4 + 120;\r\n        }\r\n\r\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\r\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\r\n        swing.travelDistance = landingDistance;\r\n        swing.flyAngle = flyAngle;\r\n        /**\r\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\r\n         * @type {number}\r\n         */\r\n        swing.splay = splayAngle - 90;\r\n        swing.sacrificeAdvances = [];\r\n\r\n        if (swing.fielder) {\r\n            var fielder = (this.game.half == 'top' ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\r\n            fielder.fatigue += 4;\r\n            swing.error = false;\r\n            var fieldingEase = fielder.skill.defense.fielding/100,\r\n                throwingEase = (fielder.skill.defense.throwing/100);\r\n            //reach the batted ball?\r\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\r\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\r\n            if (interceptRating > 0 && flyAngle > 0) {\r\n                //caught cleanly?\r\n                if (Distribution.error(fielder)) { //error\r\n                    fieldingEase *= 0.5;\r\n                    swing.error = true;\r\n                    swing.caught = false;\r\n                } else {\r\n                    swing.caught = true;\r\n                    if (this.game.umpire.count.outs < 2) {\r\n                        var sacrificeThrowInTime = Mathinator.fielderReturnDelay(\r\n                            swing.travelDistance, throwingEase, fieldingEase, 100\r\n                        );\r\n                        if (this.first && sacrificeThrowInTime > this.first.getBaseRunningTime() + 2.5) {\r\n                            swing.sacrificeAdvances.push('first');\r\n                        }\r\n                        if (this.second && sacrificeThrowInTime > this.second.getBaseRunningTime()) {\r\n                            swing.sacrificeAdvances.push('second');\r\n                        }\r\n                        if (this.third && sacrificeThrowInTime > this.third.getBaseRunningTime() - 0.5) {\r\n                            swing.sacrificeAdvances.push('third');\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                swing.caught = false;\r\n            }\r\n\r\n            if (!swing.caught) {\r\n                swing.bases = 0;\r\n                swing.thrownOut = false; // default value\r\n                var fieldingReturnDelay = Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, interceptRating);\r\n                swing.fieldingDelay = fieldingReturnDelay;\r\n                swing.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\r\n                var speed = this.game.batter.skill.offense.speed,\r\n                    baseRunningTime = Mathinator.baseRunningTime(speed);\r\n\r\n                if (swing.outFielder) {\r\n                    //log('OF', fieldingReturnDelay.toString().slice(0,4), baseRunningTime.toString().slice(0,4));\r\n                    swing.bases = 1;\r\n                    fieldingReturnDelay -= baseRunningTime;\r\n                    var difficulty = 1.8;\r\n\r\n                    while (fieldingReturnDelay > baseRunningTime + difficulty && swing.bases < 3) {\r\n                        swing.bases++;\r\n                        difficulty = -1.3;\r\n                        fieldingReturnDelay -= baseRunningTime;\r\n                    }\r\n                } else {\r\n                    //log('-------- IF', fieldingReturnDelay.toString().slice(0,4), baseRunningTime.toString().slice(0,4));\r\n                    swing.fieldersChoice = null;\r\n                    swing.bases = fieldingReturnDelay >= baseRunningTime + 1 ? 1 : 0;\r\n                    if (this.first && fieldingReturnDelay < this.first.getBaseRunningTime()) swing.fieldersChoice = 'first';\r\n                    if (this.first && this.second && fieldingReturnDelay < this.second.getBaseRunningTime() + 0.6) swing.fieldersChoice = 'second';\r\n                    if (this.third && fieldingReturnDelay < this.third.getBaseRunningTime()) swing.fieldersChoice = 'third';\r\n                    if (swing.fieldersChoice) swing.bases = 1;\r\n                }\r\n                swing.thrownOut = swing.bases == 0;\r\n                if (swing.thrownOut) {\r\n                    swing.thrownOut = true;\r\n                    swing.error = false;\r\n                }\r\n            }\r\n        } else {\r\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\r\n                swing.bases = 4;\r\n            } else {\r\n                swing.foul = true;\r\n                swing.caught = false;\r\n            }\r\n        }\r\n        this.game.swingResult = swing;\r\n        return Animator.animateFieldingTrajectory(this.game);\r\n    },\r\n    //printRunnerNames : function() {\r\n    //    return [this.first ? this.first.getName() : '', this.second ? this.second.getName() : '', this.third ? this.third.getname() : ''];\r\n    //},\r\n    /**\r\n     * @param splayAngle\r\n     * @param landingDistance\r\n     * @returns {string|bool}\r\n     */\r\n    findFielder : function(splayAngle, landingDistance) {\r\n        if (Math.abs(90 - splayAngle) > 50) return false;\r\n        if (landingDistance < 10 && landingDistance > -20) {\r\n            return 'catcher';\r\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\r\n            return 'pitcher';\r\n        }\r\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\r\n            if (splayAngle < 45 + 23) {\r\n                return 'third';\r\n            } else if (splayAngle < 45 + 23 + 23) {\r\n                return 'short';\r\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\r\n                return 'second';\r\n            } else {\r\n                return 'first';\r\n            }\r\n        } else if (landingDistance > 90 && landingDistance < 310) {\r\n            if (splayAngle < 45 + 28) {\r\n                return 'left';\r\n            } else if (splayAngle < 45 + 28 + 34) {\r\n                return 'center';\r\n            } else {\r\n                return 'right';\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    positions : {\r\n        pitcher : [90, 66],\r\n        catcher : [0, 0],\r\n        first : [90 + 45 - 7, 98],\r\n        second : [90 + 12.5, 130],\r\n        short : [90 - 12.5, 130],\r\n        third : [90 - 45 + 7, 98],\r\n        left : [45 + 14, 280],\r\n        center : [90, 280],\r\n        right : [135 - 14, 280]\r\n    },\r\n    getPolarDistance : function(a, b) {\r\n        return Mathinator.getPolarDistance(a, b);\r\n    },\r\n    fieldingTest : function() {\r\n        var angle = Math.random()*90+45;\r\n        var distance = Math.random()*320;\r\n        var fielder = this.findFielder(angle, distance);\r\n        var data = {};\r\n        if (fielder) {\r\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\r\n                data.fielder = fielderCandidates[1];\r\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\r\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]]);\r\n            return data;\r\n        }\r\n    },\r\n    aggregateFieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var selections = [];\r\n        for (var i = 0; i < 1000; i++) {\r\n            var angle = Math.random()*90+45;\r\n            var distance = Math.random()*320;\r\n            var fielder = this.findFielder(angle, distance);\r\n            fielders[fielder].tally++;\r\n            if (fielder) {\r\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\r\n            }\r\n            selections.push([angle, distance]);\r\n            selections.push(this.fielderSelectionTest(angle, distance, true));\r\n        }\r\n        return [fielders, selections];\r\n    },\r\n    fielderSelectionTest : function(angle, distance, returnFielder) {\r\n        var distances = [];\r\n        var minDistance = 300;\r\n        var giraffe = this;\r\n        var fielder = false;\r\n        Iterator.each(this.positions, function(position, spot) {\r\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\r\n            distances[thisDistance] = position;\r\n            if (minDistance > thisDistance) {\r\n                minDistance = thisDistance;\r\n                fielder = position;\r\n            }\r\n        });\r\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\r\n    }\r\n};\r\n\r\nexports.Field = Field;","var Game = function(m) {\r\n    this.init(m);\r\n};\r\n\r\nGame.prototype = {\r\n    constructor : Game,\r\n    gamesIntoSeason : 0,\r\n    humanControl : 'none', //home, away, both, none\r\n    console : false,\r\n    quickMode : true,\r\n    debug : [],\r\n    init : function(m) {\r\n        if (m) window.mode = m;\r\n        this.gamesIntoSeason = 1 + Math.floor(Math.random()*142);\r\n        this.field = new Field(this);\r\n        this.teams.away = new Team(this);\r\n        this.teams.home = new Team(this);\r\n        this.log = new Log();\r\n        this.log.game = this;\r\n        this.debug = [];\r\n        this.helper = helper;\r\n        while (this.teams.away.name == this.teams.home.name) {\r\n            this.teams.away.pickName();\r\n        }\r\n        this.umpire = new Umpire(this);\r\n        if (this.humanPitching()) {\r\n            this.stage = 'pitch';\r\n        }\r\n    },\r\n    getInning : function() {\r\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\r\n    },\r\n    humanBatting : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n        }\r\n    },\r\n    humanPitching : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n        }\r\n    },\r\n    end : function() {\r\n        this.stage = 'end';\r\n        var e, n;\r\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' :\r\n            (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName()+'の勝利' :\r\n            (this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName()+'の勝利');\r\n        this.log.note(e, n);\r\n    },\r\n    stage : 'pitch', //pitch, swing\r\n    simulateInput : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch') {\r\n            this.autoPitch(callback);\r\n        } else if (this.stage == 'swing') {\r\n            if (typeof this.pitchTarget != 'object') {\r\n                this.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\r\n        }\r\n    },\r\n    simulatePitchAndSwing : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        this.autoPitch(callback);\r\n        var giraffe = this;\r\n        setTimeout(function() {\r\n            if (typeof giraffe.pitchTarget != 'object') {\r\n                giraffe.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback();});\r\n        }, giraffe.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 1200 : Animator.TIME_FROM_WINDUP + 1200);\r\n    },\r\n    /**\r\n     * generically receive click input and decide what to do\r\n     * @param x\r\n     * @param y\r\n     * @param callback\r\n     */\r\n    receiveInput : function(x, y, callback) {\r\n        if (this.humanControl == 'none') {\r\n            return;\r\n        }\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch' && this.humanPitching()) {\r\n            this.thePitch(x, y, callback);\r\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\r\n            this.theSwing(x, y, callback);\r\n        }\r\n    },\r\n    autoPitchSelect : function() {\r\n        var pitchName = this.helper.selectRandomPitch();\r\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\r\n            pitchName = this.helper.selectRandomPitch();\r\n        }\r\n        var pitch = this.pitcher.pitching[pitchName];\r\n        pitch.name = pitchName;\r\n        this.pitchInFlight = pitch;\r\n    },\r\n    autoPitch : function(callback) {\r\n        var pitcher = this.pitcher,\r\n            giraffe = this;\r\n        if (this.stage == 'pitch') {\r\n            pitcher.windingUp = true;\r\n            if (!this.console) {\r\n                jQ('.baseball').addClass('hide');\r\n                var windup = jQ('.windup');\r\n                windup.css('width', '100%');\r\n            }\r\n            this.autoPitchSelect();\r\n            var pitch = Distribution.pitchLocation(),\r\n                x = pitch.x,\r\n                y = pitch.y;\r\n            if (this.quickMode) {\r\n                this.thePitch(x, y, callback);\r\n            } else {\r\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? Animator.TIME_FROM_SET : Animator.TIME_FROM_WINDUP, function() {\r\n                    !giraffe.console && jQ('.baseball.pitch').removeClass('hide');\r\n                    giraffe.thePitch(x, y, callback);\r\n                    pitcher.windingUp = false;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\r\n        var giraffe = this;\r\n        var bonus = this.batter.eye.bonus || 0,\r\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus,\r\n            convergence, convergenceSum;\r\n\r\n        var x = Distribution.centralizedNumber(),\r\n            y = Distribution.centralizedNumber();\r\n        if (100*Math.random() < eye) {\r\n            convergence = 1.35 * 5*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n            deceptiveX = this.pitchInFlight.x;\r\n            deceptiveY = this.pitchInFlight.y;\r\n        } else {\r\n            convergence = 1.35 * 2*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n        }\r\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\r\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\r\n\r\n        this.swingResult.x = Distribution.cpuSwing(x, this.pitchInFlight.x, eye);\r\n        this.swingResult.y = Distribution.cpuSwing(y, this.pitchInFlight.y, eye);\r\n\r\n        var swingProbability = Distribution.swingLikelihood(eye, x, y, this.umpire);\r\n        if (swingProbability < 100*Math.random()) {\r\n            x = -20;\r\n        }\r\n\r\n        callback(function() {\r\n            giraffe.theSwing(x, y);\r\n        });\r\n    },\r\n    thePitch : function(x, y, callback) {\r\n        if (this.stage == 'pitch') {\r\n            this.pitcher.fatigue++;\r\n            this.pitchTarget.x = x;\r\n            this.pitchTarget.y = y;\r\n\r\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\r\n            this.battersEye = text.getBattersEye(this);\r\n\r\n            var control = this.pitchInFlight.control;\r\n            this.pitchTarget.x = Distribution.pitchControl(this.pitchTarget.x, control);\r\n            this.pitchTarget.y = Distribution.pitchControl(this.pitchTarget.y, control);\r\n\r\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\r\n\r\n            var breakEffect = Distribution.breakEffect(this.pitchInFlight, this.pitcher, this.pitchTarget.x, this.pitchTarget.y);\r\n\r\n            this.pitchInFlight.x = breakEffect.x;\r\n            this.pitchInFlight.y = breakEffect.y;\r\n\r\n            this.log.notePitch(this.pitchInFlight, this.batter);\r\n\r\n            this.stage = 'swing';\r\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\r\n                callback();\r\n            } else {\r\n                this.autoSwing(x, y, callback);\r\n            }\r\n        }\r\n    },\r\n    battersEye : {\r\n        e: '',\r\n        n: ''\r\n    },\r\n    theSwing : function(x, y, callback) {\r\n        if (this.stage == 'swing') {\r\n            this.swingResult = {};\r\n            var bonus = this.batter.eye.bonus || 0,\r\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n\r\n            if (x >= 0 && x <= 200) {\r\n                this.batter.fatigue++;\r\n\r\n                this.swingResult.x = x - this.pitchInFlight.x;\r\n                this.swingResult.y = y - this.pitchInFlight.y;\r\n                this.swingResult.angle = this.setBatAngle();\r\n\r\n                var recalculation = Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\r\n                var precision = Distribution.swing(eye);\r\n\r\n                this.swingResult.x = Math.abs(recalculation.x) > 20 ? recalculation.x * precision : recalculation.x;\r\n                this.swingResult.y = -5 + (recalculation.y < 0 ? recalculation.y * precision : recalculation.y);\r\n\r\n                //log(recalculation.y, precision);\r\n\r\n                this.swingResult.looking = false;\r\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\r\n                    this.swingResult.contact = true;\r\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\r\n                    // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\r\n                    this.debug.push(this.swingResult);\r\n                } else {\r\n                    this.swingResult.contact = false;\r\n                }\r\n            } else {\r\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\r\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\r\n                this.batter.eye.bonus = Math.max(0, eye -\r\n                    Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\r\n                this.swingResult.contact = false;\r\n                this.swingResult.looking = true;\r\n                this.batter.eye.x = this.pitchInFlight.x;\r\n                this.batter.eye.y = this.pitchInFlight.y;\r\n            }\r\n\r\n            this.log.noteSwing(this.swingResult);\r\n            this.stage = 'pitch';\r\n\r\n            var half = this.half;\r\n            this.umpire.makeCall();\r\n            if (half != this.half) {\r\n                callback = this.startOpponentPitching;\r\n            }\r\n\r\n            if (typeof callback == 'function') {\r\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\r\n                    callback();\r\n                } else {\r\n                    this.autoPitch(callback);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    setBatAngle : function(x, y) {\r\n        var giraffe = this;\r\n        var origin = {\r\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\r\n            y: 160\r\n        };\r\n        var swing = {\r\n            x: x ? x : giraffe.pitchInFlight.x + this.swingResult.x,\r\n            y: y ? y : giraffe.pitchInFlight.y + this.swingResult.y\r\n        };\r\n        return Mathinator.battingAngle(origin, swing);\r\n    },\r\n    debugOut : function() {\r\n        log('slugging', this.debug.filter(function(a){return a.bases == 1;}).length,\r\n            this.debug.filter(function(a){return a.bases == 2;}).length,\r\n            this.debug.filter(function(a){return a.bases == 3;}).length,\r\n            this.debug.filter(function(a){return a.bases == 4;}).length\r\n        );\r\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle < -5;}).length);\r\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle < -5 && a.thrownOut;}).length);\r\n        log('weak fly hits (thrown out)', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle > 0 && a.thrownOut;}).length);\r\n        log('good fly hits (not caught)', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle > 0 && !a.thrownOut;}).length);\r\n\r\n        var PO = {};\r\n        this.debug.map(function(a) {\r\n            if (!PO[a.fielder]) {\r\n                PO[a.fielder] = 0;\r\n            }\r\n            if (!a.bases && a.fielder) {\r\n                PO[a.fielder]++;\r\n            }\r\n        });\r\n        log('fielding outs', PO);\r\n\r\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\r\n        var atBats = [];\r\n        hitters.map(function(a) {atBats = atBats.concat(a.atBats);});\r\n\r\n        var LO = atBats.filter(function(ab) {return ab == 'LO';}).length;\r\n        log('line outs', LO);\r\n        var FO = atBats.filter(function(ab) {return ab == 'FO';}).length;\r\n        log('fly outs', FO);\r\n        var GO = atBats.filter(function(ab) {return ab == 'GO';}).length;\r\n        log('groundouts', GO);\r\n        var SO = atBats.filter(function(ab) {return ab == 'SO';}).length;\r\n        log('strikeouts', SO);\r\n        log('fouls', this.debug.filter(function(a){return a.foul;}).length);\r\n    },\r\n    startOpponentPitching : null, // late function\r\n    pitchTarget : {x : 100, y : 100},\r\n    pitchInFlight : {\r\n        x : 100,\r\n        y : 100,\r\n        breakDirection : [0, 0],\r\n        name : 'slider',\r\n        velocity : 50,\r\n        'break' : 50,\r\n        control : 50\r\n    },\r\n    swingResult : {\r\n        x : 100, //difference to pitch location\r\n        y : 100, //difference to pitch location\r\n        strike : false,\r\n        foul : false,\r\n        caught : false,\r\n        contact : false,\r\n        looking : true,\r\n        bases : 0,\r\n        fielder : 'short',\r\n        outs : 0\r\n    },\r\n    pitchSelect : function() {\r\n\r\n    },\r\n    field : null,\r\n    teams : {\r\n        away : null,\r\n        home : null\r\n    },\r\n    log : null,\r\n    half : 'top',\r\n    inning : 1,\r\n    scoreboard : {\r\n        away : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        },\r\n        home : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        }\r\n    },\r\n    tally : {\r\n        away : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        },\r\n        home : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        }\r\n    }\r\n};\r\n\r\nexports.Game = Game;","var Manager = function(team) {\r\n    this.init(team);\r\n};\r\n\r\nManager.prototype = {\r\n    constructor : Manager,\r\n    init : function(team) {\r\n        this.team = team;\r\n    },\r\n    makeLineup : function() {\r\n        var jerseyNumber = 1;\r\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\r\n        this.team.positions.pitcher.position = 'pitcher';\r\n        this.team.positions.pitcher.number = jerseyNumber++;\r\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], 'right');\r\n        this.team.positions.catcher.position = 'catcher';\r\n        this.team.positions.catcher.number = jerseyNumber++;\r\n        Iterator.each(this.team.bench, function(key, player) {\r\n            player.number = jerseyNumber++;\r\n        });\r\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\r\n        this.team.positions.short.position = 'short';\r\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\r\n        this.team.positions.second.position = 'second';\r\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\r\n        this.team.positions.third.position = 'third';\r\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.center.position = 'center';\r\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.left.position = 'left';\r\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.right.position = 'right';\r\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'left');\r\n        this.team.positions.first.position = 'first';\r\n\r\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[3].order = 3;\r\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[2].order = 2;\r\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[4].order = 4;\r\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[0].order = 0;\r\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[1].order = 1;\r\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[5].order = 5;\r\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[6].order = 6;\r\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[7].order = 7;\r\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[8].order = 8;\r\n    },\r\n    selectForSkill : function(pool, skillset, requiredThrowingHandedness) {\r\n        if (this.team.bench.length || pool == this.team.positions) {\r\n            var selection = this.team.bench[0];\r\n            var rating = 0;\r\n            var index = 0;\r\n            Iterator.each(pool, function(key, player) {\r\n                var skills = skillset.slice();\r\n                var cursor = player.skill;\r\n                var property = skills.shift();\r\n                while (property) {\r\n                    cursor = cursor[property];\r\n                    property = skills.shift();\r\n                }\r\n                if (!(player.order+1) && cursor >= rating && (!requiredThrowingHandedness || player.throws == requiredThrowingHandedness)) {\r\n                    rating = cursor;\r\n                    selection = player;\r\n                    index = key;\r\n                }\r\n            });\r\n            if (pool == this.team.bench) {\r\n                delete this.team.bench[index];\r\n                this.team.bench = this.team.bench.filter(function(player) {\r\n                    return player instanceof selection.constructor;\r\n                });\r\n            }\r\n            return selection;\r\n        }\r\n        return 'no players available';\r\n    }\r\n};\r\n\r\nexports.Manager = Manager;","var Player = function(team) {\r\n    this.init(team);\r\n    var offense = this.skill.offense;\r\n    var defense = this.skill.defense;\r\n    var randBetween = function(a, b, skill) {\r\n        if (offense[skill]) skill = offense[skill];\r\n        if (defense[skill]) skill = defense[skill];\r\n        if (isNaN(skill)) skill = 50;\r\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\r\n        return Math.floor((skill/100) * (b - a) + a);\r\n    };\r\n    // let's just say we're about X games into the season\r\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\r\n    var IP, ER, GS, W, L;\r\n    if (this.skill.pitching > 65) {\r\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\r\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\r\n        if (IP > gamesIntoSeason) {\r\n            //starter\r\n            GS = Math.floor(gamesIntoSeason/5);\r\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\r\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\r\n        } else {\r\n            //reliever\r\n            GS = Math.floor(gamesIntoSeason/40);\r\n            W = randBetween(0, GS*0.6, this.skill.pitching);\r\n            L = randBetween((GS - W), 0, this.skill.pitching);\r\n        }\r\n    }\r\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\r\n    var paRemaining = pa;\r\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\r\n    paRemaining -= bb;\r\n    var ab = paRemaining;\r\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\r\n    paRemaining -= so;\r\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\r\n    paRemaining -= h;\r\n\r\n    var doubles = randBetween(0, h/4, 'power');\r\n    var triples = randBetween(0, h/12, 'speed');\r\n    var hr = Math.max(0, randBetween(-h/20, h/5, 'power'));\r\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\r\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\r\n    var hbp = randBetween(0, gamesIntoSeason/25);\r\n    var sac = randBetween(0, gamesIntoSeason/5, 'eye');\r\n\r\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\r\n    var E = randBetween(chances/10, 0, 'fielding');\r\n    var PO = chances - E;\r\n\r\n    this.stats = {\r\n        pitching : {\r\n            pitches : 0, // in game\r\n            GS : GS,\r\n            W: W,\r\n            L: L,\r\n            strikes : 0, // in game\r\n            K : 0, // in game\r\n            getERA : function() {\r\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3);\r\n            },\r\n            ERA : null,\r\n            ER : ER,\r\n            H : 0, // in game\r\n            HR : 0, // in game\r\n            BB : 0, // in game\r\n            IP : [IP,0]\r\n        },\r\n        batting : {\r\n            getBA : function() {\r\n                return this.h / (Math.max(1, this.ab));\r\n            },\r\n            ba : null,\r\n            getOBP : function() {\r\n                return (this.h + this.bb + this.hbp)/(this.ab + this.bb + this.hbp + this.sac);\r\n            },\r\n            obp : null,\r\n            getSLG : function() {\r\n                return ((this.h - this['2b'] - this['3b'] - this.hr) + 2*this['2b'] + 3*this['3b'] + 4*this.hr)/this.ab;\r\n            },\r\n            slg : null,\r\n            pa : pa,\r\n            ab : ab,\r\n            so : so,\r\n            bb : bb,\r\n            h : h,\r\n            '2b' : doubles,\r\n            '3b' : triples,\r\n            hr : hr,\r\n            r : r,\r\n            rbi : rbi,\r\n            hbp : hbp,\r\n            sac : sac\r\n        },\r\n        fielding : {\r\n            E : E,\r\n            PO : PO, // should depend on position\r\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\r\n        }\r\n    };\r\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\r\n    this.stats.batting.ba = this.stats.batting.getBA();\r\n};\r\n\r\nPlayer.prototype = {\r\n    constructor : Player,\r\n    init : function(team, hero) {\r\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\r\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\r\n        this.team = team;\r\n        this.skill = {};\r\n        this.eye = {\r\n            x: 100,\r\n            y: 100\r\n        };\r\n        this.pitching = {averaging : []};\r\n        this.number = 0;\r\n        this.randomizeSkills(hero || Math.random() > 0.9);\r\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\r\n            nameKey = Math.floor(Math.random()*data.names.length);\r\n\r\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\r\n        var jSurname = data.surnamesJ[surnameKey],\r\n            jGivenName = data.namesJ[nameKey];\r\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\r\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\r\n        this.nameJ = jSurname + jGivenName;\r\n        this.surname = data.surnames[surnameKey];\r\n        this.surnameJ = data.surnamesJ[surnameKey];\r\n        this.atBats = [];\r\n    },\r\n    atBatObjects : [],\r\n    getAtBats : function() {\r\n        if (this.atBats.length > this.atBatObjects.length) {\r\n            this.atBatObjects = this.atBats.map(function(item) {\r\n                return new AtBat(item);\r\n            });\r\n        }\r\n        return this.atBatObjects;\r\n    },\r\n    recordRBI : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\r\n    },\r\n    recordInfieldHit : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\r\n    },\r\n    getBaseRunningTime : function() {\r\n        return Mathinator.baseRunningTime(this.skill.offense.speed);\r\n    },\r\n    randomizeSkills : function(hero) {\r\n        this.hero = hero;\r\n        var giraffe = this;\r\n        var randValue = function(isPitching) {\r\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\r\n            if (hero) {\r\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\r\n            }\r\n            if (isPitching) giraffe.pitching.averaging.push(value);\r\n            return value;\r\n        };\r\n        this.skill.offense = {\r\n            eye : randValue(),\r\n            power : randValue(),\r\n            speed : randValue()\r\n        };\r\n        this.skill.defense = {\r\n            catching : randValue(),\r\n            fielding : randValue(),\r\n            speed : randValue(),\r\n            throwing : randValue()\r\n        };\r\n        this.pitching.averaging = [];\r\n        this.pitching['4-seam'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        this.pitching.slider = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        if (Math.random() < 0.17) {\r\n            // can pitch!\r\n            if (Math.random() > 0.6) {\r\n                this.pitching['2-seam'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n            if (Math.random() < 0.18) {\r\n                this.pitching.fork = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n            if (Math.random() > 0.77) {\r\n                this.pitching.cutter = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n            if (Math.random() < 0.21) {\r\n                this.pitching.sinker = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n\r\n            if (Math.random() < 0.4) {\r\n                this.pitching.curve = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n\r\n            if (Math.random() < 0.9) {\r\n                this.pitching.change = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n        }\r\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current) {\r\n            return prev + current;\r\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\r\n        delete this.pitching.averaging;\r\n    },\r\n    getSurname : function() {\r\n        return mode == 'n' ? this.surnameJ : this.surname;\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    getUniformNumber : function() {\r\n        return text('#') + this.number;\r\n    },\r\n    getOrder : function() {\r\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\r\n    },\r\n    eye : {},\r\n    fatigue : 0,\r\n    name : '',\r\n    number : 0,\r\n    position : '',\r\n    atBats : []\r\n};\r\n\r\nexports.Player = Player;","var Team = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nTeam.prototype = {\r\n    constructor : Team,\r\n    init : function(game) {\r\n        this.pickName();\r\n        this.lineup = [];\r\n        this.bench = [];\r\n        this.bullpen = [];\r\n        this.positions = {\r\n            pitcher : null,\r\n            catcher : null,\r\n            first : null,\r\n            second : null,\r\n            short : null,\r\n            third : null,\r\n            left : null,\r\n            center : null,\r\n            right : null\r\n        };\r\n        this.game = game;\r\n        for (var j = 0; j < 20; j++) {\r\n            this.bench.push(new Player(this));\r\n        }\r\n        if (this.bench.length == 20) {\r\n            this.manager = new Manager(this);\r\n            this.manager.makeLineup();\r\n        }\r\n    },\r\n    pickName : function() {\r\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\r\n        this.name = data.teamNames[teamNameIndex];\r\n        this.nameJ = data.teamNamesJ[teamNameIndex];\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    lineup : [],\r\n    positions : {},\r\n    manager : null,\r\n    bench : [],\r\n    bullpen : [],\r\n    nowBatting : 0,\r\n    expanded : 'Player&'\r\n};\r\n\r\nexports.Team = Team;","var Umpire = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nUmpire.prototype = {\r\n    constructor : Umpire,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.playBall();\r\n    },\r\n    count : {\r\n        strikes : 0,\r\n        balls : 0,\r\n        outs : 0\r\n    },\r\n    playBall : function() {\r\n        this.game.half = 'top';\r\n        this.game.inning = 1;\r\n        this.game.batter = this.game.teams.away.lineup[0];\r\n        this.game.batterRunner = this.game.teams.away.lineup[0];\r\n        this.game.deck = this.game.teams.away.lineup[1];\r\n        this.game.hole = this.game.teams.away.lineup[2];\r\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\r\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\r\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\r\n        this.game.log.note(e, n);\r\n        this.game.log.noteBatter(\r\n            this.game.batter\r\n        );\r\n    },\r\n    makeCall : function() {\r\n        this.says = '';\r\n\r\n        var result = this.game.swingResult;\r\n        var pitcher = this.game.pitcher;\r\n        var batter = this.game.batter;\r\n\r\n        if (this.game.swingResult.fielder) {\r\n            var fielder = this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder]\r\n        } else {\r\n            fielder = null;\r\n        }\r\n\r\n        this.game.batterRunner = this.game.batter;\r\n\r\n        pitcher.stats.pitching.pitches++;\r\n        if (result.looking) {\r\n            if (result.strike) {\r\n                this.count.strikes++;\r\n                pitcher.stats.pitching.strikes++;\r\n            } else {\r\n                this.count.balls++;\r\n            }\r\n        } else {\r\n            if (result.contact) {\r\n                if (result.caught) {\r\n                    batter.stats.batting.pa++;\r\n                    pitcher.stats.pitching.IP[1]++;\r\n                    if (result.sacrificeAdvances.length && this.count.outs < 2) {\r\n                        batter.stats.batting.sac++;\r\n                        this.game.batter.atBats.push(Log.prototype.SACRIFICE);\r\n                        this.advanceRunners(false, null, result.sacrificeAdvances);\r\n                    } else {\r\n                        batter.stats.batting.ab++;\r\n                        if (result.flyAngle < 15) {\r\n                            this.game.batter.atBats.push(Log.prototype.LINEOUT);\r\n                        } else {\r\n                            this.game.batter.atBats.push(Log.prototype.FLYOUT);\r\n                        }\r\n                    }\r\n                    this.count.outs++;\r\n                    this.newBatter();\r\n                } else {\r\n                    if (result.foul) {\r\n                        this.count.strikes++;\r\n                        pitcher.stats.pitching.strikes++;\r\n                        if (this.count.strikes > 2) this.count.strikes = 2;\r\n                    } else {\r\n                        batter.stats.batting.pa++;\r\n                        batter.stats.batting.ab++;\r\n                        if (result.fieldersChoice && this.count.outs < 2) {\r\n                            result.bases = 0;\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.FIELDERS_CHOICE);\r\n                            this.advanceRunners(false, result.fieldersChoice);\r\n                            this.reachBase();\r\n                            result.outs = this.count.outs;\r\n                            this.newBatter();\r\n                        } else if (result.fieldersChoice) {\r\n                            result.bases = 0;\r\n                            result.thrownOut = true;\r\n                        }\r\n                        if (result.thrownOut) {\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                            if (this.count.outs < 3) {\r\n                                this.advanceRunners(false);\r\n                            }\r\n                            result.outs = this.count.outs;\r\n                            this.newBatter();\r\n                        }\r\n                        if (result.hitByPitch) {\r\n                            batter.stats.batting.ab--;\r\n                        }\r\n                        if (result.bases) {\r\n                            if (!result.error) {\r\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\r\n                                pitcher.stats.pitching.H++;\r\n                            } else {\r\n                                if (result.bases > 0) {\r\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away'].E++;\r\n                                    fielder.stats.fielding.E++;\r\n                                }\r\n                            }\r\n                            var bases = result.bases;\r\n                            switch (bases) {\r\n                                case 0 :\r\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                                    break;\r\n                                case 1 :\r\n                                    if (result.error) {\r\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\r\n                                    } else {\r\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\r\n                                        batter.stats.batting.h++;\r\n                                    }\r\n                                    break;\r\n                                case 2 :\r\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['2b']++;\r\n                                    break;\r\n                                case 3 :\r\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['3b']++;\r\n                                    break;\r\n                                case 4 :\r\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\r\n                                    pitcher.stats.pitching.HR++;\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting.hr++;\r\n                                    break;\r\n                            }\r\n                            if (bases > 0 && bases < 4 && !result.error) {\r\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\r\n                                    batter.recordInfieldHit();\r\n                                }\r\n                            }\r\n                            if (bases >= 1) {\r\n                                this.advanceRunners();\r\n                                this.reachBase();\r\n                                bases -= 1;\r\n                            }\r\n                            while (bases > 0) {\r\n                                bases -= 1;\r\n                                this.advanceRunners();\r\n                            }\r\n                            this.newBatter();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                pitcher.stats.pitching.strikes++;\r\n                this.count.strikes++;\r\n            }\r\n        }\r\n\r\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\r\n\r\n        result.outs = this.count.outs;\r\n\r\n        if (this.count.strikes > 2) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.ab++;\r\n            batter.stats.batting.so++;\r\n            pitcher.stats.pitching.K++;\r\n            this.count.outs++;\r\n            pitcher.stats.pitching.IP[1]++;\r\n            this.count.balls = this.count.strikes = 0;\r\n            this.says = 'Strike three. Batter out.';\r\n            batter.atBats.push(Log.prototype.STRIKEOUT);\r\n            this.newBatter();\r\n        }\r\n        if (this.count.balls > 3) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.bb++;\r\n            pitcher.stats.pitching.BB++;\r\n            this.says = 'Ball four.';\r\n            this.count.balls = this.count.strikes = 0;\r\n            batter.atBats.push(Log.prototype.WALK);\r\n            this.advanceRunners(true).reachBase().newBatter();\r\n        }\r\n        if (this.count.outs > 2) {\r\n            this.says = 'Three outs, change.';\r\n            this.count.outs = this.count.balls = this.count.strikes = 0;\r\n            pitcher.stats.pitching.IP[0]++;\r\n            pitcher.stats.pitching.IP[1] = 0;\r\n            this.changeSides();\r\n        }\r\n    },\r\n    reachBase : function() {\r\n        this.game.field.first = this.game.batter;\r\n        this.game.field.first.fatigue += 2;\r\n        return this;\r\n    },\r\n    advanceRunners : function(isWalk, fieldersChoice, sacrificeAdvances) {\r\n        isWalk = !!isWalk;\r\n        var first = this.game.field.first,\r\n            second = this.game.field.second,\r\n            third = this.game.field.third,\r\n            game = this.game,\r\n            swing = this.game.swingResult;\r\n        \r\n        if (isWalk) {\r\n            if (first) {\r\n                if (second) {\r\n                    if (third) {\r\n                        //bases loaded\r\n                        game.batter.recordRBI();\r\n                        game.batter.stats.batting.rbi++;\r\n                        third.atBats.push(Log.prototype.RUN);\r\n                        third.stats.batting.r++;\r\n                        game.pitcher.stats.pitching.ER++;\r\n                        game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\r\n                        game.tally[game.half == 'top' ? 'away' : 'home'].R++;\r\n                        game.field.third = second;\r\n                        game.field.second = first;\r\n                        first = null;\r\n                    } else {\r\n                        // 1st and second\r\n                        game.field.third = second;\r\n                        game.field.second = first;\r\n                        game.field.first = null;\r\n                    }\r\n                } else {\r\n                    if (third) {\r\n                        // first and third\r\n                        game.field.second = first;\r\n                        game.field.first = null;\r\n                    } else {\r\n                        // first only\r\n                        game.field.second = first;\r\n                        game.field.first = null;\r\n                    }\r\n                }\r\n            } else {\r\n                // no one on first\r\n            }\r\n        } else {\r\n            if (fieldersChoice) {\r\n                game.field[fieldersChoice] = null;\r\n                first = this.game.field.first;\r\n                second = this.game.field.second;\r\n                third = this.game.field.third;\r\n            }\r\n            var canAdvance = function() {return true;};\r\n            if (sacrificeAdvances) {\r\n                canAdvance = function(position) {\r\n                    switch (position) {\r\n                        case 'first':\r\n                            return sacrificeAdvances.indexOf('first') > -1 && (canAdvance('second') || !second);\r\n                        case 'second':\r\n                            return sacrificeAdvances.indexOf('second') > -1 && (canAdvance('third') || !third);\r\n                        case 'third':\r\n                            return sacrificeAdvances.indexOf('third') > -1;\r\n                    }\r\n                };\r\n            }\r\n            if (third instanceof Player && canAdvance('third')) {\r\n                // run scored\r\n                game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\r\n                game.tally[game.half == 'top' ? 'away' : 'home'].R++;\r\n                if (game.batter != third) {\r\n                    game.batter.recordRBI();\r\n                    third.atBats.push(Log.prototype.RUN);\r\n                }\r\n                game.batter.stats.batting.rbi++;\r\n                third.stats.batting.r++;\r\n                game.pitcher.stats.pitching.ER++;\r\n            }\r\n            if (second && canAdvance('second')) {\r\n                game.field.third = second;\r\n            } else {\r\n                game.field.third = null;\r\n            }\r\n            if (first && canAdvance('first')) {\r\n                game.field.second = first;\r\n            } else {\r\n                game.field.second = null;\r\n            }\r\n            game.field.first = null;\r\n        }\r\n        return this;\r\n    },\r\n    newBatter : function() {\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        this.count.balls = this.count.strikes = 0;\r\n        this.game.log.notePlateAppearanceResult(this.game);\r\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\r\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\r\n        team.nowBatting = (team.nowBatting + 1)%9;\r\n        if (this.count.outs < 3) {\r\n            this.game.log.noteBatter(this.game.batter);\r\n        }\r\n    },\r\n    changeSides : function() {\r\n        this.game.swingResult = {};\r\n        this.game.swingResult.looking = true; // hide bat\r\n        this.game.pitchInFlight.x = null; // hide ball\r\n        this.game.pitchInFlight.y = null; // hide ball\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        var offense, defense;\r\n        this.game.field.first = null;\r\n        this.game.field.second = null;\r\n        this.game.field.third = null;\r\n        if (this.game.half == 'top') {\r\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\r\n                return this.game.end();\r\n            }\r\n            this.game.half = 'bottom';\r\n        } else {\r\n            if (this.game.inning + 1 > 9) {\r\n                return this.game.end();\r\n            }\r\n            this.game.inning++;\r\n            this.game.half = 'top';\r\n        }\r\n        offense = this.game.half == 'top' ? 'away' : 'home';\r\n        defense = this.game.half == 'top' ? 'home' : 'away';\r\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\r\n                +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\r\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\r\n        this.game.log.note(e, n);\r\n        var team = this.game.teams[offense];\r\n        this.game.batter = team.lineup[team.nowBatting];\r\n        this.game.batterRunner = this.game.batter;\r\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\r\n\r\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\r\n        this.game.log.noteBatter(this.game.batter);\r\n        this.game.autoPitchSelect();\r\n    },\r\n    says : 'Play ball!',\r\n    game : null\r\n};\r\n\r\nexports.Umpire = Umpire;","var Catcher = function() {\r\n    this.init();\r\n};\r\n\r\nCatcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Fielder = function() {\r\n    this.init();\r\n};\r\n\r\nFielder.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Pitcher = function() {\r\n    this.init();\r\n};\r\n\r\nPitcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Batter = function() {\r\n    this.init();\r\n};\r\n\r\nBatter.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Runner = function() {\r\n    this.init();\r\n};\r\n\r\nRunner.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","IndexController = function($scope) {\r\n    window.s = $scope;\r\n    $scope.t = text;\r\n\r\n    $scope.mode = function(setMode) {\r\n        if (setMode) {\r\n            mode = setMode;\r\n        }\r\n        return mode;\r\n    };\r\n\r\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\r\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\r\n        Game.prototype.quickMode = !!quickMode;\r\n        $scope.y = new Game();\r\n        var game = $scope.y;\r\n        s2.y = game;\r\n        bindMethods();\r\n        jQ('.blocking').remove();\r\n        if (game.humanControl == 'none' && game.quickMode) {\r\n            var n = 0;\r\n            do {\r\n                n++;\r\n                game.simulateInput(function(callback) {\r\n                    typeof callback == 'function' && callback();\r\n                });\r\n            } while (game.stage != 'end' && n < 500);\r\n            log('sim ended');\r\n            game.debugOut();\r\n        } else if (game.humanControl == 'none') {\r\n            var scalar = game.quickMode ? 0.05 : 1;\r\n            var auto = setInterval(function() {\r\n                if (game.stage == 'end') {\r\n                    clearInterval(auto);\r\n                }\r\n                game.simulatePitchAndSwing(function(callback) {\r\n                    game.quickMode ? void 0 : $scope.$apply();\r\n                    $scope.updateFlightPath(callback);\r\n                });\r\n            }, scalar*(game.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 2000 : Animator.TIME_FROM_WINDUP + 2000));\r\n        }\r\n        if (game.humanControl == 'away') {\r\n            game.simulateInput(function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        }\r\n        if (game.humanControl == 'home') {\r\n\r\n        }\r\n    };\r\n\r\n    var bindMethods = function() {\r\n        var game = $scope.y;\r\n        $scope.holdUpTimeouts = [];\r\n        $scope.expandScoreboard = false;\r\n        var animator = new Animator();\r\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\r\n\r\n        // avoid scope cycles, any other easy way?\r\n        var bat = jQ('.target .swing.stance-indicator');\r\n        var showBat = function(event) {\r\n            if (game.humanBatting()) {\r\n                var offset = jQ('.target').offset();\r\n                var relativeOffset = {\r\n                    x : event.pageX - offset.left,\r\n                    y : 200 - (event.pageY - offset.top)\r\n                };\r\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\r\n                bat.css({\r\n                    top: 200-relativeOffset.y + \"px\",\r\n                    left: relativeOffset.x + \"px\",\r\n                    transform: \"rotate(\" + angle + \"deg) rotateY(\"+(game.batter.bats == \"left\" ? 0 : -0)+\"deg)\"\r\n                });\r\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\r\n                    bat.hide();\r\n                } else {\r\n                    bat.show();\r\n                }\r\n            }\r\n        };\r\n        var glove = jQ('.target .glove.stance-indicator');\r\n        var showGlove = function(event) {\r\n            if (game.humanPitching()) {\r\n                var offset = jQ('.target').offset();\r\n                var relativeOffset = {\r\n                    x : event.pageX - offset.left,\r\n                    y : 200 - (event.pageY - offset.top)\r\n                };\r\n                glove.css({\r\n                    top: 200-relativeOffset.y + \"px\",\r\n                    left: relativeOffset.x + \"px\"\r\n                });\r\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\r\n                    glove.hide();\r\n                } else {\r\n                    glove.show();\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.selectPitch = function(pitchName) {\r\n            if (game.stage == 'pitch') {\r\n                game.pitchInFlight = jQ.extend({}, game.pitcher.pitching[pitchName]);\r\n                game.pitchInFlight.name = pitchName;\r\n                game.swingResult.looking = true;\r\n            }\r\n        };\r\n        $scope.allowInput = true;\r\n        $scope.holdUp = function() {\r\n            jQ('.no-swing').click();\r\n            $scope.$apply();\r\n        };\r\n        game.startOpponentPitching = function(callback) {\r\n            $scope.updateFlightPath(callback);\r\n        };\r\n        $scope.indicate = function($event) {\r\n            if (!$scope.allowInput) {\r\n                return;\r\n            }\r\n            if (game.pitcher.windingUp) {\r\n                return;\r\n            }\r\n            if (game.humanPitching()) $scope.allowInput = false;\r\n            var offset = jQ('.target').offset();\r\n            var relativeOffset = {\r\n                x : $event.pageX - offset.left,\r\n                y : 200 - ($event.pageY - offset.top)\r\n            };\r\n            clearTimeout($scope.lastTimeout);\r\n            while ($scope.holdUpTimeouts.length) {\r\n                clearTimeout($scope.holdUpTimeouts.shift());\r\n            }\r\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        };\r\n        $scope.abbreviatePosition = function(position) {\r\n            if (mode == 'e') {\r\n                return {\r\n                    pitcher : 'P',\r\n                    catcher : 'C',\r\n                    first : '1B',\r\n                    second : '2B',\r\n                    short : 'SS',\r\n                    third : '3B',\r\n                    left : 'LF',\r\n                    center : 'CF',\r\n                    right : 'RF'\r\n                }[position];\r\n            }\r\n            return text.fielderShortName(position);\r\n        };\r\n        $scope.$watch('y.humanBatting()', function() {\r\n            if ($scope.y.humanBatting()) {\r\n                jQ('.target').mousemove(showBat);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showBat);\r\n                bat.hide();\r\n            }\r\n        });\r\n        $scope.$watch('y.humanPitching()', function() {\r\n            if ($scope.y.humanPitching()) {\r\n                jQ('.target').mousemove(showGlove);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showGlove);\r\n                glove.hide();\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n};","ScoreboardDirective = function() {\r\n    return {\r\n        scope: {\r\n            game: '=',\r\n            text: '='\r\n        },\r\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\r\n        link: function(scope) {\r\n            window.s2 = scope;\r\n            scope.t = scope.text;\r\n            scope.y = scope.game;\r\n        }\r\n    };\r\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\r\n\r\ncacheKey = Math.floor(Math.random()*1500);\r\n\r\nangular.module('directives', [])\r\n    .directive('scoreboard', ScoreboardDirective);\r\n\r\nangular.module('controllers', [])\r\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
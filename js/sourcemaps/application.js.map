{"version":3,"sources":["text.js","data.js","helper.js","log.js","Animator.js","atBat.js","field.js","game.js","manager.js","player.js","team.js","umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["mode","text","phrase","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","OPS","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","Math","floor","random","Log","this","init","prototype","game","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","shortRecord","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","pitchInFlight","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","splay","notePlateAppearanceResult","pointer","Animator","square","constructor","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","transition","percent","step","padding","max","borderWidth","transform","delay","ease","Linear","easeNone","transitions","horizontalBreak","abs","addClass","css","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","eye","removeClass","humanPitching","holdUpTimeouts","push","holdUp","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","identifier","Field","hasRunnersOn","Player","translateSwingResultToStylePosition","bottom","cos","PI","travelDistance","sin","min","determineSwingContactResult","swing","splayAngle","flyAngle","power","bonus","landingDistance","findFielder","debug","debugData","dd","half","teams","home","away","fatigue","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","grounder","plus","gatherAndThrowSuccess","outFielder","fieldingReturnDelay","a","b","sqrt","fieldingTest","angle","distance","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","i","returnFielder","minDistance","giraffe","each","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","window","field","Team","pickName","umpire","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","hasOwnProperty","windingUp","windup","animate","width","deceptiveX","deceptiveY","count","balls","strikes","convergence","convergenceSum","swingLikelihood","chance","totalLikelihood","breakDirection","battersEye","control","debugOut","filter","length","lineup","map","p","atBats","reduce","ab","origin","tan","pow","makeCall","startOpponentPitching","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","property","selection","rating","index","skills","cursor","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sf","chances","PO","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","hero","randValue","isPitching","value","catching","prev","current","arr","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","batterRunner","deck","hole","says","newBatter","onBase","advanceRunners","reachBase","changeSides","isWalk","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","spectateCpu","s2","bindMethods","remove","scalar","auto","setInterval","clearInterval","expandScoreboard","animator","bind","selectPitch","extend","click","indicate","$event","offset","relativeOffset","pageX","pageY","clearTimeout","abbreviatePosition","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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iBAAAC,QAEA,MACA,KAAA,GACAsB,WAAA,iBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,iBAAAvH,KAAAgG,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,eAAAvH,KAAAgG,iBAAAC,SAIAsB,WAAAvH,KAAA4G,OAEA,GAAA,KAAA7G,KAAA,CAEA,GADAwH,WAAAH,OAAA,IACAE,MAEA,OADArB,QAAAjG,KAAAgG,iBAAAC,SACAqB,OACA,IAAA,QACAC,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,MACAsB,WAAA,UAAAtB,QAAA,GACA,MACA,KAAA,MACAsB,WAAAtB,QAAA,GACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,IACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,SAKA,QADAA,QAAAjG,KAAA0G,gBAAAT,SACAoB,OACA,IAAA,GAEAE,WADAC,QACA,QAAAvB,QAAA,OAEA,MAAAA,QAAA,MAEA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,IAIAsB,WAAAvH,KAAA4G,OAEA,MAAAW,YCxQAG,MACAC,UACA,OACA,SACA,YACA,SACA,WACA,MACA,WACA,YACA,WACA,OACA,UACA,SACA,SACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,QACA,WACA,WACA,OACA,MACA,QACA,YACA,WACA,YACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,SACA,OACA,OACA,WACA,WACA,MACA,SACA,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,UACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,aACA,WACA,UACA,WACA,OACA,QACA,YACA,YACA,QACA,WACA,aACA,UACA,QACA,YACA,WACA,OACA,YACA,SACA,SACA,UACA,UACA,SACA,YACA,cACA,UACA,WACA,WACA,UACA,QACA,WACA,YACA,OACA,YACA,SACA,OACA,YACA,OACA,WACA,OACA,WACA,YACA,YACA,SACA,SACA,OACA,aACA,UACA,SACA,WACA,UACA,YACA,UACA,UACA,SACA,SACA,YCthBAC,QACAC,kBACA5F,UAAA,EAAA,EAAA,GACAC,UAAA,GAAA,IAAA,IACAG,QAAA,IAAA,IAAA,KACAC,QAAA,IAAA,IAAA,KAEAH,QAAA,IAAA,IAAA,IACAC,MAAA,EAAA,IAAA,KACAG,OAAA,EAAA,IAAA,KAEAC,QAAA,EAAA,IAAA,MAEAsF,kBAAA,WACA,OACA,SAAA,SAAA,SAAA,SACA,SAAA,OAAA,QACA,UACAC,KAAAC,MAAA,EAAAD,KAAAE,YClB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","file":"application.js","sourcesContent":["var mode = 'n';\n\ntext = function(phrase) {\n    if (!mode) mode = 'n';\n    var string = {\n        n : {\n            empty: '-',\n            ' 1st' : '1番',\n            ' 2nd' : '2番',\n            ' 3rd' : '3番',\n            ' 4th' : '4番',\n            ' 5th' : '5番',\n            ' 6th' : '6番',\n            ' 7th' : '7番',\n            ' 8th' : '8番',\n            ' 9th' : '9番',\n            'Now batting' : '次のバッタ、',\n            'way outside' : '相当外角',\n            'outside' : '外角',\n            'inside' : '内角',\n            'way inside' : '相当内角',\n            'way low' : '相当低め',\n            'low' : '低め',\n            'high' : '高め',\n            'way high' : '相当高め',\n            'down the middle' : '真ん中',\n            'first baseman': 'ファースト',\n            'second baseman': 'セカンド',\n            'third baseman': 'サード',\n            'shortstop': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left fielder': 'レフト',\n            'center fielder': 'センター',\n            'right fielder': 'ライト',\n            'Strike.' : 'ストライク。',\n            'Ball.' : 'ボール。',\n            'Fouled off.': 'ファウル。',\n            'In play.': 'インプレー。',\n            'Swinging strike.': '空振り。',\n            '4-seam': 'ストレイト',\n            '2-seam': 'シュート',\n            'slider': 'スライダー',\n            'fork': 'フォーク',\n            'cutter': 'カット',\n            'sinker': 'シンカー',\n            'curve': 'カーブ',\n            'change': 'チェンジ',\n            ' struck out looking.': '、見逃し三振。',\n            ' walked.': '、フォアボール。',\n            ' struck out swinging.': '、空振り三振。',\n            'Previous: ': '前：',\n            'looks like: ': '予想',\n            'breaking ball': '変化球',\n            'fastball': 'ストレート',\n            'Batting, ': '打球',\n            'Catching, pitch selection': '捕球選択',\n            'Season': '記録',\n            'Game': '今試合',\n            'Pitch': '球',\n            'Control': '制球',\n            'Velocity': '速度',\n            'Break': '変化',\n            'At Bat :': 'バッタ',\n            'On Deck :': '次バッタ',\n            'Eye :': '目',\n            'Power :': '力',\n            'Speed :': '速',\n            'Up to Bat': '打席',\n            'Fielding': '守備',\n            'BA' : '打率',\n            'OBP' : '出塁',\n            'OPS' : '出長',\n            'PA' : '打席',\n            'H/2B/3B/HR' : '安／二／三／本',\n            'H' : '安',\n            '2B' : '二',\n            '3B' : '三',\n            'HR' : '本塁打',\n            'RBI' : '打点',\n            'R' : '得点',\n            'BB' : '四球',\n            'SO' : '三振',\n\n            'Select Language:' : '言語',\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\n            'Play Ball!' : 'プレーボール',\n            'Spectate the CPU': 'CPU観戦',\n\n            'Throws/Bats' : ' ',\n            'LHP' : '左投',\n            'RHP' : '右投',\n            'LHB' : '左打',\n            'RHB' : '右打',\n            'L' : '左投',\n            'R ' : '右投',\n            ' L ' : '左打',\n            ' R ' : '右打',\n            '#' : '背番号'\n        },\n        e : {\n            empty: '-',\n            'Season': 'Career'\n        }\n    }[mode][phrase];\n    return string ? string : phrase;\n};\n\ntext.fielderShortName = function(fielder) {\n    if (mode == 'n') {\n        return {\n            'first': '一',\n            'second': '二',\n            'third': '三',\n            'short': '遊',\n            'pitcher': '投',\n            'catcher': '捕',\n            'left': '左',\n            'center': '中',\n            'right': '右'\n        }[fielder];\n    }\n    return fielder;\n};\n\ntext.slash = function() {\n    if (mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = function(fielder) {\n    if (mode == 'n') {\n        return {\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'short': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left': 'レフト',\n            'center': 'センター',\n            'right': 'ライト'\n        }[fielder]\n    }\n    return {\n        first : text('first baseman'),\n        second : text('second baseman'),\n        third : text('third baseman'),\n        short : text('shortstop'),\n        pitcher : text('pitcher'),\n        catcher : text('catcher'),\n        left : text('left fielder'),\n        center : text('center fielder'),\n        right : text('right fielder')\n    }[fielder];\n};\n\ntext.comma = function() {\n    return {n: '、', e: ', '}[mode];\n};\ntext.stop = function() {\n    return {n: '。', e: '. '}[mode];\n};\n\ntext.namePitch = function(pitch) {\n    if (mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\n    }\n    if (mode == 'n') {\n        return text(pitch.name)\n    }\n};\n\ntext.contactResult = function(batter, fielder, bases, outBy) {\n    var statement = '';\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    if (mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'error':\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\n                    break;\n                case 'pop':\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'fly':\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'ground':\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'thrown':\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\n                    break;\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\n                    } else {\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\n                    }\n                    break;\n                case 2:\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\n                    break;\n                case 3:\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\n                    break;\n                case 4:\n                    statement += ' homered to ' + text.fielderShortName(fielder);\n                    break;\n            }\n        }\n        statement += text.stop();\n    }\n    if (mode == 'n') {\n        statement += batter + 'は';\n        if (outBy) {\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'error':\n                    statement += 'エラー('+fielder+')で出塁';\n                    break;\n                case 'pop':\n                    statement += 'ポップフライで' + fielder + '飛';\n                    break;\n                case 'fly':\n                    statement += fielder + '飛';\n                    break;\n                case 'ground':\n                    statement += fielder + 'ゴロ';\n                    break;\n                case 'thrown':\n                    statement += fielder + 'ゴロ';\n                    break;\n            }\n        } else {\n            fielder = text.fielderLongName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\n                    } else {\n                        statement += '安打('+fielder+')' + 'で出塁';\n                    }\n                    break;\n                case 2:\n                    statement += '二塁打（'+fielder+'）で出塁';\n                    break;\n                case 3:\n                    statement += '三塁打（'+fielder+'）で出塁';\n                    break;\n                case 4:\n                    statement += '本塁打（'+fielder+'）';\n                    break;\n            }\n        }\n        statement += text.stop();\n    }\n    return statement;\n};","data = {\n    surnames : [\n        'Sato',\n        'Suzuki',\n        'Takahashi',\n        'Tanaka',\n        'Watanabe',\n        'Ito',\n        'Nakamura',\n        'Kobayashi',\n        'Yamamoto',\n        'Kato',\n        'Yoshida',\n        'Yamada',\n        'Sasaki',\n        'Yamaguchi',\n        'Matsumoto',\n        'Inoue',\n        'Kimura',\n        'Shimizu',\n        'Hayashi',\n        'Saito',\n        'Saito',\n        'Yamazaki',\n        'Nakajima',\n        'Mori',\n        'Abe',\n        'Ikeda',\n        'Hashimoto',\n        'Ishikawa',\n        'Yamashita',\n        'Ogawa',\n        'Ishii',\n        'Hasegawa',\n        'Goto',\n        'Okada',\n        'Kondo',\n        'Maeda',\n        'Fujita',\n        'Endo',\n        'Aoki',\n        'Sakamoto',\n        'Murakami',\n        'Ota',\n        'Kaneko',\n        'Fujii',\n        'Fukuda',\n        'Nishimura',\n        'Miura',\n        'Takeuchi',\n        'Nakagawa',\n        'Okamoto',\n        'Matsuda',\n        'Harada',\n        'Nakano'\n    ],\n    surnamesJ : [\n        '佐藤',\n        '鈴木',\n        '高橋',\n        '田中',\n        '渡辺',\n        '伊藤',\n        '中村',\n        '小林',\n        '山本',\n        '加藤',\n        '吉田',\n        '山田',\n        '佐々木',\n        '山口',\n        '松本',\n        '井上',\n        '木村',\n        '清水',\n        '林',\n        '斉藤',\n        '斎藤',\n        '山崎',\n        '中島',\n        '森',\n        '阿部',\n        '池田',\n        '橋本',\n        '石川',\n        '山下',\n        '小川',\n        '石井',\n        '長谷川',\n        '後藤',\n        '岡田',\n        '近藤',\n        '前田',\n        '藤田',\n        '遠藤',\n        '青木',\n        '坂本',\n        '村上',\n        '太田',\n        '金子',\n        '藤井',\n        '福田',\n        '西村',\n        '三浦',\n        '竹内',\n        '中川',\n        '岡本',\n        '松田',\n        '原田',\n        '中野'\n    ],\n\n    namesJ: [\n        '匠',\n        'ヒカル',\n        'ゆうき',\n        '翔太',\n        '冬馬',\n        '漣',\n        '港区',\n        'ルイ',\n        '樹',\n        '賢治',\n        '五木',\n        '春',\n        '光一',\n        '宗介',\n        'こうすけ',\n        '雄太',\n        '大樹',\n        '瑛太',\n        // newer set\n        '宏',\n        '亨',\n        '道夫',\n        '聡',\n        '昭',\n        '茂雄',\n        '勝',\n        '純一',\n        '和夫',\n        '勲',\n        '省三',\n        '隆',\n        '達夫',\n        '正一',\n        '輝夫',\n        '俊夫',\n        '史郎',\n        '勇',\n        '義弘',\n        '良雄',\n        '登',\n        '義明',\n        '正義',\n        '秀夫',\n        '肇',\n        '月',\n        '克己',\n        '正男',\n        '光男',\n        '久',\n        '耕三',\n        '清',\n        '次郎',\n        '正博',\n        '明子',\n        '武',\n        '勉',\n        '晴夫',\n        '裕二',\n        '稔',\n        '障子',\n        '和子',\n        '敦',\n        '茂',\n        '信夫',\n        '恵一',\n        '忠',\n        '高尾',\n        '薫',\n        'ケン',\n        '健治',\n        '哲夫',\n        '啓二',\n        '光一',\n        '真一',\n        '貞夫',\n        '靖',\n        '武',\n        '雄',\n        '文雄',\n        '久雄',\n        '一朗',\n        '健一',\n        '正明',\n        '五郎',\n        '誠',\n        '昭夫',\n        '誠司',\n        '洋一',\n        '康夫',\n        '誠一',\n        '正美',\n        '則夫',\n        '幸雄',\n        '忠雄',\n        '仁',\n        'シンジ',\n        '豊',\n        '邦雄',\n        '修',\n        '雅之',\n        '三郎',\n        '英治',\n        '浩二',\n        '栄一',\n        '恒夫',\n        '義郎',\n        '進',\n        '博之',\n        '巌'\n    ],\n    names : [\n        'Takumi',\n        'Hikaru',\n        'Yuuki',\n        'Shouta',\n        'Touma',\n        'Ren',\n        'Minato',\n        'Rui',\n        'Tatsuki',\n        'Kenji',\n        'Itsuki',\n        'Haru',\n        'Kouichi',\n        'Sousuke',\n        'Kousuke',\n        'Yuuta',\n        'Daiki',\n        'Eita',\n        // newer set\n        'Hiroshi',\n        'Toru',\n        'Michio',\n        'Satoshi',\n        'Akira',\n        'Shigeo',\n        'Masaru',\n        'Junichi',\n        'Kazuo',\n        'Isao',\n        'Shozo',\n        'Takashi',\n        'Tatsuo',\n        'Shoichi',\n        'Teruo',\n        'Toshio',\n        'Shiro',\n        'Isamu',\n        'Yoshihiro',\n        'Yoshio',\n        'Noboru',\n        'Yoshiaki',\n        'Tadayoshi',\n        'Hideo',\n        'Hajime',\n        'Akari',\n        'Katsumi',\n        'Masao',\n        'Mitsuo',\n        'Hisashi',\n        'Kozo',\n        'Kiyoshi',\n        'Jiro',\n        'Masahiro',\n        'Akiko',\n        'Takeshi',\n        'Tsutomu',\n        'Haruo',\n        'Yuji',\n        'Minoru',\n        'Shoji',\n        'Kazuko',\n        'Atsushi',\n        'Shigeru',\n        'Shinobu',\n        'Keiichi',\n        'Tadashi',\n        'Takao',\n        'Kaoru',\n        'Ken',\n        'Kenji',\n        'Tetsuo',\n        'Keiji',\n        'Koichi',\n        'Shinichi',\n        'Sadao',\n        'Yasushi',\n        'Takeshi',\n        'Yu',\n        'Fumio',\n        'Hisao',\n        'Ichiro',\n        'Kenichi',\n        'Masaaki',\n        'Goro',\n        'Makoto',\n        'Akio',\n        'Seiji',\n        'Yoichi',\n        'Yasuo',\n        'Seiichi',\n        'Masami',\n        'Norio',\n        'Yukio',\n        'Tadao',\n        'Hitoshi',\n        'Shinji',\n        'Yutaka',\n        'Kunio',\n        'Osamu',\n        'Masayuki',\n        'Saburo',\n        'Eiji',\n        'Koji',\n        'Eiichi',\n        'Tsuneo',\n        'Yoshio',\n        'Susumu',\n        'Hiroyuki',\n        'Iwao'\n    ],\n    teamNamesJ : [\n        '横浜',\n        '大阪',\n        '名古屋',\n        '札幌',\n        '神戸',\n        '京都',\n        '福岡',\n        '川崎',\n        '埼玉県',\n        '広島',\n        '仙台',\n        '千葉県',\n        '新潟',\n        '浜松',\n        '静岡',\n        '相模原',\n        '岡山',\n        '熊本',\n        '鹿児島',\n        '船橋',\n        '川口',\n        '姫路',\n        '松山',\n        '宇都宮',\n        '松戸',\n        '西宮',\n        '倉敷',\n        '市川',\n        '福山',\n        '尼崎',\n        '金沢',\n        '長崎',\n        '横須賀',\n        '富山',\n        '高松',\n        '町田',\n        '岐阜',\n        '枚方',\n        '藤沢',\n        '柏',\n        '豊中',\n        '長野県',\n        '豊橋',\n        '一宮',\n        '和歌山',\n        '岡崎',\n        '宮崎',\n        '奈良',\n        '吹田',\n        '高槻',\n        '旭川',\n        'いわき',\n        '高崎',\n        '所沢',\n        '川越',\n        '秋田',\n        '越谷',\n        '前橋',\n        '那覇',\n        '四日市',\n        '青森',\n        '久留米',\n        '春日井',\n        '盛岡',\n        '明石',\n        '福島',\n        '下関',\n        '長岡',\n        '市原',\n        '函館',\n        '茨城県',\n        '福井',\n        '加古川',\n        '徳島',\n        '水戸',\n        '平塚',\n        '佐世保',\n        '呉',\n        '八戸',\n        '佐賀',\n        '寝屋川',\n        '富士',\n        '春日部',\n        '茅ヶ崎',\n        '松本',\n        '厚木',\n        '大和',\n        '上尾',\n        '宝塚',\n        '筑波',\n        '沼津',\n        '熊谷',\n        '伊勢崎',\n        '岸和田',\n        '鳥取',\n        '小田原',\n        '鈴鹿',\n        '松江',\n        '日立'\n    ],\n    teamNames : [\n        'Yokohama',\n        'Osaka',\n        'Nagoya',\n        'Sapporo',\n        'Kobe',\n        'Kyoto',\n        'Fukuoka',\n        'Kawasaki',\n        'Saitama',\n        'Hiroshima',\n        'Sendai',\n        'Chiba',\n        'Niigata',\n        'Hamamatsu',\n        'Shizuoka',\n        'Sagamihara',\n        'Okayama',\n        'Kumamoto',\n        'Kagoshima',\n        'Funabashi',\n        'Kawaguchi',\n        'Himeji',\n        'Matsuyama',\n        'Utsunomiya',\n        'Matsudo',\n        'Nishinomiya',\n        'Kurashiki',\n        'Ichikawa',\n        'Fukuyama',\n        'Amagasaki',\n        'Kanazawa',\n        'Nagasaki',\n        'Yokosuka',\n        'Toyama',\n        'Takamatsu',\n        'Machida',\n        'Gifu',\n        'Hirakata',\n        'Fujisawa',\n        'Kashiwa',\n        'Toyonaka',\n        'Nagano',\n        'Toyohashi',\n        'Ichinomiya',\n        'Wakayama',\n        'Okazaki',\n        'Miyazaki',\n        'Nara',\n        'Suita',\n        'Takatsuki',\n        'Asahikawa',\n        'Iwaki',\n        'Takasaki',\n        'Tokorozawa',\n        'Kawagoe',\n        'Akita',\n        'Koshigaya',\n        'Maebashi',\n        'Naha',\n        'Yokkaichi',\n        'Aomori',\n        'Kurume',\n        'Kasugai',\n        'Morioka',\n        'Akashi',\n        'Fukushima',\n        'Shimonoseki',\n        'Nagaoka',\n        'Ichihara',\n        'Hakodate',\n        'Ibaraki',\n        'Fukui',\n        'Kakogawa',\n        'Tokushima',\n        'Mito',\n        'Hiratsuka',\n        'Sasebo',\n        'Kure',\n        'Hachinohe',\n        'Saga',\n        'Neyagawa',\n        'Fuji',\n        'Kasukabe',\n        'Chigasaki',\n        'Matsumoto',\n        'Atsugi',\n        'Yamato',\n        'Ageo',\n        'Takarazuka',\n        'Tsukuba',\n        'Numazu',\n        'Kumagaya',\n        'Isesaki',\n        'Kishiwada',\n        'Tottori',\n        'Odawara',\n        'Suzuka',\n        'Matsue',\n        'Hitachi'\n    ]\n};","helper = {\n    pitchDefinitions : {\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\n        '2-seam' :      [20, -20, 0.90],\n        'cutter' :      [-25, -20, 0.95],\n        'sinker' :      [-15, -30, 0.95],\n\n        'slider' :      [-50, -35, 0.9],\n        'fork'   :      [0, -70, 0.87],\n        'curve'  :      [0, -90, 0.82],\n\n        'change' :    [0, -10, 0.88]\n    },\n    selectRandomPitch : function() {\n        return [\n            '4-seam', '2-seam', 'cutter', 'sinker',\n            'slider', 'fork', 'curve',\n            'change'\n        ][Math.floor(Math.random()*8)]\n    }\n};\n","var Log = function() {\n    this.init();\n};\n\nLog.prototype = {\n    game : 'instance of Game',\n    init : function() {\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n    },\n    SINGLE : 'H',\n    DOUBLE : '2B',\n    TRIPLE : '3B',\n    HOMERUN : 'HR',\n    WALK : 'BB',\n    GROUNDOUT : 'GO',\n    FLYOUT : 'FO',\n    LINEOUT : 'L',\n    RUN : 'R',\n    STRIKEOUT : 'SO',\n    SACRIFICE : 'SAC',\n    REACHED_ON_ERROR : 'ROE',\n    FIELDERS_CHOICE : 'FC',\n    note : function(note, noteJ) {\n        this.record.e.unshift(note);\n        this.shortRecord.e = this.record.e.slice(0, 6);\n\n        this.record.n.unshift(noteJ);\n        this.shortRecord.n = this.record.n.slice(0, 6);\n    },\n    getBatter : function(batter) {\n        var order = batter.team.nowBatting;\n        order = {\n            0 : text(' 1st'),\n            1 : text(' 2nd'),\n            2 : text(' 3rd'),\n            3 : text(' 4th'),\n            4 : text(' 5th'),\n            5 : text(' 6th'),\n            6 : text(' 7th'),\n            7 : text(' 8th'),\n            8 : text(' 9th')\n        }[order];\n        var positions = this.longFormFielder();\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\n            batter.getUniformNumber()+text.comma()+\n            batter.getName();\n    },\n    noteBatter : function(batter) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getBatter(batter);\n        mode = 'n';\n        recordJ = this.getBatter(batter);\n        mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\n        var noComma = false, noComma2 = false;\n        var ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += text('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += text('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += text('inside');\n        } else {\n            say += text('way inside');\n            ball = true;\n        }\n        if (say != '') say += text.comma();\n        if (y < 35) {\n            say += text('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += text('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += text('high');\n        } else {\n            say += text('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(text.comma()).join('');\n            if (noComma && noComma2) {\n                say = text('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\n        return say;\n    },\n    notePitch : function(pitchInFlight, batter) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        mode = m;\n    },\n    getSwing : function(swingResult) {\n        var result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += text('Strike.')\n            } else {\n                result += text('Ball.')\n            }\n        } else {\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += text('Fouled off.')\n                } else {\n                    if (swingResult.caught) {\n                        result += text('In play.')\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += text('In play.')\n                        } else {\n                            result += text('In play.')\n                        }\n                    }\n                }\n            } else {\n                result += text('Swinging strike.')\n            }\n        }\n        return result;\n    },\n    noteSwing : function(swingResult) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getSwing(swingResult);\n        this.pitchRecord.e[0] += record;\n        mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        this.pitchRecord.n[0] += recordJ;\n        mode = m;\n    },\n    getPlateAppearanceResult : function(game) {\n        var r = game.swingResult;\n        var record = '';\n        var batter = game.batter.getName();\n        if (r.looking) {\n            if (r.strike) {\n                record = (batter + text(' struck out looking.'));\n            } else {\n                record = (batter + text(' walked.'));\n            }\n        } else {\n            if (r.contact) {\n                var fielder = r.fielder, bases = r.bases, outBy;\n                if (r.caught) {\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                        outBy = 'pop';\n                    } else {\n                        outBy = 'fly';\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                        if (r.error) {\n                            bases = 1;\n                            outBy = 'error';\n                        } else {\n                            if (r.thrownOut) {\n                                if (Math.random() > 0.5) {\n                                    outBy = 'ground';\n                                } else {\n                                    outBy = 'thrown';\n                                }\n                            } else {\n                                switch (r.bases) {\n                                    case 1:\n                                    case 2:\n                                    case 3:\n                                        bases = r.bases;\n                                        break;\n                                    case 4:\n                                        bases = 4;\n                                        if (r.splay < -15) {\n                                            fielder = 'left';\n                                        } else if (r.splay < 15) {\n                                            fielder = 'center';\n                                        } else {\n                                            fielder = 'right';\n                                        }\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n                record = text.contactResult(batter, fielder, bases, outBy);\n            } else {\n                record = (batter+text(' struck out swinging.'));\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult : function(game) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getPlateAppearanceResult(game);\n        this.record.e.unshift(record);\n        this.pitchRecord.e = [text('Previous: ')+record];\n        mode = 'n';\n        recordJ = this.getPlateAppearanceResult(game);\n        this.record.n.unshift(recordJ);\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\n        mode = m;\n    },\n    pointer : 0,\n    pitchRecord : {\n        e: [],\n        n: []\n    },\n    shortRecord : {\n        e: [],\n        n: []\n    },\n    record : {\n        e: [],\n        n: []\n    },\n    longFormFielder : function() {\n        return {\n            first : text('first baseman'),\n            second : text('second baseman'),\n            third : text('third baseman'),\n            short : text('shortstop'),\n            pitcher : text('pitcher'),\n            catcher : text('catcher'),\n            left : text('left fielder'),\n            center : text('center fielder'),\n            right : text('right fielder')\n        }\n    }\n};","var Animator = function() {\r\n    this.init();\r\n    Math.square = function(x) { return x*x };\r\n};\r\n\r\nAnimator.prototype = {\r\n    name : 'Animator',\r\n    constructor : Animator,\r\n    init : function() {\r\n\r\n    },\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    updateFlightPath: function(callback) {\r\n        var $scope = this;\r\n        var game = $scope.y;\r\n        var top = 200-game.pitchTarget.y;\r\n        var left = game.pitchTarget.x;\r\n        var breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x;\r\n        var $baseballs = jQ('.baseball');\r\n        var flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400;\r\n        var originTop = 50;\r\n        var originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        this.pitchTarget = jQ('.main-area .target .baseball.pitch');\r\n        this.pitchBreak = jQ('.main-area .target .baseball.break');\r\n        var pitch = this.pitchTarget, henka = this.pitchBreak;\r\n        var quarter = flightSpeed/4;\r\n        var transition = function(percent, top, left, step) {\r\n            left = originLeft + Math.square(percent/100)*(left - originLeft);\r\n            top = originTop + Math.square(percent/100)*(top - originTop);\r\n            var padding = Math.max(Math.square(percent/100)*13, 1);\r\n            var borderWidth = Math.max(Math.square(percent/100)*4, 1);\r\n            return {\r\n                top: top,\r\n                left: left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        };\r\n        var transitions = [\r\n            transition(0, top, left, 0),\r\n\r\n            transition(10, top, left, 0),\r\n            transition(30, top, left, 1),\r\n            transition(50, top, left, 2),\r\n\r\n            transition(100, top, left, 3),\r\n            transition(100, breakTop, breakLeft, 3)\r\n        ];\r\n\r\n        var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        jQ('.baseball').addClass('spin');\r\n        jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + 1.2) * 1000));\r\n        }\r\n    }\r\n};","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';","var Field = function(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor : Field,\n    init : function(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    hasRunnersOn : function() {\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\n    },\n    translateSwingResultToStylePosition: function(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        var bottom = 0, left = 190;\n\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 280), 100);\n\n        swingResult.bottom = bottom + 'px';\n        swingResult.left = left + 'px';\n        return swingResult;\n    },\n    determineSwingContactResult : function(swing) {\n        if (typeof swing == 'undefined') swing = this;\n        var x = swing.x, y = swing.y;\n        var splayAngle = 90 - 1.5*x;\n        var flyAngle = -3*y;\n        var power = this.game.batter.skill.offense.power + this.game.batter.eye.bonus;\n        var landingDistance = (50 + Math.random()*300 + (power/100)*75) * (1 - Math.abs(flyAngle - 30)/60);\n\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\n\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        swing.splay = splayAngle - 90;\n\n        if (!this.game.debug) {\n            this.game.debug = [];\n        }\n\n        var debugData = {}, dd = debugData;\n\n        if (swing.fielder) {\n            var fielder = (this.game.half == top ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\n            fielder.fatigue += 4;\n            swing.error = false;\n            var fieldingEase = fielder.skill.defense.fielding/100,\n                throwingEase = (fielder.skill.defense.throwing/100);\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\n            if (interceptRating > 0 && flyAngle > -10) {\n                //caught cleanly?\n                if ((100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100) { //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    swing.caught = false;\n                } else {\n                    swing.caught = true;\n                }\n            } else {\n                swing.caught = false;\n            }\n            dd.caught = swing.caught;\n            dd.grounder = flyAngle < 0;\n\n            if (!swing.caught) {\n                // intercept rating is negative\n                var plus = interceptRating + 100*throwingEase*fieldingEase;\n                var gatherAndThrowSuccess = plus - this.game.batter.skill.offense.speed/2 > -50;\n\n                //log('flew at angle', flyAngle, 'distance of', swing.fielderTravel,\n                //    'gives intercept rating of', interceptRating, 'fielder throw/fielding', fielder.skill.defense.throwing, fielder.skill.defense.fielding,\n                //    '+', plus, '-runner speed', this.game.batter.skill.offense.speed,\n                //    'success', gatherAndThrowSuccess\n                //);\n\n                dd.thrownOut = gatherAndThrowSuccess;\n                dd.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\n\n                if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] != 1 && gatherAndThrowSuccess) {\n                    swing.thrownOut = true;\n                    swing.error = false;\n                } else {\n                    swing.thrownOut = false;\n                    swing.bases = 1;\n                    if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1) {\n                        var fieldingReturnDelay = -1*(interceptRating + 100*throwingEase*fieldingEase) + this.game.batter.skill.offense.speed;\n                        dd.delay = fieldingReturnDelay;\n                        while (fieldingReturnDelay - 125 > 0 && swing.bases < 3) {\n                            swing.bases++;\n                            fieldingReturnDelay  -= 65;\n                        }\n                        dd.bases = swing.bases;\n                    }\n                }\n                // log('fielder return delay', fieldingReturnDelay, interceptRating, fielder.skill.defense);\n            }\n        } else {\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n                dd.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        dd.foul = swing.foul;\n        this.game.debug.push(dd);\n\n        return this.translateSwingResultToStylePosition(swing);\n    },\n    findFielder : function(splayAngle, landingDistance) {\n        if (Math.abs(90 - splayAngle) > 50) return false;\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\n            return 'pitcher';\n        }\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\n            if (splayAngle < 45 + 23) {\n                return 'third';\n            } else if (splayAngle < 45 + 23 + 23) {\n                return 'short';\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\n                return 'second';\n            } else {\n                return 'first';\n            }\n        } else if (landingDistance > 90 && landingDistance < 310) {\n            if (splayAngle < 45 + 28) {\n                return 'left';\n            } else if (splayAngle < 45 + 28 + 34) {\n                return 'center';\n            } else {\n                return 'right';\n            }\n        } else {\n            return false;\n        }\n    },\n    positions : {\n        pitcher : [90, 66],\n        catcher : [0, 0],\n        first : [90 + 45 - 7, 98],\n        second : [90 + 12.5, 130],\n        short : [90 - 12.5, 130],\n        third : [90 - 45 + 7, 98],\n        left : [45 + 14, 280],\n        center : [90, 280],\n        right : [135 - 14, 280]\n    },\n    getPolarDistance : function(a, b) {\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*Math.PI/180 - b[0]*Math.PI/180));\n    },\n    fieldingTest : function() {\n        var fielders = {\n            pitcher : {tally : 0, distances : []},\n            catcher : {tally : 0, distances : []},\n            first : {tally : 0, distances : []},\n            second : {tally : 0, distances : []},\n            short : {tally : 0, distances : []},\n            third : {tally : 0, distances : []},\n            left : {tally : 0, distances : []},\n            center : {tally : 0, distances : []},\n            right : {tally : 0, distances : []},\n            'false' : {tally : 0, distances : []}\n        };\n        var angle = Math.random()*90+45;\n        var distance = Math.random()*320;\n        var fielder = this.findFielder(angle, distance);\n        var data = {};\n        if (fielder) {\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\n                data.fielder = fielderCandidates[1];\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]])\n            return data;\n        }\n    },\n    aggregateFieldingTest : function() {\n        var fielders = {\n            pitcher : {tally : 0, distances : []},\n            catcher : {tally : 0, distances : []},\n            first : {tally : 0, distances : []},\n            second : {tally : 0, distances : []},\n            short : {tally : 0, distances : []},\n            third : {tally : 0, distances : []},\n            left : {tally : 0, distances : []},\n            center : {tally : 0, distances : []},\n            right : {tally : 0, distances : []},\n            'false' : {tally : 0, distances : []}\n        };\n        var selections = [];\n        for (var i = 0; i < 1000; i++) {\n            var angle = Math.random()*90+45;\n            var distance = Math.random()*320;\n            var fielder = this.findFielder(angle, distance);\n            fielders[fielder].tally++;\n            if (fielder) {\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\n            }\n            selections.push([angle, distance]);\n            selections.push(this.fielderSelectionTest(angle, distance, true));\n        }\n        return [fielders, selections];\n    },\n    fielderSelectionTest : function(angle, distance, returnFielder) {\n        var distances = [];\n        var minDistance = 300;\n        var giraffe = this;\n        var fielder = false;\n        jQ.each(this.positions, function(position, spot) {\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\n            distances[thisDistance] = position;\n            if (minDistance > thisDistance) {\n                minDistance = thisDistance;\n                fielder = position;\n            }\n        });\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\n    }\n};","var Game = function(m) {\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor : Game,\n    gamesIntoSeason : 0,\n    humanControl : 'none', //home, away, both, none\n    quickMode : true,\n    init : function(m) {\n        if (m) window.mode = m;\n        this.gamesIntoSeason = 60 + Math.floor(Math.random()*20);\n        this.field = new Field(this);\n        this.teams.away = new Team(this);\n        this.teams.home = new Team(this);\n        this.log = new Log();\n        this.log.game = this;\n        this.helper = helper;\n        while (this.teams.away.name == this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n    },\n    getInning : function() {\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\n    },\n    humanBatting : function() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n                break;\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n                break;\n        }\n    },\n    humanPitching : function() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n                break;\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n                break;\n        }\n    },\n    end : function() {\n        this.stage = 'end';\n        var e, n;\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\n        n = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\n        this.log.note(e, n);\n    },\n    stage : 'pitch', //pitch, swing\n    simulateInput : function(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch') {\n            this.autoPitch(callback);\n        } else if (this.stage == 'swing') {\n            if (typeof this.pitchTarget != 'object') {\n                this.pitchTarget = {x: 100, y: 100};\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    simulatePitchAndSwing : function(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        var giraffe = this;\n        setTimeout(function() {\n            if (typeof giraffe.pitchTarget != 'object') {\n                giraffe.pitchTarget = {x: 100, y: 100};\n            }\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback()});\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\n    },\n    receiveInput : function(x, y, callback) {\n        if (this.humanControl == 'none') {\n            return;\n        }\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    autoPitchSelect : function() {\n        var pitchName = this.helper.selectRandomPitch();\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\n            pitchName = this.helper.selectRandomPitch();\n        }\n        var pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    autoPitch : function(callback) {\n        var pitcher = this.pitcher;\n        if (this.stage == 'pitch') {\n            jQ('.baseball').addClass('hide');\n            pitcher.windingUp = true;\n            this.swingResult.looking = true;\n            var windup = jQ('.windup');\n            windup.css('width', '100%');\n            var giraffe = this;\n            this.autoPitchSelect();\n            if (Math.random() < 0.5) {\n                var x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\n            } else {\n                x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\n            }\n            var y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\n            if (this.quickMode) {\n                giraffe.thePitch(x, y, callback);\n            } else {\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\n                    jQ('.baseball.pitch').removeClass('hide');\n                    giraffe.thePitch(x, y, callback);\n                    pitcher.windingUp = false;\n                });\n            }\n        }\n    },\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\n        var giraffe = this;\n        var bonus = this.batter.eye.bonus || 0,\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n\n        var x = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15),\n            y = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\n        if (100*Math.random() < eye) {\n            var convergence = 1.35 * 5*eye/100,\n                convergenceSum = 1 + convergence;\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n        } else {\n            convergence = 1.35 * 2*eye/100;\n            convergenceSum = 1 + convergence;\n        }\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\n\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\n\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*this.umpire.count.balls;\n        } else {\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\n        }\n        var chance = Math.random()*100,\n            totalLikelihood = swingLikelihood - 35 + 10*(this.umpire.count.balls + 2*this.umpire.count.strikes);\n\n        if (totalLikelihood < chance ) {\n            x = -20;\n        }\n        callback(function() {\n            giraffe.theSwing(x, y);\n        });\n    },\n    thePitch : function(x, y, callback) {\n        if (this.stage == 'pitch') {\n            this.pitcher.fatigue++;\n            this.pitchTarget.x = x;\n            this.pitchTarget.y = y;\n\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\n            this.battersEye = text('looks like: ')+(Math.abs(this.pitchInFlight.breakDirection[0])+Math.abs(this.pitchInFlight.breakDirection[1]) > 40 ?\n                text('breaking ball') : text('fastball'));\n\n            var control = this.pitchInFlight.control;\n            this.pitchTarget.x = Math.min(199.9, Math.max(0.1, this.pitchTarget.x + (50 - Math.random()*100)/(1+control/100)));\n            this.pitchTarget.y = Math.min(199.9, Math.max(0.1, this.pitchTarget.y + (50 - Math.random()*100)/(1+control/100)));\n\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\n\n            this.pitchInFlight.x = Math.floor(this.pitchTarget.x + (this.pitchInFlight.breakDirection[0]\n                *((0.5+Math.random()*this.pitchInFlight.break)/100)));\n            this.pitchInFlight.y = Math.floor(this.pitchTarget.y + (this.pitchInFlight.breakDirection[1]\n                *((0.5+Math.random()*this.pitchInFlight.break)/100))/(0.5 + this.pitchTarget.y/200));\n            this.log.notePitch(this.pitchInFlight, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.batter.team)) {\n                callback();\n            } else {\n                this.autoSwing(x, y, callback);\n            }\n        }\n    },\n    battersEye : '',\n    debugOut : function() {\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder}).length);\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder && a.thrownOut}).length);\n        log('weak outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && a.thrownOut}).length);\n        log('good outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && !a.thrownOut}).length);\n        log('singles', this.debug.filter(function(a){return a.bases == 1}).length);\n        log('2b', this.debug.filter(function(a){return a.bases == 2}).length);\n        log('3b', this.debug.filter(function(a){return a.bases == 3}).length);\n        log('homeruns', this.debug.filter(function(a){return a.bases == 4}).length);\n\n        log('fly outs', this.debug.filter(function(a){return !a.grounder && !a.bases && a.caught}).length);\n        log('groundouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\n        var SO = this.teams.away.lineup.map(function(p) {return p.atBats}).reduce(function(a, b) {\n            return a + b.filter(function(ab) {return ab == 'SO'}).length;\n        });\n        SO += this.teams.home.lineup.map(function(p) {return p.atBats.filter(function(ab) {return ab == 'SO'})}).reduce(function(a, b) {\n            return a.length + b.length;\n        });\n        log('strikeouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\n        log('fouls', this.debug.filter(function(a){return a.foul}).length);\n    },\n    theSwing : function(x, y, callback) {\n        if (this.stage == 'swing') {\n            this.batter.fatigue++;\n            this.swingResult = {};\n            var bonus = this.batter.eye.bonus || 0,\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n            this.swingResult.x = 100 + (x - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.x;\n            this.swingResult.y = 100 + (y - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.y;\n            var giraffe = this;\n            var origin = {\n                x: giraffe.batter.bats == 'left' ? 250 : -50,\n                y: 185\n            };\n            var swing = {\n                x: giraffe.pitchInFlight.x + this.swingResult.x,\n                y: giraffe.pitchInFlight.y + this.swingResult.y\n            };\n            log(origin, swing);\n            this.swingResult.angle = Math.tan((origin.y - swing.y)/(swing.x - origin.x))/Math.PI * 90;\n\n            if (!(x < 0 || x > 200)) {\n                this.swingResult.looking = false;\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\n                    this.swingResult.contact = true;\n                    this.batter.eye.bonus = Math.max(0, eye -\n                        Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\n                } else {\n                    this.swingResult.contact = false;\n                }\n            } else {\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\n                this.swingResult.contact = false;\n                this.swingResult.looking = true;\n                this.batter.eye.x = this.pitchInFlight.x;\n                this.batter.eye.y = this.pitchInFlight.y;\n            }\n\n            this.log.noteSwing(this.swingResult);\n            this.stage = 'pitch';\n\n            var half = this.half;\n            this.umpire.makeCall();\n            if (half != this.half) {\n                callback = this.startOpponentPitching;\n            }\n\n            if (typeof callback == 'function') {\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\n                    callback();\n                } else {\n                    this.autoPitch(callback);\n                }\n            }\n        }\n    },\n    startOpponentPitching : null, // late function\n    pitchTarget : {x : 100, y : 100},\n    pitchInFlight : {\n        x : 100,\n        y : 100,\n        breakDirection : [0, 0],\n        name : 'slider',\n        velocity : 50,\n        break : 50,\n        control : 50\n    },\n    swingResult : {\n        x : 100, //difference to pitch location\n        y : 100, //difference to pitch location\n        strike : false,\n        foul : false,\n        caught : false,\n        contact : false,\n        looking : true,\n        bases : 0,\n        fielder : 'short',\n        outs : 0\n    },\n    pitchSelect : function() {\n\n    },\n    field : null,\n    teams : {\n        away : null,\n        home : null\n    },\n    log : null,\n    half : 'top',\n    inning : 1,\n    scoreboard : {\n        away : {\n            1 : 0,\n            2 : 0,\n            3 : 0,\n            4 : 0,\n            5 : 0,\n            6 : 0,\n            7 : 0,\n            8 : 0,\n            9 : 0\n        },\n        home : {\n            1 : 0,\n            2 : 0,\n            3 : 0,\n            4 : 0,\n            5 : 0,\n            6 : 0,\n            7 : 0,\n            8 : 0,\n            9 : 0\n        }\n    },\n    tally : {\n        away : {\n            H : 0,\n            R : 0,\n            E : 0\n        },\n        home : {\n            H : 0,\n            R : 0,\n            E : 0\n        }\n    }\n};","var Manager = function(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor : Manager,\n    init : function(team) {\n        this.team = team;\n    },\n    makeLineup : function() {\n        var jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        this.team.positions.pitcher.number = jerseyNumber++;\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\n        this.team.positions.catcher.position = 'catcher';\n        this.team.positions.catcher.number = jerseyNumber++;\n        jQ.each(this.team.bench, function(key, player) {\n            player.number = jerseyNumber++;\n        });\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\n        var property;\n        mustBeRightHanded = !!mustBeRightHanded;\n        if (this.team.bench.length || pool == this.team.positions) {\n            var selection = this.team.bench[0];\n            var rating = 0;\n            var index = 0;\n            jQ.each(pool, function(key, player) {\n                var skills = skillset.slice();\n                var cursor = player.skill;\n                while (property = skills.shift()) {\n                    cursor = cursor[property];\n                }\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            delete this.team.bench[index];\n            if (pool == this.team.bench) {\n                this.team.bench = this.team.bench.filter(function(player) {\n                    return player instanceof selection.constructor;\n                })\n            }\n            return selection;\n        }\n        return 'no players available';\n    }\n};","var Player = function(team) {\n    this.init(team);\n    var offense = this.skill.offense;\n    var defense = this.skill.defense;\n    var randBetween = function(a, b, skill) {\n        if (offense[skill]) skill = offense[skill];\n        if (defense[skill]) skill = defense[skill];\n        if (isNaN(skill)) skill = 50;\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\n        return Math.floor((skill/100) * (b - a) + a);\n    };\n    // let's just say we're about X games into the season\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\n    var IP, ER, GS, W, L;\n    if (this.skill.pitching > 65) {\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\n        if (IP > gamesIntoSeason) {\n            //starter\n            GS = Math.floor(gamesIntoSeason/5);\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\n        } else {\n            //reliever\n            GS = Math.floor(gamesIntoSeason/40);\n            W = randBetween(0, GS*0.6, this.skill.pitching);\n            L = randBetween((GS - W), 0, this.skill.pitching);\n        }\n    }\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\n    var paRemaining = pa;\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\n    paRemaining -= bb;\n    var ab = paRemaining;\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\n    paRemaining -= so;\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\n    paRemaining -= h;\n\n    var doubles = randBetween(0, h/3, 'power');\n    var triples = randBetween(0, h/12, 'speed');\n    var hr = Math.max(0, randBetween(-h/5, h/5, 'power'));\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\n    var hbp = randBetween(0, gamesIntoSeason/25);\n    var sf = randBetween(0, gamesIntoSeason/5, 'eye');\n\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\n    var E = randBetween(chances/10, 0, 'fielding');\n    var PO = chances - E;\n\n    this.stats = {\n        pitching : {\n            pitches : 0, // in game\n            GS : GS,\n            W: W,\n            L: L,\n            strikes : 0, // in game\n            K : 0, // in game\n            getERA : function() {\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3)\n            },\n            ERA : null,\n            ER : ER,\n            H : 0, // in game\n            HR : 0, // in game\n            BB : 0, // in game\n            IP : [IP,0]\n        },\n        batting : {\n            getBA : function() {\n                return this.h / (Math.max(1, this.ab))\n            },\n            ba : null,\n            getOBP : function() {\n                return (h + bb + hbp)/(ab + bb + hbp + sf);\n            },\n            obp : null,\n            getSLG : function() {\n                return ((h - doubles - triples - hr) + 2*doubles + 3*triples + 4*hr)/ab\n            },\n            slg : null,\n            pa : pa,\n            ab : ab,\n            so : so,\n            bb : bb,\n            h : h,\n            '2b' : doubles,\n            '3b' : triples,\n            hr : hr,\n            r : r,\n            rbi : rbi,\n            hbp : hbp\n        },\n        fielding : {\n            E : E,\n            PO : PO, // should depend on position\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\n        }\n    };\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\n    this.stats.batting.ba = this.stats.batting.getBA();\n};\n\nPlayer.prototype = {\n    constructor : Player,\n    init : function(team) {\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = {averaging : []};\n        this.number = 0;\n        this.randomizeSkills(Math.random() > 0.9);\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\n            nameKey = Math.floor(Math.random()*data.names.length);\n\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\n        var jSurname = data.surnamesJ[surnameKey],\n            jGivenName = data.namesJ[nameKey];\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surname = data.surnames[surnameKey];\n        this.surnameJ = data.surnamesJ[surnameKey];\n        this.atBats = [];\n    },\n    atBatObjects : [],\n    getAtBats : function() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            this.atBatObjects = this.atBats.map(function(item) {\n                return new AtBat(item);\n            });\n        }\n        return this.atBatObjects;\n    },\n    recordRBI : function() {\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\n    },\n    recordInfieldHit : function() {\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\n    },\n    randomizeSkills : function(hero) {\n        this.hero = hero;\n        var giraffe = this;\n        var randValue = function(isPitching) {\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\n            if (hero) {\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value\n        };\n        this.skill.offense = {\n            eye : randValue(),\n            power : randValue(),\n            speed : randValue()\n        };\n        this.skill.defense = {\n            catching : randValue(),\n            fielding : randValue(),\n            speed : randValue(),\n            throwing : randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity : randValue(true),\n            'break' : randValue(true),\n            control : randValue(true)\n        };\n        this.pitching['slider'] = {\n            velocity : randValue(true),\n            'break' : randValue(true),\n            control : randValue(true)\n        };\n        if (Math.random() < 0.17) {\n            // can pitch!\n            if (Math.random() > 0.6) {\n                this.pitching['2-seam'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n            if (Math.random() < 0.18) {\n                this.pitching['fork'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n            if (Math.random() > 0.77) {\n                this.pitching['cutter'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n            if (Math.random() < 0.21) {\n                this.pitching['sinker'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n\n            if (Math.random() < 0.4) {\n                this.pitching['curve'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n\n            if (Math.random() < 0.9) {\n                this.pitching['change'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n        }\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current, index, arr) {\n            return prev + current\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\n        delete this.pitching.averaging;\n    },\n    getSurname : function() {\n        return mode == 'n' ? this.surnameJ : this.surname;\n    },\n    getName : function() {\n        return mode == 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber : function() {\n        return text('#') + this.number\n    },\n    getOrder : function() {\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\n    },\n    eye : {},\n    fatigue : 0,\n    name : '',\n    number : 0,\n    position : '',\n    atBats : []\n};","var Team = function(game) {\n    this.init(game);\n};\n\nTeam.prototype = {\n    constructor : Team,\n    init : function(game) {\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher : null,\n            catcher : null,\n            first : null,\n            second : null,\n            short : null,\n            third : null,\n            left : null,\n            center : null,\n            right : null\n        };\n        this.game = game;\n        for (var j = 0; j < 20; j++) {\n            this.bench.push(new Player(this));\n        }\n        this.manager = new Manager(this);\n        this.manager.makeLineup();\n        this.pickName();\n    },\n    pickName : function() {\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\n        this.name = data.teamNames[teamNameIndex];\n        this.nameJ = data.teamNamesJ[teamNameIndex];\n    },\n    getName : function() {\n        return mode == 'n' ? this.nameJ : this.name;\n    },\n    lineup : [],\n    positions : {},\n    manager : null,\n    bench : [],\n    bullpen : [],\n    nowBatting : 0,\n    expanded : 'Player&'\n};","var Umpire = function(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor : Umpire,\n    init : function(game) {\n        this.game = game;\n        this.playBall();\n    },\n    count : {\n        strikes : 0,\n        balls : 0,\n        outs : 0\n    },\n    playBall : function() {\n        this.game.half = 'top';\n        this.game.inning = 1;\n        this.game.batter = this.game.teams.away.lineup[0];\n        this.game.batterRunner = this.game.teams.away.lineup[0];\n        this.game.deck = this.game.teams.away.lineup[1];\n        this.game.hole = this.game.teams.away.lineup[2];\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\n        this.game.log.note(e, n);\n        this.game.log.noteBatter(\n            this.game.batter\n        );\n    },\n    makeCall : function() {\n        this.says = '';\n\n        var result = this.game.swingResult;\n        var pitcher = this.game.pitcher;\n        var batter = this.game.batter;\n\n        this.game.batterRunner = this.game.batter;\n\n        pitcher.stats.pitching.pitches++;\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            if (result.contact) {\n                if (result.caught) {\n                    this.count.outs++;\n                    pitcher.stats.pitching.IP[1]++;\n                    this.game.batter.atBats.push(Log.prototype.FLYOUT);\n                    batter.stats.batting.pa++;\n                    batter.stats.batting.ab++;\n                    this.newBatter(); //todo: sac fly\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        pitcher.stats.pitching.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\n                            this.newBatter(); //todo: sac\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away']['E']++;\n                                    this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder].stats.fielding.E++;\n                                }\n                            }\n                            var bases = result.bases;\n                            switch (bases) {\n                                case 0 :\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\n                                    break;\n                                case 1 :\n                                    if (result.error) {\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\n                                    } else {\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\n                                        batter.stats.batting.h++;\n                                    }\n                                    break;\n                                case 2 :\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3 :\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4 :\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            if (bases > 0 && bases < 4 && !result.error) {\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\n                                    batter.recordInfieldHit();\n                                }\n                            }\n                            var onBase = false;\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                                if (!onBase) {\n                                    this.reachBase();\n                                    onBase = true;\n                                }\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                pitcher.stats.pitching.strikes++;\n                this.count.strikes++;\n            }\n        }\n\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            batter.atBats.push(Log.prototype.STRIKEOUT);\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            batter.atBats.push(Log.prototype.WALK);\n            this.advanceRunners(true).reachBase().newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    reachBase : function() {\n        this.game.field.first = this.game.batter;\n        this.game.field.first.fatigue += 2;\n        return this;\n    },\n    advanceRunners : function(isWalk) {\n        isWalk = !!isWalk;\n\n        if (isWalk) {\n            if (this.game.field.first) {\n                if (this.game.field.second) {\n                    if (this.game.field.third) {\n                        //bases loaded\n                        this.game.batter.recordRBI();\n                        this.game.batter.stats.batting.rbi++;\n                        this.game.field.third.atBats.push(Log.prototype.RUN);\n                        this.game.field.third.stats.batting.r++;\n                        this.game.pitcher.stats.pitching.ER++;\n                        this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\n                        this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\n                        this.game.field.third = this.game.field.second;\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    } else {\n                        // 1st and second\n                        this.game.field.third = this.game.field.second;\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    }\n                } else {\n                    if (this.game.field.third) {\n                        // first and third\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    } else {\n                        // first only\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n            if (this.game.field.third instanceof this.game.batter.constructor) {\n                // run scored\n                this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\n                this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\n                if (this.game.batter != this.game.field.third) {\n                    this.game.batter.recordRBI();\n                    this.game.field.third.atBats.push(Log.prototype.RUN);\n                }\n                this.game.batter.stats.batting.rbi++;\n                this.game.field.third.stats.batting.r++;\n                this.game.pitcher.stats.pitching.ER++;\n            }\n            this.game.field.third = this.game.field.second;\n            this.game.field.second = this.game.field.first;\n            this.game.field.first = null;\n        }\n        return this;\n    },\n    newBatter : function() {\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        this.game.log.notePlateAppearanceResult(this.game);\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\n        team.nowBatting = (team.nowBatting + 1)%9;\n        if (this.count.outs < 3) {\n            this.game.log.noteBatter(this.game.batter);\n        }\n    },\n    changeSides : function() {\n        this.game.swingResult.looking = true; // hide bat\n        this.game.pitchInFlight.x = null; // hide ball\n        this.game.pitchInFlight.y = null; // hide ball\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        var offense, defense;\n        this.game.field.first = null;\n        this.game.field.second = null;\n        this.game.field.third = null;\n        if (this.game.half == 'top') {\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\n                return this.game.end();\n            }\n            this.game.half = 'bottom';\n        } else {\n            if (this.game.inning + 1 > 9) {\n                return this.game.end();\n            }\n            this.game.inning++;\n            this.game.half = 'top';\n        }\n        offense = this.game.half == 'top' ? 'away' : 'home';\n        defense = this.game.half == 'top' ? 'home' : 'away';\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\n        +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\n        this.game.log.note(e, n);\n        var team = this.game.teams[offense];\n        this.game.batter = team.lineup[team.nowBatting];\n        this.game.batterRunner = this.game.batter;\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\n\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\n        this.game.log.noteBatter(this.game.batter);\n    },\n    says : 'Play ball!',\n    game : null\n};","var Catcher = function() {\n    this.init();\n};\n\nCatcher.prototype = {\n    init : function() {\n\n    }\n};","var Fielder = function() {\n    this.init();\n};\n\nFielder.prototype = {\n    init : function() {\n\n    }\n};","var Pitcher = function() {\n    this.init();\n};\n\nPitcher.prototype = {\n    init : function() {\n\n    }\n};","var Batter = function() {\n    this.init();\n};\n\nBatter.prototype = {\n    init : function() {\n\n    }\n};","var Runner = function() {\n    this.init();\n};\n\nRunner.prototype = {\n    init : function() {\n\n    }\n};","IndexController = function($scope) {\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            mode = setMode;\n        }\n        return mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode;\n        $scope.y = new Game();\n        s2.y = $scope.y;\n        bindMethods();\n        jQ('.blocking').remove();\n        if ($scope.y.humanControl == 'none' && $scope.y.quickMode) {\n            var game = $scope.y;\n            var n = 0;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            $scope.y = game;\n            log('sim ended');\n            $scope.y.debugOut();\n        } else if ($scope.y.humanControl == 'none') {\n            var scalar = $scope.y.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if ($scope.y.stage == 'end') {\n                    clearInterval(auto);\n                }\n                $scope.y.simulatePitchAndSwing(function(callback) {\n                    $scope.y.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*($scope.y.field.hasRunnersOn() ? 4000 : 5500));\n        }\n        if ($scope.y.humanControl == 'away') {\n            $scope.y.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if ($scope.y.humanControl == 'home') {\n\n        }\n    };\n\n    var bindMethods = function() {\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n        $scope.selectPitch = function(pitchName) {\n            if ($scope.y.stage == 'pitch') {\n                $scope.y.pitchInFlight = jQ.extend({}, $scope.y.pitcher.pitching[pitchName]);\n                $scope.y.pitchInFlight.name = pitchName;\n                $scope.y.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            jQ('.no-swing').click();\n            $scope.$apply();\n            //$scope.y.receiveInput(-20, 100, function() {\n            //    $scope.updateFlightPath();\n            //});\n        };\n        $scope.y.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if ($scope.y.pitcher.windingUp) {\n                return;\n            }\n            if ($scope.y.humanPitching()) $scope.allowInput = false;\n            var offset = jQ('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            $scope.y.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n    };\n\n\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective);\n\nangular.module('controllers', [])\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
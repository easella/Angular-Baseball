{"version":3,"sources":["text.js","data.js","helper.js","log.js","Animator.js","atBat.js","field.js","game.js","manager.js","player.js","team.js","umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["mode","text","phrase","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","OPS","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","LHP","RHP","LHB","RHB","L","R ","#","e","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","Math","floor","random","Log","this","init","prototype","game","pitchRecord","note","noteJ","record","unshift","shortRecord","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","pitchInFlight","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","splay","notePlateAppearanceResult","pointer","Animator","square","constructor","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","transition","percent","step","padding","max","borderWidth","transform","delay","ease","Linear","easeNone","transitions","horizontalBreak","abs","addClass","css","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","eye","removeClass","humanPitching","holdUpTimeouts","push","holdUp","AtBat","rbi","toString","identifier","Field","hasRunnersOn","Player","translateSwingResultToStylePosition","bottom","cos","PI","travelDistance","sin","min","determineSwingContactResult","swing","splayAngle","flyAngle","power","bonus","landingDistance","findFielder","debug","debugData","dd","half","teams","home","away","fatigue","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","grounder","plus","gatherAndThrowSuccess","outFielder","fieldingReturnDelay","a","b","sqrt","fieldingTest","angle","distance","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","i","returnFielder","minDistance","giraffe","each","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","window","field","Team","log","pickName","umpire","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","hasOwnProperty","windingUp","windup","animate","width","deceptiveX","deceptiveY","count","balls","strikes","convergence","convergenceSum","swingLikelihood","chance","totalLikelihood","breakDirection","battersEye","control","debugOut","filter","length","lineup","map","p","atBats","reduce","ab","pow","makeCall","startOpponentPitching","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","property","selection","rating","index","skills","cursor","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sf","chances","PO","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","beneficial","item","atBat","recordRBI","hero","randValue","isPitching","value","catching","prev","current","arr","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","deck","hole","says","newBatter","onBase","advanceRunners","reachBase","changeSides","isWalk","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","AIonly","s2","bindMethods","remove","scalar","auto","setInterval","clearInterval","expandScoreboard","animator","bind","selectPitch","extend","click","indicate","$event","offset","relativeOffset","pageX","pageY","clearTimeout","abbreviatePosition","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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,iBAAApH,KAAA6F,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,iBAAApH,KAAA6F,iBAAAC,QACA,MACA,KAAA,GACAsB,WAAA,eAAApH,KAAA6F,iBAAAC,SAIAsB,WAAApH,KAAAyG,OAEA,GAAA,KAAA1G,KAAA,CAEA,GADAqH,WAAAH,OAAA,IACAE,MAEA,OADArB,QAAA9F,KAAA6F,iBAAAC,SACAqB,OACA,IAAA,QACAC,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,MACAsB,WAAA,UAAAtB,QAAA,GACA,MACA,KAAA,MACAsB,WAAAtB,QAAA,GACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,IACA,MACA,KAAA,SACAsB,WAAAtB,QAAA,SAKA,QADAA,QAAA9F,KAAAuG,gBAAAT,SACAoB,OACA,IAAA,GAEAE,WADAC,QACA,QAAAvB,QAAA,OAEA,MAAAA,QAAA,MAEA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,MACA,MACA,KAAA,GACAsB,WAAA,OAAAtB,QAAA,IAIAsB,WAAApH,KAAAyG,OAEA,MAAAW,YCrQAG,MACAC,UACA,OACA,SACA,YACA,SACA,WACA,MACA,WACA,YACA,WACA,OACA,UACA,SACA,SACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,QACA,WACA,WACA,OACA,MACA,QACA,YACA,WACA,YACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,SACA,OACA,OACA,WACA,WACA,MACA,SACA,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,UACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,aACA,WACA,UACA,WACA,OACA,QACA,YACA,YACA,QACA,WACA,aACA,UACA,QACA,YACA,WACA,OACA,YACA,SACA,SACA,UACA,UACA,SACA,YACA,cACA,UACA,WACA,WACA,UACA,QACA,WACA,YACA,OACA,YACA,SACA,OACA,YACA,OACA,WACA,OACA,WACA,YACA,YACA,SACA,SACA,OACA,aACA,UACA,SACA,WACA,UACA,YACA,UACA,UACA,SACA,SACA,YCthBAC,QACAC,kBACAzF,UAAA,EAAA,EAAA,GACAC,UAAA,GAAA,IAAA,IACAG,QAAA,IAAA,IAAA,KACAC,QAAA,IAAA,IAAA,KAEAH,QAAA,IAAA,IAAA,IACAC,MAAA,EAAA,IAAA,KACAG,OAAA,EAAA,IAAA,KAEAC,QAAA,EAAA,IAAA,MAEAmF,kBAAA,WACA,OACA,SAAA,SAAA,SAAA,SACA,SAAA,OAAA,QACA,UACAC,KAAAC,MAAA,EAAAD,KAAAE,YClBA,IAAAC,KAAA,WACAC,KAAAC,OAGAF,KA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","file":"application.js","sourcesContent":["var mode = 'n';\n\ntext = function(phrase) {\n    if (!mode) mode = 'n';\n    var string = {\n        n : {\n            empty: '-',\n            ' 1st' : '1番',\n            ' 2nd' : '2番',\n            ' 3rd' : '3番',\n            ' 4th' : '4番',\n            ' 5th' : '5番',\n            ' 6th' : '6番',\n            ' 7th' : '7番',\n            ' 8th' : '8番',\n            ' 9th' : '9番',\n            'Now batting' : '次のバッタ、',\n            'way outside' : '相当外角',\n            'outside' : '外角',\n            'inside' : '内角',\n            'way inside' : '相当内角',\n            'way low' : '相当低め',\n            'low' : '低め',\n            'high' : '高め',\n            'way high' : '相当高め',\n            'down the middle' : '真ん中',\n            'first baseman': 'ファースト',\n            'second baseman': 'セカンド',\n            'third baseman': 'サード',\n            'shortstop': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left fielder': 'レフト',\n            'center fielder': 'センター',\n            'right fielder': 'ライト',\n            'Strike.' : 'ストライク。',\n            'Ball.' : 'ボール。',\n            'Fouled off.': 'ファウル。',\n            'In play.': 'インプレー。',\n            'Swinging strike.': '空振り。',\n            '4-seam': 'ストレイト',\n            '2-seam': 'シュート',\n            'slider': 'スライダー',\n            'fork': 'フォーク',\n            'cutter': 'カット',\n            'sinker': 'シンカー',\n            'curve': 'カーブ',\n            'change': 'チェンジ',\n            ' struck out looking.': '、見逃し三振。',\n            ' walked.': '、フォアボール。',\n            ' struck out swinging.': '、空振り三振。',\n            'Previous: ': '前：',\n            'looks like: ': '予想',\n            'breaking ball': '変化球',\n            'fastball': 'ストレート',\n            'Batting, ': '打球',\n            'Catching, pitch selection': '捕球選択',\n            'Season': '記録',\n            'Game': '今試合',\n            'Pitch': '球',\n            'Control': '制球',\n            'Velocity': '速度',\n            'Break': '変化',\n            'At Bat :': 'バッタ',\n            'On Deck :': '次バッタ',\n            'Eye :': '目',\n            'Power :': '力',\n            'Speed :': '速',\n            'Up to Bat': '打席',\n            'Fielding': '守備',\n            'BA' : '打率',\n            'OBP' : '出塁',\n            'OPS' : '出長',\n            'PA' : '打席',\n            'H/2B/3B/HR' : '安／二／三／本',\n            'H' : '安',\n            '2B' : '二',\n            '3B' : '三',\n            'HR' : '本塁打',\n            'RBI' : '打点',\n            'R' : '得点',\n            'BB' : '四球',\n            'SO' : '三振',\n\n            'Select Language:' : '言語',\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\n            'Play Ball!' : 'プレーボール',\n            'Spectate the CPU': 'CPU観戦',\n\n            'LHP' : '左投',\n            'RHP' : '右投',\n            'LHB' : '左打',\n            'RHB' : '右打',\n            'L' : '左',\n            'R ' : '右',\n            '#' : '背番号'\n        },\n        e : {\n            empty: '-',\n            'Season': 'Career'\n        }\n    }[mode][phrase];\n    return string ? string : phrase;\n};\n\ntext.fielderShortName = function(fielder) {\n    if (mode == 'n') {\n        return {\n            'first': '一',\n            'second': '二',\n            'third': '三',\n            'short': '遊',\n            'pitcher': '投',\n            'catcher': '捕',\n            'left': '左',\n            'center': '中',\n            'right': '右'\n        }[fielder];\n    }\n    return fielder;\n};\n\ntext.slash = function() {\n    if (mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = function(fielder) {\n    if (mode == 'n') {\n        return {\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'short': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left': 'レフト',\n            'center': 'センター',\n            'right': 'ライト'\n        }[fielder]\n    }\n    return {\n        first : text('first baseman'),\n        second : text('second baseman'),\n        third : text('third baseman'),\n        short : text('shortstop'),\n        pitcher : text('pitcher'),\n        catcher : text('catcher'),\n        left : text('left fielder'),\n        center : text('center fielder'),\n        right : text('right fielder')\n    }[fielder];\n};\n\ntext.comma = function() {\n    return {n: '、', e: ', '}[mode];\n};\ntext.stop = function() {\n    return {n: '。', e: '. '}[mode];\n};\n\ntext.namePitch = function(pitch) {\n    if (mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\n    }\n    if (mode == 'n') {\n        return text(pitch.name)\n    }\n};\n\ntext.contactResult = function(batter, fielder, bases, outBy) {\n    var statement = '';\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    if (mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'error':\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\n                    break;\n                case 'pop':\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'fly':\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'ground':\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'thrown':\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\n                    break;\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\n                    } else {\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\n                    }\n                    break;\n                case 2:\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\n                    break;\n                case 3:\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\n                    break;\n                case 4:\n                    statement += ' homered to ' + text.fielderShortName(fielder);\n                    break;\n            }\n        }\n        statement += text.stop();\n    }\n    if (mode == 'n') {\n        statement += batter + 'は';\n        if (outBy) {\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'error':\n                    statement += 'エラー('+fielder+')で出塁';\n                    break;\n                case 'pop':\n                    statement += 'ポップフライで' + fielder + '飛';\n                    break;\n                case 'fly':\n                    statement += fielder + '飛';\n                    break;\n                case 'ground':\n                    statement += fielder + 'ゴロ';\n                    break;\n                case 'thrown':\n                    statement += fielder + 'ゴロ';\n                    break;\n            }\n        } else {\n            fielder = text.fielderLongName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\n                    } else {\n                        statement += '安打('+fielder+')' + 'で出塁';\n                    }\n                    break;\n                case 2:\n                    statement += '二塁打（'+fielder+'）で出塁';\n                    break;\n                case 3:\n                    statement += '三塁打（'+fielder+'）で出塁';\n                    break;\n                case 4:\n                    statement += '本塁打（'+fielder+'）';\n                    break;\n            }\n        }\n        statement += text.stop();\n    }\n    return statement;\n};","data = {\n    surnames : [\n        'Sato',\n        'Suzuki',\n        'Takahashi',\n        'Tanaka',\n        'Watanabe',\n        'Ito',\n        'Nakamura',\n        'Kobayashi',\n        'Yamamoto',\n        'Kato',\n        'Yoshida',\n        'Yamada',\n        'Sasaki',\n        'Yamaguchi',\n        'Matsumoto',\n        'Inoue',\n        'Kimura',\n        'Shimizu',\n        'Hayashi',\n        'Saito',\n        'Saito',\n        'Yamazaki',\n        'Nakajima',\n        'Mori',\n        'Abe',\n        'Ikeda',\n        'Hashimoto',\n        'Ishikawa',\n        'Yamashita',\n        'Ogawa',\n        'Ishii',\n        'Hasegawa',\n        'Goto',\n        'Okada',\n        'Kondo',\n        'Maeda',\n        'Fujita',\n        'Endo',\n        'Aoki',\n        'Sakamoto',\n        'Murakami',\n        'Ota',\n        'Kaneko',\n        'Fujii',\n        'Fukuda',\n        'Nishimura',\n        'Miura',\n        'Takeuchi',\n        'Nakagawa',\n        'Okamoto',\n        'Matsuda',\n        'Harada',\n        'Nakano'\n    ],\n    surnamesJ : [\n        '佐藤',\n        '鈴木',\n        '高橋',\n        '田中',\n        '渡辺',\n        '伊藤',\n        '中村',\n        '小林',\n        '山本',\n        '加藤',\n        '吉田',\n        '山田',\n        '佐々木',\n        '山口',\n        '松本',\n        '井上',\n        '木村',\n        '清水',\n        '林',\n        '斉藤',\n        '斎藤',\n        '山崎',\n        '中島',\n        '森',\n        '阿部',\n        '池田',\n        '橋本',\n        '石川',\n        '山下',\n        '小川',\n        '石井',\n        '長谷川',\n        '後藤',\n        '岡田',\n        '近藤',\n        '前田',\n        '藤田',\n        '遠藤',\n        '青木',\n        '坂本',\n        '村上',\n        '太田',\n        '金子',\n        '藤井',\n        '福田',\n        '西村',\n        '三浦',\n        '竹内',\n        '中川',\n        '岡本',\n        '松田',\n        '原田',\n        '中野'\n    ],\n\n    namesJ: [\n        '匠',\n        'ヒカル',\n        'ゆうき',\n        '翔太',\n        '冬馬',\n        '漣',\n        '港区',\n        'ルイ',\n        '樹',\n        '賢治',\n        '五木',\n        '春',\n        '光一',\n        '宗介',\n        'こうすけ',\n        '雄太',\n        '大樹',\n        '瑛太',\n        // newer set\n        '宏',\n        '亨',\n        '道夫',\n        '聡',\n        '昭',\n        '茂雄',\n        '勝',\n        '純一',\n        '和夫',\n        '勲',\n        '省三',\n        '隆',\n        '達夫',\n        '正一',\n        '輝夫',\n        '俊夫',\n        '史郎',\n        '勇',\n        '義弘',\n        '良雄',\n        '登',\n        '義明',\n        '正義',\n        '秀夫',\n        '肇',\n        '月',\n        '克己',\n        '正男',\n        '光男',\n        '久',\n        '耕三',\n        '清',\n        '次郎',\n        '正博',\n        '明子',\n        '武',\n        '勉',\n        '晴夫',\n        '裕二',\n        '稔',\n        '障子',\n        '和子',\n        '敦',\n        '茂',\n        '信夫',\n        '恵一',\n        '忠',\n        '高尾',\n        '薫',\n        'ケン',\n        '健治',\n        '哲夫',\n        '啓二',\n        '光一',\n        '真一',\n        '貞夫',\n        '靖',\n        '武',\n        '雄',\n        '文雄',\n        '久雄',\n        '一朗',\n        '健一',\n        '正明',\n        '五郎',\n        '誠',\n        '昭夫',\n        '誠司',\n        '洋一',\n        '康夫',\n        '誠一',\n        '正美',\n        '則夫',\n        '幸雄',\n        '忠雄',\n        '仁',\n        'シンジ',\n        '豊',\n        '邦雄',\n        '修',\n        '雅之',\n        '三郎',\n        '英治',\n        '浩二',\n        '栄一',\n        '恒夫',\n        '義郎',\n        '進',\n        '博之',\n        '巌'\n    ],\n    names : [\n        'Takumi',\n        'Hikaru',\n        'Yuuki',\n        'Shouta',\n        'Touma',\n        'Ren',\n        'Minato',\n        'Rui',\n        'Tatsuki',\n        'Kenji',\n        'Itsuki',\n        'Haru',\n        'Kouichi',\n        'Sousuke',\n        'Kousuke',\n        'Yuuta',\n        'Daiki',\n        'Eita',\n        // newer set\n        'Hiroshi',\n        'Toru',\n        'Michio',\n        'Satoshi',\n        'Akira',\n        'Shigeo',\n        'Masaru',\n        'Junichi',\n        'Kazuo',\n        'Isao',\n        'Shozo',\n        'Takashi',\n        'Tatsuo',\n        'Shoichi',\n        'Teruo',\n        'Toshio',\n        'Shiro',\n        'Isamu',\n        'Yoshihiro',\n        'Yoshio',\n        'Noboru',\n        'Yoshiaki',\n        'Tadayoshi',\n        'Hideo',\n        'Hajime',\n        'Akari',\n        'Katsumi',\n        'Masao',\n        'Mitsuo',\n        'Hisashi',\n        'Kozo',\n        'Kiyoshi',\n        'Jiro',\n        'Masahiro',\n        'Akiko',\n        'Takeshi',\n        'Tsutomu',\n        'Haruo',\n        'Yuji',\n        'Minoru',\n        'Shoji',\n        'Kazuko',\n        'Atsushi',\n        'Shigeru',\n        'Shinobu',\n        'Keiichi',\n        'Tadashi',\n        'Takao',\n        'Kaoru',\n        'Ken',\n        'Kenji',\n        'Tetsuo',\n        'Keiji',\n        'Koichi',\n        'Shinichi',\n        'Sadao',\n        'Yasushi',\n        'Takeshi',\n        'Yu',\n        'Fumio',\n        'Hisao',\n        'Ichiro',\n        'Kenichi',\n        'Masaaki',\n        'Goro',\n        'Makoto',\n        'Akio',\n        'Seiji',\n        'Yoichi',\n        'Yasuo',\n        'Seiichi',\n        'Masami',\n        'Norio',\n        'Yukio',\n        'Tadao',\n        'Hitoshi',\n        'Shinji',\n        'Yutaka',\n        'Kunio',\n        'Osamu',\n        'Masayuki',\n        'Saburo',\n        'Eiji',\n        'Koji',\n        'Eiichi',\n        'Tsuneo',\n        'Yoshio',\n        'Susumu',\n        'Hiroyuki',\n        'Iwao'\n    ],\n    teamNamesJ : [\n        '横浜',\n        '大阪',\n        '名古屋',\n        '札幌',\n        '神戸',\n        '京都',\n        '福岡',\n        '川崎',\n        '埼玉県',\n        '広島',\n        '仙台',\n        '千葉県',\n        '新潟',\n        '浜松',\n        '静岡',\n        '相模原',\n        '岡山',\n        '熊本',\n        '鹿児島',\n        '船橋',\n        '川口',\n        '姫路',\n        '松山',\n        '宇都宮',\n        '松戸',\n        '西宮',\n        '倉敷',\n        '市川',\n        '福山',\n        '尼崎',\n        '金沢',\n        '長崎',\n        '横須賀',\n        '富山',\n        '高松',\n        '町田',\n        '岐阜',\n        '枚方',\n        '藤沢',\n        '柏',\n        '豊中',\n        '長野県',\n        '豊橋',\n        '一宮',\n        '和歌山',\n        '岡崎',\n        '宮崎',\n        '奈良',\n        '吹田',\n        '高槻',\n        '旭川',\n        'いわき',\n        '高崎',\n        '所沢',\n        '川越',\n        '秋田',\n        '越谷',\n        '前橋',\n        '那覇',\n        '四日市',\n        '青森',\n        '久留米',\n        '春日井',\n        '盛岡',\n        '明石',\n        '福島',\n        '下関',\n        '長岡',\n        '市原',\n        '函館',\n        '茨城県',\n        '福井',\n        '加古川',\n        '徳島',\n        '水戸',\n        '平塚',\n        '佐世保',\n        '呉',\n        '八戸',\n        '佐賀',\n        '寝屋川',\n        '富士',\n        '春日部',\n        '茅ヶ崎',\n        '松本',\n        '厚木',\n        '大和',\n        '上尾',\n        '宝塚',\n        '筑波',\n        '沼津',\n        '熊谷',\n        '伊勢崎',\n        '岸和田',\n        '鳥取',\n        '小田原',\n        '鈴鹿',\n        '松江',\n        '日立'\n    ],\n    teamNames : [\n        'Yokohama',\n        'Osaka',\n        'Nagoya',\n        'Sapporo',\n        'Kobe',\n        'Kyoto',\n        'Fukuoka',\n        'Kawasaki',\n        'Saitama',\n        'Hiroshima',\n        'Sendai',\n        'Chiba',\n        'Niigata',\n        'Hamamatsu',\n        'Shizuoka',\n        'Sagamihara',\n        'Okayama',\n        'Kumamoto',\n        'Kagoshima',\n        'Funabashi',\n        'Kawaguchi',\n        'Himeji',\n        'Matsuyama',\n        'Utsunomiya',\n        'Matsudo',\n        'Nishinomiya',\n        'Kurashiki',\n        'Ichikawa',\n        'Fukuyama',\n        'Amagasaki',\n        'Kanazawa',\n        'Nagasaki',\n        'Yokosuka',\n        'Toyama',\n        'Takamatsu',\n        'Machida',\n        'Gifu',\n        'Hirakata',\n        'Fujisawa',\n        'Kashiwa',\n        'Toyonaka',\n        'Nagano',\n        'Toyohashi',\n        'Ichinomiya',\n        'Wakayama',\n        'Okazaki',\n        'Miyazaki',\n        'Nara',\n        'Suita',\n        'Takatsuki',\n        'Asahikawa',\n        'Iwaki',\n        'Takasaki',\n        'Tokorozawa',\n        'Kawagoe',\n        'Akita',\n        'Koshigaya',\n        'Maebashi',\n        'Naha',\n        'Yokkaichi',\n        'Aomori',\n        'Kurume',\n        'Kasugai',\n        'Morioka',\n        'Akashi',\n        'Fukushima',\n        'Shimonoseki',\n        'Nagaoka',\n        'Ichihara',\n        'Hakodate',\n        'Ibaraki',\n        'Fukui',\n        'Kakogawa',\n        'Tokushima',\n        'Mito',\n        'Hiratsuka',\n        'Sasebo',\n        'Kure',\n        'Hachinohe',\n        'Saga',\n        'Neyagawa',\n        'Fuji',\n        'Kasukabe',\n        'Chigasaki',\n        'Matsumoto',\n        'Atsugi',\n        'Yamato',\n        'Ageo',\n        'Takarazuka',\n        'Tsukuba',\n        'Numazu',\n        'Kumagaya',\n        'Isesaki',\n        'Kishiwada',\n        'Tottori',\n        'Odawara',\n        'Suzuka',\n        'Matsue',\n        'Hitachi'\n    ]\n};","helper = {\n    pitchDefinitions : {\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\n        '2-seam' :      [20, -20, 0.90],\n        'cutter' :      [-25, -20, 0.95],\n        'sinker' :      [-15, -30, 0.95],\n\n        'slider' :      [-50, -35, 0.9],\n        'fork'   :      [0, -70, 0.87],\n        'curve'  :      [0, -90, 0.82],\n\n        'change' :    [0, -10, 0.88]\n    },\n    selectRandomPitch : function() {\n        return [\n            '4-seam', '2-seam', 'cutter', 'sinker',\n            'slider', 'fork', 'curve',\n            'change'\n        ][Math.floor(Math.random()*8)]\n    }\n};\n","var Log = function() {\n    this.init();\n};\n\nLog.prototype = {\n    game : 'instance of Game',\n    init : function() {\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n    },\n    note : function(note, noteJ) {\n        this.record.e.unshift(note);\n        this.shortRecord.e = this.record.e.slice(0, 6);\n\n        this.record.n.unshift(noteJ);\n        this.shortRecord.n = this.record.n.slice(0, 6);\n    },\n    getBatter : function(batter) {\n        var order = batter.team.nowBatting;\n        order = {\n            0 : text(' 1st'),\n            1 : text(' 2nd'),\n            2 : text(' 3rd'),\n            3 : text(' 4th'),\n            4 : text(' 5th'),\n            5 : text(' 6th'),\n            6 : text(' 7th'),\n            7 : text(' 8th'),\n            8 : text(' 9th')\n        }[order];\n        var positions = this.longFormFielder();\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\n            batter.getUniformNumber()+text.comma()+\n            batter.getName();\n    },\n    noteBatter : function(batter) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getBatter(batter);\n        mode = 'n';\n        recordJ = this.getBatter(batter);\n        mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\n        var noComma = false, noComma2 = false;\n        var ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += text('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += text('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += text('inside');\n        } else {\n            say += text('way inside');\n            ball = true;\n        }\n        if (say != '') say += text.comma();\n        if (y < 35) {\n            say += text('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += text('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += text('high');\n        } else {\n            say += text('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(text.comma()).join('');\n            if (noComma && noComma2) {\n                say = text('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\n        return say;\n    },\n    notePitch : function(pitchInFlight, batter) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        mode = m;\n    },\n    getSwing : function(swingResult) {\n        var result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += text('Strike.')\n            } else {\n                result += text('Ball.')\n            }\n        } else {\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += text('Fouled off.')\n                } else {\n                    if (swingResult.caught) {\n                        result += text('In play.')\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += text('In play.')\n                        } else {\n                            result += text('In play.')\n                        }\n                    }\n                }\n            } else {\n                result += text('Swinging strike.')\n            }\n        }\n        return result;\n    },\n    noteSwing : function(swingResult) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getSwing(swingResult);\n        this.pitchRecord.e[0] += record;\n        mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        this.pitchRecord.n[0] += recordJ;\n        mode = m;\n    },\n    getPlateAppearanceResult : function(game) {\n        var r = game.swingResult;\n        var record = '';\n        var batter = game.batter.getName();\n        if (r.looking) {\n            if (r.strike) {\n                record = (batter + text(' struck out looking.'));\n            } else {\n                record = (batter + text(' walked.'));\n            }\n        } else {\n            if (r.contact) {\n                var fielder = r.fielder, bases = r.bases, outBy;\n                if (r.caught) {\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                        outBy = 'pop';\n                    } else {\n                        outBy = 'fly';\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                        if (r.error) {\n                            bases = 1;\n                            outBy = 'error';\n                        } else {\n                            if (r.thrownOut) {\n                                if (Math.random() > 0.5) {\n                                    outBy = 'ground';\n                                } else {\n                                    outBy = 'thrown';\n                                }\n                            } else {\n                                switch (r.bases) {\n                                    case 1:\n                                    case 2:\n                                    case 3:\n                                        bases = r.bases;\n                                        break;\n                                    case 4:\n                                        bases = 4;\n                                        if (r.splay < -15) {\n                                            fielder = 'left';\n                                        } else if (r.splay < 15) {\n                                            fielder = 'center';\n                                        } else {\n                                            fielder = 'right';\n                                        }\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n                record = text.contactResult(batter, fielder, bases, outBy);\n            } else {\n                record = (batter+text(' struck out swinging.'));\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult : function(game) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getPlateAppearanceResult(game);\n        this.record.e.unshift(record);\n        this.pitchRecord.e = [text('Previous: ')+record];\n        mode = 'n';\n        recordJ = this.getPlateAppearanceResult(game);\n        this.record.n.unshift(recordJ);\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\n        mode = m;\n    },\n    pointer : 0,\n    pitchRecord : {\n        e: [],\n        n: []\n    },\n    shortRecord : {\n        e: [],\n        n: []\n    },\n    record : {\n        e: [],\n        n: []\n    },\n    longFormFielder : function() {\n        return {\n            first : text('first baseman'),\n            second : text('second baseman'),\n            third : text('third baseman'),\n            short : text('shortstop'),\n            pitcher : text('pitcher'),\n            catcher : text('catcher'),\n            left : text('left fielder'),\n            center : text('center fielder'),\n            right : text('right fielder')\n        }\n    }\n};","var Animator = function() {\r\n    this.init();\r\n    Math.square = function(x) { return x*x };\r\n};\r\n\r\nAnimator.prototype = {\r\n    name : 'Animator',\r\n    constructor : Animator,\r\n    init : function() {\r\n\r\n    },\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    updateFlightPath: function(callback) {\r\n        var $scope = this;\r\n        var game = $scope.y;\r\n        var top = 200-game.pitchTarget.y;\r\n        var left = game.pitchTarget.x;\r\n        var breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x;\r\n        var $baseballs = jQ('.baseball');\r\n        var flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400;\r\n        var originTop = 50;\r\n        var originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        this.pitchTarget = jQ('.main-area .target .baseball.pitch');\r\n        this.pitchBreak = jQ('.main-area .target .baseball.break');\r\n        var pitch = this.pitchTarget, henka = this.pitchBreak;\r\n        var quarter = flightSpeed/4;\r\n        var transition = function(percent, top, left, step) {\r\n            left = originLeft + Math.square(percent/100)*(left - originLeft);\r\n            top = originTop + Math.square(percent/100)*(top - originTop);\r\n            var padding = Math.max(Math.square(percent/100)*13, 1);\r\n            var borderWidth = Math.max(Math.square(percent/100)*4, 1);\r\n            return {\r\n                top: top,\r\n                left: left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        };\r\n        var transitions = [\r\n            transition(0, top, left, 0),\r\n\r\n            transition(10, top, left, 0),\r\n            transition(30, top, left, 1),\r\n            transition(50, top, left, 2),\r\n\r\n            transition(100, top, left, 3),\r\n            transition(100, breakTop, breakLeft, 3)\r\n        ];\r\n\r\n        var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        jQ('.baseball').addClass('spin');\r\n        jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + 1.2) * 1000));\r\n        }\r\n    }\r\n};","var AtBat = function(text) {\r\n    this.text = text.split('*')[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return this.text;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';","var Field = function(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor : Field,\n    init : function(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    hasRunnersOn : function() {\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\n    },\n    translateSwingResultToStylePosition: function(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        var bottom = 0, left = 190;\n\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 280), 100);\n\n        swingResult.bottom = bottom + 'px';\n        swingResult.left = left + 'px';\n        return swingResult;\n    },\n    determineSwingContactResult : function(swing) {\n        if (typeof swing == 'undefined') swing = this;\n        var x = swing.x, y = swing.y;\n        var splayAngle = 90 - 1.5*x;\n        var flyAngle = -3*y;\n        var power = this.game.batter.skill.offense.power + this.game.batter.eye.bonus;\n        var landingDistance = (50 + Math.random()*300 + (power/100)*75) * (1 - Math.abs(flyAngle - 30)/60);\n\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\n\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        swing.splay = splayAngle - 90;\n\n        if (!this.game.debug) {\n            this.game.debug = [];\n        }\n\n        var debugData = {}, dd = debugData;\n\n        if (swing.fielder) {\n            var fielder = (this.game.half == top ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\n            fielder.fatigue += 4;\n            swing.error = false;\n            var fieldingEase = fielder.skill.defense.fielding/100,\n                throwingEase = (fielder.skill.defense.throwing/100);\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\n            if (interceptRating > 0 && flyAngle > -10) {\n                //caught cleanly?\n                if ((100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100) { //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    swing.caught = false;\n                } else {\n                    swing.caught = true;\n                }\n            } else {\n                swing.caught = false;\n            }\n            dd.caught = swing.caught;\n            dd.grounder = flyAngle < 0;\n\n            if (!swing.caught) {\n                // intercept rating is negative\n                var plus = interceptRating + 100*throwingEase*fieldingEase;\n                var gatherAndThrowSuccess = plus - this.game.batter.skill.offense.speed/2 > -50;\n\n                //log('flew at angle', flyAngle, 'distance of', swing.fielderTravel,\n                //    'gives intercept rating of', interceptRating, 'fielder throw/fielding', fielder.skill.defense.throwing, fielder.skill.defense.fielding,\n                //    '+', plus, '-runner speed', this.game.batter.skill.offense.speed,\n                //    'success', gatherAndThrowSuccess\n                //);\n\n                dd.thrownOut = gatherAndThrowSuccess;\n                dd.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\n\n                if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] != 1 && gatherAndThrowSuccess) {\n                    swing.thrownOut = true;\n                    swing.error = false;\n                } else {\n                    swing.thrownOut = false;\n                    swing.bases = 1;\n                    if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1) {\n                        var fieldingReturnDelay = -1*(interceptRating + 100*throwingEase*fieldingEase) + this.game.batter.skill.offense.speed;\n                        dd.delay = fieldingReturnDelay;\n                        while (fieldingReturnDelay - 125 > 0 && swing.bases < 3) {\n                            swing.bases++;\n                            fieldingReturnDelay  -= 65;\n                        }\n                        dd.bases = swing.bases;\n                    }\n                }\n                // log('fielder return delay', fieldingReturnDelay, interceptRating, fielder.skill.defense);\n            }\n        } else {\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n                dd.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        dd.foul = swing.foul;\n        this.game.debug.push(dd);\n\n        return this.translateSwingResultToStylePosition(swing);\n    },\n    findFielder : function(splayAngle, landingDistance) {\n        if (Math.abs(90 - splayAngle) > 50) return false;\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\n            return 'pitcher';\n        }\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\n            if (splayAngle < 45 + 23) {\n                return 'third';\n            } else if (splayAngle < 45 + 23 + 23) {\n                return 'short';\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\n                return 'second';\n            } else {\n                return 'first';\n            }\n        } else if (landingDistance > 90 && landingDistance < 310) {\n            if (splayAngle < 45 + 28) {\n                return 'left';\n            } else if (splayAngle < 45 + 28 + 34) {\n                return 'center';\n            } else {\n                return 'right';\n            }\n        } else {\n            return false;\n        }\n    },\n    positions : {\n        pitcher : [90, 66],\n        catcher : [0, 0],\n        first : [90 + 45 - 7, 98],\n        second : [90 + 12.5, 130],\n        short : [90 - 12.5, 130],\n        third : [90 - 45 + 7, 98],\n        left : [45 + 14, 280],\n        center : [90, 280],\n        right : [135 - 14, 280]\n    },\n    getPolarDistance : function(a, b) {\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*Math.PI/180 - b[0]*Math.PI/180));\n    },\n    fieldingTest : function() {\n        var fielders = {\n            pitcher : {tally : 0, distances : []},\n            catcher : {tally : 0, distances : []},\n            first : {tally : 0, distances : []},\n            second : {tally : 0, distances : []},\n            short : {tally : 0, distances : []},\n            third : {tally : 0, distances : []},\n            left : {tally : 0, distances : []},\n            center : {tally : 0, distances : []},\n            right : {tally : 0, distances : []},\n            'false' : {tally : 0, distances : []}\n        };\n        var angle = Math.random()*90+45;\n        var distance = Math.random()*320;\n        var fielder = this.findFielder(angle, distance);\n        var data = {};\n        if (fielder) {\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\n                data.fielder = fielderCandidates[1];\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]])\n            return data;\n        }\n    },\n    aggregateFieldingTest : function() {\n        var fielders = {\n            pitcher : {tally : 0, distances : []},\n            catcher : {tally : 0, distances : []},\n            first : {tally : 0, distances : []},\n            second : {tally : 0, distances : []},\n            short : {tally : 0, distances : []},\n            third : {tally : 0, distances : []},\n            left : {tally : 0, distances : []},\n            center : {tally : 0, distances : []},\n            right : {tally : 0, distances : []},\n            'false' : {tally : 0, distances : []}\n        };\n        var selections = [];\n        for (var i = 0; i < 1000; i++) {\n            var angle = Math.random()*90+45;\n            var distance = Math.random()*320;\n            var fielder = this.findFielder(angle, distance);\n            fielders[fielder].tally++;\n            if (fielder) {\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\n            }\n            selections.push([angle, distance]);\n            selections.push(this.fielderSelectionTest(angle, distance, true));\n        }\n        return [fielders, selections];\n    },\n    fielderSelectionTest : function(angle, distance, returnFielder) {\n        var distances = [];\n        var minDistance = 300;\n        var giraffe = this;\n        var fielder = false;\n        jQ.each(this.positions, function(position, spot) {\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\n            distances[thisDistance] = position;\n            if (minDistance > thisDistance) {\n                minDistance = thisDistance;\n                fielder = position;\n            }\n        });\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\n    }\n};","var Game = function(m) {\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor : Game,\n    gamesIntoSeason : 0,\n    humanControl : 'none', //home, away, both, none\n    quickMode : true,\n    init : function(m) {\n        if (m) window.mode = m;\n        this.gamesIntoSeason = 60 + Math.floor(Math.random()*20);\n        this.field = new Field(this);\n        this.teams.away = new Team(this);\n        this.teams.home = new Team(this);\n        this.log = new Log();\n        this.log.game = this;\n        this.helper = helper;\n        while (this.teams.away.name == this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n    },\n    getInning : function() {\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\n    },\n    humanBatting : function() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n                break;\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n                break;\n        }\n    },\n    humanPitching : function() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n                break;\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n                break;\n        }\n    },\n    end : function() {\n        this.stage = 'end';\n        var e, n;\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\n        n = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\n        this.log.note(e, n);\n    },\n    stage : 'pitch', //pitch, swing\n    simulateInput : function(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch') {\n            this.autoPitch(callback);\n        } else if (this.stage == 'swing') {\n            if (typeof this.pitchTarget != 'object') {\n                this.pitchTarget = {x: 100, y: 100};\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    simulatePitchAndSwing : function(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        var giraffe = this;\n        setTimeout(function() {\n            if (typeof giraffe.pitchTarget != 'object') {\n                giraffe.pitchTarget = {x: 100, y: 100};\n            }\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback()});\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\n    },\n    receiveInput : function(x, y, callback) {\n        if (this.humanControl == 'none') {\n            return;\n        }\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    autoPitchSelect : function() {\n        var pitchName = this.helper.selectRandomPitch();\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\n            pitchName = this.helper.selectRandomPitch();\n        }\n        var pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    autoPitch : function(callback) {\n        var pitcher = this.pitcher;\n        if (this.stage == 'pitch') {\n            jQ('.baseball').addClass('hide');\n            pitcher.windingUp = true;\n            this.swingResult.looking = true;\n            var windup = jQ('.windup');\n            windup.css('width', '100%');\n            var giraffe = this;\n            this.autoPitchSelect();\n            if (Math.random() < 0.5) {\n                var x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\n            } else {\n                x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\n            }\n            var y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\n            if (this.quickMode) {\n                giraffe.thePitch(x, y, callback);\n            } else {\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\n                    jQ('.baseball.pitch').removeClass('hide');\n                    giraffe.thePitch(x, y, callback);\n                    pitcher.windingUp = false;\n                });\n            }\n        }\n    },\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\n        var giraffe = this;\n        var bonus = this.batter.eye.bonus || 0,\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n\n        var x = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15),\n            y = 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\n        if (100*Math.random() < eye) {\n            var convergence = 1.35 * 5*eye/100,\n                convergenceSum = 1 + convergence;\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n        } else {\n            convergence = 1.35 * 2*eye/100;\n            convergenceSum = 1 + convergence;\n        }\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\n\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\n\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*this.umpire.count.balls;\n        } else {\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\n        }\n        var chance = Math.random()*100,\n            totalLikelihood = swingLikelihood - 35 + 10*(this.umpire.count.balls + 2*this.umpire.count.strikes);\n\n        if (totalLikelihood < chance ) {\n            x = -20;\n        }\n        callback(function() {\n            giraffe.theSwing(x, y);\n        });\n    },\n    thePitch : function(x, y, callback) {\n        if (this.stage == 'pitch') {\n            this.pitcher.fatigue++;\n            this.pitchTarget.x = x;\n            this.pitchTarget.y = y;\n\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\n            this.battersEye = text('looks like: ')+(Math.abs(this.pitchInFlight.breakDirection[0])+Math.abs(this.pitchInFlight.breakDirection[1]) > 40 ?\n                text('breaking ball') : text('fastball'));\n\n            var control = this.pitchInFlight.control;\n            this.pitchTarget.x = Math.min(199.9, Math.max(0.1, this.pitchTarget.x + (50 - Math.random()*100)/(1+control/100)));\n            this.pitchTarget.y = Math.min(199.9, Math.max(0.1, this.pitchTarget.y + (50 - Math.random()*100)/(1+control/100)));\n\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\n\n            this.pitchInFlight.x = Math.floor(this.pitchTarget.x + (this.pitchInFlight.breakDirection[0]\n                *((0.5+Math.random()*this.pitchInFlight.break)/100)));\n            this.pitchInFlight.y = Math.floor(this.pitchTarget.y + (this.pitchInFlight.breakDirection[1]\n                *((0.5+Math.random()*this.pitchInFlight.break)/100))/(0.5 + this.pitchTarget.y/200));\n            this.log.notePitch(this.pitchInFlight, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.batter.team)) {\n                callback();\n            } else {\n                this.autoSwing(x, y, callback);\n            }\n        }\n    },\n    battersEye : '',\n    debugOut : function() {\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder}).length);\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder && a.thrownOut}).length);\n        log('weak outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && a.thrownOut}).length);\n        log('good outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && !a.thrownOut}).length);\n        log('singles', this.debug.filter(function(a){return a.bases == 1}).length);\n        log('2b', this.debug.filter(function(a){return a.bases == 2}).length);\n        log('3b', this.debug.filter(function(a){return a.bases == 3}).length);\n        log('homeruns', this.debug.filter(function(a){return a.bases == 4}).length);\n\n        log('fly outs', this.debug.filter(function(a){return !a.grounder && !a.bases && a.caught}).length);\n        log('groundouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\n        var SO = this.teams.away.lineup.map(function(p) {return p.atBats}).reduce(function(a, b) {\n            return a + b.filter(function(ab) {return ab == 'SO'}).length;\n        });\n        SO += this.teams.home.lineup.map(function(p) {return p.atBats.filter(function(ab) {return ab == 'SO'})}).reduce(function(a, b) {\n            return a.length + b.length;\n        });\n        log('strikeouts', this.debug.filter(function(a){return a.grounder && !a.bases && !a.caught}).length);\n        log('fouls', this.debug.filter(function(a){return a.foul}).length);\n    },\n    theSwing : function(x, y, callback) {\n        if (this.stage == 'swing') {\n            this.batter.fatigue++;\n            this.swingResult = {};\n            var bonus = this.batter.eye.bonus || 0,\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n            this.swingResult.x = 100 + (x - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.x;\n            this.swingResult.y = 100 + (y - 100)*(0.5+Math.random()*eye/200) - this.pitchInFlight.y;\n\n            if (!(x < 0 || x > 200)) {\n                this.swingResult.looking = false;\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\n                    this.swingResult.contact = true;\n                    this.batter.eye.bonus = Math.max(0, eye -\n                        Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\n                } else {\n                    this.swingResult.contact = false;\n                }\n            } else {\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\n                this.swingResult.contact = false;\n                this.swingResult.looking = true;\n                this.batter.eye.x = this.pitchInFlight.x;\n                this.batter.eye.y = this.pitchInFlight.y;\n            }\n\n            this.log.noteSwing(this.swingResult);\n            this.stage = 'pitch';\n\n            var half = this.half;\n            this.umpire.makeCall();\n            if (half != this.half) {\n                callback = this.startOpponentPitching;\n            }\n\n            if (typeof callback == 'function') {\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\n                    callback();\n                } else {\n                    this.autoPitch(callback);\n                }\n            }\n        }\n    },\n    startOpponentPitching : null, // late function\n    pitchTarget : {x : 100, y : 100},\n    pitchInFlight : {\n        x : 100,\n        y : 100,\n        breakDirection : [0, 0],\n        name : 'slider',\n        velocity : 50,\n        break : 50,\n        control : 50\n    },\n    swingResult : {\n        x : 100, //difference to pitch location\n        y : 100, //difference to pitch location\n        strike : false,\n        foul : false,\n        caught : false,\n        contact : false,\n        looking : true,\n        bases : 0,\n        fielder : 'short',\n        outs : 0\n    },\n    pitchSelect : function() {\n\n    },\n    field : null,\n    teams : {\n        away : null,\n        home : null\n    },\n    log : null,\n    half : 'top',\n    inning : 1,\n    scoreboard : {\n        away : {\n            1 : 0,\n            2 : 0,\n            3 : 0,\n            4 : 0,\n            5 : 0,\n            6 : 0,\n            7 : 0,\n            8 : 0,\n            9 : 0\n        },\n        home : {\n            1 : 0,\n            2 : 0,\n            3 : 0,\n            4 : 0,\n            5 : 0,\n            6 : 0,\n            7 : 0,\n            8 : 0,\n            9 : 0\n        }\n    },\n    tally : {\n        away : {\n            H : 0,\n            R : 0,\n            E : 0\n        },\n        home : {\n            H : 0,\n            R : 0,\n            E : 0\n        }\n    }\n};","var Manager = function(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor : Manager,\n    init : function(team) {\n        this.team = team;\n    },\n    makeLineup : function() {\n        var jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        this.team.positions.pitcher.number = jerseyNumber++;\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\n        this.team.positions.catcher.position = 'catcher';\n        this.team.positions.catcher.number = jerseyNumber++;\n        jQ.each(this.team.bench, function(key, player) {\n            player.number = jerseyNumber++;\n        });\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\n        var property;\n        mustBeRightHanded = !!mustBeRightHanded;\n        if (this.team.bench.length || pool == this.team.positions) {\n            var selection = this.team.bench[0];\n            var rating = 0;\n            var index = 0;\n            jQ.each(pool, function(key, player) {\n                var skills = skillset.slice();\n                var cursor = player.skill;\n                while (property = skills.shift()) {\n                    cursor = cursor[property];\n                }\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            delete this.team.bench[index];\n            if (pool == this.team.bench) {\n                this.team.bench = this.team.bench.filter(function(player) {\n                    return player instanceof selection.constructor;\n                })\n            }\n            return selection;\n        }\n        return 'no players available';\n    }\n};","var Player = function(team) {\n    this.init(team);\n    var offense = this.skill.offense;\n    var defense = this.skill.defense;\n    var randBetween = function(a, b, skill) {\n        if (offense[skill]) skill = offense[skill];\n        if (defense[skill]) skill = defense[skill];\n        if (isNaN(skill)) skill = 50;\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\n        return Math.floor((skill/100) * (b - a) + a);\n    };\n    // let's just say we're about X games into the season\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\n    var IP, ER, GS, W, L;\n    if (this.skill.pitching > 65) {\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\n        if (IP > gamesIntoSeason) {\n            //starter\n            GS = Math.floor(gamesIntoSeason/5);\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\n        } else {\n            //reliever\n            GS = Math.floor(gamesIntoSeason/40);\n            W = randBetween(0, GS*0.6, this.skill.pitching);\n            L = randBetween((GS - W), 0, this.skill.pitching);\n        }\n    }\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\n    var paRemaining = pa;\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\n    paRemaining -= bb;\n    var ab = paRemaining;\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\n    paRemaining -= so;\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\n    paRemaining -= h;\n\n    var doubles = randBetween(0, h/3, 'power');\n    var triples = randBetween(0, h/12, 'speed');\n    var hr = Math.max(0, randBetween(-h/5, h/5, 'power'));\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\n    var hbp = randBetween(0, gamesIntoSeason/25);\n    var sf = randBetween(0, gamesIntoSeason/5, 'eye');\n\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\n    var E = randBetween(chances/10, 0, 'fielding');\n    var PO = chances - E;\n\n    this.stats = {\n        pitching : {\n            pitches : 0, // in game\n            GS : GS,\n            W: W,\n            L: L,\n            strikes : 0, // in game\n            K : 0, // in game\n            getERA : function() {\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3)\n            },\n            ERA : null,\n            ER : ER,\n            H : 0, // in game\n            HR : 0, // in game\n            BB : 0, // in game\n            IP : [IP,0]\n        },\n        batting : {\n            getBA : function() {\n                return this.h / (Math.max(1, this.ab))\n            },\n            ba : null,\n            getOBP : function() {\n                return (h + bb + hbp)/(ab + bb + hbp + sf);\n            },\n            obp : null,\n            getSLG : function() {\n                return ((h - doubles - triples - hr) + 2*doubles + 3*triples + 4*hr)/ab\n            },\n            slg : null,\n            pa : pa,\n            ab : ab,\n            so : so,\n            bb : bb,\n            h : h,\n            '2b' : doubles,\n            '3b' : triples,\n            hr : hr,\n            r : r,\n            rbi : rbi,\n            hbp : hbp\n        },\n        fielding : {\n            E : E,\n            PO : PO, // should depend on position\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\n        }\n    };\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\n    this.stats.batting.ba = this.stats.batting.getBA();\n};\n\nPlayer.prototype = {\n    constructor : Player,\n    init : function(team) {\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = {averaging : []};\n        this.number = 0;\n        this.randomizeSkills(Math.random() > 0.9);\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\n            nameKey = Math.floor(Math.random()*data.names.length);\n\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\n        var jSurname = data.surnamesJ[surnameKey],\n            jGivenName = data.namesJ[nameKey];\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surname = data.surnames[surnameKey];\n        this.surnameJ = data.surnamesJ[surnameKey];\n        this.atBats = [];\n    },\n    atBatObjects : [],\n    getAtBats : function() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            var beneficial = ['BB', 'H', 'HR', '2B', '3B', 'SAC', 'ROE'];\n            var atBatObjects = [];\n            this.atBats.map(function(item) {\n                var atBat = new AtBat(item);\n                if (beneficial.indexOf(atBat.text) > -1) {\n                    atBat.beneficial = true;\n                }\n                atBatObjects.push(atBat);\n            });\n            this.atBatObjects = atBatObjects;\n        }\n        return this.atBatObjects;\n    },\n    recordRBI : function() {\n        this.atBats[this.atBats.length - 1] += '*';\n    },\n    randomizeSkills : function(hero) {\n        this.hero = hero;\n        var giraffe = this;\n        var randValue = function(isPitching) {\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\n            if (hero) {\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value\n        };\n        this.skill.offense = {\n            eye : randValue(),\n            power : randValue(),\n            speed : randValue()\n        };\n        this.skill.defense = {\n            catching : randValue(),\n            fielding : randValue(),\n            speed : randValue(),\n            throwing : randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity : randValue(true),\n            'break' : randValue(true),\n            control : randValue(true)\n        };\n        this.pitching['slider'] = {\n            velocity : randValue(true),\n            'break' : randValue(true),\n            control : randValue(true)\n        };\n        if (Math.random() < 0.17) {\n            // can pitch!\n            if (Math.random() > 0.6) {\n                this.pitching['2-seam'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n            if (Math.random() < 0.18) {\n                this.pitching['fork'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n            if (Math.random() > 0.77) {\n                this.pitching['cutter'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n            if (Math.random() < 0.21) {\n                this.pitching['sinker'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n\n            if (Math.random() < 0.4) {\n                this.pitching['curve'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n\n            if (Math.random() < 0.9) {\n                this.pitching['change'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                }\n            }\n        }\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current, index, arr) {\n            return prev + current\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\n        delete this.pitching.averaging;\n    },\n    getSurname : function() {\n        return mode == 'n' ? this.surnameJ : this.surname;\n    },\n    getName : function() {\n        return mode == 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber : function() {\n        return text('#') + this.number\n    },\n    getOrder : function() {\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\n    },\n    eye : {},\n    fatigue : 0,\n    name : '',\n    number : 0,\n    position : '',\n    atBats : []\n};","var Team = function(game) {\n    this.init(game);\n};\n\nTeam.prototype = {\n    constructor : Team,\n    init : function(game) {\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher : null,\n            catcher : null,\n            first : null,\n            second : null,\n            short : null,\n            third : null,\n            left : null,\n            center : null,\n            right : null\n        };\n        this.game = game;\n        for (var j = 0; j < 20; j++) {\n            this.bench.push(new Player(this));\n        }\n        this.manager = new Manager(this);\n        this.manager.makeLineup();\n        this.pickName();\n    },\n    pickName : function() {\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\n        this.name = data.teamNames[teamNameIndex];\n        this.nameJ = data.teamNamesJ[teamNameIndex];\n    },\n    getName : function() {\n        return mode == 'n' ? this.nameJ : this.name;\n    },\n    lineup : [],\n    positions : {},\n    manager : null,\n    bench : [],\n    bullpen : [],\n    nowBatting : 0,\n    expanded : 'Player&'\n};","var Umpire = function(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor : Umpire,\n    init : function(game) {\n        this.game = game;\n        this.playBall();\n    },\n    count : {\n        strikes : 0,\n        balls : 0,\n        outs : 0\n    },\n    playBall : function() {\n        this.game.half = 'top';\n        this.game.inning = 1;\n        this.game.batter = this.game.teams.away.lineup[0];\n        this.game.deck = this.game.teams.away.lineup[1];\n        this.game.hole = this.game.teams.away.lineup[2];\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\n        this.game.log.note(e, n);\n        this.game.log.noteBatter(\n            this.game.batter\n        );\n    },\n    makeCall : function() {\n        this.says = '';\n\n        var result = this.game.swingResult;\n        var pitcher = this.game.pitcher;\n        var batter = this.game.batter;\n\n        pitcher.stats.pitching.pitches++;\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            if (result.contact) {\n                if (result.caught) {\n                    this.count.outs++;\n                    pitcher.stats.pitching.IP[1]++;\n                    this.game.batter.atBats.push('FO');\n                    batter.stats.batting.pa++;\n                    batter.stats.batting.ab++;\n                    this.newBatter(); //todo: sac fly\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        pitcher.stats.pitching.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            this.game.batter.atBats.push('GO');\n                            this.newBatter(); //todo: sac\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home']['H']++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away']['E']++;\n                                    this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder].stats.fielding.E++;\n                                }\n                            }\n                            var bases = result.bases;\n                            switch (bases) {\n                                case 0 :\n                                    this.game.batter.atBats.push('GO');\n                                    break;\n                                case 1 :\n                                    if (result.error) {\n                                        this.game.batter.atBats.push('ROE');\n                                    } else {\n                                        this.game.batter.atBats.push('H');\n                                        batter.stats.batting.h++;\n                                    }\n                                    break;\n                                case 2 :\n                                    this.game.batter.atBats.push('2B');\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3 :\n                                    this.game.batter.atBats.push('3B');\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4 :\n                                    this.game.batter.atBats.push('HR');\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            var onBase = false;\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                                if (!onBase) {\n                                    this.reachBase();\n                                    onBase = true;\n                                }\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                pitcher.stats.pitching.strikes++;\n                this.count.strikes++;\n            }\n        }\n\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            this.game.batter.atBats.push('SO');\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            this.game.batter.atBats.push('BB');\n            this.advanceRunners(true).reachBase().newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    reachBase : function() {\n        this.game.field.first = this.game.batter;\n        this.game.field.first.fatigue += 2;\n        return this;\n    },\n    advanceRunners : function(isWalk) {\n        isWalk = !!isWalk;\n\n        if (isWalk) {\n            if (this.game.field.first) {\n                if (this.game.field.second) {\n                    if (this.game.field.third) {\n                        //bases loaded\n                        this.game.batter.recordRBI();\n                        this.game.batter.stats.batting.rbi++;\n                        this.game.field.third.atBats.push('R');\n                        this.game.field.third.stats.batting.r++;\n                        this.game.pitcher.stats.pitching.ER++;\n                        this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\n                        this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\n                        this.game.field.third = this.game.field.second;\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    } else {\n                        // 1st and second\n                        this.game.field.third = this.game.field.second;\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    }\n                } else {\n                    if (this.game.field.third) {\n                        // first and third\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    } else {\n                        // first only\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n            if (this.game.field.third instanceof this.game.batter.constructor) {\n                // run scored\n                this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\n                this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\n                if (this.game.batter != this.game.field.third) {\n                    this.game.batter.recordRBI();\n                    this.game.field.third.atBats.push('R');\n                }\n                this.game.batter.stats.batting.rbi++;\n                this.game.field.third.stats.batting.r++;\n                this.game.pitcher.stats.pitching.ER++;\n            }\n            this.game.field.third = this.game.field.second;\n            this.game.field.second = this.game.field.first;\n            this.game.field.first = null;\n        }\n        return this;\n    },\n    newBatter : function() {\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        this.game.log.notePlateAppearanceResult(this.game);\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\n        team.nowBatting = (team.nowBatting + 1)%9;\n        if (this.count.outs < 3) {\n            this.game.log.noteBatter(this.game.batter);\n        }\n    },\n    changeSides : function() {\n        this.game.swingResult.looking = true; // hide bat\n        this.game.pitchInFlight.x = null; // hide ball\n        this.game.pitchInFlight.y = null; // hide ball\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        var offense, defense;\n        this.game.field.first = null;\n        this.game.field.second = null;\n        this.game.field.third = null;\n        if (this.game.half == 'top') {\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\n                return this.game.end();\n            }\n            this.game.half = 'bottom';\n        } else {\n            if (this.game.inning + 1 > 9) {\n                return this.game.end();\n            }\n            this.game.inning++;\n            this.game.half = 'top';\n        }\n        offense = this.game.half == 'top' ? 'away' : 'home';\n        defense = this.game.half == 'top' ? 'home' : 'away';\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\n        +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\n        this.game.log.note(e, n);\n        var team = this.game.teams[offense];\n        this.game.batter = team.lineup[team.nowBatting];\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\n\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\n        this.game.log.noteBatter(this.game.batter);\n    },\n    says : 'Play ball!',\n    game : null\n};","var Catcher = function() {\n    this.init();\n};\n\nCatcher.prototype = {\n    init : function() {\n\n    }\n};","var Fielder = function() {\n    this.init();\n};\n\nFielder.prototype = {\n    init : function() {\n\n    }\n};","var Pitcher = function() {\n    this.init();\n};\n\nPitcher.prototype = {\n    init : function() {\n\n    }\n};","var Batter = function() {\n    this.init();\n};\n\nBatter.prototype = {\n    init : function() {\n\n    }\n};","var Runner = function() {\n    this.init();\n};\n\nRunner.prototype = {\n    init : function() {\n\n    }\n};","IndexController = function($scope) {\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            mode = setMode;\n        }\n        return mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, AIonly) {\n        Game.prototype.humanControl = AIonly ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode;\n        $scope.y = new Game();\n        s2.y = $scope.y;\n        bindMethods();\n        jQ('.blocking').remove();\n        if ($scope.y.humanControl == 'none' && $scope.y.quickMode) {\n            var game = $scope.y;\n            var n = 0;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            $scope.y = game;\n            log('sim ended');\n            $scope.y.debugOut();\n        } else if ($scope.y.humanControl == 'none') {\n            var scalar = $scope.y.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if ($scope.y.stage == 'end') {\n                    clearInterval(auto);\n                }\n                $scope.y.simulatePitchAndSwing(function(callback) {\n                    $scope.y.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*($scope.y.field.hasRunnersOn() ? 4000 : 5500));\n        }\n        if ($scope.y.humanControl == 'away') {\n            $scope.y.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if ($scope.y.humanControl == 'home') {\n\n        }\n    };\n\n    var bindMethods = function() {\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n        $scope.selectPitch = function(pitchName) {\n            if ($scope.y.stage == 'pitch') {\n                $scope.y.pitchInFlight = jQ.extend({}, $scope.y.pitcher.pitching[pitchName]);\n                $scope.y.pitchInFlight.name = pitchName;\n                $scope.y.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            jQ('.no-swing').click();\n            $scope.$apply();\n            //$scope.y.receiveInput(-20, 100, function() {\n            //    $scope.updateFlightPath();\n            //});\n        };\n        $scope.y.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if ($scope.y.pitcher.windingUp) {\n                return;\n            }\n            if ($scope.y.humanPitching()) $scope.allowInput = false;\n            var offset = jQ('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            $scope.y.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n    };\n\n\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective);\n\nangular.module('controllers', [])\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
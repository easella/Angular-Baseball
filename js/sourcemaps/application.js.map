{"version":3,"sources":["text.js","data.js","helper.js","log.js","Animator.js","Distribution.js","Mathinator.js","atBat.js","field.js","game.js","manager.js","player.js","team.js","umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["mode","text","phrase","override","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","getBattersEye","game","eye","breaking","Math","abs","pitchInFlight","breakDirection","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","floor","random","Log","this","init","prototype","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","shortRecord","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","splay","notePlateAppearanceResult","pointer","Animator","identifier","constructor","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","pitchTransition","Mathinator","transitions","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","addClass","removeClass","humanPitching","holdUpTimeouts","push","holdUp","animateFieldingTrajectory","killAll","linearApproximateDragScalar","distance","apexHeight","airTime","angle","flyAngle","travelDistance","scalar","memory","bounding","sqrt","sin","PI","mathinator","transitionalTrajectory","fn","hasOwnProperty","Distribution","chance","scale","defense","fielding","landingDistance","power","pitchLocation","centralizedNumber","swingLikelihood","umpire","min","count","balls","max","strikes","pitchControl","target","control","breakEffect","effect","swing","actual","square","RADIAN","getAngularOffset","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","getPolarDistance","a","b","radians","battingAngle","origin","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","translateSwingResultToStylePosition","_top","_left","transform","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","Field","hasRunnersOn","Player","determineSwingContactResult","splayAngle","bonus","findFielder","debug","half","teams","home","away","fatigue","fieldingEase","throwingEase","throwing","fielderTravel","interceptRating","speed","plus","gatherAndThrowSuccess","outFielder","fieldingReturnDelay","fieldingDelay","fieldingTest","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","i","returnFielder","minDistance","giraffe","each","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","window","field","Team","pickName","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","windingUp","windup","css","animate","width","deceptiveX","deceptiveY","convergence","convergenceSum","swingProbability","battersEye","setBatAngle","recalculation","pow","makeCall","startOpponentPitching","debugOut","filter","grounder","length","PO","map","hitters","lineup","concat","atBats","LO","ab","FO","GO","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","property","selection","rating","index","skills","cursor","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sf","chances","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","hero","randValue","isPitching","value","catching","reduce","prev","current","arr","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","batterRunner","deck","hole","says","newBatter","onBase","advanceRunners","reachBase","changeSides","isWalk","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","spectateCpu","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","show","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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","file":"application.js","sourcesContent":["var mode = 'n';\r\n\r\ntext = function(phrase, override) {\r\n    if (!mode) mode = 'n';\r\n    var string = {\r\n        n : {\r\n            empty: '-',\r\n            ' 1st' : '1番',\r\n            ' 2nd' : '2番',\r\n            ' 3rd' : '3番',\r\n            ' 4th' : '4番',\r\n            ' 5th' : '5番',\r\n            ' 6th' : '6番',\r\n            ' 7th' : '7番',\r\n            ' 8th' : '8番',\r\n            ' 9th' : '9番',\r\n            'Now batting' : '次のバッタ、',\r\n            'way outside' : '相当外角',\r\n            'outside' : '外角',\r\n            'inside' : '内角',\r\n            'way inside' : '相当内角',\r\n            'way low' : '相当低め',\r\n            'low' : '低め',\r\n            'high' : '高め',\r\n            'way high' : '相当高め',\r\n            'down the middle' : '真ん中',\r\n            'first baseman': 'ファースト',\r\n            'second baseman': 'セカンド',\r\n            'third baseman': 'サード',\r\n            'shortstop': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left fielder': 'レフト',\r\n            'center fielder': 'センター',\r\n            'right fielder': 'ライト',\r\n            'Strike.' : 'ストライク。',\r\n            'Ball.' : 'ボール。',\r\n            'Fouled off.': 'ファウル。',\r\n            'In play.': 'インプレー。',\r\n            'Swinging strike.': '空振り。',\r\n            '4-seam': 'ストレート',\r\n            '2-seam': 'シュート',\r\n            'slider': 'スライダー',\r\n            'fork': 'フォーク',\r\n            'cutter': 'カット',\r\n            'sinker': 'シンカー',\r\n            'curve': 'カーブ',\r\n            'change': 'チェンジ',\r\n            ' struck out looking.': '、見逃し三振。',\r\n            ' walked.': '、フォアボール。',\r\n            ' struck out swinging.': '、空振り三振。',\r\n            'Previous: ': '前：',\r\n            'looks like: ': '予想',\r\n            'breaking ball': '変化球',\r\n            'fastball': 'ストレート',\r\n            'Batting, ': '打球',\r\n            'Catching, pitch selection': '捕球選択',\r\n            'Season': '記録',\r\n            'Game': '今試合',\r\n            'Pitch': '球',\r\n            'Control': '制球',\r\n            'Velocity': '速度',\r\n            'Break': '変化',\r\n            'At Bat :': 'バッタ',\r\n            'On Deck :': '次バッタ',\r\n            'Eye :': '目',\r\n            'Power :': '力',\r\n            'Speed :': '速',\r\n            'Up to Bat': '打席',\r\n            'Fielding': '守備',\r\n            'BA' : '打率',\r\n            'OBP' : '出塁',\r\n            'SLG' : '長打',\r\n            'PA' : '打席',\r\n            'H/2B/3B/HR' : '安／二／三／本',\r\n            'H' : '安',\r\n            '2B' : '二',\r\n            '3B' : '三',\r\n            'HR' : '本塁打',\r\n            'RBI' : '打点',\r\n            'R' : '得点',\r\n            'BB' : '四球',\r\n            'SO' : '三振',\r\n\r\n            'Select Language:' : '言語',\r\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\r\n            'Play Ball!' : 'プレーボール',\r\n            'Spectate the CPU': 'CPU観戦',\r\n\r\n            'Throws/Bats' : ' ',\r\n            'LHP' : '左投',\r\n            'RHP' : '右投',\r\n            'LHB' : '左打',\r\n            'RHB' : '右打',\r\n            'L' : '左投',\r\n            'R ' : '右投',\r\n            ' L ' : '左打',\r\n            ' R ' : '右打',\r\n            '#' : '背番号'\r\n        },\r\n        e : {\r\n            empty: '-',\r\n            'Season': 'Career'\r\n        }\r\n    }[override ? override : mode][phrase];\r\n    return string ? string : phrase;\r\n};\r\n\r\ntext.getBattersEye = function(game) {\r\n    var eye = {},\r\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\r\n    eye.e =\r\n        text('looks like: ', 'e')+\r\n        breaking ? text('breaking ball', 'e') : text('fastball', 'e');\r\n    eye.n =\r\n        text('looks like: ', 'n')+\r\n        breaking ? text('breaking ball', 'n') : text('fastball', 'n');\r\n    return eye;\r\n};\r\n\r\ntext.fielderShortName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': '一',\r\n            'second': '二',\r\n            'third': '三',\r\n            'short': '遊',\r\n            'pitcher': '投',\r\n            'catcher': '捕',\r\n            'left': '左',\r\n            'center': '中',\r\n            'right': '右'\r\n        }[fielder];\r\n    }\r\n    return fielder;\r\n};\r\n\r\ntext.slash = function() {\r\n    if (mode == 'n') {\r\n        return '・';\r\n    }\r\n    return '/';\r\n};\r\n\r\ntext.fielderLongName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': 'ファースト',\r\n            'second': 'セカンド',\r\n            'third': 'サード',\r\n            'short': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left': 'レフト',\r\n            'center': 'センター',\r\n            'right': 'ライト'\r\n        }[fielder]\r\n    }\r\n    return {\r\n        first : text('first baseman'),\r\n        second : text('second baseman'),\r\n        third : text('third baseman'),\r\n        short : text('shortstop'),\r\n        pitcher : text('pitcher'),\r\n        catcher : text('catcher'),\r\n        left : text('left fielder'),\r\n        center : text('center fielder'),\r\n        right : text('right fielder')\r\n    }[fielder];\r\n};\r\n\r\ntext.comma = function() {\r\n    return {n: '、', e: ', '}[mode];\r\n};\r\ntext.stop = function() {\r\n    return {n: '。', e: '. '}[mode];\r\n};\r\n\r\ntext.namePitch = function(pitch) {\r\n    if (mode == 'e') {\r\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\r\n    }\r\n    if (mode == 'n') {\r\n        return text(pitch.name)\r\n    }\r\n};\r\n\r\ntext.contactResult = function(batter, fielder, bases, outBy) {\r\n    var statement = '';\r\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\r\n    if (mode == 'e') {\r\n        statement += batter;\r\n        if (outBy) {\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'pop':\r\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'fly':\r\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'ground':\r\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'thrown':\r\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\r\n                    } else {\r\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 3:\r\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 4:\r\n                    statement += ' homered to ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    if (mode == 'n') {\r\n        statement += batter + 'は';\r\n        if (outBy) {\r\n            fielder = text.fielderShortName(fielder);\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += 'エラー('+fielder+')で出塁';\r\n                    break;\r\n                case 'pop':\r\n                    statement += 'ポップフライで' + fielder + '飛';\r\n                    break;\r\n                case 'fly':\r\n                    statement += fielder + '飛';\r\n                    break;\r\n                case 'ground':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n                case 'thrown':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n            }\r\n        } else {\r\n            fielder = text.fielderLongName(fielder);\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\r\n                    } else {\r\n                        statement += '安打('+fielder+')' + 'で出塁';\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += '二塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 3:\r\n                    statement += '三塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 4:\r\n                    statement += '本塁打（'+fielder+'）';\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    return statement;\r\n};","data = {\r\n    surnames : [\r\n        'Sato',\r\n        'Suzuki',\r\n        'Takahashi',\r\n        'Tanaka',\r\n        'Watanabe',\r\n        'Ito',\r\n        'Nakamura',\r\n        'Kobayashi',\r\n        'Yamamoto',\r\n        'Kato',\r\n        'Yoshida',\r\n        'Yamada',\r\n        'Sasaki',\r\n        'Yamaguchi',\r\n        'Matsumoto',\r\n        'Inoue',\r\n        'Kimura',\r\n        'Shimizu',\r\n        'Hayashi',\r\n        'Saito',\r\n        'Saito',\r\n        'Yamazaki',\r\n        'Nakajima',\r\n        'Mori',\r\n        'Abe',\r\n        'Ikeda',\r\n        'Hashimoto',\r\n        'Ishikawa',\r\n        'Yamashita',\r\n        'Ogawa',\r\n        'Ishii',\r\n        'Hasegawa',\r\n        'Goto',\r\n        'Okada',\r\n        'Kondo',\r\n        'Maeda',\r\n        'Fujita',\r\n        'Endo',\r\n        'Aoki',\r\n        'Sakamoto',\r\n        'Murakami',\r\n        'Ota',\r\n        'Kaneko',\r\n        'Fujii',\r\n        'Fukuda',\r\n        'Nishimura',\r\n        'Miura',\r\n        'Takeuchi',\r\n        'Nakagawa',\r\n        'Okamoto',\r\n        'Matsuda',\r\n        'Harada',\r\n        'Nakano'\r\n    ],\r\n    surnamesJ : [\r\n        '佐藤',\r\n        '鈴木',\r\n        '高橋',\r\n        '田中',\r\n        '渡辺',\r\n        '伊藤',\r\n        '中村',\r\n        '小林',\r\n        '山本',\r\n        '加藤',\r\n        '吉田',\r\n        '山田',\r\n        '佐々木',\r\n        '山口',\r\n        '松本',\r\n        '井上',\r\n        '木村',\r\n        '清水',\r\n        '林',\r\n        '斉藤',\r\n        '斎藤',\r\n        '山崎',\r\n        '中島',\r\n        '森',\r\n        '阿部',\r\n        '池田',\r\n        '橋本',\r\n        '石川',\r\n        '山下',\r\n        '小川',\r\n        '石井',\r\n        '長谷川',\r\n        '後藤',\r\n        '岡田',\r\n        '近藤',\r\n        '前田',\r\n        '藤田',\r\n        '遠藤',\r\n        '青木',\r\n        '坂本',\r\n        '村上',\r\n        '太田',\r\n        '金子',\r\n        '藤井',\r\n        '福田',\r\n        '西村',\r\n        '三浦',\r\n        '竹内',\r\n        '中川',\r\n        '岡本',\r\n        '松田',\r\n        '原田',\r\n        '中野'\r\n    ],\r\n\r\n    namesJ: [\r\n        '匠',\r\n        'ヒカル',\r\n        'ゆうき',\r\n        '翔太',\r\n        '冬馬',\r\n        '漣',\r\n        '港区',\r\n        'ルイ',\r\n        '樹',\r\n        '賢治',\r\n        '五木',\r\n        '春',\r\n        '光一',\r\n        '宗介',\r\n        'こうすけ',\r\n        '雄太',\r\n        '大樹',\r\n        '瑛太',\r\n        // newer set\r\n        '宏',\r\n        '亨',\r\n        '道夫',\r\n        '聡',\r\n        '昭',\r\n        '茂雄',\r\n        '勝',\r\n        '純一',\r\n        '和夫',\r\n        '勲',\r\n        '省三',\r\n        '隆',\r\n        '達夫',\r\n        '正一',\r\n        '輝夫',\r\n        '俊夫',\r\n        '史郎',\r\n        '勇',\r\n        '義弘',\r\n        '良雄',\r\n        '登',\r\n        '義明',\r\n        '正義',\r\n        '秀夫',\r\n        '肇',\r\n        '月',\r\n        '克己',\r\n        '正男',\r\n        '光男',\r\n        '久',\r\n        '耕三',\r\n        '清',\r\n        '次郎',\r\n        '正博',\r\n        '明子',\r\n        '武',\r\n        '勉',\r\n        '晴夫',\r\n        '裕二',\r\n        '稔',\r\n        '障子',\r\n        '和子',\r\n        '敦',\r\n        '茂',\r\n        '信夫',\r\n        '恵一',\r\n        '忠',\r\n        '高尾',\r\n        '薫',\r\n        'ケン',\r\n        '健治',\r\n        '哲夫',\r\n        '啓二',\r\n        '光一',\r\n        '真一',\r\n        '貞夫',\r\n        '靖',\r\n        '武',\r\n        '雄',\r\n        '文雄',\r\n        '久雄',\r\n        '一朗',\r\n        '健一',\r\n        '正明',\r\n        '五郎',\r\n        '誠',\r\n        '昭夫',\r\n        '誠司',\r\n        '洋一',\r\n        '康夫',\r\n        '誠一',\r\n        '正美',\r\n        '則夫',\r\n        '幸雄',\r\n        '忠雄',\r\n        '仁',\r\n        'シンジ',\r\n        '豊',\r\n        '邦雄',\r\n        '修',\r\n        '雅之',\r\n        '三郎',\r\n        '英治',\r\n        '浩二',\r\n        '栄一',\r\n        '恒夫',\r\n        '義郎',\r\n        '進',\r\n        '博之',\r\n        '巌'\r\n    ],\r\n    names : [\r\n        'Takumi',\r\n        'Hikaru',\r\n        'Yuuki',\r\n        'Shouta',\r\n        'Touma',\r\n        'Ren',\r\n        'Minato',\r\n        'Rui',\r\n        'Tatsuki',\r\n        'Kenji',\r\n        'Itsuki',\r\n        'Haru',\r\n        'Kouichi',\r\n        'Sousuke',\r\n        'Kousuke',\r\n        'Yuuta',\r\n        'Daiki',\r\n        'Eita',\r\n        // newer set\r\n        'Hiroshi',\r\n        'Toru',\r\n        'Michio',\r\n        'Satoshi',\r\n        'Akira',\r\n        'Shigeo',\r\n        'Masaru',\r\n        'Junichi',\r\n        'Kazuo',\r\n        'Isao',\r\n        'Shozo',\r\n        'Takashi',\r\n        'Tatsuo',\r\n        'Shoichi',\r\n        'Teruo',\r\n        'Toshio',\r\n        'Shiro',\r\n        'Isamu',\r\n        'Yoshihiro',\r\n        'Yoshio',\r\n        'Noboru',\r\n        'Yoshiaki',\r\n        'Tadayoshi',\r\n        'Hideo',\r\n        'Hajime',\r\n        'Akari',\r\n        'Katsumi',\r\n        'Masao',\r\n        'Mitsuo',\r\n        'Hisashi',\r\n        'Kozo',\r\n        'Kiyoshi',\r\n        'Jiro',\r\n        'Masahiro',\r\n        'Akiko',\r\n        'Takeshi',\r\n        'Tsutomu',\r\n        'Haruo',\r\n        'Yuji',\r\n        'Minoru',\r\n        'Shoji',\r\n        'Kazuko',\r\n        'Atsushi',\r\n        'Shigeru',\r\n        'Shinobu',\r\n        'Keiichi',\r\n        'Tadashi',\r\n        'Takao',\r\n        'Kaoru',\r\n        'Ken',\r\n        'Kenji',\r\n        'Tetsuo',\r\n        'Keiji',\r\n        'Koichi',\r\n        'Shinichi',\r\n        'Sadao',\r\n        'Yasushi',\r\n        'Takeshi',\r\n        'Yu',\r\n        'Fumio',\r\n        'Hisao',\r\n        'Ichiro',\r\n        'Kenichi',\r\n        'Masaaki',\r\n        'Goro',\r\n        'Makoto',\r\n        'Akio',\r\n        'Seiji',\r\n        'Yoichi',\r\n        'Yasuo',\r\n        'Seiichi',\r\n        'Masami',\r\n        'Norio',\r\n        'Yukio',\r\n        'Tadao',\r\n        'Hitoshi',\r\n        'Shinji',\r\n        'Yutaka',\r\n        'Kunio',\r\n        'Osamu',\r\n        'Masayuki',\r\n        'Saburo',\r\n        'Eiji',\r\n        'Koji',\r\n        'Eiichi',\r\n        'Tsuneo',\r\n        'Yoshio',\r\n        'Susumu',\r\n        'Hiroyuki',\r\n        'Iwao'\r\n    ],\r\n    teamNamesJ : [\r\n        '横浜',\r\n        '大阪',\r\n        '名古屋',\r\n        '札幌',\r\n        '神戸',\r\n        '京都',\r\n        '福岡',\r\n        '川崎',\r\n        '埼玉県',\r\n        '広島',\r\n        '仙台',\r\n        '千葉県',\r\n        '新潟',\r\n        '浜松',\r\n        '静岡',\r\n        '相模原',\r\n        '岡山',\r\n        '熊本',\r\n        '鹿児島',\r\n        '船橋',\r\n        '川口',\r\n        '姫路',\r\n        '松山',\r\n        '宇都宮',\r\n        '松戸',\r\n        '西宮',\r\n        '倉敷',\r\n        '市川',\r\n        '福山',\r\n        '尼崎',\r\n        '金沢',\r\n        '長崎',\r\n        '横須賀',\r\n        '富山',\r\n        '高松',\r\n        '町田',\r\n        '岐阜',\r\n        '枚方',\r\n        '藤沢',\r\n        '柏',\r\n        '豊中',\r\n        '長野県',\r\n        '豊橋',\r\n        '一宮',\r\n        '和歌山',\r\n        '岡崎',\r\n        '宮崎',\r\n        '奈良',\r\n        '吹田',\r\n        '高槻',\r\n        '旭川',\r\n        'いわき',\r\n        '高崎',\r\n        '所沢',\r\n        '川越',\r\n        '秋田',\r\n        '越谷',\r\n        '前橋',\r\n        '那覇',\r\n        '四日市',\r\n        '青森',\r\n        '久留米',\r\n        '春日井',\r\n        '盛岡',\r\n        '明石',\r\n        '福島',\r\n        '下関',\r\n        '長岡',\r\n        '市原',\r\n        '函館',\r\n        '茨城県',\r\n        '福井',\r\n        '加古川',\r\n        '徳島',\r\n        '水戸',\r\n        '平塚',\r\n        '佐世保',\r\n        '呉',\r\n        '八戸',\r\n        '佐賀',\r\n        '寝屋川',\r\n        '富士',\r\n        '春日部',\r\n        '茅ヶ崎',\r\n        '松本',\r\n        '厚木',\r\n        '大和',\r\n        '上尾',\r\n        '宝塚',\r\n        '筑波',\r\n        '沼津',\r\n        '熊谷',\r\n        '伊勢崎',\r\n        '岸和田',\r\n        '鳥取',\r\n        '小田原',\r\n        '鈴鹿',\r\n        '松江',\r\n        '日立'\r\n    ],\r\n    teamNames : [\r\n        'Yokohama',\r\n        'Osaka',\r\n        'Nagoya',\r\n        'Sapporo',\r\n        'Kobe',\r\n        'Kyoto',\r\n        'Fukuoka',\r\n        'Kawasaki',\r\n        'Saitama',\r\n        'Hiroshima',\r\n        'Sendai',\r\n        'Chiba',\r\n        'Niigata',\r\n        'Hamamatsu',\r\n        'Shizuoka',\r\n        'Sagamihara',\r\n        'Okayama',\r\n        'Kumamoto',\r\n        'Kagoshima',\r\n        'Funabashi',\r\n        'Kawaguchi',\r\n        'Himeji',\r\n        'Matsuyama',\r\n        'Utsunomiya',\r\n        'Matsudo',\r\n        'Nishinomiya',\r\n        'Kurashiki',\r\n        'Ichikawa',\r\n        'Fukuyama',\r\n        'Amagasaki',\r\n        'Kanazawa',\r\n        'Nagasaki',\r\n        'Yokosuka',\r\n        'Toyama',\r\n        'Takamatsu',\r\n        'Machida',\r\n        'Gifu',\r\n        'Hirakata',\r\n        'Fujisawa',\r\n        'Kashiwa',\r\n        'Toyonaka',\r\n        'Nagano',\r\n        'Toyohashi',\r\n        'Ichinomiya',\r\n        'Wakayama',\r\n        'Okazaki',\r\n        'Miyazaki',\r\n        'Nara',\r\n        'Suita',\r\n        'Takatsuki',\r\n        'Asahikawa',\r\n        'Iwaki',\r\n        'Takasaki',\r\n        'Tokorozawa',\r\n        'Kawagoe',\r\n        'Akita',\r\n        'Koshigaya',\r\n        'Maebashi',\r\n        'Naha',\r\n        'Yokkaichi',\r\n        'Aomori',\r\n        'Kurume',\r\n        'Kasugai',\r\n        'Morioka',\r\n        'Akashi',\r\n        'Fukushima',\r\n        'Shimonoseki',\r\n        'Nagaoka',\r\n        'Ichihara',\r\n        'Hakodate',\r\n        'Ibaraki',\r\n        'Fukui',\r\n        'Kakogawa',\r\n        'Tokushima',\r\n        'Mito',\r\n        'Hiratsuka',\r\n        'Sasebo',\r\n        'Kure',\r\n        'Hachinohe',\r\n        'Saga',\r\n        'Neyagawa',\r\n        'Fuji',\r\n        'Kasukabe',\r\n        'Chigasaki',\r\n        'Matsumoto',\r\n        'Atsugi',\r\n        'Yamato',\r\n        'Ageo',\r\n        'Takarazuka',\r\n        'Tsukuba',\r\n        'Numazu',\r\n        'Kumagaya',\r\n        'Isesaki',\r\n        'Kishiwada',\r\n        'Tottori',\r\n        'Odawara',\r\n        'Suzuka',\r\n        'Matsue',\r\n        'Hitachi'\r\n    ]\r\n};","helper = {\r\n    pitchDefinitions : {\r\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\r\n        '2-seam' :      [20, -20, 0.90],\r\n        'cutter' :      [-25, -20, 0.95],\r\n        'sinker' :      [-15, -30, 0.95],\r\n\r\n        'slider' :      [-50, -35, 0.9],\r\n        'fork'   :      [0, -70, 0.87],\r\n        'curve'  :      [0, -90, 0.82],\r\n\r\n        'change' :    [0, -10, 0.88]\r\n    },\r\n    selectRandomPitch : function() {\r\n        return [\r\n            '4-seam', '2-seam', 'cutter', 'sinker',\r\n            'slider', 'fork', 'curve',\r\n            'change'\r\n        ][Math.floor(Math.random()*8)]\r\n    }\r\n};\r\n","var Log = function() {\r\n    this.init();\r\n};\r\n\r\nLog.prototype = {\r\n    game : 'instance of Game',\r\n    init : function() {\r\n        this.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n    },\r\n    SINGLE : 'H',\r\n    DOUBLE : '2B',\r\n    TRIPLE : '3B',\r\n    HOMERUN : 'HR',\r\n    WALK : 'BB',\r\n    GROUNDOUT : 'GO',\r\n    FLYOUT : 'FO',\r\n    LINEOUT : 'LO',\r\n    RUN : 'R',\r\n    STRIKEOUT : 'SO',\r\n    SACRIFICE : 'SAC',\r\n    REACHED_ON_ERROR : 'ROE',\r\n    FIELDERS_CHOICE : 'FC',\r\n    note : function(note, noteJ) {\r\n        this.record.e.unshift(note);\r\n        this.shortRecord.e = this.record.e.slice(0, 6);\r\n\r\n        this.record.n.unshift(noteJ);\r\n        this.shortRecord.n = this.record.n.slice(0, 6);\r\n    },\r\n    getBatter : function(batter) {\r\n        var order = batter.team.nowBatting;\r\n        order = {\r\n            0 : text(' 1st'),\r\n            1 : text(' 2nd'),\r\n            2 : text(' 3rd'),\r\n            3 : text(' 4th'),\r\n            4 : text(' 5th'),\r\n            5 : text(' 6th'),\r\n            6 : text(' 7th'),\r\n            7 : text(' 8th'),\r\n            8 : text(' 9th')\r\n        }[order];\r\n        var positions = this.longFormFielder();\r\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\r\n            batter.getUniformNumber()+text.comma()+\r\n            batter.getName();\r\n    },\r\n    noteBatter : function(batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getBatter(batter);\r\n        mode = 'n';\r\n        recordJ = this.getBatter(batter);\r\n        mode = m;\r\n        this.note(record, recordJ);\r\n    },\r\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\r\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\r\n        var noComma = false, noComma2 = false;\r\n        var ball = false;\r\n        if (!batterIsLefty) x = 200 - x;\r\n        if (x < 50) {\r\n            say += text('way outside');\r\n            ball = true;\r\n        } else if (x < 70) {\r\n            say += text('outside');\r\n        } else if (x < 100) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 130) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 150) {\r\n            say += text('inside');\r\n        } else {\r\n            say += text('way inside');\r\n            ball = true;\r\n        }\r\n        if (say != '') say += text.comma();\r\n        if (y < 35) {\r\n            say += text('way low');\r\n            ball = true;\r\n        } else if (y < 65) {\r\n            say += text('low');\r\n        } else if (y < 135) {\r\n            say += '';\r\n            noComma2 = true;\r\n        } else if (y < 165) {\r\n            say += text('high');\r\n        } else {\r\n            say += text('way high');\r\n            ball = true;\r\n        }\r\n        if (noComma || noComma2) {\r\n            say = say.split(text.comma()).join('');\r\n            if (noComma && noComma2) {\r\n                say = text('down the middle');\r\n            }\r\n        }\r\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\r\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\r\n        return say;\r\n    },\r\n    notePitch : function(pitchInFlight, batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.e.unshift(record);\r\n        mode = 'n';\r\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.n.unshift(recordJ);\r\n        mode = m;\r\n    },\r\n    getSwing : function(swingResult) {\r\n        var result = '';\r\n        if (swingResult.looking) {\r\n            if (swingResult.strike) {\r\n                result += text('Strike.')\r\n            } else {\r\n                result += text('Ball.')\r\n            }\r\n        } else {\r\n            if (swingResult.contact) {\r\n                if (swingResult.foul) {\r\n                    result += text('Fouled off.')\r\n                } else {\r\n                    if (swingResult.caught) {\r\n                        result += text('In play.')\r\n                    } else {\r\n                        if (swingResult.thrownOut) {\r\n                            result += text('In play.')\r\n                        } else {\r\n                            result += text('In play.')\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                result += text('Swinging strike.')\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    noteSwing : function(swingResult) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getSwing(swingResult);\r\n        this.pitchRecord.e[0] += record;\r\n        mode = 'n';\r\n        recordJ = this.getSwing(swingResult);\r\n        this.pitchRecord.n[0] += recordJ;\r\n        mode = m;\r\n    },\r\n    getPlateAppearanceResult : function(game) {\r\n        var r = game.swingResult;\r\n        var record = '';\r\n        var batter = game.batter.getName();\r\n        if (r.looking) {\r\n            if (r.strike) {\r\n                record = (batter + text(' struck out looking.'));\r\n            } else {\r\n                record = (batter + text(' walked.'));\r\n            }\r\n        } else {\r\n            if (r.contact) {\r\n                var fielder = r.fielder, bases = r.bases, outBy;\r\n                if (r.caught) {\r\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\r\n                        outBy = 'pop';\r\n                    } else {\r\n                        outBy = 'fly';\r\n                    }\r\n                } else {\r\n                    if (r.foul) {\r\n                        // not possible to end PA on foul?\r\n                    } else {\r\n                        if (r.error) {\r\n                            bases = 1;\r\n                            outBy = 'error';\r\n                        } else {\r\n                            if (r.thrownOut) {\r\n                                if (Math.random() > 0.5) {\r\n                                    outBy = 'ground';\r\n                                } else {\r\n                                    outBy = 'thrown';\r\n                                }\r\n                            } else {\r\n                                switch (r.bases) {\r\n                                    case 1:\r\n                                    case 2:\r\n                                    case 3:\r\n                                        bases = r.bases;\r\n                                        break;\r\n                                    case 4:\r\n                                        bases = 4;\r\n                                        if (r.splay < -15) {\r\n                                            fielder = 'left';\r\n                                        } else if (r.splay < 15) {\r\n                                            fielder = 'center';\r\n                                        } else {\r\n                                            fielder = 'right';\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                record = text.contactResult(batter, fielder, bases, outBy);\r\n            } else {\r\n                record = (batter+text(' struck out swinging.'));\r\n            }\r\n        }\r\n        return record;\r\n    },\r\n    notePlateAppearanceResult : function(game) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPlateAppearanceResult(game);\r\n        this.record.e.unshift(record);\r\n        this.pitchRecord.e = [text('Previous: ')+record];\r\n        mode = 'n';\r\n        recordJ = this.getPlateAppearanceResult(game);\r\n        this.record.n.unshift(recordJ);\r\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\r\n        mode = m;\r\n    },\r\n    pointer : 0,\r\n    pitchRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    shortRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    record : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    longFormFielder : function() {\r\n        return {\r\n            first : text('first baseman'),\r\n            second : text('second baseman'),\r\n            third : text('third baseman'),\r\n            short : text('shortstop'),\r\n            pitcher : text('pitcher'),\r\n            catcher : text('catcher'),\r\n            left : text('left fielder'),\r\n            center : text('center fielder'),\r\n            right : text('right fielder')\r\n        }\r\n    }\r\n};","var Animator = function() {\r\n    this.init();\r\n};\r\n\r\nAnimator.prototype = {\r\n    identifier : 'Animator',\r\n    constructor : Animator,\r\n    init : function() {\r\n\r\n    },\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    updateFlightPath: function(callback) {\r\n        var $scope = this,\r\n            game = $scope.y,\r\n            top = 200-game.pitchTarget.y,\r\n            left = game.pitchTarget.x,\r\n            breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x,\r\n            $baseballs = jQ('.baseball'),\r\n            flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400,\r\n            originTop = 50,\r\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        var pitch = this.pitchTarget = jQ('.main-area .target .baseball.pitch'),\r\n            henka = this.pitchBreak = jQ('.main-area .target .baseball.break'),\r\n            quarter = flightSpeed/4;\r\n\r\n        var pitchTransition = Mathinator.pitchTransition(top, left, originTop, originLeft, quarter);\r\n\r\n        var transitions = [\r\n            pitchTransition(0, 0),\r\n            pitchTransition(10, 0),\r\n            pitchTransition(30, 1),\r\n            pitchTransition(50, 2),\r\n\r\n            pitchTransition(100, 3),\r\n            pitchTransition(100, 3, breakTop, breakLeft)\r\n        ];\r\n\r\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        //jQ('.baseball').addClass('spin');\r\n        //jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + 1.2) * 1000));\r\n        }\r\n    },\r\n    animateFieldingTrajectory: function(game) {\r\n        var ball = jQ('.splay-indicator-ball');\r\n        TweenMax.killAll();\r\n        var result = game.swingResult;\r\n\r\n        var linearApproximateDragScalar = {\r\n            distance: 1,\r\n            apexHeight: 0.37,\r\n            airTime: 0.66\r\n        };\r\n\r\n        var angle = result.flyAngle,\r\n            distance = Math.abs(result.travelDistance),\r\n            scalar = result.travelDistance < 0 ? -1 : 1;\r\n\r\n        Mathinator.memory.bounding = angle < 0;\r\n        angle = 1 + Math.abs(angle);\r\n        if (angle > 90) angle = 180 - angle;\r\n\r\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2*Math.PI*angle/180));\r\n        var apexHeight = velocity*velocity/(2*9.81) * linearApproximateDragScalar.apexHeight;\r\n        var airTime = Math.sqrt(2*apexHeight/9.81) * linearApproximateDragScalar.airTime;\r\n\r\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\r\n        var quarter = airTime/4;\r\n        var mathinator = new Mathinator();\r\n        var transitions = [\r\n            mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay),\r\n            mathinator.transitionalTrajectory(25, quarter, 0),\r\n            mathinator.transitionalTrajectory(50, quarter, 1),\r\n            mathinator.transitionalTrajectory(75, quarter, 2),\r\n            mathinator.transitionalTrajectory(100, quarter, 3)\r\n        ];\r\n        TweenMax.set(ball, transitions[0]);\r\n        TweenMax.to(ball, quarter, transitions[1]);\r\n        TweenMax.to(ball, quarter, transitions[2]);\r\n        TweenMax.to(ball, quarter, transitions[3]);\r\n        TweenMax.to(ball, quarter, transitions[4]);\r\n\r\n        return game.swingResult;\r\n    }\r\n};\r\n\r\nfor (var fn in Animator.prototype) {\r\n    if (Animator.prototype.hasOwnProperty(fn)) {\r\n        Animator[fn] = Animator.prototype[fn];\r\n    }\r\n}","/**\r\n * For Probability!\r\n * @constructor\r\n */\r\nvar Distribution = function() {\r\n};\r\n\r\nDistribution.prototype = {\r\n    identifier : 'Distribution',\r\n    constructor : Distribution,\r\n    /**\r\n     * @param scale {number}\r\n     * @returns {number}\r\n     */\r\n    chance : function(scale) {\r\n        if (!scale) scale = 1;\r\n        return Math.random() * scale;\r\n    },\r\n    /**\r\n     * @param fielder {Player}\r\n     * @returns {boolean}\r\n     */\r\n    error : function(fielder) {\r\n        return (100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100\r\n    },\r\n    /**\r\n     * @param power\r\n     * @param flyAngle\r\n     * @returns {number}\r\n     */\r\n    landingDistance : function(power, flyAngle) {\r\n        return (50 + Math.random()*300 + (power/100)*75) * (1 - Math.abs(flyAngle - 30)/60)\r\n    },\r\n    /**\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    pitchLocation : function() {\r\n        if (Math.random() < 0.5) {\r\n            var x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\r\n        } else {\r\n            x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\r\n        }\r\n        var y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\r\n        return {x: x, y: y};\r\n    },\r\n    /**\r\n     * swing centering basis\r\n     * @returns {number}\r\n     */\r\n    centralizedNumber : function() {\r\n        return 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\r\n    },\r\n    /**\r\n     * @param eye {Player.skill.offense.eye}\r\n     * @param x\r\n     * @param y\r\n     * @param umpire {Umpire}\r\n     */\r\n    swingLikelihood : function(eye, x, y, umpire) {\r\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\r\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\r\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*umpire.count.balls;\r\n        } else {\r\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\r\n        }\r\n        return swingLikelihood - 35 + 10*(umpire.count.balls + 2*umpire.count.strikes)\r\n    },\r\n    /**\r\n     * @param target {number} 0-200\r\n     * @param control {number} 0-100\r\n     * @returns {number}\r\n     */\r\n    pitchControl : function(target, control) {\r\n        return Math.min(199.9, Math.max(0.1, target + (50 - Math.random()*100)/(1+control/100)));\r\n    },\r\n    /**\r\n     * @param pitch {Game.pitchInFlight}\r\n     * @param x {number}\r\n     * @param y {number}\r\n     * @returns {object|{x: number, y: number}}\r\n     */\r\n    breakEffect : function(pitch, x, y) {\r\n        var effect = {};\r\n        effect.x = Math.floor(x + (pitch.breakDirection[0]\r\n            *((0.5+Math.random()*pitch.break)/100)));\r\n        effect.y = Math.floor(y + (pitch.breakDirection[1]\r\n            *((0.5+Math.random()*pitch.break)/100))/(0.5 + y/200));\r\n        return effect;\r\n    },\r\n    /**\r\n     * Determine the swing target along an axis\r\n     * @param target {number} 0-200\r\n     * @param actual {number} 0-200\r\n     * @param eye {number} 0-100\r\n     * @returns {number} 0-200\r\n     */\r\n    swing : function(target, actual, eye) {\r\n        return 100 + (target - 100)*(0.5+Math.random()*eye/200) - actual\r\n    }\r\n};\r\n\r\nfor (var fn in Distribution.prototype) {\r\n    if (Distribution.prototype.hasOwnProperty(fn)) {\r\n        Distribution[fn] = Distribution.prototype[fn];\r\n    }\r\n}","/**\r\n * For Math!\r\n * @constructor\r\n */\r\nvar Mathinator = function() {\r\n};\r\n\r\n/**\r\n * @param n\r\n * @returns {number}\r\n */\r\nMathinator.square = function(n) {\r\n    return n * n;\r\n};\r\n\r\nMathinator.prototype = {\r\n    identifier : 'Mathinator',\r\n    constructor : Mathinator,\r\n    /**\r\n     * CONST\r\n     */\r\n    RADIAN : Math.PI / 180,\r\n    /**\r\n     * @param offset {{x: number, y: number}}\r\n     * @param angle {number}\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    getAngularOffset : function(offset, angle) {\r\n        var xScalar = offset.x < 0 ? -1 : 1,\r\n            yScalar = offset.y < 0 ? -1 : 1;\r\n        var originalAngle = Math.atan(offset.x / offset.y)/this.RADIAN;\r\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\r\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\r\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\r\n        return {\r\n            x: angledX,\r\n            y: angledY\r\n        }\r\n    },\r\n    /**\r\n     * @param a {Array<Number>}\r\n     * @param b {Array<Number>}\r\n     * @returns {number}\r\n     */\r\n    getPolarDistance : function(a, b) {\r\n        var radians = this.RADIAN;\r\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*radians - b[0]*radians));\r\n    },\r\n    /**\r\n     * @param origin\r\n     * @param target\r\n     * @returns {number}\r\n     * 0 is flat (left-right), positive is clockwise.\r\n     * We use 125 instead of 180 to account for natural hand-height adjustments\r\n     * of various swing heights.\r\n     */\r\n    battingAngle : function(origin, target) {\r\n        return Math.atan((origin.y - target.y)/(target.x - origin.x))/Math.PI * 125\r\n    },\r\n    memory : {},\r\n    /**\r\n     * @param percent {number} 0-100\r\n     * @param quarter {number} seconds\r\n     * @param step {number} 0 and up\r\n     * @param [givenApexHeight] feet\r\n     * @param [givenDistance] in feet\r\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\r\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\r\n     */\r\n    transitionalTrajectory : function(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\r\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\r\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\r\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\r\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\r\n            distance = Mathinator.prototype.memory.distance,\r\n            splay = Mathinator.prototype.memory.splay;\r\n        var bottom, left, padding, borderWidth;\r\n        var bounding = Mathinator.prototype.memory.bounding,\r\n            radian = this.RADIAN;\r\n\r\n        bottom = Math.cos(splay * radian) * percent/100 * distance * 95/300;\r\n        left = Math.sin(splay * radian) * percent/100 * distance * 95/300 + 190;\r\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50))/100)*(1/0.7071);\r\n        if (bounding) {\r\n            padding = 1;\r\n            borderWidth = 1;\r\n        } else {\r\n            padding = apexRatio * apexHeight/90 * 15;\r\n            borderWidth = 2 + (apexRatio * 2);\r\n        }\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n        padding = Math.max(Math.min(padding, 40), 0);\r\n        return {\r\n            bottom: bottom,\r\n            left: left,\r\n            padding: padding,\r\n            borderWidth: borderWidth,\r\n            delay: quarter * step,\r\n            ease: bounding ? Power4.easeOut : Linear.easeNone\r\n        }\r\n    },\r\n    /**\r\n     * @param swingResult\r\n     * @returns {Game.swingResult}\r\n     */\r\n    translateSwingResultToStylePosition: function(swingResult) {\r\n        // CF HR bottom: 95px, centerline: left: 190px;\r\n        var bottom, left;\r\n\r\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\r\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\r\n\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n\r\n        swingResult.bottom = bottom + 'px';\r\n        swingResult.left = left + 'px';\r\n        return swingResult;\r\n    },\r\n    /**\r\n     * @param left {number} 0-200\r\n     * @param top {number} 0-200\r\n     * @param originLeft {number} 0-200\r\n     * @param originTop {number} 0-200\r\n     * @param quarter {number} seconds\r\n     * @returns {Function}\r\n     */\r\n    pitchTransition : function(top, left, originTop, originLeft, quarter) {\r\n        /**\r\n         * @param percent {number} 0-100\r\n         * @param step {number} 0 and up\r\n         * @param [breakTop] {number} 0-200 override\r\n         * @param [breakLeft] {number} 0-200 override\r\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\r\n         */\r\n        return function(percent, step, breakTop, breakLeft) {\r\n            var _top, _left;\r\n            _top = breakTop || top;\r\n            _left = breakLeft || left;\r\n            _top = originTop + Mathinator.square(percent/100)*(_top - originTop);\r\n            _left = originLeft + Mathinator.square(percent/100)*(_left - originLeft);\r\n            var padding = Math.max(Mathinator.square(percent/100)*13, 1),\r\n                borderWidth = Math.max(Mathinator.square(percent/100)*4, 1);\r\n            return {\r\n                top: _top,\r\n                left: _left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nfor (var fn in Mathinator.prototype) {\r\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\r\n        Mathinator[fn] = Mathinator.prototype[fn];\r\n    }\r\n}","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';","/**\r\n * The baseball field tracks the ball's movement, fielders, and what runners are on\r\n * @param game\r\n * @constructor\r\n */\r\nvar Field = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nField.prototype = {\r\n    constructor : Field,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.first = null;\r\n        this.second = null;\r\n        this.third = null;\r\n    },\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    hasRunnersOn : function() {\r\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\r\n    },\r\n    /**\r\n     * @param swing\r\n     * @returns {object}\r\n     */\r\n    determineSwingContactResult : function(swing) {\r\n        var x = swing.x, y = swing.y;\r\n        /**\r\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\r\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\r\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\r\n         * increase the left/right effect.\r\n         * @type {number}\r\n         */\r\n        var splayAngle = 90 - 1.5*x + (swing.angle*2 * y/35);\r\n        var flyAngle = -3*y - (swing.angle * y/35);\r\n        var power = this.game.batter.skill.offense.power + this.game.batter.eye.bonus;\r\n        var landingDistance = Distribution.landingDistance(power, flyAngle);\r\n        if (flyAngle < 0 && landingDistance > 120) {\r\n            landingDistance = (landingDistance - 120)/4 + 120;\r\n        }\r\n\r\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\r\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\r\n        swing.travelDistance = landingDistance;\r\n        swing.flyAngle = flyAngle;\r\n        /**\r\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\r\n         * @type {number}\r\n         */\r\n        swing.splay = splayAngle - 90;\r\n\r\n        if (!this.game.debug) {\r\n            this.game.debug = [];\r\n        }\r\n\r\n        if (swing.fielder) {\r\n            var fielder = (this.game.half == top ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\r\n            fielder.fatigue += 4;\r\n            swing.error = false;\r\n            var fieldingEase = fielder.skill.defense.fielding/100,\r\n                throwingEase = (fielder.skill.defense.throwing/100);\r\n            //reach the batted ball?\r\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\r\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\r\n            if (interceptRating > 0 && flyAngle > -10) {\r\n                //caught cleanly?\r\n                if (Distribution.error(fielder)) { //error\r\n                    fieldingEase *= 0.5;\r\n                    swing.error = true;\r\n                    swing.caught = false;\r\n                } else {\r\n                    swing.caught = true;\r\n                }\r\n            } else {\r\n                swing.caught = false;\r\n            }\r\n\r\n            if (!swing.caught) {\r\n                // intercept rating is negative\r\n                var plus = interceptRating + 100*throwingEase*fieldingEase;\r\n                var gatherAndThrowSuccess = plus - this.game.batter.skill.offense.speed/2 > -50;\r\n\r\n                //log('flew at angle', flyAngle, 'distance of', swing.fielderTravel,\r\n                //    'gives intercept rating of', interceptRating, 'fielder throw/fielding', fielder.skill.defense.throwing, fielder.skill.defense.fielding,\r\n                //    '+', plus, '-runner speed', this.game.batter.skill.offense.speed,\r\n                //    'success', gatherAndThrowSuccess\r\n                //);\r\n\r\n                swing.thrownOut = gatherAndThrowSuccess;\r\n                swing.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\r\n\r\n                if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] != 1 && gatherAndThrowSuccess) {\r\n                    swing.thrownOut = true;\r\n                    swing.error = false;\r\n                } else {\r\n                    swing.thrownOut = false;\r\n                    swing.bases = 1;\r\n                    if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1) {\r\n                        var fieldingReturnDelay = -1*(interceptRating + 100*throwingEase*fieldingEase) + this.game.batter.skill.offense.speed;\r\n                        swing.fieldingDelay = fieldingReturnDelay;\r\n                        while (fieldingReturnDelay - 125 > 0 && swing.bases < 3) {\r\n                            swing.bases++;\r\n                            fieldingReturnDelay  -= 65;\r\n                        }\r\n                    }\r\n                }\r\n                // log('fielder return delay', fieldingReturnDelay, interceptRating, fielder.skill.defense);\r\n            }\r\n        } else {\r\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\r\n                swing.bases = 4;\r\n            } else {\r\n                swing.foul = true;\r\n                swing.caught = false;\r\n            }\r\n        }\r\n        return Animator.animateFieldingTrajectory(this.game);\r\n    },\r\n    /**\r\n     * @param splayAngle\r\n     * @param landingDistance\r\n     * @returns {string|bool}\r\n     */\r\n    findFielder : function(splayAngle, landingDistance) {\r\n        if (Math.abs(90 - splayAngle) > 50) return false;\r\n        if (landingDistance < 10 && landingDistance > -20) {\r\n            return 'catcher';\r\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\r\n            return 'pitcher';\r\n        }\r\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\r\n            if (splayAngle < 45 + 23) {\r\n                return 'third';\r\n            } else if (splayAngle < 45 + 23 + 23) {\r\n                return 'short';\r\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\r\n                return 'second';\r\n            } else {\r\n                return 'first';\r\n            }\r\n        } else if (landingDistance > 90 && landingDistance < 310) {\r\n            if (splayAngle < 45 + 28) {\r\n                return 'left';\r\n            } else if (splayAngle < 45 + 28 + 34) {\r\n                return 'center';\r\n            } else {\r\n                return 'right';\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    positions : {\r\n        pitcher : [90, 66],\r\n        catcher : [0, 0],\r\n        first : [90 + 45 - 7, 98],\r\n        second : [90 + 12.5, 130],\r\n        short : [90 - 12.5, 130],\r\n        third : [90 - 45 + 7, 98],\r\n        left : [45 + 14, 280],\r\n        center : [90, 280],\r\n        right : [135 - 14, 280]\r\n    },\r\n    getPolarDistance : function(a, b) {\r\n        return Mathinator.getPolarDistance(a, b);\r\n    },\r\n    fieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var angle = Math.random()*90+45;\r\n        var distance = Math.random()*320;\r\n        var fielder = this.findFielder(angle, distance);\r\n        var data = {};\r\n        if (fielder) {\r\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\r\n                data.fielder = fielderCandidates[1];\r\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\r\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]])\r\n            return data;\r\n        }\r\n    },\r\n    aggregateFieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var selections = [];\r\n        for (var i = 0; i < 1000; i++) {\r\n            var angle = Math.random()*90+45;\r\n            var distance = Math.random()*320;\r\n            var fielder = this.findFielder(angle, distance);\r\n            fielders[fielder].tally++;\r\n            if (fielder) {\r\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\r\n            }\r\n            selections.push([angle, distance]);\r\n            selections.push(this.fielderSelectionTest(angle, distance, true));\r\n        }\r\n        return [fielders, selections];\r\n    },\r\n    fielderSelectionTest : function(angle, distance, returnFielder) {\r\n        var distances = [];\r\n        var minDistance = 300;\r\n        var giraffe = this;\r\n        var fielder = false;\r\n        jQ.each(this.positions, function(position, spot) {\r\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\r\n            distances[thisDistance] = position;\r\n            if (minDistance > thisDistance) {\r\n                minDistance = thisDistance;\r\n                fielder = position;\r\n            }\r\n        });\r\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\r\n    }\r\n};","var Game = function(m) {\r\n    this.init(m);\r\n};\r\n\r\nGame.prototype = {\r\n    constructor : Game,\r\n    gamesIntoSeason : 0,\r\n    humanControl : 'none', //home, away, both, none\r\n    quickMode : true,\r\n    init : function(m) {\r\n        if (m) window.mode = m;\r\n        this.gamesIntoSeason = 1 + Math.floor(Math.random()*142);\r\n        this.field = new Field(this);\r\n        this.teams.away = new Team(this);\r\n        this.teams.home = new Team(this);\r\n        this.log = new Log();\r\n        this.log.game = this;\r\n        this.helper = helper;\r\n        while (this.teams.away.name == this.teams.home.name) {\r\n            this.teams.away.pickName();\r\n        }\r\n        this.umpire = new Umpire(this);\r\n        if (this.humanPitching()) {\r\n            this.stage = 'pitch';\r\n        }\r\n    },\r\n    getInning : function() {\r\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\r\n    },\r\n    humanBatting : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n                break;\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n                break;\r\n        }\r\n    },\r\n    humanPitching : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n                break;\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n                break;\r\n        }\r\n    },\r\n    end : function() {\r\n        this.stage = 'end';\r\n        var e, n;\r\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' :\r\n            (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName()+'の勝利' :\r\n            (this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName()+'の勝利');\r\n        this.log.note(e, n);\r\n    },\r\n    stage : 'pitch', //pitch, swing\r\n    simulateInput : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch') {\r\n            this.autoPitch(callback);\r\n        } else if (this.stage == 'swing') {\r\n            if (typeof this.pitchTarget != 'object') {\r\n                this.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\r\n        }\r\n    },\r\n    simulatePitchAndSwing : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        this.autoPitch(callback);\r\n        var giraffe = this;\r\n        setTimeout(function() {\r\n            if (typeof giraffe.pitchTarget != 'object') {\r\n                giraffe.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback()});\r\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\r\n    },\r\n    /**\r\n     * generically receive click input and decide what to do\r\n     * @param x\r\n     * @param y\r\n     * @param callback\r\n     */\r\n    receiveInput : function(x, y, callback) {\r\n        if (this.humanControl == 'none') {\r\n            return;\r\n        }\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch' && this.humanPitching()) {\r\n            this.thePitch(x, y, callback);\r\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\r\n            this.theSwing(x, y, callback);\r\n        }\r\n    },\r\n    autoPitchSelect : function() {\r\n        var pitchName = this.helper.selectRandomPitch();\r\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\r\n            pitchName = this.helper.selectRandomPitch();\r\n        }\r\n        var pitch = this.pitcher.pitching[pitchName];\r\n        pitch.name = pitchName;\r\n        this.pitchInFlight = pitch;\r\n    },\r\n    autoPitch : function(callback) {\r\n        var pitcher = this.pitcher;\r\n        if (this.stage == 'pitch') {\r\n            jQ('.baseball').addClass('hide');\r\n            pitcher.windingUp = true;\r\n            var windup = jQ('.windup');\r\n            windup.css('width', '100%');\r\n            var giraffe = this;\r\n            this.autoPitchSelect();\r\n            var pitch = Distribution.pitchLocation(),\r\n                x = pitch.x,\r\n                y = pitch.y;\r\n            if (this.quickMode) {\r\n                this.thePitch(x, y, callback);\r\n            } else {\r\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\r\n                    jQ('.baseball.pitch').removeClass('hide');\r\n                    giraffe.thePitch(x, y, callback);\r\n                    pitcher.windingUp = false;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\r\n        var giraffe = this;\r\n        var bonus = this.batter.eye.bonus || 0,\r\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n\r\n        var x = Distribution.centralizedNumber(),\r\n            y = Distribution.centralizedNumber();\r\n        if (100*Math.random() < eye) {\r\n            var convergence = 1.35 * 5*eye/100,\r\n                convergenceSum = 1 + convergence;\r\n            deceptiveX = this.pitchInFlight.x;\r\n            deceptiveY = this.pitchInFlight.y;\r\n        } else {\r\n            convergence = 1.35 * 2*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n        }\r\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\r\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\r\n\r\n        var swingProbability = Distribution.swingLikelihood(eye, x, y, this.umpire);\r\n        if (swingProbability > 100*Math.random()) {\r\n            x = -20;\r\n        }\r\n        callback(function() {\r\n            giraffe.theSwing(x, y);\r\n        });\r\n    },\r\n    thePitch : function(x, y, callback) {\r\n        if (this.stage == 'pitch') {\r\n            this.pitcher.fatigue++;\r\n            this.pitchTarget.x = x;\r\n            this.pitchTarget.y = y;\r\n\r\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\r\n            this.battersEye = text.getBattersEye(this);\r\n\r\n            var control = this.pitchInFlight.control;\r\n            this.pitchTarget.x = Distribution.pitchControl(this.pitchTarget.x, control);\r\n            this.pitchTarget.y = Distribution.pitchControl(this.pitchTarget.y, control);\r\n\r\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\r\n\r\n            var breakEffect = Distribution.breakEffect(this.pitchInFlight, this.pitchTarget.x, this.pitchTarget.y);\r\n\r\n            this.pitchInFlight.x = breakEffect.x;\r\n            this.pitchInFlight.y = breakEffect.y;\r\n\r\n            this.log.notePitch(this.pitchInFlight, this.batter);\r\n\r\n            this.stage = 'swing';\r\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\r\n                callback();\r\n            } else {\r\n                this.autoSwing(x, y, callback);\r\n            }\r\n        }\r\n    },\r\n    battersEye : {\r\n        e: '',\r\n        n: ''\r\n    },\r\n    theSwing : function(x, y, callback) {\r\n        if (this.stage == 'swing') {\r\n            this.batter.fatigue++;\r\n            this.swingResult = {};\r\n            var bonus = this.batter.eye.bonus || 0,\r\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n            this.swingResult.x = Distribution.swing(x, this.pitchInFlight.x, eye);\r\n            this.swingResult.y = Distribution.swing(y, this.pitchInFlight.y, eye);\r\n\r\n            this.swingResult.angle = this.setBatAngle();\r\n\r\n            var recalculation = Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\r\n            this.swingResult.x = recalculation.x;\r\n            this.swingResult.y = recalculation.y;\r\n\r\n            if (x >= 0 && x <= 200) {\r\n                this.swingResult.looking = false;\r\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\r\n                    this.swingResult.contact = true;\r\n                    this.batter.eye.bonus = Math.max(0, eye -\r\n                        Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\r\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\r\n                    // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\r\n                    this.debug.push(this.swingResult);\r\n                } else {\r\n                    this.swingResult.contact = false;\r\n                }\r\n            } else {\r\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\r\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\r\n                this.swingResult.contact = false;\r\n                this.swingResult.looking = true;\r\n                this.batter.eye.x = this.pitchInFlight.x;\r\n                this.batter.eye.y = this.pitchInFlight.y;\r\n            }\r\n\r\n            this.log.noteSwing(this.swingResult);\r\n            this.stage = 'pitch';\r\n\r\n            var half = this.half;\r\n            this.umpire.makeCall();\r\n            if (half != this.half) {\r\n                callback = this.startOpponentPitching;\r\n            }\r\n\r\n            if (typeof callback == 'function') {\r\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\r\n                    callback();\r\n                } else {\r\n                    this.autoPitch(callback);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    setBatAngle : function(x, y) {\r\n        var giraffe = this;\r\n        var origin = {\r\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\r\n            y: 160\r\n        };\r\n        var swing = {\r\n            x: x ? x : giraffe.pitchInFlight.x + this.swingResult.x,\r\n            y: y ? y : giraffe.pitchInFlight.y + this.swingResult.y\r\n        };\r\n        return Mathinator.battingAngle(origin, swing);\r\n    },\r\n    debugOut : function() {\r\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder}).length);\r\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder && a.thrownOut}).length);\r\n        log('weak outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && a.thrownOut}).length);\r\n        log('good outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && !a.thrownOut}).length);\r\n        log('slugging', this.debug.filter(function(a){return a.bases == 1}).length,\r\n            this.debug.filter(function(a){return a.bases == 2}).length,\r\n            this.debug.filter(function(a){return a.bases == 3}).length,\r\n            this.debug.filter(function(a){return a.bases == 4}).length\r\n        );\r\n\r\n        var PO = {};\r\n        this.debug.map(function(a) {\r\n            if (!PO[a.fielder]) {\r\n                PO[a.fielder] = 0;\r\n            }\r\n            if (!a.bases && a.fielder) {\r\n                PO[a.fielder]++\r\n            }\r\n        });\r\n        log('fielding outs', PO);\r\n\r\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\r\n        var atBats = [];\r\n        hitters.map(function(a) {atBats = atBats.concat(a.atBats)});\r\n\r\n        var LO = atBats.filter(function(ab) {return ab == 'LO'}).length;\r\n        log('line outs', LO);\r\n        var FO = atBats.filter(function(ab) {return ab == 'FO'}).length;\r\n        log('fly outs', FO);\r\n        var GO = atBats.filter(function(ab) {return ab == 'GO'}).length;\r\n        log('groundouts', GO);\r\n        var SO = atBats.filter(function(ab) {return ab == 'SO'}).length;\r\n        log('strikeouts', SO);\r\n        log('fouls', this.debug.filter(function(a){return a.foul}).length);\r\n    },\r\n    startOpponentPitching : null, // late function\r\n    pitchTarget : {x : 100, y : 100},\r\n    pitchInFlight : {\r\n        x : 100,\r\n        y : 100,\r\n        breakDirection : [0, 0],\r\n        name : 'slider',\r\n        velocity : 50,\r\n        'break' : 50,\r\n        control : 50\r\n    },\r\n    swingResult : {\r\n        x : 100, //difference to pitch location\r\n        y : 100, //difference to pitch location\r\n        strike : false,\r\n        foul : false,\r\n        caught : false,\r\n        contact : false,\r\n        looking : true,\r\n        bases : 0,\r\n        fielder : 'short',\r\n        outs : 0\r\n    },\r\n    pitchSelect : function() {\r\n\r\n    },\r\n    field : null,\r\n    teams : {\r\n        away : null,\r\n        home : null\r\n    },\r\n    log : null,\r\n    half : 'top',\r\n    inning : 1,\r\n    scoreboard : {\r\n        away : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        },\r\n        home : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        }\r\n    },\r\n    tally : {\r\n        away : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        },\r\n        home : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        }\r\n    }\r\n};","var Manager = function(team) {\r\n    this.init(team);\r\n};\r\n\r\nManager.prototype = {\r\n    constructor : Manager,\r\n    init : function(team) {\r\n        this.team = team;\r\n    },\r\n    makeLineup : function() {\r\n        var jerseyNumber = 1;\r\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\r\n        this.team.positions.pitcher.position = 'pitcher';\r\n        this.team.positions.pitcher.number = jerseyNumber++;\r\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\r\n        this.team.positions.catcher.position = 'catcher';\r\n        this.team.positions.catcher.number = jerseyNumber++;\r\n        jQ.each(this.team.bench, function(key, player) {\r\n            player.number = jerseyNumber++;\r\n        });\r\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.short.position = 'short';\r\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.second.position = 'second';\r\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.third.position = 'third';\r\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.center.position = 'center';\r\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.left.position = 'left';\r\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.right.position = 'right';\r\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\r\n        this.team.positions.first.position = 'first';\r\n\r\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[3].order = 3;\r\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[2].order = 2;\r\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[4].order = 4;\r\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[0].order = 0;\r\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[1].order = 1;\r\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[5].order = 5;\r\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[6].order = 6;\r\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[7].order = 7;\r\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[8].order = 8;\r\n    },\r\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\r\n        var property;\r\n        mustBeRightHanded = !!mustBeRightHanded;\r\n        if (this.team.bench.length || pool == this.team.positions) {\r\n            var selection = this.team.bench[0];\r\n            var rating = 0;\r\n            var index = 0;\r\n            jQ.each(pool, function(key, player) {\r\n                var skills = skillset.slice();\r\n                var cursor = player.skill;\r\n                while (property = skills.shift()) {\r\n                    cursor = cursor[property];\r\n                }\r\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\r\n                    rating = cursor;\r\n                    selection = player;\r\n                    index = key;\r\n                }\r\n            });\r\n            delete this.team.bench[index];\r\n            if (pool == this.team.bench) {\r\n                this.team.bench = this.team.bench.filter(function(player) {\r\n                    return player instanceof selection.constructor;\r\n                })\r\n            }\r\n            return selection;\r\n        }\r\n        return 'no players available';\r\n    }\r\n};","var Player = function(team) {\r\n    this.init(team);\r\n    var offense = this.skill.offense;\r\n    var defense = this.skill.defense;\r\n    var randBetween = function(a, b, skill) {\r\n        if (offense[skill]) skill = offense[skill];\r\n        if (defense[skill]) skill = defense[skill];\r\n        if (isNaN(skill)) skill = 50;\r\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\r\n        return Math.floor((skill/100) * (b - a) + a);\r\n    };\r\n    // let's just say we're about X games into the season\r\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\r\n    var IP, ER, GS, W, L;\r\n    if (this.skill.pitching > 65) {\r\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\r\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\r\n        if (IP > gamesIntoSeason) {\r\n            //starter\r\n            GS = Math.floor(gamesIntoSeason/5);\r\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\r\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\r\n        } else {\r\n            //reliever\r\n            GS = Math.floor(gamesIntoSeason/40);\r\n            W = randBetween(0, GS*0.6, this.skill.pitching);\r\n            L = randBetween((GS - W), 0, this.skill.pitching);\r\n        }\r\n    }\r\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\r\n    var paRemaining = pa;\r\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\r\n    paRemaining -= bb;\r\n    var ab = paRemaining;\r\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\r\n    paRemaining -= so;\r\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\r\n    paRemaining -= h;\r\n\r\n    var doubles = randBetween(0, h/3, 'power');\r\n    var triples = randBetween(0, h/12, 'speed');\r\n    var hr = Math.max(0, randBetween(-h/5, h/5, 'power'));\r\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\r\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\r\n    var hbp = randBetween(0, gamesIntoSeason/25);\r\n    var sf = randBetween(0, gamesIntoSeason/5, 'eye');\r\n\r\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\r\n    var E = randBetween(chances/10, 0, 'fielding');\r\n    var PO = chances - E;\r\n\r\n    this.stats = {\r\n        pitching : {\r\n            pitches : 0, // in game\r\n            GS : GS,\r\n            W: W,\r\n            L: L,\r\n            strikes : 0, // in game\r\n            K : 0, // in game\r\n            getERA : function() {\r\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3)\r\n            },\r\n            ERA : null,\r\n            ER : ER,\r\n            H : 0, // in game\r\n            HR : 0, // in game\r\n            BB : 0, // in game\r\n            IP : [IP,0]\r\n        },\r\n        batting : {\r\n            getBA : function() {\r\n                return this.h / (Math.max(1, this.ab))\r\n            },\r\n            ba : null,\r\n            getOBP : function() {\r\n                return (h + bb + hbp)/(ab + bb + hbp + sf);\r\n            },\r\n            obp : null,\r\n            getSLG : function() {\r\n                return ((h - doubles - triples - hr) + 2*doubles + 3*triples + 4*hr)/ab\r\n            },\r\n            slg : null,\r\n            pa : pa,\r\n            ab : ab,\r\n            so : so,\r\n            bb : bb,\r\n            h : h,\r\n            '2b' : doubles,\r\n            '3b' : triples,\r\n            hr : hr,\r\n            r : r,\r\n            rbi : rbi,\r\n            hbp : hbp\r\n        },\r\n        fielding : {\r\n            E : E,\r\n            PO : PO, // should depend on position\r\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\r\n        }\r\n    };\r\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\r\n    this.stats.batting.ba = this.stats.batting.getBA();\r\n};\r\n\r\nPlayer.prototype = {\r\n    constructor : Player,\r\n    init : function(team) {\r\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\r\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\r\n        this.team = team;\r\n        this.skill = {};\r\n        this.eye = {\r\n            x: 100,\r\n            y: 100\r\n        };\r\n        this.pitching = {averaging : []};\r\n        this.number = 0;\r\n        this.randomizeSkills(Math.random() > 0.9);\r\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\r\n            nameKey = Math.floor(Math.random()*data.names.length);\r\n\r\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\r\n        var jSurname = data.surnamesJ[surnameKey],\r\n            jGivenName = data.namesJ[nameKey];\r\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\r\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\r\n        this.nameJ = jSurname + jGivenName;\r\n        this.surname = data.surnames[surnameKey];\r\n        this.surnameJ = data.surnamesJ[surnameKey];\r\n        this.atBats = [];\r\n    },\r\n    atBatObjects : [],\r\n    getAtBats : function() {\r\n        if (this.atBats.length > this.atBatObjects.length) {\r\n            this.atBatObjects = this.atBats.map(function(item) {\r\n                return new AtBat(item);\r\n            });\r\n        }\r\n        return this.atBatObjects;\r\n    },\r\n    recordRBI : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\r\n    },\r\n    recordInfieldHit : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\r\n    },\r\n    randomizeSkills : function(hero) {\r\n        this.hero = hero;\r\n        var giraffe = this;\r\n        var randValue = function(isPitching) {\r\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\r\n            if (hero) {\r\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\r\n            }\r\n            if (isPitching) giraffe.pitching.averaging.push(value);\r\n            return value\r\n        };\r\n        this.skill.offense = {\r\n            eye : randValue(),\r\n            power : randValue(),\r\n            speed : randValue()\r\n        };\r\n        this.skill.defense = {\r\n            catching : randValue(),\r\n            fielding : randValue(),\r\n            speed : randValue(),\r\n            throwing : randValue()\r\n        };\r\n        this.pitching.averaging = [];\r\n        this.pitching['4-seam'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        this.pitching['slider'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        if (Math.random() < 0.17) {\r\n            // can pitch!\r\n            if (Math.random() > 0.6) {\r\n                this.pitching['2-seam'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() < 0.18) {\r\n                this.pitching['fork'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() > 0.77) {\r\n                this.pitching['cutter'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n            if (Math.random() < 0.21) {\r\n                this.pitching['sinker'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n\r\n            if (Math.random() < 0.4) {\r\n                this.pitching['curve'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n\r\n            if (Math.random() < 0.9) {\r\n                this.pitching['change'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                }\r\n            }\r\n        }\r\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current, index, arr) {\r\n            return prev + current\r\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\r\n        delete this.pitching.averaging;\r\n    },\r\n    getSurname : function() {\r\n        return mode == 'n' ? this.surnameJ : this.surname;\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    getUniformNumber : function() {\r\n        return text('#') + this.number\r\n    },\r\n    getOrder : function() {\r\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\r\n    },\r\n    eye : {},\r\n    fatigue : 0,\r\n    name : '',\r\n    number : 0,\r\n    position : '',\r\n    atBats : []\r\n};","var Team = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nTeam.prototype = {\r\n    constructor : Team,\r\n    init : function(game) {\r\n        this.lineup = [];\r\n        this.bench = [];\r\n        this.bullpen = [];\r\n        this.positions = {\r\n            pitcher : null,\r\n            catcher : null,\r\n            first : null,\r\n            second : null,\r\n            short : null,\r\n            third : null,\r\n            left : null,\r\n            center : null,\r\n            right : null\r\n        };\r\n        this.game = game;\r\n        for (var j = 0; j < 20; j++) {\r\n            this.bench.push(new Player(this));\r\n        }\r\n        this.manager = new Manager(this);\r\n        this.manager.makeLineup();\r\n        this.pickName();\r\n    },\r\n    pickName : function() {\r\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\r\n        this.name = data.teamNames[teamNameIndex];\r\n        this.nameJ = data.teamNamesJ[teamNameIndex];\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    lineup : [],\r\n    positions : {},\r\n    manager : null,\r\n    bench : [],\r\n    bullpen : [],\r\n    nowBatting : 0,\r\n    expanded : 'Player&'\r\n};","var Umpire = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nUmpire.prototype = {\r\n    constructor : Umpire,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.playBall();\r\n    },\r\n    count : {\r\n        strikes : 0,\r\n        balls : 0,\r\n        outs : 0\r\n    },\r\n    playBall : function() {\r\n        this.game.half = 'top';\r\n        this.game.inning = 1;\r\n        this.game.batter = this.game.teams.away.lineup[0];\r\n        this.game.batterRunner = this.game.teams.away.lineup[0];\r\n        this.game.deck = this.game.teams.away.lineup[1];\r\n        this.game.hole = this.game.teams.away.lineup[2];\r\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\r\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\r\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\r\n        this.game.log.note(e, n);\r\n        this.game.log.noteBatter(\r\n            this.game.batter\r\n        );\r\n    },\r\n    makeCall : function() {\r\n        this.says = '';\r\n\r\n        var result = this.game.swingResult;\r\n        var pitcher = this.game.pitcher;\r\n        var batter = this.game.batter;\r\n\r\n        this.game.batterRunner = this.game.batter;\r\n\r\n        pitcher.stats.pitching.pitches++;\r\n        if (result.looking) {\r\n            if (result.strike) {\r\n                this.count.strikes++;\r\n                pitcher.stats.pitching.strikes++;\r\n            } else {\r\n                this.count.balls++;\r\n            }\r\n        } else {\r\n            if (result.contact) {\r\n                if (result.caught) {\r\n                    this.count.outs++;\r\n                    pitcher.stats.pitching.IP[1]++;\r\n                    if (result.flyAngle < 10) {\r\n                        this.game.batter.atBats.push(Log.prototype.LINEOUT);\r\n                    } else {\r\n                        this.game.batter.atBats.push(Log.prototype.FLYOUT);\r\n                    }\r\n                    batter.stats.batting.pa++;\r\n                    batter.stats.batting.ab++;\r\n                    this.newBatter(); //todo: sac fly\r\n                } else {\r\n                    if (result.foul) {\r\n                        this.count.strikes++;\r\n                        pitcher.stats.pitching.strikes++;\r\n                        if (this.count.strikes > 2) this.count.strikes = 2;\r\n                    } else {\r\n                        batter.stats.batting.pa++;\r\n                        batter.stats.batting.ab++;\r\n                        if (result.thrownOut) {\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                            this.newBatter(); //todo: sac\r\n                        }\r\n                        if (result.bases) {\r\n                            if (!result.error) {\r\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\r\n                                pitcher.stats.pitching.H++;\r\n                            } else {\r\n                                if (result.bases > 0) {\r\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away']['E']++;\r\n                                    this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder].stats.fielding.E++;\r\n                                }\r\n                            }\r\n                            var bases = result.bases;\r\n                            switch (bases) {\r\n                                case 0 :\r\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                                    break;\r\n                                case 1 :\r\n                                    if (result.error) {\r\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\r\n                                    } else {\r\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\r\n                                        batter.stats.batting.h++;\r\n                                    }\r\n                                    break;\r\n                                case 2 :\r\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['2b']++;\r\n                                    break;\r\n                                case 3 :\r\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['3b']++;\r\n                                    break;\r\n                                case 4 :\r\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\r\n                                    pitcher.stats.pitching.HR++;\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting.hr++;\r\n                                    break;\r\n                            }\r\n                            if (bases > 0 && bases < 4 && !result.error) {\r\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\r\n                                    batter.recordInfieldHit();\r\n                                }\r\n                            }\r\n                            var onBase = false;\r\n                            while (bases > 0) {\r\n                                bases -= 1;\r\n                                this.advanceRunners();\r\n                                if (!onBase) {\r\n                                    this.reachBase();\r\n                                    onBase = true;\r\n                                }\r\n                            }\r\n                            this.newBatter();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                pitcher.stats.pitching.strikes++;\r\n                this.count.strikes++;\r\n            }\r\n        }\r\n\r\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\r\n\r\n        if (this.count.strikes > 2) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.ab++;\r\n            batter.stats.batting.so++;\r\n            pitcher.stats.pitching.K++;\r\n            this.count.outs++;\r\n            pitcher.stats.pitching.IP[1]++;\r\n            this.count.balls = this.count.strikes = 0;\r\n            this.says = 'Strike three. Batter out.';\r\n            batter.atBats.push(Log.prototype.STRIKEOUT);\r\n            this.newBatter();\r\n        }\r\n        if (this.count.balls > 3) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.bb++;\r\n            pitcher.stats.pitching.BB++;\r\n            this.says = 'Ball four.';\r\n            this.count.balls = this.count.strikes = 0;\r\n            batter.atBats.push(Log.prototype.WALK);\r\n            this.advanceRunners(true).reachBase().newBatter();\r\n        }\r\n        if (this.count.outs > 2) {\r\n            this.says = 'Three outs, change.';\r\n            this.count.outs = this.count.balls = this.count.strikes = 0;\r\n            pitcher.stats.pitching.IP[0]++;\r\n            pitcher.stats.pitching.IP[1] = 0;\r\n            this.changeSides();\r\n        }\r\n    },\r\n    reachBase : function() {\r\n        this.game.field.first = this.game.batter;\r\n        this.game.field.first.fatigue += 2;\r\n        return this;\r\n    },\r\n    advanceRunners : function(isWalk) {\r\n        isWalk = !!isWalk;\r\n\r\n        if (isWalk) {\r\n            if (this.game.field.first) {\r\n                if (this.game.field.second) {\r\n                    if (this.game.field.third) {\r\n                        //bases loaded\r\n                        this.game.batter.recordRBI();\r\n                        this.game.batter.stats.batting.rbi++;\r\n                        this.game.field.third.atBats.push(Log.prototype.RUN);\r\n                        this.game.field.third.stats.batting.r++;\r\n                        this.game.pitcher.stats.pitching.ER++;\r\n                        this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\r\n                        this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\r\n                        this.game.field.third = this.game.field.second;\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    } else {\r\n                        // 1st and second\r\n                        this.game.field.third = this.game.field.second;\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    }\r\n                } else {\r\n                    if (this.game.field.third) {\r\n                        // first and third\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    } else {\r\n                        // first only\r\n                        this.game.field.second = this.game.field.first;\r\n                        this.game.field.first = null;\r\n                    }\r\n                }\r\n            } else {\r\n                // no one on first\r\n            }\r\n        } else {\r\n            if (this.game.field.third instanceof this.game.batter.constructor) {\r\n                // run scored\r\n                this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\r\n                this.game.tally[this.game.half == 'top' ? 'away' : 'home']['R']++;\r\n                if (this.game.batter != this.game.field.third) {\r\n                    this.game.batter.recordRBI();\r\n                    this.game.field.third.atBats.push(Log.prototype.RUN);\r\n                }\r\n                this.game.batter.stats.batting.rbi++;\r\n                this.game.field.third.stats.batting.r++;\r\n                this.game.pitcher.stats.pitching.ER++;\r\n            }\r\n            this.game.field.third = this.game.field.second;\r\n            this.game.field.second = this.game.field.first;\r\n            this.game.field.first = null;\r\n        }\r\n        return this;\r\n    },\r\n    newBatter : function() {\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        this.count.balls = this.count.strikes = 0;\r\n        this.game.log.notePlateAppearanceResult(this.game);\r\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\r\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\r\n        team.nowBatting = (team.nowBatting + 1)%9;\r\n        if (this.count.outs < 3) {\r\n            this.game.log.noteBatter(this.game.batter);\r\n        }\r\n    },\r\n    changeSides : function() {\r\n        this.game.swingResult.looking = true; // hide bat\r\n        this.game.pitchInFlight.x = null; // hide ball\r\n        this.game.pitchInFlight.y = null; // hide ball\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        var offense, defense;\r\n        this.game.field.first = null;\r\n        this.game.field.second = null;\r\n        this.game.field.third = null;\r\n        if (this.game.half == 'top') {\r\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\r\n                return this.game.end();\r\n            }\r\n            this.game.half = 'bottom';\r\n        } else {\r\n            if (this.game.inning + 1 > 9) {\r\n                return this.game.end();\r\n            }\r\n            this.game.inning++;\r\n            this.game.half = 'top';\r\n        }\r\n        offense = this.game.half == 'top' ? 'away' : 'home';\r\n        defense = this.game.half == 'top' ? 'home' : 'away';\r\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\r\n        +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\r\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\r\n        this.game.log.note(e, n);\r\n        var team = this.game.teams[offense];\r\n        this.game.batter = team.lineup[team.nowBatting];\r\n        this.game.batterRunner = this.game.batter;\r\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\r\n\r\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\r\n        this.game.log.noteBatter(this.game.batter);\r\n    },\r\n    says : 'Play ball!',\r\n    game : null\r\n};","var Catcher = function() {\r\n    this.init();\r\n};\r\n\r\nCatcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Fielder = function() {\r\n    this.init();\r\n};\r\n\r\nFielder.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Pitcher = function() {\r\n    this.init();\r\n};\r\n\r\nPitcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Batter = function() {\r\n    this.init();\r\n};\r\n\r\nBatter.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Runner = function() {\r\n    this.init();\r\n};\r\n\r\nRunner.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","IndexController = function($scope) {\r\n    window.s = $scope;\r\n    $scope.t = text;\r\n\r\n    $scope.mode = function(setMode) {\r\n        if (setMode) {\r\n            mode = setMode;\r\n        }\r\n        return mode;\r\n    };\r\n\r\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\r\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\r\n        Game.prototype.quickMode = !!quickMode;\r\n        $scope.y = new Game();\r\n        var game = $scope.y;\r\n        s2.y = game;\r\n        bindMethods();\r\n        jQ('.blocking').remove();\r\n        if (game.humanControl == 'none' && game.quickMode) {\r\n            var n = 0;\r\n            do {\r\n                n++;\r\n                game.simulateInput(function(callback) {\r\n                    typeof callback == 'function' && callback();\r\n                });\r\n            } while (game.stage != 'end' && n < 500);\r\n            log('sim ended');\r\n            game.debugOut();\r\n        } else if (game.humanControl == 'none') {\r\n            var scalar = game.quickMode ? 0.05 : 1;\r\n            var auto = setInterval(function() {\r\n                if (game.stage == 'end') {\r\n                    clearInterval(auto);\r\n                }\r\n                game.simulatePitchAndSwing(function(callback) {\r\n                    game.quickMode ? void 0 : $scope.$apply();\r\n                    $scope.updateFlightPath(callback);\r\n                });\r\n            }, scalar*(game.field.hasRunnersOn() ? 4000 : 5500));\r\n        }\r\n        if (game.humanControl == 'away') {\r\n            game.simulateInput(function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        }\r\n        if (game.humanControl == 'home') {\r\n\r\n        }\r\n    };\r\n\r\n    var bindMethods = function() {\r\n        var game = $scope.y;\r\n        $scope.holdUpTimeouts = [];\r\n        $scope.expandScoreboard = false;\r\n        var animator = new Animator();\r\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\r\n\r\n        // avoid scope cycles, any other easy way?\r\n        var bat = jQ('.target .swing.stance-indicator');\r\n        var showBat = function(event) {\r\n            if (game.humanBatting()) {\r\n                var offset = jQ('.target').offset();\r\n                var relativeOffset = {\r\n                    x : event.pageX - offset.left,\r\n                    y : 200 - (event.pageY - offset.top)\r\n                };\r\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\r\n                bat.css({\r\n                    top: 200-relativeOffset.y + \"px\",\r\n                    left: relativeOffset.x + \"px\",\r\n                    transform: \"rotate(\" + angle + \"deg)\"\r\n                });\r\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\r\n                    bat.hide();\r\n                } else {\r\n                    bat.show();\r\n                }\r\n            }\r\n        };\r\n        var glove = jQ('.target .glove.stance-indicator');\r\n        var showGlove = function(event) {\r\n            if (game.humanPitching()) {\r\n            }\r\n        };\r\n\r\n        $scope.selectPitch = function(pitchName) {\r\n            if (game.stage == 'pitch') {\r\n                game.pitchInFlight = jQ.extend({}, game.pitcher.pitching[pitchName]);\r\n                game.pitchInFlight.name = pitchName;\r\n                game.swingResult.looking = true;\r\n            }\r\n        };\r\n        $scope.allowInput = true;\r\n        $scope.holdUp = function() {\r\n            jQ('.no-swing').click();\r\n            $scope.$apply();\r\n        };\r\n        game.startOpponentPitching = function(callback) {\r\n            $scope.updateFlightPath(callback);\r\n        };\r\n        $scope.indicate = function($event) {\r\n            if (!$scope.allowInput) {\r\n                return;\r\n            }\r\n            if (game.pitcher.windingUp) {\r\n                return;\r\n            }\r\n            if (game.humanPitching()) $scope.allowInput = false;\r\n            var offset = jQ('.target').offset();\r\n            var relativeOffset = {\r\n                x : $event.pageX - offset.left,\r\n                y : 200 - ($event.pageY - offset.top)\r\n            };\r\n            clearTimeout($scope.lastTimeout);\r\n            while ($scope.holdUpTimeouts.length) {\r\n                clearTimeout($scope.holdUpTimeouts.shift());\r\n            }\r\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        };\r\n        $scope.abbreviatePosition = function(position) {\r\n            if (mode == 'e') {\r\n                return {\r\n                    pitcher : 'P',\r\n                    catcher : 'C',\r\n                    first : '1B',\r\n                    second : '2B',\r\n                    short : 'SS',\r\n                    third : '3B',\r\n                    left : 'LF',\r\n                    center : 'CF',\r\n                    right : 'RF'\r\n                }[position];\r\n            }\r\n            return text.fielderShortName(position);\r\n        };\r\n        $scope.$watch('y.humanBatting()', function() {\r\n            if ($scope.y.humanBatting()) {\r\n                jQ('.target').mousemove(showBat);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showBat);\r\n                bat.hide();\r\n            }\r\n        });\r\n        $scope.$watch('y.humanPitching()', function() {\r\n            if ($scope.y.humanPitching()) {\r\n                jQ('.target').mousemove(showGlove);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showGlove);\r\n                glove.hide();\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n};","ScoreboardDirective = function() {\r\n    return {\r\n        scope: {\r\n            game: '=',\r\n            text: '='\r\n        },\r\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\r\n        link: function(scope) {\r\n            window.s2 = scope;\r\n            scope.t = scope.text;\r\n            scope.y = scope.game;\r\n        }\r\n    };\r\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\r\n\r\ncacheKey = Math.floor(Math.random()*1500);\r\n\r\nangular.module('directives', [])\r\n    .directive('scoreboard', ScoreboardDirective);\r\n\r\nangular.module('controllers', [])\r\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
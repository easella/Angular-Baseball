{"version":3,"sources":["namespace.js","text.js","Log.js","data.js","helper.js","Animator.js","Distribution.js","Iterator.js","Mathinator.js","AtBat.js","Field.js","Game.js","Manager.js","Player.js","Team.js","Umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["Yakyuu","exports","mode","text","phrase","override","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","getBattersEye","game","eye","breaking","Math","abs","pitchInFlight","breakDirection","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","Log","this","init","prototype","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","rec","shortRecord","stabilized","concat","rec2","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","pop","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","random","splay","notePlateAppearanceResult","pointer","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","floor","Animator","identifier","constructor","console","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","pitchTransition","Mathinator","transitions","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","addClass","removeClass","humanPitching","holdUpTimeouts","push","holdUp","animateFieldingTrajectory","killAll","linearApproximateDragScalar","distance","apexHeight","airTime","angle","flyAngle","travelDistance","scalar","memory","bounding","sqrt","sin","PI","mathinator","transitionalTrajectory","fn","hasOwnProperty","Distribution","chance","scale","defense","fielding","landingDistance","power","pitchLocation","centralizedNumber","swingLikelihood","umpire","min","count","balls","max","strikes","pitchControl","target","control","breakEffect","effect","cpuSwing","actual","swing","Iterator","each","collection","map","keys","i","Array","length","Object","square","RADIAN","getAngularOffset","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","getPolarDistance","a","b","radians","battingAngle","origin","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","translateSwingResultToStylePosition","_top","_left","transform","fielderReturnDelay","throwing","intercept","baseRunningTime","speed","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","Field","hasRunnersOn","Player","determineSwingContactResult","splayAngle","bonus","findFielder","sacrificeAdvances","half","teams","home","away","fatigue","fieldingEase","throwingEase","fielderTravel","interceptRating","sacrificeThrowInTime","getBaseRunningTime","fieldingReturnDelay","fieldingDelay","outFielder","difficulty","fieldersChoice","fieldingTest","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","returnFielder","minDistance","giraffe","spot","thisDistance","gamesIntoSeason","humanControl","quickMode","debug","window","field","Team","pickName","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","windingUp","windup","css","animate","width","deceptiveX","deceptiveY","convergence","convergenceSum","swingProbability","battersEye","setBatAngle","recalculation","precision","pow","makeCall","startOpponentPitching","debugOut","filter","PO","hitters","lineup","atBats","LO","ab","FO","GO","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","selection","rating","index","skills","cursor","property","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sac","chances","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","hero","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","randValue","isPitching","value","catching","reduce","prev","current","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","batterRunner","deck","hole","says","advanceRunners","newBatter","reachBase","hitByPitch","changeSides","isWalk","canAdvance","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","spectateCpu","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","show","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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AAAnI,GAAAJ,KAAA,cAAAgL,QAAA,GAAA,GAAA,GAAA,GAAA,IACAjL,KAAAkL,GAEA8B,QAAA,EACApD,YACApB,aACAvC,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA5F,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAsJ,aACA1D,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA5F,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MAGAmI,aACAvC,KACA5F,MAEAsJ,aACA1D,KACA5F,MAEAmJ,QACAvD,KACA5F,MAEAuK,gBAAA,WACA,OACAhE,MAAA3G,KAAA,iBACA4G,OAAA5G,KAAA,kBACA6G,MAAA7G,KAAA,iBACA8G,QAAA9G,KAAA,aACA6B,QAAA7B,KAAA,WACA8B,QAAA9B,KAAA,WACA+G,KAAA/G,KAAA,gBACAgH,OAAAhH,KAAA,kBACAiH,MAAAjH,KAAA,oBAKAF,QAAAqI,IAAAA,ICvRA6E,MACAC,UACA,OACA,SACA,YACA,SACA,WACA,MACA,WACA,YACA,WACA,OACA,UACA,SACA,SACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,QACA,WACA,WACA,OACA,MACA,QACA,YACA,WACA,YACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,SACA,OACA,OACA,WACA,WACA,MACA,SACA,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,UACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,aACA,WACA,UACA,WACA,OACA,QACA,YACA,YACA,QACA,WACA,aACA,UACA,QACA,YACA,WACA,OACA,YACA,SACA,SACA,UACA,UACA,SACA,YACA,cACA,UACA,WACA,WACA,UACA,QACA,WACA,YACA,OACA,YACA,SACA,OACA,YACA,OACA,WACA,OACA,WACA,YACA,YACA,SACA,SACA,OACA,aACA,UACA,SACA,WACA,UACA,YACA,UACA,UACA,SACA,SACA,YAIAxN,QAAAkN,KAAAA,KC1hBAO,QACAC,kBACAjL,UAAA,EAAA,EAAA,GACAC,UAAA,GAAA,IAAA,IACAG,QAAA,IAAA,IAAA,KACAC,QAAA,IAAA,IAAA,KAEAH,QAAA,IAAA,IAAA,IACAC,MAAA,EAAA,IAAA,KACAG,OAAA,EAAA,IAAA,KAEAC,QAAA,EAAA,IAAA,MAEA2K,kBAAA,WACA,OACA,SAAA,SAAA,SAAA,SACA,SAAA,OAAA,QACA,UACApH,KAAAqH,MAAA,EAAArH,KAAAuG,aAIA9M,QAAAyN,OAAAA,MCtBA,IAAAI,UAAA,WACAvF,KAAAC,OAGAsF,UAAArF,WACAsF,WAAA,WACAC,YAAAF,SACAG,SAAA,EACAzF,KAAA,aAGA0F,YAAA,KACAC,WAAA,KACAC,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","file":"application.js","sourcesContent":["Yakyuu = {};\r\nexports = {};","var mode = 'n';\r\n\r\ntext = function(phrase, override) {\r\n    if (!mode) mode = 'n';\r\n    var string = {\r\n        n : {\r\n            empty: '-',\r\n            ' 1st' : '1番',\r\n            ' 2nd' : '2番',\r\n            ' 3rd' : '3番',\r\n            ' 4th' : '4番',\r\n            ' 5th' : '5番',\r\n            ' 6th' : '6番',\r\n            ' 7th' : '7番',\r\n            ' 8th' : '8番',\r\n            ' 9th' : '9番',\r\n            'Now batting' : '次のバッタ、',\r\n            'way outside' : '相当外角',\r\n            'outside' : '外角',\r\n            'inside' : '内角',\r\n            'way inside' : '相当内角',\r\n            'way low' : '相当低め',\r\n            'low' : '低め',\r\n            'high' : '高め',\r\n            'way high' : '相当高め',\r\n            'down the middle' : '真ん中',\r\n            'first baseman': 'ファースト',\r\n            'second baseman': 'セカンド',\r\n            'third baseman': 'サード',\r\n            'shortstop': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left fielder': 'レフト',\r\n            'center fielder': 'センター',\r\n            'right fielder': 'ライト',\r\n            'Strike.' : 'ストライク。',\r\n            'Ball.' : 'ボール。',\r\n            'Fouled off.': 'ファウル。',\r\n            'In play.': 'インプレー。',\r\n            'Swinging strike.': '空振り。',\r\n            '4-seam': 'ストレート',\r\n            '2-seam': 'シュート',\r\n            'slider': 'スライダー',\r\n            'fork': 'フォーク',\r\n            'cutter': 'カット',\r\n            'sinker': 'シンカー',\r\n            'curve': 'カーブ',\r\n            'change': 'チェンジ',\r\n            ' struck out looking.': '、見逃し三振。',\r\n            ' walked.': '、フォアボール。',\r\n            ' struck out swinging.': '、空振り三振。',\r\n            'Previous: ': '前：',\r\n            'looks like: ': '予想',\r\n            'breaking ball': '変化球',\r\n            'fastball': 'ストレート',\r\n            'Batting, ': '打球',\r\n            'Catching, pitch selection': '捕球選択',\r\n            'Season': '記録',\r\n            'Game': '今試合',\r\n            'Pitch': '球',\r\n            'Control': '制球',\r\n            'Velocity': '速度',\r\n            'Break': '変化',\r\n            'At Bat :': 'バッタ',\r\n            'On Deck :': '次バッタ',\r\n            'Eye :': '目',\r\n            'Power :': '力',\r\n            'Speed :': '速',\r\n            'Up to Bat': '打席',\r\n            'Fielding': '守備',\r\n            'BA' : '打率',\r\n            'OBP' : '出塁',\r\n            'SLG' : '長打',\r\n            'PA' : '打席',\r\n            'H/2B/3B/HR' : '安／二／三／本',\r\n            'H' : '安',\r\n            '2B' : '二',\r\n            '3B' : '三',\r\n            'HR' : '本塁打',\r\n            'RBI' : '打点',\r\n            'R' : '得点',\r\n            'BB' : '四球',\r\n            'SO' : '三振',\r\n\r\n            'Select Language:' : '言語',\r\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\r\n            'Play Ball!' : 'プレーボール',\r\n            'Spectate the CPU': 'CPU観戦',\r\n\r\n            'Throws/Bats' : ' ',\r\n            'LHP' : '左投',\r\n            'RHP' : '右投',\r\n            'LHB' : '左打',\r\n            'RHB' : '右打',\r\n            'L' : '左投',\r\n            'R ' : '右投',\r\n            ' L ' : '左打',\r\n            ' R ' : '右打',\r\n            '#' : '背番号'\r\n        },\r\n        e : {\r\n            empty: '-',\r\n            'Season': 'Career'\r\n        }\r\n    }[override ? override : mode][phrase];\r\n    return string ? string : phrase;\r\n};\r\n\r\ntext.getBattersEye = function(game) {\r\n    var eye = {},\r\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\r\n    eye.e =\r\n        text('looks like: ', 'e')+\r\n        breaking ? text('breaking ball', 'e') : text('fastball', 'e');\r\n    eye.n =\r\n        text('looks like: ', 'n')+\r\n        breaking ? text('breaking ball', 'n') : text('fastball', 'n');\r\n    return eye;\r\n};\r\n\r\ntext.fielderShortName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': '一',\r\n            'second': '二',\r\n            'third': '三',\r\n            'short': '遊',\r\n            'pitcher': '投',\r\n            'catcher': '捕',\r\n            'left': '左',\r\n            'center': '中',\r\n            'right': '右'\r\n        }[fielder];\r\n    }\r\n    return fielder;\r\n};\r\n\r\ntext.slash = function() {\r\n    if (mode == 'n') {\r\n        return '・';\r\n    }\r\n    return '/';\r\n};\r\n\r\ntext.fielderLongName = function(fielder) {\r\n    if (mode == 'n') {\r\n        return {\r\n            'first': 'ファースト',\r\n            'second': 'セカンド',\r\n            'third': 'サード',\r\n            'short': 'ショート',\r\n            'pitcher': 'ピッチャー',\r\n            'catcher': 'キャッチャー',\r\n            'left': 'レフト',\r\n            'center': 'センター',\r\n            'right': 'ライト'\r\n        }[fielder]\r\n    }\r\n    return {\r\n        first : text('first baseman'),\r\n        second : text('second baseman'),\r\n        third : text('third baseman'),\r\n        short : text('shortstop'),\r\n        pitcher : text('pitcher'),\r\n        catcher : text('catcher'),\r\n        left : text('left fielder'),\r\n        center : text('center fielder'),\r\n        right : text('right fielder')\r\n    }[fielder];\r\n};\r\n\r\ntext.comma = function() {\r\n    return {n: '、', e: ', '}[mode];\r\n};\r\ntext.stop = function() {\r\n    return {n: '。', e: '. '}[mode];\r\n};\r\n\r\ntext.namePitch = function(pitch) {\r\n    if (mode == 'e') {\r\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\r\n    }\r\n    if (mode == 'n') {\r\n        return text(pitch.name)\r\n    }\r\n};\r\n\r\ntext.contactResult = function(batter, fielder, bases, outBy) {\r\n    var statement = '';\r\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\r\n    if (mode == 'e') {\r\n        statement += batter;\r\n        if (outBy) {\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'pop':\r\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'fly':\r\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'ground':\r\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 'thrown':\r\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        } else {\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\r\n                    } else {\r\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 3:\r\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\r\n                    break;\r\n                case 4:\r\n                    statement += ' homered to ' + text.fielderShortName(fielder);\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    if (mode == 'n') {\r\n        statement += batter + 'は';\r\n        if (outBy) {\r\n            fielder = text.fielderShortName(fielder);\r\n            switch (outBy) {\r\n                case 'error':\r\n                    statement += 'エラー('+fielder+')で出塁';\r\n                    break;\r\n                case 'pop':\r\n                    statement += 'ポップフライで' + fielder + '飛';\r\n                    break;\r\n                case 'fly':\r\n                    statement += fielder + '飛';\r\n                    break;\r\n                case 'ground':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n                case 'thrown':\r\n                    statement += fielder + 'ゴロ';\r\n                    break;\r\n            }\r\n        } else {\r\n            fielder = text.fielderLongName(fielder);\r\n            switch (bases) {\r\n                case 1:\r\n                    if (infield) {\r\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\r\n                    } else {\r\n                        statement += '安打('+fielder+')' + 'で出塁';\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    statement += '二塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 3:\r\n                    statement += '三塁打（'+fielder+'）で出塁';\r\n                    break;\r\n                case 4:\r\n                    statement += '本塁打（'+fielder+'）';\r\n                    break;\r\n            }\r\n        }\r\n        statement += text.stop();\r\n    }\r\n    return statement;\r\n};\r\n\r\nexports.text = text;\r\nexports.mode = mode;","var Log = function() {\r\n    this.init();\r\n};\r\n\r\nLog.prototype = {\r\n    game : 'instance of Game',\r\n    init : function() {\r\n        this.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n    },\r\n    SINGLE : 'H',\r\n    DOUBLE : '2B',\r\n    TRIPLE : '3B',\r\n    HOMERUN : 'HR',\r\n    WALK : 'BB',\r\n    GROUNDOUT : 'GO',\r\n    FLYOUT : 'FO',\r\n    LINEOUT : 'LO',\r\n    RUN : 'R',\r\n    STRIKEOUT : 'SO',\r\n    SACRIFICE : 'SAC',\r\n    REACHED_ON_ERROR : 'ROE',\r\n    FIELDERS_CHOICE : 'FC',\r\n    note : function(note, noteJ) {\r\n        this.record.e.unshift(note);\r\n        var rec = this.record.e.slice(0, 6);\r\n        this.shortRecord.e = rec;\r\n        this.stabilized.shortRecord.e = rec.concat(['', '', '', '', '', '']).slice(0, 6);\r\n\r\n        this.record.n.unshift(noteJ);\r\n        var rec2 = this.record.n.slice(0, 6);\r\n        this.shortRecord.n = rec2;\r\n        this.stabilized.shortRecord.n = rec2.concat(['', '', '', '', '', '']).slice(0, 6)\r\n    },\r\n    getBatter : function(batter) {\r\n        var order = batter.team.nowBatting;\r\n        order = {\r\n            0 : text(' 1st'),\r\n            1 : text(' 2nd'),\r\n            2 : text(' 3rd'),\r\n            3 : text(' 4th'),\r\n            4 : text(' 5th'),\r\n            5 : text(' 6th'),\r\n            6 : text(' 7th'),\r\n            7 : text(' 8th'),\r\n            8 : text(' 9th')\r\n        }[order];\r\n        var positions = this.longFormFielder();\r\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\r\n            batter.getUniformNumber()+text.comma()+\r\n            batter.getName();\r\n    },\r\n    noteBatter : function(batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getBatter(batter);\r\n        mode = 'n';\r\n        recordJ = this.getBatter(batter);\r\n        mode = m;\r\n        this.note(record, recordJ);\r\n    },\r\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\r\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\r\n        var noComma = false, noComma2 = false;\r\n        var ball = false;\r\n        if (!batterIsLefty) x = 200 - x;\r\n        if (x < 50) {\r\n            say += text('way outside');\r\n            ball = true;\r\n        } else if (x < 70) {\r\n            say += text('outside');\r\n        } else if (x < 100) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 130) {\r\n            say += '';\r\n            noComma = true;\r\n        } else if (x < 150) {\r\n            say += text('inside');\r\n        } else {\r\n            say += text('way inside');\r\n            ball = true;\r\n        }\r\n        if (say != '') say += text.comma();\r\n        if (y < 35) {\r\n            say += text('way low');\r\n            ball = true;\r\n        } else if (y < 65) {\r\n            say += text('low');\r\n        } else if (y < 135) {\r\n            say += '';\r\n            noComma2 = true;\r\n        } else if (y < 165) {\r\n            say += text('high');\r\n        } else {\r\n            say += text('way high');\r\n            ball = true;\r\n        }\r\n        if (noComma || noComma2) {\r\n            say = say.split(text.comma()).join('');\r\n            if (noComma && noComma2) {\r\n                say = text('down the middle');\r\n            }\r\n        }\r\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\r\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\r\n        return say;\r\n    },\r\n    notePitch : function(pitchInFlight, batter) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.e.unshift(record);\r\n        this.stabilized.pitchRecord.e.unshift(record);\r\n        this.stabilized.pitchRecord.e.pop();\r\n        mode = 'n';\r\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\r\n        this.pitchRecord.n.unshift(recordJ);\r\n        this.stabilized.pitchRecord.n.unshift(recordJ);\r\n        this.stabilized.pitchRecord.n.pop();\r\n        mode = m;\r\n    },\r\n    getSwing : function(swingResult) {\r\n        var result = '';\r\n        if (swingResult.looking) {\r\n            if (swingResult.strike) {\r\n                result += text('Strike.')\r\n            } else {\r\n                result += text('Ball.')\r\n            }\r\n        } else {\r\n            if (swingResult.contact) {\r\n                if (swingResult.foul) {\r\n                    result += text('Fouled off.')\r\n                } else {\r\n                    if (swingResult.caught) {\r\n                        result += text('In play.')\r\n                    } else {\r\n                        if (swingResult.thrownOut) {\r\n                            result += text('In play.')\r\n                        } else {\r\n                            result += text('In play.')\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                result += text('Swinging strike.')\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n    noteSwing : function(swingResult) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getSwing(swingResult);\r\n        this.pitchRecord.e[0] += record;\r\n        this.stabilized.pitchRecord.e[0] += record;\r\n        mode = 'n';\r\n        recordJ = this.getSwing(swingResult);\r\n        this.pitchRecord.n[0] += recordJ;\r\n        this.stabilized.pitchRecord.n[0] += recordJ;\r\n        mode = m;\r\n    },\r\n    getPlateAppearanceResult : function(game) {\r\n        var r = game.swingResult;\r\n        var record = '';\r\n        var batter = game.batter.getName();\r\n        if (r.looking) {\r\n            if (r.strike) {\r\n                record = (batter + text(' struck out looking.'));\r\n            } else {\r\n                record = (batter + text(' walked.'));\r\n            }\r\n        } else {\r\n            if (r.contact) {\r\n                var fielder = r.fielder, bases = r.bases, outBy;\r\n                if (r.caught) {\r\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\r\n                        outBy = 'pop';\r\n                    } else {\r\n                        outBy = 'fly';\r\n                    }\r\n                } else {\r\n                    if (r.foul) {\r\n                        // not possible to end PA on foul?\r\n                    } else {\r\n                        if (r.error) {\r\n                            bases = 1;\r\n                            outBy = 'error';\r\n                        } else {\r\n                            if (r.thrownOut) {\r\n                                if (Math.random() > 0.5) {\r\n                                    outBy = 'ground';\r\n                                } else {\r\n                                    outBy = 'thrown';\r\n                                }\r\n                            } else {\r\n                                switch (r.bases) {\r\n                                    case 1:\r\n                                    case 2:\r\n                                    case 3:\r\n                                        bases = r.bases;\r\n                                        break;\r\n                                    case 4:\r\n                                        bases = 4;\r\n                                        if (r.splay < -15) {\r\n                                            fielder = 'left';\r\n                                        } else if (r.splay < 15) {\r\n                                            fielder = 'center';\r\n                                        } else {\r\n                                            fielder = 'right';\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                record = text.contactResult(batter, fielder, bases, outBy);\r\n            } else {\r\n                record = (batter+text(' struck out swinging.'));\r\n            }\r\n        }\r\n        return record;\r\n    },\r\n    notePlateAppearanceResult : function(game) {\r\n        var m = mode, record, recordJ;\r\n        mode = 'e';\r\n        record = this.getPlateAppearanceResult(game);\r\n        this.record.e.unshift(record);\r\n        this.pitchRecord.e = [text('Previous: ')+record];\r\n        this.stabilized.pitchRecord.e = [text('Previous: ')+record, '', '', '', '', ''];\r\n        mode = 'n';\r\n        recordJ = this.getPlateAppearanceResult(game);\r\n        this.record.n.unshift(recordJ);\r\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\r\n        this.stabilized.pitchRecord.n = [text('Previous: ')+recordJ, '', '', '', '', ''];\r\n        mode = m;\r\n    },\r\n    pointer : 0,\r\n    stabilized: {\r\n        pitchRecord : {\r\n            e: ['', '', '', '', '', ''],\r\n            n: ['', '', '', '', '', '']\r\n        },\r\n        shortRecord : {\r\n            e: ['', '', '', '', '', ''],\r\n            n: ['', '', '', '', '', '']\r\n        }\r\n    },\r\n    pitchRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    shortRecord : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    record : {\r\n        e: [],\r\n        n: []\r\n    },\r\n    longFormFielder : function() {\r\n        return {\r\n            first : text('first baseman'),\r\n            second : text('second baseman'),\r\n            third : text('third baseman'),\r\n            short : text('shortstop'),\r\n            pitcher : text('pitcher'),\r\n            catcher : text('catcher'),\r\n            left : text('left fielder'),\r\n            center : text('center fielder'),\r\n            right : text('right fielder')\r\n        }\r\n    }\r\n};\r\n\r\nexports.Log = Log;","data = {\r\n    surnames : [\r\n        'Sato',\r\n        'Suzuki',\r\n        'Takahashi',\r\n        'Tanaka',\r\n        'Watanabe',\r\n        'Ito',\r\n        'Nakamura',\r\n        'Kobayashi',\r\n        'Yamamoto',\r\n        'Kato',\r\n        'Yoshida',\r\n        'Yamada',\r\n        'Sasaki',\r\n        'Yamaguchi',\r\n        'Matsumoto',\r\n        'Inoue',\r\n        'Kimura',\r\n        'Shimizu',\r\n        'Hayashi',\r\n        'Saito',\r\n        'Saito',\r\n        'Yamazaki',\r\n        'Nakajima',\r\n        'Mori',\r\n        'Abe',\r\n        'Ikeda',\r\n        'Hashimoto',\r\n        'Ishikawa',\r\n        'Yamashita',\r\n        'Ogawa',\r\n        'Ishii',\r\n        'Hasegawa',\r\n        'Goto',\r\n        'Okada',\r\n        'Kondo',\r\n        'Maeda',\r\n        'Fujita',\r\n        'Endo',\r\n        'Aoki',\r\n        'Sakamoto',\r\n        'Murakami',\r\n        'Ota',\r\n        'Kaneko',\r\n        'Fujii',\r\n        'Fukuda',\r\n        'Nishimura',\r\n        'Miura',\r\n        'Takeuchi',\r\n        'Nakagawa',\r\n        'Okamoto',\r\n        'Matsuda',\r\n        'Harada',\r\n        'Nakano'\r\n    ],\r\n    surnamesJ : [\r\n        '佐藤',\r\n        '鈴木',\r\n        '高橋',\r\n        '田中',\r\n        '渡辺',\r\n        '伊藤',\r\n        '中村',\r\n        '小林',\r\n        '山本',\r\n        '加藤',\r\n        '吉田',\r\n        '山田',\r\n        '佐々木',\r\n        '山口',\r\n        '松本',\r\n        '井上',\r\n        '木村',\r\n        '清水',\r\n        '林',\r\n        '斉藤',\r\n        '斎藤',\r\n        '山崎',\r\n        '中島',\r\n        '森',\r\n        '阿部',\r\n        '池田',\r\n        '橋本',\r\n        '石川',\r\n        '山下',\r\n        '小川',\r\n        '石井',\r\n        '長谷川',\r\n        '後藤',\r\n        '岡田',\r\n        '近藤',\r\n        '前田',\r\n        '藤田',\r\n        '遠藤',\r\n        '青木',\r\n        '坂本',\r\n        '村上',\r\n        '太田',\r\n        '金子',\r\n        '藤井',\r\n        '福田',\r\n        '西村',\r\n        '三浦',\r\n        '竹内',\r\n        '中川',\r\n        '岡本',\r\n        '松田',\r\n        '原田',\r\n        '中野'\r\n    ],\r\n\r\n    namesJ: [\r\n        '匠',\r\n        'ヒカル',\r\n        'ゆうき',\r\n        '翔太',\r\n        '冬馬',\r\n        '漣',\r\n        '港区',\r\n        'ルイ',\r\n        '樹',\r\n        '賢治',\r\n        '五木',\r\n        '春',\r\n        '光一',\r\n        '宗介',\r\n        'こうすけ',\r\n        '雄太',\r\n        '大樹',\r\n        '瑛太',\r\n        // newer set\r\n        '宏',\r\n        '亨',\r\n        '道夫',\r\n        '聡',\r\n        '昭',\r\n        '茂雄',\r\n        '勝',\r\n        '純一',\r\n        '和夫',\r\n        '勲',\r\n        '省三',\r\n        '隆',\r\n        '達夫',\r\n        '正一',\r\n        '輝夫',\r\n        '俊夫',\r\n        '史郎',\r\n        '勇',\r\n        '義弘',\r\n        '良雄',\r\n        '登',\r\n        '義明',\r\n        '正義',\r\n        '秀夫',\r\n        '肇',\r\n        '月',\r\n        '克己',\r\n        '正男',\r\n        '光男',\r\n        '久',\r\n        '耕三',\r\n        '清',\r\n        '次郎',\r\n        '正博',\r\n        '明子',\r\n        '武',\r\n        '勉',\r\n        '晴夫',\r\n        '裕二',\r\n        '稔',\r\n        '障子',\r\n        '和子',\r\n        '敦',\r\n        '茂',\r\n        '信夫',\r\n        '恵一',\r\n        '忠',\r\n        '高尾',\r\n        '薫',\r\n        'ケン',\r\n        '健治',\r\n        '哲夫',\r\n        '啓二',\r\n        '光一',\r\n        '真一',\r\n        '貞夫',\r\n        '靖',\r\n        '武',\r\n        '雄',\r\n        '文雄',\r\n        '久雄',\r\n        '一朗',\r\n        '健一',\r\n        '正明',\r\n        '五郎',\r\n        '誠',\r\n        '昭夫',\r\n        '誠司',\r\n        '洋一',\r\n        '康夫',\r\n        '誠一',\r\n        '正美',\r\n        '則夫',\r\n        '幸雄',\r\n        '忠雄',\r\n        '仁',\r\n        'シンジ',\r\n        '豊',\r\n        '邦雄',\r\n        '修',\r\n        '雅之',\r\n        '三郎',\r\n        '英治',\r\n        '浩二',\r\n        '栄一',\r\n        '恒夫',\r\n        '義郎',\r\n        '進',\r\n        '博之',\r\n        '巌'\r\n    ],\r\n    names : [\r\n        'Takumi',\r\n        'Hikaru',\r\n        'Yuuki',\r\n        'Shouta',\r\n        'Touma',\r\n        'Ren',\r\n        'Minato',\r\n        'Rui',\r\n        'Tatsuki',\r\n        'Kenji',\r\n        'Itsuki',\r\n        'Haru',\r\n        'Kouichi',\r\n        'Sousuke',\r\n        'Kousuke',\r\n        'Yuuta',\r\n        'Daiki',\r\n        'Eita',\r\n        // newer set\r\n        'Hiroshi',\r\n        'Toru',\r\n        'Michio',\r\n        'Satoshi',\r\n        'Akira',\r\n        'Shigeo',\r\n        'Masaru',\r\n        'Junichi',\r\n        'Kazuo',\r\n        'Isao',\r\n        'Shozo',\r\n        'Takashi',\r\n        'Tatsuo',\r\n        'Shoichi',\r\n        'Teruo',\r\n        'Toshio',\r\n        'Shiro',\r\n        'Isamu',\r\n        'Yoshihiro',\r\n        'Yoshio',\r\n        'Noboru',\r\n        'Yoshiaki',\r\n        'Tadayoshi',\r\n        'Hideo',\r\n        'Hajime',\r\n        'Akari',\r\n        'Katsumi',\r\n        'Masao',\r\n        'Mitsuo',\r\n        'Hisashi',\r\n        'Kozo',\r\n        'Kiyoshi',\r\n        'Jiro',\r\n        'Masahiro',\r\n        'Akiko',\r\n        'Takeshi',\r\n        'Tsutomu',\r\n        'Haruo',\r\n        'Yuji',\r\n        'Minoru',\r\n        'Shoji',\r\n        'Kazuko',\r\n        'Atsushi',\r\n        'Shigeru',\r\n        'Shinobu',\r\n        'Keiichi',\r\n        'Tadashi',\r\n        'Takao',\r\n        'Kaoru',\r\n        'Ken',\r\n        'Kenji',\r\n        'Tetsuo',\r\n        'Keiji',\r\n        'Koichi',\r\n        'Shinichi',\r\n        'Sadao',\r\n        'Yasushi',\r\n        'Takeshi',\r\n        'Yu',\r\n        'Fumio',\r\n        'Hisao',\r\n        'Ichiro',\r\n        'Kenichi',\r\n        'Masaaki',\r\n        'Goro',\r\n        'Makoto',\r\n        'Akio',\r\n        'Seiji',\r\n        'Yoichi',\r\n        'Yasuo',\r\n        'Seiichi',\r\n        'Masami',\r\n        'Norio',\r\n        'Yukio',\r\n        'Tadao',\r\n        'Hitoshi',\r\n        'Shinji',\r\n        'Yutaka',\r\n        'Kunio',\r\n        'Osamu',\r\n        'Masayuki',\r\n        'Saburo',\r\n        'Eiji',\r\n        'Koji',\r\n        'Eiichi',\r\n        'Tsuneo',\r\n        'Yoshio',\r\n        'Susumu',\r\n        'Hiroyuki',\r\n        'Iwao'\r\n    ],\r\n    teamNamesJ : [\r\n        '横浜',\r\n        '大阪',\r\n        '名古屋',\r\n        '札幌',\r\n        '神戸',\r\n        '京都',\r\n        '福岡',\r\n        '川崎',\r\n        '埼玉県',\r\n        '広島',\r\n        '仙台',\r\n        '千葉県',\r\n        '新潟',\r\n        '浜松',\r\n        '静岡',\r\n        '相模原',\r\n        '岡山',\r\n        '熊本',\r\n        '鹿児島',\r\n        '船橋',\r\n        '川口',\r\n        '姫路',\r\n        '松山',\r\n        '宇都宮',\r\n        '松戸',\r\n        '西宮',\r\n        '倉敷',\r\n        '市川',\r\n        '福山',\r\n        '尼崎',\r\n        '金沢',\r\n        '長崎',\r\n        '横須賀',\r\n        '富山',\r\n        '高松',\r\n        '町田',\r\n        '岐阜',\r\n        '枚方',\r\n        '藤沢',\r\n        '柏',\r\n        '豊中',\r\n        '長野県',\r\n        '豊橋',\r\n        '一宮',\r\n        '和歌山',\r\n        '岡崎',\r\n        '宮崎',\r\n        '奈良',\r\n        '吹田',\r\n        '高槻',\r\n        '旭川',\r\n        'いわき',\r\n        '高崎',\r\n        '所沢',\r\n        '川越',\r\n        '秋田',\r\n        '越谷',\r\n        '前橋',\r\n        '那覇',\r\n        '四日市',\r\n        '青森',\r\n        '久留米',\r\n        '春日井',\r\n        '盛岡',\r\n        '明石',\r\n        '福島',\r\n        '下関',\r\n        '長岡',\r\n        '市原',\r\n        '函館',\r\n        '茨城県',\r\n        '福井',\r\n        '加古川',\r\n        '徳島',\r\n        '水戸',\r\n        '平塚',\r\n        '佐世保',\r\n        '呉',\r\n        '八戸',\r\n        '佐賀',\r\n        '寝屋川',\r\n        '富士',\r\n        '春日部',\r\n        '茅ヶ崎',\r\n        '松本',\r\n        '厚木',\r\n        '大和',\r\n        '上尾',\r\n        '宝塚',\r\n        '筑波',\r\n        '沼津',\r\n        '熊谷',\r\n        '伊勢崎',\r\n        '岸和田',\r\n        '鳥取',\r\n        '小田原',\r\n        '鈴鹿',\r\n        '松江',\r\n        '日立'\r\n    ],\r\n    teamNames : [\r\n        'Yokohama',\r\n        'Osaka',\r\n        'Nagoya',\r\n        'Sapporo',\r\n        'Kobe',\r\n        'Kyoto',\r\n        'Fukuoka',\r\n        'Kawasaki',\r\n        'Saitama',\r\n        'Hiroshima',\r\n        'Sendai',\r\n        'Chiba',\r\n        'Niigata',\r\n        'Hamamatsu',\r\n        'Shizuoka',\r\n        'Sagamihara',\r\n        'Okayama',\r\n        'Kumamoto',\r\n        'Kagoshima',\r\n        'Funabashi',\r\n        'Kawaguchi',\r\n        'Himeji',\r\n        'Matsuyama',\r\n        'Utsunomiya',\r\n        'Matsudo',\r\n        'Nishinomiya',\r\n        'Kurashiki',\r\n        'Ichikawa',\r\n        'Fukuyama',\r\n        'Amagasaki',\r\n        'Kanazawa',\r\n        'Nagasaki',\r\n        'Yokosuka',\r\n        'Toyama',\r\n        'Takamatsu',\r\n        'Machida',\r\n        'Gifu',\r\n        'Hirakata',\r\n        'Fujisawa',\r\n        'Kashiwa',\r\n        'Toyonaka',\r\n        'Nagano',\r\n        'Toyohashi',\r\n        'Ichinomiya',\r\n        'Wakayama',\r\n        'Okazaki',\r\n        'Miyazaki',\r\n        'Nara',\r\n        'Suita',\r\n        'Takatsuki',\r\n        'Asahikawa',\r\n        'Iwaki',\r\n        'Takasaki',\r\n        'Tokorozawa',\r\n        'Kawagoe',\r\n        'Akita',\r\n        'Koshigaya',\r\n        'Maebashi',\r\n        'Naha',\r\n        'Yokkaichi',\r\n        'Aomori',\r\n        'Kurume',\r\n        'Kasugai',\r\n        'Morioka',\r\n        'Akashi',\r\n        'Fukushima',\r\n        'Shimonoseki',\r\n        'Nagaoka',\r\n        'Ichihara',\r\n        'Hakodate',\r\n        'Ibaraki',\r\n        'Fukui',\r\n        'Kakogawa',\r\n        'Tokushima',\r\n        'Mito',\r\n        'Hiratsuka',\r\n        'Sasebo',\r\n        'Kure',\r\n        'Hachinohe',\r\n        'Saga',\r\n        'Neyagawa',\r\n        'Fuji',\r\n        'Kasukabe',\r\n        'Chigasaki',\r\n        'Matsumoto',\r\n        'Atsugi',\r\n        'Yamato',\r\n        'Ageo',\r\n        'Takarazuka',\r\n        'Tsukuba',\r\n        'Numazu',\r\n        'Kumagaya',\r\n        'Isesaki',\r\n        'Kishiwada',\r\n        'Tottori',\r\n        'Odawara',\r\n        'Suzuka',\r\n        'Matsue',\r\n        'Hitachi'\r\n    ]\r\n};\r\n\r\nexports.data = data;","helper = {\r\n    pitchDefinitions : {\r\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\r\n        '2-seam' :      [20, -20, 0.90],\r\n        'cutter' :      [-25, -20, 0.95],\r\n        'sinker' :      [-15, -30, 0.95],\r\n\r\n        'slider' :      [-50, -35, 0.9],\r\n        'fork'   :      [0, -70, 0.87],\r\n        'curve'  :      [0, -90, 0.82],\r\n\r\n        'change' :    [0, -10, 0.88]\r\n    },\r\n    selectRandomPitch : function() {\r\n        return [\r\n            '4-seam', '2-seam', 'cutter', 'sinker',\r\n            'slider', 'fork', 'curve',\r\n            'change'\r\n        ][Math.floor(Math.random()*8)]\r\n    }\r\n};\r\n\r\nexports.helper = helper;","var Animator = function() {\r\n    this.init();\r\n};\r\n\r\nAnimator.prototype = {\r\n    identifier : 'Animator',\r\n    constructor : Animator,\r\n    console : false,\r\n    init : function() {\r\n\r\n    },\r\n    pitchTarget : null,\r\n    pitchBreak : null,\r\n    updateFlightPath: function(callback) {\r\n        if (Animator.console) return;\r\n        var $scope = this,\r\n            game = $scope.y,\r\n            top = 200-game.pitchTarget.y,\r\n            left = game.pitchTarget.x,\r\n            breakTop = 200-game.pitchInFlight.y,\r\n            breakLeft = game.pitchInFlight.x,\r\n            $baseballs = jQ('.baseball'),\r\n            flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400,\r\n            originTop = 50,\r\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\r\n        var pitch = this.pitchTarget = jQ('.main-area .target .baseball.pitch'),\r\n            henka = this.pitchBreak = jQ('.main-area .target .baseball.break'),\r\n            quarter = flightSpeed/4;\r\n\r\n        var pitchTransition = Mathinator.pitchTransition(top, left, originTop, originLeft, quarter);\r\n\r\n        var transitions = [\r\n            pitchTransition(0, 0),\r\n            pitchTransition(10, 0),\r\n            pitchTransition(30, 1),\r\n            pitchTransition(50, 2),\r\n\r\n            pitchTransition(100, 3),\r\n            pitchTransition(100, 3, breakTop, breakLeft)\r\n        ];\r\n\r\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\r\n        //jQ('.baseball').addClass('spin');\r\n        //jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\r\n\r\n        TweenMax.set([pitch, henka], transitions[0]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\r\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\r\n        TweenMax.to(pitch, quarter, transitions[4]);\r\n        TweenMax.to(henka, quarter, transitions[5]);\r\n\r\n        $scope.lastTimeout = setTimeout(function() {\r\n            $scope.allowInput = true;\r\n            if (typeof callback == 'function') {\r\n                callback();\r\n                $scope.$apply();\r\n            }\r\n        }, flightSpeed*1000);\r\n\r\n        if (!game.pitchInFlight.x) {\r\n            $baseballs.addClass('hide');\r\n        } else {\r\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\r\n                jQ('.baseball.break').addClass('hide');\r\n            } else {\r\n                jQ('.baseball.break').removeClass('hide');\r\n            }\r\n            jQ('.baseball.pitch').removeClass('hide');\r\n        }\r\n\r\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\r\n            $scope.holdUpTimeouts.push(setTimeout(function() {\r\n                $scope.holdUp();\r\n            }, (flightSpeed + 1.2) * 1000));\r\n        }\r\n    },\r\n    animateFieldingTrajectory: function(game) {\r\n        if (Animator.console) return game.swingResult;\r\n        var ball = jQ('.splay-indicator-ball');\r\n        TweenMax.killAll();\r\n        var result = game.swingResult;\r\n\r\n        var linearApproximateDragScalar = {\r\n            distance: 1,\r\n            apexHeight: 0.37,\r\n            airTime: 0.66\r\n        };\r\n\r\n        var angle = result.flyAngle,\r\n            distance = Math.abs(result.travelDistance),\r\n            scalar = result.travelDistance < 0 ? -1 : 1;\r\n\r\n        Mathinator.memory.bounding = angle < 0;\r\n        angle = 1 + Math.abs(angle);\r\n        if (angle > 90) angle = 180 - angle;\r\n\r\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2*Math.PI*angle/180));\r\n        var apexHeight = velocity*velocity/(2*9.81) * linearApproximateDragScalar.apexHeight;\r\n        var airTime = Math.sqrt(2*apexHeight/9.81) * linearApproximateDragScalar.airTime;\r\n\r\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\r\n        var quarter = airTime/4;\r\n        var mathinator = new Mathinator();\r\n        var transitions = [\r\n            mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay),\r\n            mathinator.transitionalTrajectory(25, quarter, 0),\r\n            mathinator.transitionalTrajectory(50, quarter, 1),\r\n            mathinator.transitionalTrajectory(75, quarter, 2),\r\n            mathinator.transitionalTrajectory(100, quarter, 3)\r\n        ];\r\n        TweenMax.set(ball, transitions[0]);\r\n        TweenMax.to(ball, quarter, transitions[1]);\r\n        TweenMax.to(ball, quarter, transitions[2]);\r\n        TweenMax.to(ball, quarter, transitions[3]);\r\n        TweenMax.to(ball, quarter, transitions[4]);\r\n\r\n        return game.swingResult;\r\n    }\r\n};\r\n\r\nfor (var fn in Animator.prototype) {\r\n    if (Animator.prototype.hasOwnProperty(fn)) {\r\n        Animator[fn] = Animator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Animator = Animator;","/**\r\n * For Probability!\r\n * @constructor\r\n */\r\nvar Distribution = function() {\r\n};\r\n\r\nDistribution.prototype = {\r\n    identifier : 'Distribution',\r\n    constructor : Distribution,\r\n    /**\r\n     * @param scale {number}\r\n     * @returns {number}\r\n     */\r\n    chance : function(scale) {\r\n        if (!scale) scale = 1;\r\n        return Math.random() * scale;\r\n    },\r\n    /**\r\n     * @param fielder {Player}\r\n     * @returns {boolean}\r\n     */\r\n    error : function(fielder) {\r\n        return (100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100;\r\n    },\r\n    /**\r\n     * @param power\r\n     * @param flyAngle\r\n     * @returns {number}\r\n     */\r\n    landingDistance : function(power, flyAngle) {\r\n        return (10 + power/2 + Math.random()*310 + (power/100)*30) * (1 - Math.abs(flyAngle - 30)/60);\r\n    },\r\n    /**\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    pitchLocation : function() {\r\n        var x, y;\r\n        if (Math.random() < 0.5) {\r\n            x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\r\n        } else {\r\n            x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\r\n        }\r\n        y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\r\n        return {x: x, y: y};\r\n    },\r\n    /**\r\n     * swing centering basis\r\n     * @returns {number}\r\n     */\r\n    centralizedNumber : function() {\r\n        return 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\r\n    },\r\n    /**\r\n     * @param eye {Player.skill.offense.eye}\r\n     * @param x\r\n     * @param y\r\n     * @param umpire {Umpire}\r\n     */\r\n    swingLikelihood : function(eye, x, y, umpire) {\r\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\r\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\r\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*umpire.count.balls;\r\n        } else {\r\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\r\n        }\r\n        return swingLikelihood - 35 + 10*(umpire.count.balls + 2*umpire.count.strikes);\r\n    },\r\n    /**\r\n     * @param target {number} 0-200\r\n     * @param control {number} 0-100\r\n     * @returns {number}\r\n     */\r\n    pitchControl : function(target, control) {\r\n        return Math.min(199.9, Math.max(0.1, target + (50 - Math.random()*100)/(1+control/100)));\r\n    },\r\n    /**\r\n     * @param pitch {Game.pitchInFlight}\r\n     * @param x {number}\r\n     * @param y {number}\r\n     * @returns {object|{x: number, y: number}}\r\n     */\r\n    breakEffect : function(pitch, x, y) {\r\n        var effect = {};\r\n        effect.x = Math.floor(x + (pitch.breakDirection[0]\r\n            * ((0.5+Math.random()*pitch.break)/100)));\r\n        effect.y = Math.floor(y + (pitch.breakDirection[1]\r\n            * ((0.5+Math.random()*pitch.break)/100))/(0.5 + y/200));\r\n        return effect;\r\n    },\r\n    /**\r\n     * Determine the swing target along an axis\r\n     * @param target {number} 0-200\r\n     * @param actual {number} 0-200\r\n     * @param eye {number} 0-100\r\n     * @returns {number} 0-200\r\n     */\r\n    cpuSwing : function(target, actual, eye) {\r\n        eye = Math.max(eye, 100);\r\n        return 100 + (target - 100)*(0.5+Math.random()*eye/200) - actual;\r\n    },\r\n    /**\r\n     * Determine the swing scalar\r\n     * @param eye {number} 0-100\r\n     * @returns {number}\r\n     */\r\n    swing : function(eye) {\r\n        return 100/(eye + 25 + Math.random()*50);\r\n    }\r\n};\r\n\r\nfor (var fn in Distribution.prototype) {\r\n    if (Distribution.prototype.hasOwnProperty(fn)) {\r\n        Distribution[fn] = Distribution.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Distribution = Distribution;","var Iterator = function() {\r\n};\r\n\r\nIterator.prototype = {\r\n    identifier : 'Iterator',\r\n    constructor : Iterator,\r\n    each : function(collection, map) {\r\n        var keys, i;\r\n        if (collection instanceof Array) {\r\n            for (i = 0; i < collection.length; i++) {\r\n                map(i, collection[i]);\r\n            }\r\n        } else {\r\n            keys = Object.keys(collection);\r\n            for (i = 0; i < keys.length; i++) {\r\n                map(keys[i], collection[keys[i]]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfor (var fn in Iterator.prototype) {\r\n    if (Iterator.prototype.hasOwnProperty(fn)) {\r\n        Iterator[fn] = Iterator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Iterator = Iterator;","/**\r\n * For Math!\r\n * @constructor\r\n */\r\nvar Mathinator = function() {\r\n};\r\n\r\n/**\r\n * @param n\r\n * @returns {number}\r\n */\r\nMathinator.square = function(n) {\r\n    return n * n;\r\n};\r\n\r\nMathinator.prototype = {\r\n    identifier : 'Mathinator',\r\n    constructor : Mathinator,\r\n    /**\r\n     * CONST\r\n     */\r\n    RADIAN : Math.PI / 180,\r\n    /**\r\n     * @param offset {{x: number, y: number}}\r\n     * @param angle {number}\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    getAngularOffset : function(offset, angle) {\r\n        var xScalar = offset.x < 0 ? -1 : 1,\r\n            yScalar = offset.y < 0 ? -1 : 1;\r\n        var originalAngle = Math.atan(offset.x / offset.y)/this.RADIAN;\r\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\r\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\r\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\r\n        return {\r\n            x: angledX,\r\n            y: angledY\r\n        };\r\n    },\r\n    /**\r\n     * @param a {Array<Number>}\r\n     * @param b {Array<Number>}\r\n     * @returns {number}\r\n     */\r\n    getPolarDistance : function(a, b) {\r\n        var radians = this.RADIAN;\r\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*radians - b[0]*radians));\r\n    },\r\n    /**\r\n     * @param origin\r\n     * @param target\r\n     * @returns {number}\r\n     * 0 is flat (left-right), positive is clockwise.\r\n     * We use 125 instead of 180 to account for natural hand-height adjustments\r\n     * of various swing heights.\r\n     */\r\n    battingAngle : function(origin, target) {\r\n        return Math.atan((origin.y - target.y)/(target.x - origin.x))/Math.PI * 125;\r\n    },\r\n    memory : {},\r\n    /**\r\n     * @param percent {number} 0-100\r\n     * @param quarter {number} seconds\r\n     * @param step {number} 0 and up\r\n     * @param [givenApexHeight] feet\r\n     * @param [givenDistance] in feet\r\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\r\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\r\n     */\r\n    transitionalTrajectory : function(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\r\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\r\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\r\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\r\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\r\n            distance = Mathinator.prototype.memory.distance,\r\n            splay = Mathinator.prototype.memory.splay;\r\n        var bottom, left, padding, borderWidth;\r\n        var bounding = Mathinator.prototype.memory.bounding,\r\n            radian = this.RADIAN;\r\n\r\n        bottom = Math.cos(splay * radian) * percent/100 * distance * 95/300;\r\n        left = Math.sin(splay * radian) * percent/100 * distance * 95/300 + 190;\r\n\r\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50))/100)*(1/0.7071);\r\n        if (bounding) {\r\n            padding = 1;\r\n            borderWidth = 1;\r\n        } else {\r\n            padding = apexRatio * apexHeight/90 * 15;\r\n            borderWidth = 2 + (apexRatio * 2);\r\n        }\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n        padding = Math.max(Math.min(padding, 40), 0);\r\n        return {\r\n            bottom: bottom,\r\n            left: left,\r\n            padding: padding,\r\n            borderWidth: borderWidth,\r\n            delay: quarter * step,\r\n            ease: bounding ? Power4.easeOut : Linear.easeNone\r\n        };\r\n    },\r\n    /**\r\n     * @param swingResult\r\n     * @returns {Game.swingResult}\r\n     */\r\n    translateSwingResultToStylePosition: function(swingResult) {\r\n        // CF HR bottom: 95px, centerline: left: 190px;\r\n        var bottom, left;\r\n\r\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\r\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\r\n\r\n        bottom = Math.max(Math.min(bottom, 400), -20);\r\n        left = Math.max(Math.min(left, 280), 100);\r\n\r\n        swingResult.bottom = bottom + 'px';\r\n        swingResult.left = left + 'px';\r\n        return swingResult;\r\n    },\r\n    /**\r\n     * @param left {number} 0-200\r\n     * @param top {number} 0-200\r\n     * @param originLeft {number} 0-200\r\n     * @param originTop {number} 0-200\r\n     * @param quarter {number} seconds\r\n     * @returns {Function}\r\n     */\r\n    pitchTransition : function(top, left, originTop, originLeft, quarter) {\r\n        /**\r\n         * @param percent {number} 0-100\r\n         * @param step {number} 0 and up\r\n         * @param [breakTop] {number} 0-200 override\r\n         * @param [breakLeft] {number} 0-200 override\r\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\r\n         */\r\n        return function(percent, step, breakTop, breakLeft) {\r\n            var _top, _left;\r\n            _top = breakTop || top;\r\n            _left = breakLeft || left;\r\n            _top = originTop + Mathinator.square(percent/100)*(_top - originTop);\r\n            _left = originLeft + Mathinator.square(percent/100)*(_left - originLeft);\r\n            var padding = Math.max(Mathinator.square(percent/100)*13, 1),\r\n                borderWidth = Math.max(Mathinator.square(percent/100)*4, 1);\r\n            return {\r\n                top: _top,\r\n                left: _left ,\r\n                padding: padding + 'px',\r\n                borderWidth: borderWidth + 'px',\r\n                transform: 'translateZ(0)',\r\n                delay: quarter * step,\r\n                ease: Linear.easeNone\r\n            };\r\n        };\r\n    },\r\n    /**\r\n     * @param distance {number} feet\r\n     * @param throwing {number} 0-1\r\n     * @param fielding {number} 0-1\r\n     * @param intercept {number} approx. -140 to 140\r\n     * @returns {number} seconds\r\n     */\r\n    fielderReturnDelay : function(distance, throwing, fielding, intercept) {\r\n        return distance/90 // bip distance\r\n            + (distance/90)/(0.5 + throwing/2) // throwing distance\r\n            + 1 - (0.2 + fielding * 0.8) + (9*((distance)/310)*(Math.min(intercept - 120, 0))/-240); // gather time\r\n    },\r\n    /**\r\n     * @param speed {number} 0-100\r\n     * @returns {number} seconds\r\n     */\r\n    baseRunningTime : function(speed) {\r\n        return 6.0 - (speed/100 * 2.2)\r\n    }\r\n};\r\n\r\nfor (var fn in Mathinator.prototype) {\r\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\r\n        Mathinator[fn] = Mathinator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Mathinator = Mathinator;","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';\r\n\r\nexports.AtBat = AtBat;","/**\r\n * The baseball field tracks the ball's movement, fielders, and what runners are on\r\n * @param game\r\n * @constructor\r\n */\r\nvar Field = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nField.prototype = {\r\n    constructor : Field,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.first = null;\r\n        this.second = null;\r\n        this.third = null;\r\n    },\r\n    /**\r\n     * @returns {boolean}\r\n     */\r\n    hasRunnersOn : function() {\r\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\r\n    },\r\n    /**\r\n     * @param swing\r\n     * @returns {object}\r\n     */\r\n    determineSwingContactResult : function(swing) {\r\n        var x = swing.x, y = swing.y;\r\n        /**\r\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\r\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\r\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\r\n         * increase the left/right effect.\r\n         * @type {number}\r\n         */\r\n        var splayAngle = 90 - 1.5*x + (swing.angle * y/35);\r\n        var flyAngle = -3*y - (swing.angle * y/35);\r\n        var power = this.game.batter.skill.offense.power + (this.game.batter.eye.bonus || 0)/5;\r\n        var landingDistance = Distribution.landingDistance(power, flyAngle);\r\n        if (flyAngle < 0 && landingDistance > 120) {\r\n            landingDistance = (landingDistance - 120)/4 + 120;\r\n        }\r\n\r\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\r\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\r\n        swing.travelDistance = landingDistance;\r\n        swing.flyAngle = flyAngle;\r\n        /**\r\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\r\n         * @type {number}\r\n         */\r\n        swing.splay = splayAngle - 90;\r\n        swing.sacrificeAdvances = [];\r\n\r\n        if (swing.fielder) {\r\n            var fielder = (this.game.half == 'top' ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\r\n            fielder.fatigue += 4;\r\n            swing.error = false;\r\n            var fieldingEase = fielder.skill.defense.fielding/100,\r\n                throwingEase = (fielder.skill.defense.throwing/100);\r\n            //reach the batted ball?\r\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\r\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\r\n            if (interceptRating > 0 && flyAngle > -10) {\r\n                //caught cleanly?\r\n                if (Distribution.error(fielder)) { //error\r\n                    fieldingEase *= 0.5;\r\n                    swing.error = true;\r\n                    swing.caught = false;\r\n                } else {\r\n                    swing.caught = true;\r\n                    var sacrificeThrowInTime = Mathinator.fielderReturnDelay(\r\n                        swing.travelDistance, throwingEase, fieldingEase, 100\r\n                    );\r\n                    if (this.first && sacrificeThrowInTime > this.first.getBaseRunningTime() + 1.5) {\r\n                        swing.sacrificeAdvances.push('first');\r\n                    }\r\n                    if (this.second && sacrificeThrowInTime > this.second.getBaseRunningTime()) {\r\n                        swing.sacrificeAdvances.push('second');\r\n                    }\r\n                    if (this.third && sacrificeThrowInTime > this.third.getBaseRunningTime() - 0.5) {\r\n                        swing.sacrificeAdvances.push('third');\r\n                    }\r\n                }\r\n            } else {\r\n                swing.caught = false;\r\n            }\r\n\r\n            if (!swing.caught) {\r\n                swing.bases = 0;\r\n                swing.thrownOut = false; // default value\r\n                var fieldingReturnDelay = Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, interceptRating);\r\n                swing.fieldingDelay = fieldingReturnDelay;\r\n                swing.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\r\n                var speed = this.game.batter.skill.offense.speed,\r\n                    baseRunningTime = Mathinator.baseRunningTime(speed);\r\n\r\n                if (swing.outFielder) {\r\n                    //log('OF', fieldingReturnDelay.toString().slice(0,4), baseRunningTime.toString().slice(0,4));\r\n                    swing.bases = 1;\r\n                    fieldingReturnDelay -= baseRunningTime;\r\n                    var difficulty = 1.8;\r\n\r\n                    while (fieldingReturnDelay > baseRunningTime + difficulty && swing.bases < 3) {\r\n                        swing.bases++;\r\n                        difficulty = -1.3;\r\n                        fieldingReturnDelay -= baseRunningTime;\r\n                    }\r\n                } else {\r\n                    //log('-------- IF', fieldingReturnDelay.toString().slice(0,4), baseRunningTime.toString().slice(0,4));\r\n                    swing.fieldersChoice = null;\r\n                    swing.bases = fieldingReturnDelay >= baseRunningTime + 1 ? 1 : 0;\r\n                    if (this.first && fieldingReturnDelay < this.first.getBaseRunningTime()) swing.fieldersChoice = 'first';\r\n                    if (this.second && fieldingReturnDelay < this.second.getBaseRunningTime() + 0.6) swing.fieldersChoice = 'second';\r\n                    if (this.third && fieldingReturnDelay < this.third.getBaseRunningTime()) swing.fieldersChoice = 'third';\r\n                    if (swing.fieldersChoice) swing.bases = 1;\r\n                }\r\n                swing.thrownOut = swing.bases == 0;\r\n                if (swing.thrownOut) {\r\n                    swing.thrownOut = true;\r\n                    swing.error = false;\r\n                }\r\n            }\r\n        } else {\r\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\r\n                swing.bases = 4;\r\n            } else {\r\n                swing.foul = true;\r\n                swing.caught = false;\r\n            }\r\n        }\r\n        this.game.swingResult = swing;\r\n        return Animator.animateFieldingTrajectory(this.game);\r\n    },\r\n    //printRunnerNames : function() {\r\n    //    return [this.first ? this.first.getName() : '', this.second ? this.second.getName() : '', this.third ? this.third.getname() : ''];\r\n    //},\r\n    /**\r\n     * @param splayAngle\r\n     * @param landingDistance\r\n     * @returns {string|bool}\r\n     */\r\n    findFielder : function(splayAngle, landingDistance) {\r\n        if (Math.abs(90 - splayAngle) > 50) return false;\r\n        if (landingDistance < 10 && landingDistance > -20) {\r\n            return 'catcher';\r\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\r\n            return 'pitcher';\r\n        }\r\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\r\n            if (splayAngle < 45 + 23) {\r\n                return 'third';\r\n            } else if (splayAngle < 45 + 23 + 23) {\r\n                return 'short';\r\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\r\n                return 'second';\r\n            } else {\r\n                return 'first';\r\n            }\r\n        } else if (landingDistance > 90 && landingDistance < 310) {\r\n            if (splayAngle < 45 + 28) {\r\n                return 'left';\r\n            } else if (splayAngle < 45 + 28 + 34) {\r\n                return 'center';\r\n            } else {\r\n                return 'right';\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n    positions : {\r\n        pitcher : [90, 66],\r\n        catcher : [0, 0],\r\n        first : [90 + 45 - 7, 98],\r\n        second : [90 + 12.5, 130],\r\n        short : [90 - 12.5, 130],\r\n        third : [90 - 45 + 7, 98],\r\n        left : [45 + 14, 280],\r\n        center : [90, 280],\r\n        right : [135 - 14, 280]\r\n    },\r\n    getPolarDistance : function(a, b) {\r\n        return Mathinator.getPolarDistance(a, b);\r\n    },\r\n    fieldingTest : function() {\r\n        var angle = Math.random()*90+45;\r\n        var distance = Math.random()*320;\r\n        var fielder = this.findFielder(angle, distance);\r\n        var data = {};\r\n        if (fielder) {\r\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\r\n                data.fielder = fielderCandidates[1];\r\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\r\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]]);\r\n            return data;\r\n        }\r\n    },\r\n    aggregateFieldingTest : function() {\r\n        var fielders = {\r\n            pitcher : {tally : 0, distances : []},\r\n            catcher : {tally : 0, distances : []},\r\n            first : {tally : 0, distances : []},\r\n            second : {tally : 0, distances : []},\r\n            short : {tally : 0, distances : []},\r\n            third : {tally : 0, distances : []},\r\n            left : {tally : 0, distances : []},\r\n            center : {tally : 0, distances : []},\r\n            right : {tally : 0, distances : []},\r\n            'false' : {tally : 0, distances : []}\r\n        };\r\n        var selections = [];\r\n        for (var i = 0; i < 1000; i++) {\r\n            var angle = Math.random()*90+45;\r\n            var distance = Math.random()*320;\r\n            var fielder = this.findFielder(angle, distance);\r\n            fielders[fielder].tally++;\r\n            if (fielder) {\r\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\r\n            }\r\n            selections.push([angle, distance]);\r\n            selections.push(this.fielderSelectionTest(angle, distance, true));\r\n        }\r\n        return [fielders, selections];\r\n    },\r\n    fielderSelectionTest : function(angle, distance, returnFielder) {\r\n        var distances = [];\r\n        var minDistance = 300;\r\n        var giraffe = this;\r\n        var fielder = false;\r\n        Iterator.each(this.positions, function(position, spot) {\r\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\r\n            distances[thisDistance] = position;\r\n            if (minDistance > thisDistance) {\r\n                minDistance = thisDistance;\r\n                fielder = position;\r\n            }\r\n        });\r\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\r\n    }\r\n};\r\n\r\nexports.Field = Field;","var Game = function(m) {\r\n    this.init(m);\r\n};\r\n\r\nGame.prototype = {\r\n    constructor : Game,\r\n    gamesIntoSeason : 0,\r\n    humanControl : 'none', //home, away, both, none\r\n    console : false,\r\n    quickMode : true,\r\n    debug : [],\r\n    init : function(m) {\r\n        if (m) window.mode = m;\r\n        this.gamesIntoSeason = 1 + Math.floor(Math.random()*142);\r\n        this.field = new Field(this);\r\n        this.teams.away = new Team(this);\r\n        this.teams.home = new Team(this);\r\n        this.log = new Log();\r\n        this.log.game = this;\r\n        this.debug = [];\r\n        this.helper = helper;\r\n        while (this.teams.away.name == this.teams.home.name) {\r\n            this.teams.away.pickName();\r\n        }\r\n        this.umpire = new Umpire(this);\r\n        if (this.humanPitching()) {\r\n            this.stage = 'pitch';\r\n        }\r\n    },\r\n    getInning : function() {\r\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\r\n    },\r\n    humanBatting : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n        }\r\n    },\r\n    humanPitching : function() {\r\n        if (this.humanControl == 'none') return false;\r\n        switch (this.half) {\r\n            case 'top':\r\n                return this.humanControl == 'both' || this.humanControl == 'home';\r\n            case 'bottom':\r\n                return this.humanControl == 'both' || this.humanControl == 'away';\r\n        }\r\n    },\r\n    end : function() {\r\n        this.stage = 'end';\r\n        var e, n;\r\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' :\r\n            (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\r\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName()+'の勝利' :\r\n            (this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName()+'の勝利');\r\n        this.log.note(e, n);\r\n    },\r\n    stage : 'pitch', //pitch, swing\r\n    simulateInput : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch') {\r\n            this.autoPitch(callback);\r\n        } else if (this.stage == 'swing') {\r\n            if (typeof this.pitchTarget != 'object') {\r\n                this.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\r\n        }\r\n    },\r\n    simulatePitchAndSwing : function(callback) {\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        this.autoPitch(callback);\r\n        var giraffe = this;\r\n        setTimeout(function() {\r\n            if (typeof giraffe.pitchTarget != 'object') {\r\n                giraffe.pitchTarget = {x: 100, y: 100};\r\n            }\r\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback();});\r\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\r\n    },\r\n    /**\r\n     * generically receive click input and decide what to do\r\n     * @param x\r\n     * @param y\r\n     * @param callback\r\n     */\r\n    receiveInput : function(x, y, callback) {\r\n        if (this.humanControl == 'none') {\r\n            return;\r\n        }\r\n        if (this.stage == 'end') {\r\n            return;\r\n        }\r\n        if (this.stage == 'pitch' && this.humanPitching()) {\r\n            this.thePitch(x, y, callback);\r\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\r\n            this.theSwing(x, y, callback);\r\n        }\r\n    },\r\n    autoPitchSelect : function() {\r\n        var pitchName = this.helper.selectRandomPitch();\r\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\r\n            pitchName = this.helper.selectRandomPitch();\r\n        }\r\n        var pitch = this.pitcher.pitching[pitchName];\r\n        pitch.name = pitchName;\r\n        this.pitchInFlight = pitch;\r\n    },\r\n    autoPitch : function(callback) {\r\n        var pitcher = this.pitcher,\r\n            giraffe = this;\r\n        if (this.stage == 'pitch') {\r\n            pitcher.windingUp = true;\r\n            if (!this.console) {\r\n                jQ('.baseball').addClass('hide');\r\n                var windup = jQ('.windup');\r\n                windup.css('width', '100%');\r\n            }\r\n            this.autoPitchSelect();\r\n            var pitch = Distribution.pitchLocation(),\r\n                x = pitch.x,\r\n                y = pitch.y;\r\n            if (this.quickMode) {\r\n                this.thePitch(x, y, callback);\r\n            } else {\r\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\r\n                    !giraffe.console && jQ('.baseball.pitch').removeClass('hide');\r\n                    giraffe.thePitch(x, y, callback);\r\n                    pitcher.windingUp = false;\r\n                });\r\n            }\r\n        }\r\n    },\r\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\r\n        var giraffe = this;\r\n        var bonus = this.batter.eye.bonus || 0,\r\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus,\r\n            convergence, convergenceSum;\r\n\r\n        var x = Distribution.centralizedNumber(),\r\n            y = Distribution.centralizedNumber();\r\n        if (100*Math.random() < eye) {\r\n            convergence = 1.35 * 5*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n            deceptiveX = this.pitchInFlight.x;\r\n            deceptiveY = this.pitchInFlight.y;\r\n        } else {\r\n            convergence = 1.35 * 2*eye/100;\r\n            convergenceSum = 1 + convergence;\r\n        }\r\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\r\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\r\n\r\n        this.swingResult.x = Distribution.cpuSwing(x, this.pitchInFlight.x, eye);\r\n        this.swingResult.y = Distribution.cpuSwing(y, this.pitchInFlight.y, eye);\r\n\r\n        var swingProbability = Distribution.swingLikelihood(eye, x, y, this.umpire);\r\n        if (swingProbability < 100*Math.random()) {\r\n            x = -20;\r\n        }\r\n\r\n        callback(function() {\r\n            giraffe.theSwing(x, y);\r\n        });\r\n    },\r\n    thePitch : function(x, y, callback) {\r\n        if (this.stage == 'pitch') {\r\n            this.pitcher.fatigue++;\r\n            this.pitchTarget.x = x;\r\n            this.pitchTarget.y = y;\r\n\r\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\r\n            this.battersEye = text.getBattersEye(this);\r\n\r\n            var control = this.pitchInFlight.control;\r\n            this.pitchTarget.x = Distribution.pitchControl(this.pitchTarget.x, control);\r\n            this.pitchTarget.y = Distribution.pitchControl(this.pitchTarget.y, control);\r\n\r\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\r\n\r\n            var breakEffect = Distribution.breakEffect(this.pitchInFlight, this.pitchTarget.x, this.pitchTarget.y);\r\n\r\n            this.pitchInFlight.x = breakEffect.x;\r\n            this.pitchInFlight.y = breakEffect.y;\r\n\r\n            this.log.notePitch(this.pitchInFlight, this.batter);\r\n\r\n            this.stage = 'swing';\r\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\r\n                callback();\r\n            } else {\r\n                this.autoSwing(x, y, callback);\r\n            }\r\n        }\r\n    },\r\n    battersEye : {\r\n        e: '',\r\n        n: ''\r\n    },\r\n    theSwing : function(x, y, callback) {\r\n        if (this.stage == 'swing') {\r\n            this.swingResult = {};\r\n            var bonus = this.batter.eye.bonus || 0,\r\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\r\n\r\n            if (x >= 0 && x <= 200) {\r\n                this.batter.fatigue++;\r\n\r\n                this.swingResult.x = x - this.pitchInFlight.x;\r\n                this.swingResult.y = y - this.pitchInFlight.y;\r\n                this.swingResult.angle = this.setBatAngle();\r\n\r\n                var recalculation = Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\r\n                var precision = Distribution.swing(eye);\r\n\r\n                this.swingResult.x = Math.abs(recalculation.x) > 20 ? recalculation.x * precision : recalculation.x;\r\n                this.swingResult.y = -5 + (recalculation.y < 0 ? recalculation.y * precision : recalculation.y);\r\n\r\n                //log(recalculation.y, precision);\r\n\r\n                this.swingResult.looking = false;\r\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\r\n                    this.swingResult.contact = true;\r\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\r\n                    // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\r\n                    this.debug.push(this.swingResult);\r\n                } else {\r\n                    this.swingResult.contact = false;\r\n                }\r\n            } else {\r\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\r\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\r\n                this.batter.eye.bonus = Math.max(0, eye -\r\n                    Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\r\n                this.swingResult.contact = false;\r\n                this.swingResult.looking = true;\r\n                this.batter.eye.x = this.pitchInFlight.x;\r\n                this.batter.eye.y = this.pitchInFlight.y;\r\n            }\r\n\r\n            this.log.noteSwing(this.swingResult);\r\n            this.stage = 'pitch';\r\n\r\n            var half = this.half;\r\n            this.umpire.makeCall();\r\n            if (half != this.half) {\r\n                callback = this.startOpponentPitching;\r\n            }\r\n\r\n            if (typeof callback == 'function') {\r\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\r\n                    callback();\r\n                } else {\r\n                    this.autoPitch(callback);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    setBatAngle : function(x, y) {\r\n        var giraffe = this;\r\n        var origin = {\r\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\r\n            y: 160\r\n        };\r\n        var swing = {\r\n            x: x ? x : giraffe.pitchInFlight.x + this.swingResult.x,\r\n            y: y ? y : giraffe.pitchInFlight.y + this.swingResult.y\r\n        };\r\n        return Mathinator.battingAngle(origin, swing);\r\n    },\r\n    debugOut : function() {\r\n        log('slugging', this.debug.filter(function(a){return a.bases == 1;}).length,\r\n            this.debug.filter(function(a){return a.bases == 2;}).length,\r\n            this.debug.filter(function(a){return a.bases == 3;}).length,\r\n            this.debug.filter(function(a){return a.bases == 4;}).length\r\n        );\r\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle < -5;}).length);\r\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle < -5 && a.thrownOut;}).length);\r\n        log('weak fly hits (thrown out)', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle > 0 && a.thrownOut;}).length);\r\n        log('good fly hits (not caught)', this.debug.filter(function(a){return !a.caught && !a.foul && a.flyAngle > 0 && !a.thrownOut;}).length);\r\n\r\n        var PO = {};\r\n        this.debug.map(function(a) {\r\n            if (!PO[a.fielder]) {\r\n                PO[a.fielder] = 0;\r\n            }\r\n            if (!a.bases && a.fielder) {\r\n                PO[a.fielder]++;\r\n            }\r\n        });\r\n        log('fielding outs', PO);\r\n\r\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\r\n        var atBats = [];\r\n        hitters.map(function(a) {atBats = atBats.concat(a.atBats);});\r\n\r\n        var LO = atBats.filter(function(ab) {return ab == 'LO';}).length;\r\n        log('line outs', LO);\r\n        var FO = atBats.filter(function(ab) {return ab == 'FO';}).length;\r\n        log('fly outs', FO);\r\n        var GO = atBats.filter(function(ab) {return ab == 'GO';}).length;\r\n        log('groundouts', GO);\r\n        var SO = atBats.filter(function(ab) {return ab == 'SO';}).length;\r\n        log('strikeouts', SO);\r\n        log('fouls', this.debug.filter(function(a){return a.foul;}).length);\r\n    },\r\n    startOpponentPitching : null, // late function\r\n    pitchTarget : {x : 100, y : 100},\r\n    pitchInFlight : {\r\n        x : 100,\r\n        y : 100,\r\n        breakDirection : [0, 0],\r\n        name : 'slider',\r\n        velocity : 50,\r\n        'break' : 50,\r\n        control : 50\r\n    },\r\n    swingResult : {\r\n        x : 100, //difference to pitch location\r\n        y : 100, //difference to pitch location\r\n        strike : false,\r\n        foul : false,\r\n        caught : false,\r\n        contact : false,\r\n        looking : true,\r\n        bases : 0,\r\n        fielder : 'short',\r\n        outs : 0\r\n    },\r\n    pitchSelect : function() {\r\n\r\n    },\r\n    field : null,\r\n    teams : {\r\n        away : null,\r\n        home : null\r\n    },\r\n    log : null,\r\n    half : 'top',\r\n    inning : 1,\r\n    scoreboard : {\r\n        away : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        },\r\n        home : {\r\n            1 : 0,\r\n            2 : 0,\r\n            3 : 0,\r\n            4 : 0,\r\n            5 : 0,\r\n            6 : 0,\r\n            7 : 0,\r\n            8 : 0,\r\n            9 : 0\r\n        }\r\n    },\r\n    tally : {\r\n        away : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        },\r\n        home : {\r\n            H : 0,\r\n            R : 0,\r\n            E : 0\r\n        }\r\n    }\r\n};\r\n\r\nexports.Game = Game;","var Manager = function(team) {\r\n    this.init(team);\r\n};\r\n\r\nManager.prototype = {\r\n    constructor : Manager,\r\n    init : function(team) {\r\n        this.team = team;\r\n    },\r\n    makeLineup : function() {\r\n        var jerseyNumber = 1;\r\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\r\n        this.team.positions.pitcher.position = 'pitcher';\r\n        this.team.positions.pitcher.number = jerseyNumber++;\r\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\r\n        this.team.positions.catcher.position = 'catcher';\r\n        this.team.positions.catcher.number = jerseyNumber++;\r\n        Iterator.each(this.team.bench, function(key, player) {\r\n            player.number = jerseyNumber++;\r\n        });\r\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.short.position = 'short';\r\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.second.position = 'second';\r\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\r\n        this.team.positions.third.position = 'third';\r\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.center.position = 'center';\r\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.left.position = 'left';\r\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\r\n        this.team.positions.right.position = 'right';\r\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\r\n        this.team.positions.first.position = 'first';\r\n\r\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[3].order = 3;\r\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[2].order = 2;\r\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\r\n        this.team.lineup[4].order = 4;\r\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[0].order = 0;\r\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[1].order = 1;\r\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[5].order = 5;\r\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[6].order = 6;\r\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\r\n        this.team.lineup[7].order = 7;\r\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\r\n        this.team.lineup[8].order = 8;\r\n    },\r\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\r\n        mustBeRightHanded = !!mustBeRightHanded;\r\n        if (this.team.bench.length || pool == this.team.positions) {\r\n            var selection = this.team.bench[0];\r\n            var rating = 0;\r\n            var index = 0;\r\n            Iterator.each(pool, function(key, player) {\r\n                var skills = skillset.slice();\r\n                var cursor = player.skill;\r\n                var property = skills.shift();\r\n                while (property) {\r\n                    cursor = cursor[property];\r\n                    property = skills.shift();\r\n                }\r\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\r\n                    rating = cursor;\r\n                    selection = player;\r\n                    index = key;\r\n                }\r\n            });\r\n            if (pool == this.team.bench) {\r\n                delete this.team.bench[index];\r\n                this.team.bench = this.team.bench.filter(function(player) {\r\n                    return player instanceof selection.constructor;\r\n                });\r\n            }\r\n            return selection;\r\n        }\r\n        return 'no players available';\r\n    }\r\n};\r\n\r\nexports.Manager = Manager;","var Player = function(team) {\r\n    this.init(team);\r\n    var offense = this.skill.offense;\r\n    var defense = this.skill.defense;\r\n    var randBetween = function(a, b, skill) {\r\n        if (offense[skill]) skill = offense[skill];\r\n        if (defense[skill]) skill = defense[skill];\r\n        if (isNaN(skill)) skill = 50;\r\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\r\n        return Math.floor((skill/100) * (b - a) + a);\r\n    };\r\n    // let's just say we're about X games into the season\r\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\r\n    var IP, ER, GS, W, L;\r\n    if (this.skill.pitching > 65) {\r\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\r\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\r\n        if (IP > gamesIntoSeason) {\r\n            //starter\r\n            GS = Math.floor(gamesIntoSeason/5);\r\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\r\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\r\n        } else {\r\n            //reliever\r\n            GS = Math.floor(gamesIntoSeason/40);\r\n            W = randBetween(0, GS*0.6, this.skill.pitching);\r\n            L = randBetween((GS - W), 0, this.skill.pitching);\r\n        }\r\n    }\r\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\r\n    var paRemaining = pa;\r\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\r\n    paRemaining -= bb;\r\n    var ab = paRemaining;\r\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\r\n    paRemaining -= so;\r\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\r\n    paRemaining -= h;\r\n\r\n    var doubles = randBetween(0, h/4, 'power');\r\n    var triples = randBetween(0, h/12, 'speed');\r\n    var hr = Math.max(0, randBetween(-h/20, h/5, 'power'));\r\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\r\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\r\n    var hbp = randBetween(0, gamesIntoSeason/25);\r\n    var sac = randBetween(0, gamesIntoSeason/5, 'eye');\r\n\r\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\r\n    var E = randBetween(chances/10, 0, 'fielding');\r\n    var PO = chances - E;\r\n\r\n    this.stats = {\r\n        pitching : {\r\n            pitches : 0, // in game\r\n            GS : GS,\r\n            W: W,\r\n            L: L,\r\n            strikes : 0, // in game\r\n            K : 0, // in game\r\n            getERA : function() {\r\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3);\r\n            },\r\n            ERA : null,\r\n            ER : ER,\r\n            H : 0, // in game\r\n            HR : 0, // in game\r\n            BB : 0, // in game\r\n            IP : [IP,0]\r\n        },\r\n        batting : {\r\n            getBA : function() {\r\n                return this.h / (Math.max(1, this.ab));\r\n            },\r\n            ba : null,\r\n            getOBP : function() {\r\n                return (this.h + this.bb + this.hbp)/(this.ab + this.bb + this.hbp + this.sac);\r\n            },\r\n            obp : null,\r\n            getSLG : function() {\r\n                return ((this.h - this['2b'] - this['3b'] - this.hr) + 2*this['2b'] + 3*this['3b'] + 4*this.hr)/this.ab;\r\n            },\r\n            slg : null,\r\n            pa : pa,\r\n            ab : ab,\r\n            so : so,\r\n            bb : bb,\r\n            h : h,\r\n            '2b' : doubles,\r\n            '3b' : triples,\r\n            hr : hr,\r\n            r : r,\r\n            rbi : rbi,\r\n            hbp : hbp,\r\n            sac : sac\r\n        },\r\n        fielding : {\r\n            E : E,\r\n            PO : PO, // should depend on position\r\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\r\n        }\r\n    };\r\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\r\n    this.stats.batting.ba = this.stats.batting.getBA();\r\n};\r\n\r\nPlayer.prototype = {\r\n    constructor : Player,\r\n    init : function(team, hero) {\r\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\r\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\r\n        this.team = team;\r\n        this.skill = {};\r\n        this.eye = {\r\n            x: 100,\r\n            y: 100\r\n        };\r\n        this.pitching = {averaging : []};\r\n        this.number = 0;\r\n        this.randomizeSkills(hero || Math.random() > 0.9);\r\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\r\n            nameKey = Math.floor(Math.random()*data.names.length);\r\n\r\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\r\n        var jSurname = data.surnamesJ[surnameKey],\r\n            jGivenName = data.namesJ[nameKey];\r\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\r\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\r\n        this.nameJ = jSurname + jGivenName;\r\n        this.surname = data.surnames[surnameKey];\r\n        this.surnameJ = data.surnamesJ[surnameKey];\r\n        this.atBats = [];\r\n    },\r\n    atBatObjects : [],\r\n    getAtBats : function() {\r\n        if (this.atBats.length > this.atBatObjects.length) {\r\n            this.atBatObjects = this.atBats.map(function(item) {\r\n                return new AtBat(item);\r\n            });\r\n        }\r\n        return this.atBatObjects;\r\n    },\r\n    recordRBI : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\r\n    },\r\n    recordInfieldHit : function() {\r\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\r\n    },\r\n    getBaseRunningTime : function() {\r\n        return Mathinator.baseRunningTime(this.skill.offense.speed);\r\n    },\r\n    randomizeSkills : function(hero) {\r\n        this.hero = hero;\r\n        var giraffe = this;\r\n        var randValue = function(isPitching) {\r\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\r\n            if (hero) {\r\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\r\n            }\r\n            if (isPitching) giraffe.pitching.averaging.push(value);\r\n            return value;\r\n        };\r\n        this.skill.offense = {\r\n            eye : randValue(),\r\n            power : randValue(),\r\n            speed : randValue()\r\n        };\r\n        this.skill.defense = {\r\n            catching : randValue(),\r\n            fielding : randValue(),\r\n            speed : randValue(),\r\n            throwing : randValue()\r\n        };\r\n        this.pitching.averaging = [];\r\n        this.pitching['4-seam'] = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        this.pitching.slider = {\r\n            velocity : randValue(true),\r\n            'break' : randValue(true),\r\n            control : randValue(true)\r\n        };\r\n        if (Math.random() < 0.17) {\r\n            // can pitch!\r\n            if (Math.random() > 0.6) {\r\n                this.pitching['2-seam'] = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n            if (Math.random() < 0.18) {\r\n                this.pitching.fork = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n            if (Math.random() > 0.77) {\r\n                this.pitching.cutter = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n            if (Math.random() < 0.21) {\r\n                this.pitching.sinker = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n\r\n            if (Math.random() < 0.4) {\r\n                this.pitching.curve = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n\r\n            if (Math.random() < 0.9) {\r\n                this.pitching.change = {\r\n                    velocity : randValue(true),\r\n                    'break' : randValue(true),\r\n                    control : randValue(true)\r\n                };\r\n            }\r\n        }\r\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current) {\r\n            return prev + current;\r\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\r\n        delete this.pitching.averaging;\r\n    },\r\n    getSurname : function() {\r\n        return mode == 'n' ? this.surnameJ : this.surname;\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    getUniformNumber : function() {\r\n        return text('#') + this.number;\r\n    },\r\n    getOrder : function() {\r\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\r\n    },\r\n    eye : {},\r\n    fatigue : 0,\r\n    name : '',\r\n    number : 0,\r\n    position : '',\r\n    atBats : []\r\n};\r\n\r\nexports.Player = Player;","var Team = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nTeam.prototype = {\r\n    constructor : Team,\r\n    init : function(game) {\r\n        this.pickName();\r\n        this.lineup = [];\r\n        this.bench = [];\r\n        this.bullpen = [];\r\n        this.positions = {\r\n            pitcher : null,\r\n            catcher : null,\r\n            first : null,\r\n            second : null,\r\n            short : null,\r\n            third : null,\r\n            left : null,\r\n            center : null,\r\n            right : null\r\n        };\r\n        this.game = game;\r\n        for (var j = 0; j < 20; j++) {\r\n            this.bench.push(new Player(this));\r\n        }\r\n        if (this.bench.length == 20) {\r\n            this.manager = new Manager(this);\r\n            this.manager.makeLineup();\r\n        }\r\n    },\r\n    pickName : function() {\r\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\r\n        this.name = data.teamNames[teamNameIndex];\r\n        this.nameJ = data.teamNamesJ[teamNameIndex];\r\n    },\r\n    getName : function() {\r\n        return mode == 'n' ? this.nameJ : this.name;\r\n    },\r\n    lineup : [],\r\n    positions : {},\r\n    manager : null,\r\n    bench : [],\r\n    bullpen : [],\r\n    nowBatting : 0,\r\n    expanded : 'Player&'\r\n};\r\n\r\nexports.Team = Team;","var Umpire = function(game) {\r\n    this.init(game);\r\n};\r\n\r\nUmpire.prototype = {\r\n    constructor : Umpire,\r\n    init : function(game) {\r\n        this.game = game;\r\n        this.playBall();\r\n    },\r\n    count : {\r\n        strikes : 0,\r\n        balls : 0,\r\n        outs : 0\r\n    },\r\n    playBall : function() {\r\n        this.game.half = 'top';\r\n        this.game.inning = 1;\r\n        this.game.batter = this.game.teams.away.lineup[0];\r\n        this.game.batterRunner = this.game.teams.away.lineup[0];\r\n        this.game.deck = this.game.teams.away.lineup[1];\r\n        this.game.hole = this.game.teams.away.lineup[2];\r\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\r\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\r\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\r\n        this.game.log.note(e, n);\r\n        this.game.log.noteBatter(\r\n            this.game.batter\r\n        );\r\n    },\r\n    makeCall : function() {\r\n        this.says = '';\r\n\r\n        var result = this.game.swingResult;\r\n        var pitcher = this.game.pitcher;\r\n        var batter = this.game.batter;\r\n\r\n        if (this.game.swingResult.fielder) {\r\n            var fielder = this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder]\r\n        } else {\r\n            fielder = null;\r\n        }\r\n\r\n        this.game.batterRunner = this.game.batter;\r\n\r\n        pitcher.stats.pitching.pitches++;\r\n        if (result.looking) {\r\n            if (result.strike) {\r\n                this.count.strikes++;\r\n                pitcher.stats.pitching.strikes++;\r\n            } else {\r\n                this.count.balls++;\r\n            }\r\n        } else {\r\n            if (result.contact) {\r\n                if (result.caught) {\r\n                    batter.stats.batting.pa++;\r\n                    pitcher.stats.pitching.IP[1]++;\r\n                    if (result.sacrificeAdvances.length && this.count.outs < 2) {\r\n                        batter.stats.batting.sac++;\r\n                        this.game.batter.atBats.push(Log.prototype.SACRIFICE);\r\n                        this.advanceRunners(false, null, result.sacrificeAdvances);\r\n                    } else {\r\n                        batter.stats.batting.ab++;\r\n                        if (result.flyAngle < 10) {\r\n                            this.game.batter.atBats.push(Log.prototype.LINEOUT);\r\n                        } else {\r\n                            this.game.batter.atBats.push(Log.prototype.FLYOUT);\r\n                        }\r\n                    }\r\n                    this.count.outs++;\r\n                    this.newBatter();\r\n                } else {\r\n                    if (result.foul) {\r\n                        this.count.strikes++;\r\n                        pitcher.stats.pitching.strikes++;\r\n                        if (this.count.strikes > 2) this.count.strikes = 2;\r\n                    } else {\r\n                        batter.stats.batting.pa++;\r\n                        batter.stats.batting.ab++;\r\n                        if (result.fieldersChoice && this.count.outs < 2) {\r\n                            result.bases = 0;\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.FIELDERS_CHOICE);\r\n                            this.advanceRunners(false, result.fieldersChoice);\r\n                            this.reachBase();\r\n                            this.newBatter();\r\n                        } else if (result.fieldersChoice) {\r\n                            result.thrownOut = true;\r\n                        }\r\n                        if (result.thrownOut) {\r\n                            this.count.outs++;\r\n                            pitcher.stats.pitching.IP[1]++;\r\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                            if (this.count.outs < 3) {\r\n                                this.advanceRunners(false);\r\n                            }\r\n                            this.newBatter();\r\n                        }\r\n                        if (result.hitByPitch) {\r\n                            batter.stats.batting.ab--;\r\n                        }\r\n                        if (result.bases) {\r\n                            if (!result.error) {\r\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\r\n                                pitcher.stats.pitching.H++;\r\n                            } else {\r\n                                if (result.bases > 0) {\r\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away'].E++;\r\n                                    fielder.stats.fielding.E++;\r\n                                }\r\n                            }\r\n                            var bases = result.bases;\r\n                            switch (bases) {\r\n                                case 0 :\r\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\r\n                                    break;\r\n                                case 1 :\r\n                                    if (result.error) {\r\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\r\n                                    } else {\r\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\r\n                                        batter.stats.batting.h++;\r\n                                    }\r\n                                    break;\r\n                                case 2 :\r\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['2b']++;\r\n                                    break;\r\n                                case 3 :\r\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting['3b']++;\r\n                                    break;\r\n                                case 4 :\r\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\r\n                                    pitcher.stats.pitching.HR++;\r\n                                    batter.stats.batting.h++;\r\n                                    batter.stats.batting.hr++;\r\n                                    break;\r\n                            }\r\n                            if (bases > 0 && bases < 4 && !result.error) {\r\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\r\n                                    batter.recordInfieldHit();\r\n                                }\r\n                            }\r\n                            if (bases >= 1) {\r\n                                this.advanceRunners();\r\n                                this.reachBase();\r\n                                bases -= 1;\r\n                            }\r\n                            while (bases > 0) {\r\n                                bases -= 1;\r\n                                this.advanceRunners();\r\n                            }\r\n                            this.newBatter();\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                pitcher.stats.pitching.strikes++;\r\n                this.count.strikes++;\r\n            }\r\n        }\r\n\r\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\r\n\r\n        if (this.count.strikes > 2) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.ab++;\r\n            batter.stats.batting.so++;\r\n            pitcher.stats.pitching.K++;\r\n            this.count.outs++;\r\n            pitcher.stats.pitching.IP[1]++;\r\n            this.count.balls = this.count.strikes = 0;\r\n            this.says = 'Strike three. Batter out.';\r\n            batter.atBats.push(Log.prototype.STRIKEOUT);\r\n            this.newBatter();\r\n        }\r\n        if (this.count.balls > 3) {\r\n            batter.stats.batting.pa++;\r\n            batter.stats.batting.bb++;\r\n            pitcher.stats.pitching.BB++;\r\n            this.says = 'Ball four.';\r\n            this.count.balls = this.count.strikes = 0;\r\n            batter.atBats.push(Log.prototype.WALK);\r\n            this.advanceRunners(true).reachBase().newBatter();\r\n        }\r\n        if (this.count.outs > 2) {\r\n            this.says = 'Three outs, change.';\r\n            this.count.outs = this.count.balls = this.count.strikes = 0;\r\n            pitcher.stats.pitching.IP[0]++;\r\n            pitcher.stats.pitching.IP[1] = 0;\r\n            this.changeSides();\r\n        }\r\n    },\r\n    reachBase : function() {\r\n        this.game.field.first = this.game.batter;\r\n        this.game.field.first.fatigue += 2;\r\n        return this;\r\n    },\r\n    advanceRunners : function(isWalk, fieldersChoice, sacrificeAdvances) {\r\n        isWalk = !!isWalk;\r\n        var first = this.game.field.first,\r\n            second = this.game.field.second,\r\n            third = this.game.field.third,\r\n            game = this.game;\r\n        \r\n        if (isWalk) {\r\n            if (first) {\r\n                if (second) {\r\n                    if (third) {\r\n                        //bases loaded\r\n                        game.batter.recordRBI();\r\n                        game.batter.stats.batting.rbi++;\r\n                        third.atBats.push(Log.prototype.RUN);\r\n                        third.stats.batting.r++;\r\n                        game.pitcher.stats.pitching.ER++;\r\n                        game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\r\n                        game.tally[game.half == 'top' ? 'away' : 'home'].R++;\r\n                        game.field.third = second;\r\n                        game.field.second = first;\r\n                        first = null;\r\n                    } else {\r\n                        // 1st and second\r\n                        game.field.third = second;\r\n                        game.field.second = first;\r\n                        game.field.first = null;\r\n                    }\r\n                } else {\r\n                    if (third) {\r\n                        // first and third\r\n                        game.field.second = first;\r\n                        game.field.first = null;\r\n                    } else {\r\n                        // first only\r\n                        game.field.second = first;\r\n                        game.field.first = null;\r\n                    }\r\n                }\r\n            } else {\r\n                // no one on first\r\n            }\r\n        } else {\r\n            if (fieldersChoice) {\r\n                game.field[fieldersChoice] = null;\r\n                first = this.game.field.first;\r\n                second = this.game.field.second;\r\n                third = this.game.field.third;\r\n            }\r\n            var canAdvance = function() {return true;};\r\n            if (sacrificeAdvances) {\r\n                canAdvance = function(position) {return sacrificeAdvances.indexOf(position) > -1;};\r\n            }\r\n            if (third instanceof Player && canAdvance('third')) {\r\n                // run scored\r\n                game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\r\n                game.tally[game.half == 'top' ? 'away' : 'home'].R++;\r\n                if (game.batter != third) {\r\n                    game.batter.recordRBI();\r\n                    third.atBats.push(Log.prototype.RUN);\r\n                }\r\n                game.batter.stats.batting.rbi++;\r\n                third.stats.batting.r++;\r\n                game.pitcher.stats.pitching.ER++;\r\n            }\r\n            if (second && canAdvance('first')) {\r\n                game.field.third = second;\r\n            } else {\r\n                game.field.third = null;\r\n            }\r\n            if (first && canAdvance('first')) {\r\n                game.field.second = first;\r\n            } else {\r\n                game.field.second = null;\r\n            }\r\n            game.field.first = null;\r\n        }\r\n        return this;\r\n    },\r\n    newBatter : function() {\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        this.count.balls = this.count.strikes = 0;\r\n        this.game.log.notePlateAppearanceResult(this.game);\r\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\r\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\r\n        team.nowBatting = (team.nowBatting + 1)%9;\r\n        if (this.count.outs < 3) {\r\n            this.game.log.noteBatter(this.game.batter);\r\n        }\r\n    },\r\n    changeSides : function() {\r\n        this.game.swingResult = {};\r\n        this.game.swingResult.looking = true; // hide bat\r\n        this.game.pitchInFlight.x = null; // hide ball\r\n        this.game.pitchInFlight.y = null; // hide ball\r\n        this.game.log.pitchRecord = {\r\n            e: [],\r\n            n: []\r\n        };\r\n        var offense, defense;\r\n        this.game.field.first = null;\r\n        this.game.field.second = null;\r\n        this.game.field.third = null;\r\n        if (this.game.half == 'top') {\r\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\r\n                return this.game.end();\r\n            }\r\n            this.game.half = 'bottom';\r\n        } else {\r\n            if (this.game.inning + 1 > 9) {\r\n                return this.game.end();\r\n            }\r\n            this.game.inning++;\r\n            this.game.half = 'top';\r\n        }\r\n        offense = this.game.half == 'top' ? 'away' : 'home';\r\n        defense = this.game.half == 'top' ? 'home' : 'away';\r\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\r\n                +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\r\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\r\n        this.game.log.note(e, n);\r\n        var team = this.game.teams[offense];\r\n        this.game.batter = team.lineup[team.nowBatting];\r\n        this.game.batterRunner = this.game.batter;\r\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\r\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\r\n\r\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\r\n        this.game.log.noteBatter(this.game.batter);\r\n    },\r\n    says : 'Play ball!',\r\n    game : null\r\n};\r\n\r\nexports.Umpire = Umpire;","var Catcher = function() {\r\n    this.init();\r\n};\r\n\r\nCatcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Fielder = function() {\r\n    this.init();\r\n};\r\n\r\nFielder.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Pitcher = function() {\r\n    this.init();\r\n};\r\n\r\nPitcher.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Batter = function() {\r\n    this.init();\r\n};\r\n\r\nBatter.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","var Runner = function() {\r\n    this.init();\r\n};\r\n\r\nRunner.prototype = {\r\n    init : function() {\r\n\r\n    }\r\n};","IndexController = function($scope) {\r\n    window.s = $scope;\r\n    $scope.t = text;\r\n\r\n    $scope.mode = function(setMode) {\r\n        if (setMode) {\r\n            mode = setMode;\r\n        }\r\n        return mode;\r\n    };\r\n\r\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\r\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\r\n        Game.prototype.quickMode = !!quickMode;\r\n        $scope.y = new Game();\r\n        var game = $scope.y;\r\n        s2.y = game;\r\n        bindMethods();\r\n        jQ('.blocking').remove();\r\n        if (game.humanControl == 'none' && game.quickMode) {\r\n            var n = 0;\r\n            do {\r\n                n++;\r\n                game.simulateInput(function(callback) {\r\n                    typeof callback == 'function' && callback();\r\n                });\r\n            } while (game.stage != 'end' && n < 500);\r\n            log('sim ended');\r\n            game.debugOut();\r\n        } else if (game.humanControl == 'none') {\r\n            var scalar = game.quickMode ? 0.05 : 1;\r\n            var auto = setInterval(function() {\r\n                if (game.stage == 'end') {\r\n                    clearInterval(auto);\r\n                }\r\n                game.simulatePitchAndSwing(function(callback) {\r\n                    game.quickMode ? void 0 : $scope.$apply();\r\n                    $scope.updateFlightPath(callback);\r\n                });\r\n            }, scalar*(game.field.hasRunnersOn() ? 4000 : 5500));\r\n        }\r\n        if (game.humanControl == 'away') {\r\n            game.simulateInput(function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        }\r\n        if (game.humanControl == 'home') {\r\n\r\n        }\r\n    };\r\n\r\n    var bindMethods = function() {\r\n        var game = $scope.y;\r\n        $scope.holdUpTimeouts = [];\r\n        $scope.expandScoreboard = false;\r\n        var animator = new Animator();\r\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\r\n\r\n        // avoid scope cycles, any other easy way?\r\n        var bat = jQ('.target .swing.stance-indicator');\r\n        var showBat = function(event) {\r\n            if (game.humanBatting()) {\r\n                var offset = jQ('.target').offset();\r\n                var relativeOffset = {\r\n                    x : event.pageX - offset.left,\r\n                    y : 200 - (event.pageY - offset.top)\r\n                };\r\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\r\n                bat.css({\r\n                    top: 200-relativeOffset.y + \"px\",\r\n                    left: relativeOffset.x + \"px\",\r\n                    transform: \"rotate(\" + angle + \"deg)\"\r\n                });\r\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\r\n                    bat.hide();\r\n                } else {\r\n                    bat.show();\r\n                }\r\n            }\r\n        };\r\n        var glove = jQ('.target .glove.stance-indicator');\r\n        var showGlove = function(event) {\r\n            if (game.humanPitching()) {\r\n            }\r\n        };\r\n\r\n        $scope.selectPitch = function(pitchName) {\r\n            if (game.stage == 'pitch') {\r\n                game.pitchInFlight = jQ.extend({}, game.pitcher.pitching[pitchName]);\r\n                game.pitchInFlight.name = pitchName;\r\n                game.swingResult.looking = true;\r\n            }\r\n        };\r\n        $scope.allowInput = true;\r\n        $scope.holdUp = function() {\r\n            jQ('.no-swing').click();\r\n            $scope.$apply();\r\n        };\r\n        game.startOpponentPitching = function(callback) {\r\n            $scope.updateFlightPath(callback);\r\n        };\r\n        $scope.indicate = function($event) {\r\n            if (!$scope.allowInput) {\r\n                return;\r\n            }\r\n            if (game.pitcher.windingUp) {\r\n                return;\r\n            }\r\n            if (game.humanPitching()) $scope.allowInput = false;\r\n            var offset = jQ('.target').offset();\r\n            var relativeOffset = {\r\n                x : $event.pageX - offset.left,\r\n                y : 200 - ($event.pageY - offset.top)\r\n            };\r\n            clearTimeout($scope.lastTimeout);\r\n            while ($scope.holdUpTimeouts.length) {\r\n                clearTimeout($scope.holdUpTimeouts.shift());\r\n            }\r\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\r\n                $scope.updateFlightPath(callback);\r\n            });\r\n        };\r\n        $scope.abbreviatePosition = function(position) {\r\n            if (mode == 'e') {\r\n                return {\r\n                    pitcher : 'P',\r\n                    catcher : 'C',\r\n                    first : '1B',\r\n                    second : '2B',\r\n                    short : 'SS',\r\n                    third : '3B',\r\n                    left : 'LF',\r\n                    center : 'CF',\r\n                    right : 'RF'\r\n                }[position];\r\n            }\r\n            return text.fielderShortName(position);\r\n        };\r\n        $scope.$watch('y.humanBatting()', function() {\r\n            if ($scope.y.humanBatting()) {\r\n                jQ('.target').mousemove(showBat);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showBat);\r\n                bat.hide();\r\n            }\r\n        });\r\n        $scope.$watch('y.humanPitching()', function() {\r\n            if ($scope.y.humanPitching()) {\r\n                jQ('.target').mousemove(showGlove);\r\n            } else {\r\n                jQ('.target').unbind('mousemove', showGlove);\r\n                glove.hide();\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n};","ScoreboardDirective = function() {\r\n    return {\r\n        scope: {\r\n            game: '=',\r\n            text: '='\r\n        },\r\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\r\n        link: function(scope) {\r\n            window.s2 = scope;\r\n            scope.t = scope.text;\r\n            scope.y = scope.game;\r\n        }\r\n    };\r\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\r\n\r\ncacheKey = Math.floor(Math.random()*1500);\r\n\r\nangular.module('directives', [])\r\n    .directive('scoreboard', ScoreboardDirective);\r\n\r\nangular.module('controllers', [])\r\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
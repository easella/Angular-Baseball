{"version":3,"sources":["namespace.js","text.js","Log.js","data.js","helper.js","Animator.js","Distribution.js","Iterator.js","Mathinator.js","AtBat.js","Field.js","Game.js","Manager.js","Player.js","Team.js","Umpire.js","player/defense/catcher.js","player/defense/fielder.js","player/defense/pitcher.js","player/offense/batter.js","player/offense/runner.js","IndexController.js","directives/scoreboard.js","application.js"],"names":["Yakyuu","exports","mode","text","phrase","override","string","n","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","pitcher","catcher","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike.","4-seam","2-seam","slider","fork","cutter","sinker","curve","change"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Game","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","H","2B","3B","HR","RBI","R","BB","SO","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","L","R "," L "," R ","#","e","getBattersEye","game","eye","breaking","Math","abs","pitchInFlight","breakDirection","fielderShortName","fielder","first","second","third","short","left","center","right","slash","fielderLongName","comma","stop","namePitch","pitch","name","charAt","toUpperCase","slice","contactResult","batter","bases","outBy","statement","infield","indexOf","Log","this","init","prototype","pitchRecord","SINGLE","DOUBLE","TRIPLE","HOMERUN","WALK","GROUNDOUT","FLYOUT","LINEOUT","RUN","STRIKEOUT","SACRIFICE","REACHED_ON_ERROR","FIELDERS_CHOICE","note","noteJ","record","unshift","shortRecord","getBatter","order","team","nowBatting",1,2,3,4,5,6,7,8,"positions","longFormFielder","position","getUniformNumber","getName","noteBatter","recordJ","m","getPitchLocationDescription","batterIsLefty","x","y","say","noComma","noComma2","ball","split","join","notePitch","bats","getSwing","swingResult","result","looking","strike","contact","foul","caught","thrownOut","noteSwing","getPlateAppearanceResult","r","error","random","splay","notePlateAppearanceResult","pointer","data","surnames","surnamesJ","namesJ","names","teamNamesJ","teamNames","helper","pitchDefinitions","selectRandomPitch","floor","Animator","identifier","constructor","pitchTarget","pitchBreak","updateFlightPath","callback","$scope","top","breakTop","breakLeft","$baseballs","jQ","flightSpeed","velocity","originTop","originLeft","henka","quarter","pitchTransition","Mathinator","transitions","TweenMax","set","to","lastTimeout","setTimeout","allowInput","$apply","humanBatting","skill","offense","addClass","removeClass","humanPitching","holdUpTimeouts","push","holdUp","animateFieldingTrajectory","killAll","linearApproximateDragScalar","distance","apexHeight","airTime","angle","flyAngle","travelDistance","scalar","memory","bounding","sqrt","sin","PI","mathinator","transitionalTrajectory","fn","hasOwnProperty","Distribution","chance","scale","defense","fielding","landingDistance","power","pitchLocation","centralizedNumber","swingLikelihood","umpire","min","count","balls","max","strikes","pitchControl","target","control","breakEffect","effect","swing","actual","Iterator","each","collection","map","keys","Object","i","length","square","RADIAN","getAngularOffset","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","getPolarDistance","a","b","radians","battingAngle","origin","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","translateSwingResultToStylePosition","_top","_left","transform","AtBat","INFIELD_HIT_INDICATOR","replace","RBI_INDICATOR","rbi","log","beneficial","toString","Field","hasRunnersOn","Player","determineSwingContactResult","splayAngle","bonus","findFielder","debug","half","teams","home","away","fatigue","fieldingEase","throwingEase","throwing","fielderTravel","interceptRating","speed","plus","gatherAndThrowSuccess","outFielder","fieldingReturnDelay","fieldingDelay","fieldingTest","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","returnFielder","minDistance","giraffe","spot","thisDistance","gamesIntoSeason","humanControl","console","quickMode","window","field","Team","pickName","Umpire","stage","getInning","inning","end","simulateInput","autoPitch","autoSwing","simulatePitchAndSwing","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","pitching","windingUp","windup","css","animate","width","deceptiveX","deceptiveY","convergence","convergenceSum","swingProbability","battersEye","setBatAngle","recalculation","pow","makeCall","startOpponentPitching","debugOut","filter","grounder","PO","hitters","lineup","concat","atBats","LO","ab","FO","GO","break","outs","pitchSelect","scoreboard",9,"E","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","key","player","pool","skillset","mustBeRightHanded","selection","rating","index","skills","cursor","property","shift","IP","ER","GS","W","randBetween","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sf","chances","stats","pitches","K","getERA","ERA","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","averaging","randomizeSkills","surnameKey","nameKey","jSurname","jGivenName","nameJ","surname","surnameJ","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","hero","randValue","isPitching","value","catching","reduce","prev","current","getSurname","getOrder","bullpen","j","manager","teamNameIndex","expanded","playBall","batterRunner","deck","hole","says","newBatter","advanceRunners","reachBase","changeSides","isWalk","Catcher","Fielder","Pitcher","Batter","Runner","IndexController","s","t","setMode","proceedToGame","spectateCpu","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","show","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","directive","controller"],"mappings":"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A,QACA,SACA,YACA,QACA,WACA,WACA,UACA,UACA,SACA,UAEAC,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGAC,QACA,IACA,MACA,MACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,OACA,KACA,KACA,KAEA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,KACA,IACA,IACA,KACA,KACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,MACA,IACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,KAEAC,OACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,MACA,UACA,QACA,SACA,OACA,UACA,UACA,UACA,QACA,QACA,OAEA,UACA,OACA,SACA,UACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,SACA,UACA,QACA,SACA,QACA,QACA,YACA,SACA,SACA,WACA,YACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,OACA,UACA,OACA,WACA,QACA,UACA,UACA,QACA,OACA,SACA,QACA,SACA,UACA,UACA,UACA,UACA,UACA,QACA,QACA,MACA,QACA,SACA,QACA,SACA,WACA,QACA,UACA,UACA,KACA,QACA,QACA,SACA,UACA,UACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,QACA,WACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,WACA,QAEAC,YACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,KACA,MACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MACA,KACA,KACA,MAEAC,WACA,WACA,QACA,SACA,UACA,OACA,QACA,UACA,WACA,UACA,YACA,SACA,QACA,UACA,YACA,WACA,aACA,UACA,WACA,YACA,YACA,YACA,SACA,YACA,aACA,UACA,cACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,UACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,aACA,WACA,UACA,WACA,OACA,QACA,YACA,YACA,QACA,WACA,aACA,UACA,QACA,YACA,WACA,OACA,YACA,SACA,SACA,UACA,UACA,SACA,YACA,cACA,UACA,WACA,WACA,UACA,QACA,WACA,YACA,OACA,YACA,SACA,OACA,YACA,OACA,WACA,OACA,WACA,YACA,YACA,SACA,SACA,OACA,aACA,UACA,SACA,WACA,UACA,YACA,UACA,UAC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","file":"application.js","sourcesContent":["Yakyuu = {};\r\nexports = {};","var mode = 'n';\n\ntext = function(phrase, override) {\n    if (!mode) mode = 'n';\n    var string = {\n        n : {\n            empty: '-',\n            ' 1st' : '1番',\n            ' 2nd' : '2番',\n            ' 3rd' : '3番',\n            ' 4th' : '4番',\n            ' 5th' : '5番',\n            ' 6th' : '6番',\n            ' 7th' : '7番',\n            ' 8th' : '8番',\n            ' 9th' : '9番',\n            'Now batting' : '次のバッタ、',\n            'way outside' : '相当外角',\n            'outside' : '外角',\n            'inside' : '内角',\n            'way inside' : '相当内角',\n            'way low' : '相当低め',\n            'low' : '低め',\n            'high' : '高め',\n            'way high' : '相当高め',\n            'down the middle' : '真ん中',\n            'first baseman': 'ファースト',\n            'second baseman': 'セカンド',\n            'third baseman': 'サード',\n            'shortstop': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left fielder': 'レフト',\n            'center fielder': 'センター',\n            'right fielder': 'ライト',\n            'Strike.' : 'ストライク。',\n            'Ball.' : 'ボール。',\n            'Fouled off.': 'ファウル。',\n            'In play.': 'インプレー。',\n            'Swinging strike.': '空振り。',\n            '4-seam': 'ストレート',\n            '2-seam': 'シュート',\n            'slider': 'スライダー',\n            'fork': 'フォーク',\n            'cutter': 'カット',\n            'sinker': 'シンカー',\n            'curve': 'カーブ',\n            'change': 'チェンジ',\n            ' struck out looking.': '、見逃し三振。',\n            ' walked.': '、フォアボール。',\n            ' struck out swinging.': '、空振り三振。',\n            'Previous: ': '前：',\n            'looks like: ': '予想',\n            'breaking ball': '変化球',\n            'fastball': 'ストレート',\n            'Batting, ': '打球',\n            'Catching, pitch selection': '捕球選択',\n            'Season': '記録',\n            'Game': '今試合',\n            'Pitch': '球',\n            'Control': '制球',\n            'Velocity': '速度',\n            'Break': '変化',\n            'At Bat :': 'バッタ',\n            'On Deck :': '次バッタ',\n            'Eye :': '目',\n            'Power :': '力',\n            'Speed :': '速',\n            'Up to Bat': '打席',\n            'Fielding': '守備',\n            'BA' : '打率',\n            'OBP' : '出塁',\n            'SLG' : '長打',\n            'PA' : '打席',\n            'H/2B/3B/HR' : '安／二／三／本',\n            'H' : '安',\n            '2B' : '二',\n            '3B' : '三',\n            'HR' : '本塁打',\n            'RBI' : '打点',\n            'R' : '得点',\n            'BB' : '四球',\n            'SO' : '三振',\n\n            'Select Language:' : '言語',\n            'Run Fast Simulation' : 'シミュレーションを試合終了まで行う',\n            'Play Ball!' : 'プレーボール',\n            'Spectate the CPU': 'CPU観戦',\n\n            'Throws/Bats' : ' ',\n            'LHP' : '左投',\n            'RHP' : '右投',\n            'LHB' : '左打',\n            'RHB' : '右打',\n            'L' : '左投',\n            'R ' : '右投',\n            ' L ' : '左打',\n            ' R ' : '右打',\n            '#' : '背番号'\n        },\n        e : {\n            empty: '-',\n            'Season': 'Career'\n        }\n    }[override ? override : mode][phrase];\n    return string ? string : phrase;\n};\n\ntext.getBattersEye = function(game) {\n    var eye = {},\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\n    eye.e =\n        text('looks like: ', 'e')+\n        breaking ? text('breaking ball', 'e') : text('fastball', 'e');\n    eye.n =\n        text('looks like: ', 'n')+\n        breaking ? text('breaking ball', 'n') : text('fastball', 'n');\n    return eye;\n};\n\ntext.fielderShortName = function(fielder) {\n    if (mode == 'n') {\n        return {\n            'first': '一',\n            'second': '二',\n            'third': '三',\n            'short': '遊',\n            'pitcher': '投',\n            'catcher': '捕',\n            'left': '左',\n            'center': '中',\n            'right': '右'\n        }[fielder];\n    }\n    return fielder;\n};\n\ntext.slash = function() {\n    if (mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = function(fielder) {\n    if (mode == 'n') {\n        return {\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'short': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left': 'レフト',\n            'center': 'センター',\n            'right': 'ライト'\n        }[fielder]\n    }\n    return {\n        first : text('first baseman'),\n        second : text('second baseman'),\n        third : text('third baseman'),\n        short : text('shortstop'),\n        pitcher : text('pitcher'),\n        catcher : text('catcher'),\n        left : text('left fielder'),\n        center : text('center fielder'),\n        right : text('right fielder')\n    }[fielder];\n};\n\ntext.comma = function() {\n    return {n: '、', e: ', '}[mode];\n};\ntext.stop = function() {\n    return {n: '。', e: '. '}[mode];\n};\n\ntext.namePitch = function(pitch) {\n    if (mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1)\n    }\n    if (mode == 'n') {\n        return text(pitch.name)\n    }\n};\n\ntext.contactResult = function(batter, fielder, bases, outBy) {\n    var statement = '';\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    if (mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'error':\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\n                    break;\n                case 'pop':\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'fly':\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'ground':\n                    statement += ' grounded out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'thrown':\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\n                    break;\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\n                    } else {\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\n                    }\n                    break;\n                case 2:\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\n                    break;\n                case 3:\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\n                    break;\n                case 4:\n                    statement += ' homered to ' + text.fielderShortName(fielder);\n                    break;\n            }\n        }\n        statement += text.stop();\n    }\n    if (mode == 'n') {\n        statement += batter + 'は';\n        if (outBy) {\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'error':\n                    statement += 'エラー('+fielder+')で出塁';\n                    break;\n                case 'pop':\n                    statement += 'ポップフライで' + fielder + '飛';\n                    break;\n                case 'fly':\n                    statement += fielder + '飛';\n                    break;\n                case 'ground':\n                    statement += fielder + 'ゴロ';\n                    break;\n                case 'thrown':\n                    statement += fielder + 'ゴロ';\n                    break;\n            }\n        } else {\n            fielder = text.fielderLongName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += '内野安打' + '('+fielder+')'+ 'で出塁';\n                    } else {\n                        statement += '安打('+fielder+')' + 'で出塁';\n                    }\n                    break;\n                case 2:\n                    statement += '二塁打（'+fielder+'）で出塁';\n                    break;\n                case 3:\n                    statement += '三塁打（'+fielder+'）で出塁';\n                    break;\n                case 4:\n                    statement += '本塁打（'+fielder+'）';\n                    break;\n            }\n        }\n        statement += text.stop();\n    }\n    return statement;\n};\n\nexports.text = text;\nexports.mode = mode;","var Log = function() {\n    this.init();\n};\n\nLog.prototype = {\n    game : 'instance of Game',\n    init : function() {\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n    },\n    SINGLE : 'H',\n    DOUBLE : '2B',\n    TRIPLE : '3B',\n    HOMERUN : 'HR',\n    WALK : 'BB',\n    GROUNDOUT : 'GO',\n    FLYOUT : 'FO',\n    LINEOUT : 'LO',\n    RUN : 'R',\n    STRIKEOUT : 'SO',\n    SACRIFICE : 'SAC',\n    REACHED_ON_ERROR : 'ROE',\n    FIELDERS_CHOICE : 'FC',\n    note : function(note, noteJ) {\n        this.record.e.unshift(note);\n        this.shortRecord.e = this.record.e.slice(0, 6);\n\n        this.record.n.unshift(noteJ);\n        this.shortRecord.n = this.record.n.slice(0, 6);\n    },\n    getBatter : function(batter) {\n        var order = batter.team.nowBatting;\n        order = {\n            0 : text(' 1st'),\n            1 : text(' 2nd'),\n            2 : text(' 3rd'),\n            3 : text(' 4th'),\n            4 : text(' 5th'),\n            5 : text(' 6th'),\n            6 : text(' 7th'),\n            7 : text(' 8th'),\n            8 : text(' 9th')\n        }[order];\n        var positions = this.longFormFielder();\n        return text('Now batting')+order+text.comma()+positions[batter.position]+text.comma()+\n            batter.getUniformNumber()+text.comma()+\n            batter.getName();\n    },\n    noteBatter : function(batter) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getBatter(batter);\n        mode = 'n';\n        recordJ = this.getBatter(batter);\n        mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription : function(pitchInFlight, batterIsLefty) {\n        var x = pitchInFlight.x, y = pitchInFlight.y, say = '';\n        var noComma = false, noComma2 = false;\n        var ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += text('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += text('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += text('inside');\n        } else {\n            say += text('way inside');\n            ball = true;\n        }\n        if (say != '') say += text.comma();\n        if (y < 35) {\n            say += text('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += text('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += text('high');\n        } else {\n            say += text('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(text.comma()).join('');\n            if (noComma && noComma2) {\n                say = text('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = text.namePitch(pitchInFlight) + text.comma() + say + text.stop();\n        return say;\n    },\n    notePitch : function(pitchInFlight, batter) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        mode = m;\n    },\n    getSwing : function(swingResult) {\n        var result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += text('Strike.')\n            } else {\n                result += text('Ball.')\n            }\n        } else {\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += text('Fouled off.')\n                } else {\n                    if (swingResult.caught) {\n                        result += text('In play.')\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += text('In play.')\n                        } else {\n                            result += text('In play.')\n                        }\n                    }\n                }\n            } else {\n                result += text('Swinging strike.')\n            }\n        }\n        return result;\n    },\n    noteSwing : function(swingResult) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getSwing(swingResult);\n        this.pitchRecord.e[0] += record;\n        mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        this.pitchRecord.n[0] += recordJ;\n        mode = m;\n    },\n    getPlateAppearanceResult : function(game) {\n        var r = game.swingResult;\n        var record = '';\n        var batter = game.batter.getName();\n        if (r.looking) {\n            if (r.strike) {\n                record = (batter + text(' struck out looking.'));\n            } else {\n                record = (batter + text(' walked.'));\n            }\n        } else {\n            if (r.contact) {\n                var fielder = r.fielder, bases = r.bases, outBy;\n                if (r.caught) {\n                    if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                        outBy = 'pop';\n                    } else {\n                        outBy = 'fly';\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                        if (r.error) {\n                            bases = 1;\n                            outBy = 'error';\n                        } else {\n                            if (r.thrownOut) {\n                                if (Math.random() > 0.5) {\n                                    outBy = 'ground';\n                                } else {\n                                    outBy = 'thrown';\n                                }\n                            } else {\n                                switch (r.bases) {\n                                    case 1:\n                                    case 2:\n                                    case 3:\n                                        bases = r.bases;\n                                        break;\n                                    case 4:\n                                        bases = 4;\n                                        if (r.splay < -15) {\n                                            fielder = 'left';\n                                        } else if (r.splay < 15) {\n                                            fielder = 'center';\n                                        } else {\n                                            fielder = 'right';\n                                        }\n                                        break;\n                                }\n                            }\n                        }\n                    }\n                }\n                record = text.contactResult(batter, fielder, bases, outBy);\n            } else {\n                record = (batter+text(' struck out swinging.'));\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult : function(game) {\n        var m = mode, record, recordJ;\n        mode = 'e';\n        record = this.getPlateAppearanceResult(game);\n        this.record.e.unshift(record);\n        this.pitchRecord.e = [text('Previous: ')+record];\n        mode = 'n';\n        recordJ = this.getPlateAppearanceResult(game);\n        this.record.n.unshift(recordJ);\n        this.pitchRecord.n = [text('Previous: ')+recordJ];\n        mode = m;\n    },\n    pointer : 0,\n    pitchRecord : {\n        e: [],\n        n: []\n    },\n    shortRecord : {\n        e: [],\n        n: []\n    },\n    record : {\n        e: [],\n        n: []\n    },\n    longFormFielder : function() {\n        return {\n            first : text('first baseman'),\n            second : text('second baseman'),\n            third : text('third baseman'),\n            short : text('shortstop'),\n            pitcher : text('pitcher'),\n            catcher : text('catcher'),\n            left : text('left fielder'),\n            center : text('center fielder'),\n            right : text('right fielder')\n        }\n    }\n};\n\nexports.Log = Log;","data = {\n    surnames : [\n        'Sato',\n        'Suzuki',\n        'Takahashi',\n        'Tanaka',\n        'Watanabe',\n        'Ito',\n        'Nakamura',\n        'Kobayashi',\n        'Yamamoto',\n        'Kato',\n        'Yoshida',\n        'Yamada',\n        'Sasaki',\n        'Yamaguchi',\n        'Matsumoto',\n        'Inoue',\n        'Kimura',\n        'Shimizu',\n        'Hayashi',\n        'Saito',\n        'Saito',\n        'Yamazaki',\n        'Nakajima',\n        'Mori',\n        'Abe',\n        'Ikeda',\n        'Hashimoto',\n        'Ishikawa',\n        'Yamashita',\n        'Ogawa',\n        'Ishii',\n        'Hasegawa',\n        'Goto',\n        'Okada',\n        'Kondo',\n        'Maeda',\n        'Fujita',\n        'Endo',\n        'Aoki',\n        'Sakamoto',\n        'Murakami',\n        'Ota',\n        'Kaneko',\n        'Fujii',\n        'Fukuda',\n        'Nishimura',\n        'Miura',\n        'Takeuchi',\n        'Nakagawa',\n        'Okamoto',\n        'Matsuda',\n        'Harada',\n        'Nakano'\n    ],\n    surnamesJ : [\n        '佐藤',\n        '鈴木',\n        '高橋',\n        '田中',\n        '渡辺',\n        '伊藤',\n        '中村',\n        '小林',\n        '山本',\n        '加藤',\n        '吉田',\n        '山田',\n        '佐々木',\n        '山口',\n        '松本',\n        '井上',\n        '木村',\n        '清水',\n        '林',\n        '斉藤',\n        '斎藤',\n        '山崎',\n        '中島',\n        '森',\n        '阿部',\n        '池田',\n        '橋本',\n        '石川',\n        '山下',\n        '小川',\n        '石井',\n        '長谷川',\n        '後藤',\n        '岡田',\n        '近藤',\n        '前田',\n        '藤田',\n        '遠藤',\n        '青木',\n        '坂本',\n        '村上',\n        '太田',\n        '金子',\n        '藤井',\n        '福田',\n        '西村',\n        '三浦',\n        '竹内',\n        '中川',\n        '岡本',\n        '松田',\n        '原田',\n        '中野'\n    ],\n\n    namesJ: [\n        '匠',\n        'ヒカル',\n        'ゆうき',\n        '翔太',\n        '冬馬',\n        '漣',\n        '港区',\n        'ルイ',\n        '樹',\n        '賢治',\n        '五木',\n        '春',\n        '光一',\n        '宗介',\n        'こうすけ',\n        '雄太',\n        '大樹',\n        '瑛太',\n        // newer set\n        '宏',\n        '亨',\n        '道夫',\n        '聡',\n        '昭',\n        '茂雄',\n        '勝',\n        '純一',\n        '和夫',\n        '勲',\n        '省三',\n        '隆',\n        '達夫',\n        '正一',\n        '輝夫',\n        '俊夫',\n        '史郎',\n        '勇',\n        '義弘',\n        '良雄',\n        '登',\n        '義明',\n        '正義',\n        '秀夫',\n        '肇',\n        '月',\n        '克己',\n        '正男',\n        '光男',\n        '久',\n        '耕三',\n        '清',\n        '次郎',\n        '正博',\n        '明子',\n        '武',\n        '勉',\n        '晴夫',\n        '裕二',\n        '稔',\n        '障子',\n        '和子',\n        '敦',\n        '茂',\n        '信夫',\n        '恵一',\n        '忠',\n        '高尾',\n        '薫',\n        'ケン',\n        '健治',\n        '哲夫',\n        '啓二',\n        '光一',\n        '真一',\n        '貞夫',\n        '靖',\n        '武',\n        '雄',\n        '文雄',\n        '久雄',\n        '一朗',\n        '健一',\n        '正明',\n        '五郎',\n        '誠',\n        '昭夫',\n        '誠司',\n        '洋一',\n        '康夫',\n        '誠一',\n        '正美',\n        '則夫',\n        '幸雄',\n        '忠雄',\n        '仁',\n        'シンジ',\n        '豊',\n        '邦雄',\n        '修',\n        '雅之',\n        '三郎',\n        '英治',\n        '浩二',\n        '栄一',\n        '恒夫',\n        '義郎',\n        '進',\n        '博之',\n        '巌'\n    ],\n    names : [\n        'Takumi',\n        'Hikaru',\n        'Yuuki',\n        'Shouta',\n        'Touma',\n        'Ren',\n        'Minato',\n        'Rui',\n        'Tatsuki',\n        'Kenji',\n        'Itsuki',\n        'Haru',\n        'Kouichi',\n        'Sousuke',\n        'Kousuke',\n        'Yuuta',\n        'Daiki',\n        'Eita',\n        // newer set\n        'Hiroshi',\n        'Toru',\n        'Michio',\n        'Satoshi',\n        'Akira',\n        'Shigeo',\n        'Masaru',\n        'Junichi',\n        'Kazuo',\n        'Isao',\n        'Shozo',\n        'Takashi',\n        'Tatsuo',\n        'Shoichi',\n        'Teruo',\n        'Toshio',\n        'Shiro',\n        'Isamu',\n        'Yoshihiro',\n        'Yoshio',\n        'Noboru',\n        'Yoshiaki',\n        'Tadayoshi',\n        'Hideo',\n        'Hajime',\n        'Akari',\n        'Katsumi',\n        'Masao',\n        'Mitsuo',\n        'Hisashi',\n        'Kozo',\n        'Kiyoshi',\n        'Jiro',\n        'Masahiro',\n        'Akiko',\n        'Takeshi',\n        'Tsutomu',\n        'Haruo',\n        'Yuji',\n        'Minoru',\n        'Shoji',\n        'Kazuko',\n        'Atsushi',\n        'Shigeru',\n        'Shinobu',\n        'Keiichi',\n        'Tadashi',\n        'Takao',\n        'Kaoru',\n        'Ken',\n        'Kenji',\n        'Tetsuo',\n        'Keiji',\n        'Koichi',\n        'Shinichi',\n        'Sadao',\n        'Yasushi',\n        'Takeshi',\n        'Yu',\n        'Fumio',\n        'Hisao',\n        'Ichiro',\n        'Kenichi',\n        'Masaaki',\n        'Goro',\n        'Makoto',\n        'Akio',\n        'Seiji',\n        'Yoichi',\n        'Yasuo',\n        'Seiichi',\n        'Masami',\n        'Norio',\n        'Yukio',\n        'Tadao',\n        'Hitoshi',\n        'Shinji',\n        'Yutaka',\n        'Kunio',\n        'Osamu',\n        'Masayuki',\n        'Saburo',\n        'Eiji',\n        'Koji',\n        'Eiichi',\n        'Tsuneo',\n        'Yoshio',\n        'Susumu',\n        'Hiroyuki',\n        'Iwao'\n    ],\n    teamNamesJ : [\n        '横浜',\n        '大阪',\n        '名古屋',\n        '札幌',\n        '神戸',\n        '京都',\n        '福岡',\n        '川崎',\n        '埼玉県',\n        '広島',\n        '仙台',\n        '千葉県',\n        '新潟',\n        '浜松',\n        '静岡',\n        '相模原',\n        '岡山',\n        '熊本',\n        '鹿児島',\n        '船橋',\n        '川口',\n        '姫路',\n        '松山',\n        '宇都宮',\n        '松戸',\n        '西宮',\n        '倉敷',\n        '市川',\n        '福山',\n        '尼崎',\n        '金沢',\n        '長崎',\n        '横須賀',\n        '富山',\n        '高松',\n        '町田',\n        '岐阜',\n        '枚方',\n        '藤沢',\n        '柏',\n        '豊中',\n        '長野県',\n        '豊橋',\n        '一宮',\n        '和歌山',\n        '岡崎',\n        '宮崎',\n        '奈良',\n        '吹田',\n        '高槻',\n        '旭川',\n        'いわき',\n        '高崎',\n        '所沢',\n        '川越',\n        '秋田',\n        '越谷',\n        '前橋',\n        '那覇',\n        '四日市',\n        '青森',\n        '久留米',\n        '春日井',\n        '盛岡',\n        '明石',\n        '福島',\n        '下関',\n        '長岡',\n        '市原',\n        '函館',\n        '茨城県',\n        '福井',\n        '加古川',\n        '徳島',\n        '水戸',\n        '平塚',\n        '佐世保',\n        '呉',\n        '八戸',\n        '佐賀',\n        '寝屋川',\n        '富士',\n        '春日部',\n        '茅ヶ崎',\n        '松本',\n        '厚木',\n        '大和',\n        '上尾',\n        '宝塚',\n        '筑波',\n        '沼津',\n        '熊谷',\n        '伊勢崎',\n        '岸和田',\n        '鳥取',\n        '小田原',\n        '鈴鹿',\n        '松江',\n        '日立'\n    ],\n    teamNames : [\n        'Yokohama',\n        'Osaka',\n        'Nagoya',\n        'Sapporo',\n        'Kobe',\n        'Kyoto',\n        'Fukuoka',\n        'Kawasaki',\n        'Saitama',\n        'Hiroshima',\n        'Sendai',\n        'Chiba',\n        'Niigata',\n        'Hamamatsu',\n        'Shizuoka',\n        'Sagamihara',\n        'Okayama',\n        'Kumamoto',\n        'Kagoshima',\n        'Funabashi',\n        'Kawaguchi',\n        'Himeji',\n        'Matsuyama',\n        'Utsunomiya',\n        'Matsudo',\n        'Nishinomiya',\n        'Kurashiki',\n        'Ichikawa',\n        'Fukuyama',\n        'Amagasaki',\n        'Kanazawa',\n        'Nagasaki',\n        'Yokosuka',\n        'Toyama',\n        'Takamatsu',\n        'Machida',\n        'Gifu',\n        'Hirakata',\n        'Fujisawa',\n        'Kashiwa',\n        'Toyonaka',\n        'Nagano',\n        'Toyohashi',\n        'Ichinomiya',\n        'Wakayama',\n        'Okazaki',\n        'Miyazaki',\n        'Nara',\n        'Suita',\n        'Takatsuki',\n        'Asahikawa',\n        'Iwaki',\n        'Takasaki',\n        'Tokorozawa',\n        'Kawagoe',\n        'Akita',\n        'Koshigaya',\n        'Maebashi',\n        'Naha',\n        'Yokkaichi',\n        'Aomori',\n        'Kurume',\n        'Kasugai',\n        'Morioka',\n        'Akashi',\n        'Fukushima',\n        'Shimonoseki',\n        'Nagaoka',\n        'Ichihara',\n        'Hakodate',\n        'Ibaraki',\n        'Fukui',\n        'Kakogawa',\n        'Tokushima',\n        'Mito',\n        'Hiratsuka',\n        'Sasebo',\n        'Kure',\n        'Hachinohe',\n        'Saga',\n        'Neyagawa',\n        'Fuji',\n        'Kasukabe',\n        'Chigasaki',\n        'Matsumoto',\n        'Atsugi',\n        'Yamato',\n        'Ageo',\n        'Takarazuka',\n        'Tsukuba',\n        'Numazu',\n        'Kumagaya',\n        'Isesaki',\n        'Kishiwada',\n        'Tottori',\n        'Odawara',\n        'Suzuka',\n        'Matsue',\n        'Hitachi'\n    ]\n};\n\nexports.data = data;","helper = {\n    pitchDefinitions : {\n        '4-seam' :      [0, 0, 1], //x movement, y movement, speed ratio\n        '2-seam' :      [20, -20, 0.90],\n        'cutter' :      [-25, -20, 0.95],\n        'sinker' :      [-15, -30, 0.95],\n\n        'slider' :      [-50, -35, 0.9],\n        'fork'   :      [0, -70, 0.87],\n        'curve'  :      [0, -90, 0.82],\n\n        'change' :    [0, -10, 0.88]\n    },\n    selectRandomPitch : function() {\n        return [\n            '4-seam', '2-seam', 'cutter', 'sinker',\n            'slider', 'fork', 'curve',\n            'change'\n        ][Math.floor(Math.random()*8)]\n    }\n};\n\nexports.helper = helper;","var Animator = function() {\n    this.init();\n};\n\nAnimator.prototype = {\n    identifier : 'Animator',\n    constructor : Animator,\n    init : function() {\n\n    },\n    pitchTarget : null,\n    pitchBreak : null,\n    updateFlightPath: function(callback) {\n        var $scope = this,\n            game = $scope.y,\n            top = 200-game.pitchTarget.y,\n            left = game.pitchTarget.x,\n            breakTop = 200-game.pitchInFlight.y,\n            breakLeft = game.pitchInFlight.x,\n            $baseballs = jQ('.baseball'),\n            flightSpeed = 1.3 - 0.6*(game.pitchInFlight.velocity + 300)/400,\n            originTop = 50,\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\n        var pitch = this.pitchTarget = jQ('.main-area .target .baseball.pitch'),\n            henka = this.pitchBreak = jQ('.main-area .target .baseball.break'),\n            quarter = flightSpeed/4;\n\n        var pitchTransition = Mathinator.pitchTransition(top, left, originTop, originLeft, quarter);\n\n        var transitions = [\n            pitchTransition(0, 0),\n            pitchTransition(10, 0),\n            pitchTransition(30, 1),\n            pitchTransition(50, 2),\n\n            pitchTransition(100, 3),\n            pitchTransition(100, 3, breakTop, breakLeft)\n        ];\n\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\n        //jQ('.baseball').addClass('spin');\n        //jQ('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\n\n        TweenMax.set([pitch, henka], transitions[0]);\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\n        TweenMax.to(pitch, quarter, transitions[4]);\n        TweenMax.to(henka, quarter, transitions[5]);\n\n        $scope.lastTimeout = setTimeout(function() {\n            $scope.allowInput = true;\n            if (typeof callback == 'function') {\n                callback();\n                $scope.$apply();\n            }\n        }, flightSpeed*1000);\n\n        if (!game.pitchInFlight.x) {\n            $baseballs.addClass('hide');\n        } else {\n            if (game.humanBatting() && Math.random()*100 > game.batter.skill.offense.eye) {\n                jQ('.baseball.break').addClass('hide');\n            } else {\n                jQ('.baseball.break').removeClass('hide');\n            }\n            jQ('.baseball.pitch').removeClass('hide');\n        }\n\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\n            $scope.holdUpTimeouts.push(setTimeout(function() {\n                $scope.holdUp();\n            }, (flightSpeed + 1.2) * 1000));\n        }\n    },\n    animateFieldingTrajectory: function(game) {\n        var ball = jQ('.splay-indicator-ball');\n        TweenMax.killAll();\n        var result = game.swingResult;\n\n        var linearApproximateDragScalar = {\n            distance: 1,\n            apexHeight: 0.37,\n            airTime: 0.66\n        };\n\n        var angle = result.flyAngle,\n            distance = Math.abs(result.travelDistance),\n            scalar = result.travelDistance < 0 ? -1 : 1;\n\n        Mathinator.memory.bounding = angle < 0;\n        angle = 1 + Math.abs(angle);\n        if (angle > 90) angle = 180 - angle;\n\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2*Math.PI*angle/180));\n        var apexHeight = velocity*velocity/(2*9.81) * linearApproximateDragScalar.apexHeight;\n        var airTime = Math.sqrt(2*apexHeight/9.81) * linearApproximateDragScalar.airTime;\n\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\n        var quarter = airTime/4;\n        var mathinator = new Mathinator();\n        var transitions = [\n            mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay),\n            mathinator.transitionalTrajectory(25, quarter, 0),\n            mathinator.transitionalTrajectory(50, quarter, 1),\n            mathinator.transitionalTrajectory(75, quarter, 2),\n            mathinator.transitionalTrajectory(100, quarter, 3)\n        ];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, quarter, transitions[1]);\n        TweenMax.to(ball, quarter, transitions[2]);\n        TweenMax.to(ball, quarter, transitions[3]);\n        TweenMax.to(ball, quarter, transitions[4]);\n\n        return game.swingResult;\n    }\n};\n\nfor (var fn in Animator.prototype) {\n    if (Animator.prototype.hasOwnProperty(fn)) {\n        Animator[fn] = Animator.prototype[fn];\n    }\n}\n\nexports.Animator = Animator;","/**\r\n * For Probability!\r\n * @constructor\r\n */\r\nvar Distribution = function() {\r\n};\r\n\r\nDistribution.prototype = {\r\n    identifier : 'Distribution',\r\n    constructor : Distribution,\r\n    /**\r\n     * @param scale {number}\r\n     * @returns {number}\r\n     */\r\n    chance : function(scale) {\r\n        if (!scale) scale = 1;\r\n        return Math.random() * scale;\r\n    },\r\n    /**\r\n     * @param fielder {Player}\r\n     * @returns {boolean}\r\n     */\r\n    error : function(fielder) {\r\n        return (100-fielder.skill.defense.fielding)*0.40 + 4 > Math.random()*100;\r\n    },\r\n    /**\r\n     * @param power\r\n     * @param flyAngle\r\n     * @returns {number}\r\n     */\r\n    landingDistance : function(power, flyAngle) {\r\n        return (50 + Math.random()*300 + (power/100)*75) * (1 - Math.abs(flyAngle - 30)/60);\r\n    },\r\n    /**\r\n     * @returns {{x: number, y: number}}\r\n     */\r\n    pitchLocation : function() {\r\n        var x, y;\r\n        if (Math.random() < 0.5) {\r\n            x = 50 + Math.floor(Math.random()*70) - Math.floor(Math.random()*15);\r\n        } else {\r\n            x = 150 + Math.floor(Math.random()*15) - Math.floor(Math.random()*70);\r\n        }\r\n        y = 30 + (170 - Math.floor(Math.sqrt(Math.random()*28900)));\r\n        return {x: x, y: y};\r\n    },\r\n    /**\r\n     * swing centering basis\r\n     * @returns {number}\r\n     */\r\n    centralizedNumber : function() {\r\n        return 100 + Math.floor(Math.random()*15) - Math.floor(Math.random()*15);\r\n    },\r\n    /**\r\n     * @param eye {Player.skill.offense.eye}\r\n     * @param x\r\n     * @param y\r\n     * @param umpire {Umpire}\r\n     */\r\n    swingLikelihood : function(eye, x, y, umpire) {\r\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y))/2;\r\n        if (x < 60 || x > 140 || y < 50 || y > 150) { // ball\r\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15*umpire.count.balls;\r\n        } else {\r\n            swingLikelihood = Math.max(45, (2*swingLikelihood + eye)/3);\r\n        }\r\n        return swingLikelihood - 35 + 10*(umpire.count.balls + 2*umpire.count.strikes);\r\n    },\r\n    /**\r\n     * @param target {number} 0-200\r\n     * @param control {number} 0-100\r\n     * @returns {number}\r\n     */\r\n    pitchControl : function(target, control) {\r\n        return Math.min(199.9, Math.max(0.1, target + (50 - Math.random()*100)/(1+control/100)));\r\n    },\r\n    /**\r\n     * @param pitch {Game.pitchInFlight}\r\n     * @param x {number}\r\n     * @param y {number}\r\n     * @returns {object|{x: number, y: number}}\r\n     */\r\n    breakEffect : function(pitch, x, y) {\r\n        var effect = {};\r\n        effect.x = Math.floor(x + (pitch.breakDirection[0]\r\n            * ((0.5+Math.random()*pitch.break)/100)));\r\n        effect.y = Math.floor(y + (pitch.breakDirection[1]\r\n            * ((0.5+Math.random()*pitch.break)/100))/(0.5 + y/200));\r\n        return effect;\r\n    },\r\n    /**\r\n     * Determine the swing target along an axis\r\n     * @param target {number} 0-200\r\n     * @param actual {number} 0-200\r\n     * @param eye {number} 0-100\r\n     * @returns {number} 0-200\r\n     */\r\n    swing : function(target, actual, eye) {\r\n        return 100 + (target - 100)*(0.5+Math.random()*eye/200) - actual;\r\n    }\r\n};\r\n\r\nfor (var fn in Distribution.prototype) {\r\n    if (Distribution.prototype.hasOwnProperty(fn)) {\r\n        Distribution[fn] = Distribution.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Distribution = Distribution;","var Iterator = function() {\r\n};\r\n\r\nIterator.prototype = {\r\n    identifier : 'Iterator',\r\n    constructor : Iterator,\r\n    each : function(collection, map) {\r\n        var keys = Object.keys(collection);\r\n        for (var i = 0; i < keys.length; i++) {\r\n            map(keys[i], collection[keys[i]]);\r\n        }\r\n    }\r\n};\r\n\r\nfor (var fn in Iterator.prototype) {\r\n    if (Iterator.prototype.hasOwnProperty(fn)) {\r\n        Iterator[fn] = Iterator.prototype[fn];\r\n    }\r\n}\r\n\r\nexports.Iterator = Iterator;","/**\n * For Math!\n * @constructor\n */\nvar Mathinator = function() {\n};\n\n/**\n * @param n\n * @returns {number}\n */\nMathinator.square = function(n) {\n    return n * n;\n};\n\nMathinator.prototype = {\n    identifier : 'Mathinator',\n    constructor : Mathinator,\n    /**\n     * CONST\n     */\n    RADIAN : Math.PI / 180,\n    /**\n     * @param offset {{x: number, y: number}}\n     * @param angle {number}\n     * @returns {{x: number, y: number}}\n     */\n    getAngularOffset : function(offset, angle) {\n        var xScalar = offset.x < 0 ? -1 : 1,\n            yScalar = offset.y < 0 ? -1 : 1;\n        var originalAngle = Math.atan(offset.x / offset.y)/this.RADIAN;\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\n        return {\n            x: angledX,\n            y: angledY\n        };\n    },\n    /**\n     * @param a {Array<Number>}\n     * @param b {Array<Number>}\n     * @returns {number}\n     */\n    getPolarDistance : function(a, b) {\n        var radians = this.RADIAN;\n        return Math.sqrt(a[1]*a[1] + b[1]*b[1] - 2*a[1]*b[1]*Math.cos(a[0]*radians - b[0]*radians));\n    },\n    /**\n     * @param origin\n     * @param target\n     * @returns {number}\n     * 0 is flat (left-right), positive is clockwise.\n     * We use 125 instead of 180 to account for natural hand-height adjustments\n     * of various swing heights.\n     */\n    battingAngle : function(origin, target) {\n        return Math.atan((origin.y - target.y)/(target.x - origin.x))/Math.PI * 125;\n    },\n    memory : {},\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalTrajectory : function(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\n            distance = Mathinator.prototype.memory.distance,\n            splay = Mathinator.prototype.memory.splay;\n        var bottom, left, padding, borderWidth;\n        var bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        bottom = Math.cos(splay * radian) * percent/100 * distance * 95/300;\n        left = Math.sin(splay * radian) * percent/100 * distance * 95/300 + 190;\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50))/100)*(1/0.7071);\n        if (bounding) {\n            padding = 1;\n            borderWidth = 1;\n        } else {\n            padding = apexRatio * apexHeight/90 * 15;\n            borderWidth = 2 + (apexRatio * 2);\n        }\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 280), 100);\n        padding = Math.max(Math.min(padding, 40), 0);\n        return {\n            bottom: bottom,\n            left: left,\n            padding: padding,\n            borderWidth: borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param swingResult\n     * @returns {Game.swingResult}\n     */\n    translateSwingResultToStylePosition: function(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        var bottom, left;\n\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300;\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95/300 + 190;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 280), 100);\n\n        swingResult.bottom = bottom + 'px';\n        swingResult.left = left + 'px';\n        return swingResult;\n    },\n    /**\n     * @param left {number} 0-200\n     * @param top {number} 0-200\n     * @param originLeft {number} 0-200\n     * @param originTop {number} 0-200\n     * @param quarter {number} seconds\n     * @returns {Function}\n     */\n    pitchTransition : function(top, left, originTop, originLeft, quarter) {\n        /**\n         * @param percent {number} 0-100\n         * @param step {number} 0 and up\n         * @param [breakTop] {number} 0-200 override\n         * @param [breakLeft] {number} 0-200 override\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\n         */\n        return function(percent, step, breakTop, breakLeft) {\n            var _top, _left;\n            _top = breakTop || top;\n            _left = breakLeft || left;\n            _top = originTop + Mathinator.square(percent/100)*(_top - originTop);\n            _left = originLeft + Mathinator.square(percent/100)*(_left - originLeft);\n            var padding = Math.max(Mathinator.square(percent/100)*13, 1),\n                borderWidth = Math.max(Mathinator.square(percent/100)*4, 1);\n            return {\n                top: _top,\n                left: _left ,\n                padding: padding + 'px',\n                borderWidth: borderWidth + 'px',\n                transform: 'translateZ(0)',\n                delay: quarter * step,\n                ease: Linear.easeNone\n            };\n        };\n    }\n};\n\nfor (var fn in Mathinator.prototype) {\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\n        Mathinator[fn] = Mathinator.prototype[fn];\n    }\n}\n\nexports.Mathinator = Mathinator;","var AtBat = function(text) {\r\n    this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\r\n    text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\r\n    this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\r\n    this.rbi = (text.split(this.text)[1] + '');\r\n\r\n    var log = new Log();\r\n\r\n    var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\r\n    if (beneficial.indexOf(this.text) > -1) {\r\n        this.beneficial = true;\r\n    }\r\n};\r\nAtBat.prototype.toString = function() {\r\n    return '' + this.infield + this.text + this.rbi;\r\n};\r\nAtBat.prototype.constructor = AtBat;\r\nAtBat.prototype.identifier = 'AtBat';\r\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\r\nAtBat.prototype.RBI_INDICATOR = '+';\r\n\r\nexports.AtBat = AtBat;","/**\n * The baseball field tracks the ball's movement, fielders, and what runners are on\n * @param game\n * @constructor\n */\nvar Field = function(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor : Field,\n    init : function(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    /**\n     * @returns {boolean}\n     */\n    hasRunnersOn : function() {\n        return this.first instanceof Player || this.second instanceof Player || this.third instanceof Player;\n    },\n    /**\n     * @param swing\n     * @returns {object}\n     */\n    determineSwingContactResult : function(swing) {\n        var x = swing.x, y = swing.y;\n        /**\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\n         * increase the left/right effect.\n         * @type {number}\n         */\n        var splayAngle = 90 - 1.5*x + (swing.angle * y/35);\n        var flyAngle = -3*y - (swing.angle * y/35);\n        var power = this.game.batter.skill.offense.power + this.game.batter.eye.bonus;\n        var landingDistance = Distribution.landingDistance(power, flyAngle);\n        if (flyAngle < 0 && landingDistance > 120) {\n            landingDistance = (landingDistance - 120)/4 + 120;\n        }\n\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        /**\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\n         * @type {number}\n         */\n        swing.splay = splayAngle - 90;\n\n        if (!this.game.debug) {\n            this.game.debug = [];\n        }\n\n        if (swing.fielder) {\n            var fielder = (this.game.half == top ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder]);\n            fielder.fatigue += 4;\n            swing.error = false;\n            var fieldingEase = fielder.skill.defense.fielding/100,\n                throwingEase = (fielder.skill.defense.throwing/100);\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel*1.65;\n            if (interceptRating > 0 && flyAngle > -10) {\n                //caught cleanly?\n                if (Distribution.error(fielder)) { //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    swing.caught = false;\n                } else {\n                    swing.caught = true;\n                }\n            } else {\n                swing.caught = false;\n            }\n\n            if (!swing.caught) {\n                // intercept rating is negative\n                var plus = interceptRating + 100*throwingEase*fieldingEase;\n                var gatherAndThrowSuccess = plus - this.game.batter.skill.offense.speed/2 > -50;\n\n                //log('flew at angle', flyAngle, 'distance of', swing.fielderTravel,\n                //    'gives intercept rating of', interceptRating, 'fielder throw/fielding', fielder.skill.defense.throwing, fielder.skill.defense.fielding,\n                //    '+', plus, '-runner speed', this.game.batter.skill.offense.speed,\n                //    'success', gatherAndThrowSuccess\n                //);\n\n                swing.thrownOut = gatherAndThrowSuccess;\n                swing.outFielder = {'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1;\n\n                if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] != 1 && gatherAndThrowSuccess) {\n                    swing.thrownOut = true;\n                    swing.error = false;\n                } else {\n                    swing.thrownOut = false;\n                    swing.bases = 1;\n                    if ({'left' : 1, 'center' : 1, 'right' : 1}[swing.fielder] == 1) {\n                        var fieldingReturnDelay = -1*(interceptRating + 100*throwingEase*fieldingEase) + this.game.batter.skill.offense.speed;\n                        swing.fieldingDelay = fieldingReturnDelay;\n                        while (fieldingReturnDelay - 125 > 0 && swing.bases < 3) {\n                            swing.bases++;\n                            fieldingReturnDelay  -= 65;\n                        }\n                    }\n                }\n                // log('fielder return delay', fieldingReturnDelay, interceptRating, fielder.skill.defense);\n            }\n        } else {\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        return Animator.animateFieldingTrajectory(this.game);\n    },\n    /**\n     * @param splayAngle\n     * @param landingDistance\n     * @returns {string|bool}\n     */\n    findFielder : function(splayAngle, landingDistance) {\n        if (Math.abs(90 - splayAngle) > 50) return false;\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\n            return 'pitcher';\n        }\n        if (landingDistance > 20 && landingDistance + (Math.abs(90 - splayAngle))/90*37 < 155) {\n            if (splayAngle < 45 + 23) {\n                return 'third';\n            } else if (splayAngle < 45 + 23 + 23) {\n                return 'short';\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\n                return 'second';\n            } else {\n                return 'first';\n            }\n        } else if (landingDistance > 90 && landingDistance < 310) {\n            if (splayAngle < 45 + 28) {\n                return 'left';\n            } else if (splayAngle < 45 + 28 + 34) {\n                return 'center';\n            } else {\n                return 'right';\n            }\n        } else {\n            return false;\n        }\n    },\n    positions : {\n        pitcher : [90, 66],\n        catcher : [0, 0],\n        first : [90 + 45 - 7, 98],\n        second : [90 + 12.5, 130],\n        short : [90 - 12.5, 130],\n        third : [90 - 45 + 7, 98],\n        left : [45 + 14, 280],\n        center : [90, 280],\n        right : [135 - 14, 280]\n    },\n    getPolarDistance : function(a, b) {\n        return Mathinator.getPolarDistance(a, b);\n    },\n    fieldingTest : function() {\n        var angle = Math.random()*90+45;\n        var distance = Math.random()*320;\n        var fielder = this.findFielder(angle, distance);\n        var data = {};\n        if (fielder) {\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\n                data.fielder = fielderCandidates[1];\n                data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\n                data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]]);\n            return data;\n        }\n    },\n    aggregateFieldingTest : function() {\n        var fielders = {\n            pitcher : {tally : 0, distances : []},\n            catcher : {tally : 0, distances : []},\n            first : {tally : 0, distances : []},\n            second : {tally : 0, distances : []},\n            short : {tally : 0, distances : []},\n            third : {tally : 0, distances : []},\n            left : {tally : 0, distances : []},\n            center : {tally : 0, distances : []},\n            right : {tally : 0, distances : []},\n            'false' : {tally : 0, distances : []}\n        };\n        var selections = [];\n        for (var i = 0; i < 1000; i++) {\n            var angle = Math.random()*90+45;\n            var distance = Math.random()*320;\n            var fielder = this.findFielder(angle, distance);\n            fielders[fielder].tally++;\n            if (fielder) {\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\n            }\n            selections.push([angle, distance]);\n            selections.push(this.fielderSelectionTest(angle, distance, true));\n        }\n        return [fielders, selections];\n    },\n    fielderSelectionTest : function(angle, distance, returnFielder) {\n        var distances = [];\n        var minDistance = 300;\n        var giraffe = this;\n        var fielder = false;\n        Iterator.each(this.positions, function(position, spot) {\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\n            distances[thisDistance] = position;\n            if (minDistance > thisDistance) {\n                minDistance = thisDistance;\n                fielder = position;\n            }\n        });\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\n    }\n};\n\nexports.Field = Field;","var Game = function(m) {\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor : Game,\n    gamesIntoSeason : 0,\n    humanControl : 'none', //home, away, both, none\n    console : false,\n    quickMode : true,\n    init : function(m) {\n        if (m) window.mode = m;\n        this.gamesIntoSeason = 1 + Math.floor(Math.random()*142);\n        this.field = new Field(this);\n        this.teams.away = new Team(this);\n        this.teams.home = new Team(this);\n        this.log = new Log();\n        this.log.game = this;\n        this.helper = helper;\n        while (this.teams.away.name == this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n    },\n    getInning : function() {\n        return mode == 'n' ? (this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ')) : this.half.toUpperCase() + ' ' + this.inning;\n    },\n    humanBatting : function() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n        }\n    },\n    humanPitching : function() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n        }\n    },\n    end : function() {\n        this.stage = 'end';\n        var e, n;\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' :\n            (this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!');\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName()+'の勝利' :\n            (this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName()+'の勝利');\n        this.log.note(e, n);\n    },\n    stage : 'pitch', //pitch, swing\n    simulateInput : function(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch') {\n            this.autoPitch(callback);\n        } else if (this.stage == 'swing') {\n            if (typeof this.pitchTarget != 'object') {\n                this.pitchTarget = {x: 100, y: 100};\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    simulatePitchAndSwing : function(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        var giraffe = this;\n        setTimeout(function() {\n            if (typeof giraffe.pitchTarget != 'object') {\n                giraffe.pitchTarget = {x: 100, y: 100};\n            }\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function(callback) {callback();});\n        }, giraffe.field.hasRunnersOn() ? 2400 : 3900);\n    },\n    /**\n     * generically receive click input and decide what to do\n     * @param x\n     * @param y\n     * @param callback\n     */\n    receiveInput : function(x, y, callback) {\n        if (this.humanControl == 'none') {\n            return;\n        }\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage == 'swing'  && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    autoPitchSelect : function() {\n        var pitchName = this.helper.selectRandomPitch();\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\n            pitchName = this.helper.selectRandomPitch();\n        }\n        var pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    autoPitch : function(callback) {\n        var pitcher = this.pitcher,\n            giraffe = this;\n        if (this.stage == 'pitch') {\n            pitcher.windingUp = true;\n            if (!this.console) {\n                jQ('.baseball').addClass('hide');\n                var windup = jQ('.windup');\n                windup.css('width', '100%');\n            }\n            this.autoPitchSelect();\n            var pitch = Distribution.pitchLocation(),\n                x = pitch.x,\n                y = pitch.y;\n            if (this.quickMode) {\n                this.thePitch(x, y, callback);\n            } else {\n                windup.animate({width: 0}, this.field.hasRunnersOn() ? 1500 : 3000, function() {\n                    !giraffe.console && jQ('.baseball.pitch').removeClass('hide');\n                    giraffe.thePitch(x, y, callback);\n                    pitcher.windingUp = false;\n                });\n            }\n        }\n    },\n    autoSwing : function(deceptiveX, deceptiveY, callback) {\n        var giraffe = this;\n        var bonus = this.batter.eye.bonus || 0,\n            eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus,\n            convergence, convergenceSum;\n\n        var x = Distribution.centralizedNumber(),\n            y = Distribution.centralizedNumber();\n        if (100*Math.random() < eye) {\n            convergence = 1.35 * 5*eye/100;\n            convergenceSum = 1 + convergence;\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n        } else {\n            convergence = 1.35 * 2*eye/100;\n            convergenceSum = 1 + convergence;\n        }\n        x = (deceptiveX*(convergence) + x)/convergenceSum;\n        y = (deceptiveY*(convergence) + y)/convergenceSum;\n\n        var swingProbability = Distribution.swingLikelihood(eye, x, y, this.umpire);\n        if (swingProbability < 100*Math.random()) {\n            x = -20;\n        }\n        callback(function() {\n            giraffe.theSwing(x, y);\n        });\n    },\n    thePitch : function(x, y, callback) {\n        if (this.stage == 'pitch') {\n            this.pitcher.fatigue++;\n            this.pitchTarget.x = x;\n            this.pitchTarget.y = y;\n\n            this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\n            this.battersEye = text.getBattersEye(this);\n\n            var control = this.pitchInFlight.control;\n            this.pitchTarget.x = Distribution.pitchControl(this.pitchTarget.x, control);\n            this.pitchTarget.y = Distribution.pitchControl(this.pitchTarget.y, control);\n\n            if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\n\n            var breakEffect = Distribution.breakEffect(this.pitchInFlight, this.pitchTarget.x, this.pitchTarget.y);\n\n            this.pitchInFlight.x = breakEffect.x;\n            this.pitchInFlight.y = breakEffect.y;\n\n            this.log.notePitch(this.pitchInFlight, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\n                callback();\n            } else {\n                this.autoSwing(x, y, callback);\n            }\n        }\n    },\n    battersEye : {\n        e: '',\n        n: ''\n    },\n    theSwing : function(x, y, callback) {\n        if (this.stage == 'swing') {\n            this.batter.fatigue++;\n            this.swingResult = {};\n            var bonus = this.batter.eye.bonus || 0,\n                eye = this.batter.skill.offense.eye + 6*(this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n            this.swingResult.x = Distribution.swing(x, this.pitchInFlight.x, eye);\n            this.swingResult.y = Distribution.swing(y, this.pitchInFlight.y, eye);\n\n            this.swingResult.angle = this.setBatAngle();\n\n            var recalculation = Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\n            this.swingResult.x = recalculation.x;\n            this.swingResult.y = recalculation.y;\n\n            if (x >= 0 && x <= 200) {\n                this.swingResult.looking = false;\n                if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\n                    this.swingResult.contact = true;\n                    this.batter.eye.bonus = Math.max(0, eye -\n                        Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\n                    this.swingResult = this.field.determineSwingContactResult(this.swingResult);\n                    // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\n                    this.debug.push(this.swingResult);\n                } else {\n                    this.swingResult.contact = false;\n                }\n            } else {\n                this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150\n                    && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\n                this.swingResult.contact = false;\n                this.swingResult.looking = true;\n                this.batter.eye.x = this.pitchInFlight.x;\n                this.batter.eye.y = this.pitchInFlight.y;\n            }\n\n            this.log.noteSwing(this.swingResult);\n            this.stage = 'pitch';\n\n            var half = this.half;\n            this.umpire.makeCall();\n            if (half != this.half) {\n                callback = this.startOpponentPitching;\n            }\n\n            if (typeof callback == 'function') {\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\n                    callback();\n                } else {\n                    this.autoPitch(callback);\n                }\n            }\n        }\n    },\n    setBatAngle : function(x, y) {\n        var giraffe = this;\n        var origin = {\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\n            y: 160\n        };\n        var swing = {\n            x: x ? x : giraffe.pitchInFlight.x + this.swingResult.x,\n            y: y ? y : giraffe.pitchInFlight.y + this.swingResult.y\n        };\n        return Mathinator.battingAngle(origin, swing);\n    },\n    debugOut : function() {\n        log('grounders', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder;}).length);\n        log('grounders thrown out', this.debug.filter(function(a){return !a.caught && !a.foul && a.grounder && a.thrownOut;}).length);\n        log('weak outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && a.thrownOut;}).length);\n        log('good outfield hits', this.debug.filter(function(a){return !a.caught && !a.foul && !a.grounder && !a.thrownOut;}).length);\n        log('slugging', this.debug.filter(function(a){return a.bases == 1;}).length,\n            this.debug.filter(function(a){return a.bases == 2;}).length,\n            this.debug.filter(function(a){return a.bases == 3;}).length,\n            this.debug.filter(function(a){return a.bases == 4;}).length\n        );\n\n        var PO = {};\n        this.debug.map(function(a) {\n            if (!PO[a.fielder]) {\n                PO[a.fielder] = 0;\n            }\n            if (!a.bases && a.fielder) {\n                PO[a.fielder]++;\n            }\n        });\n        log('fielding outs', PO);\n\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\n        var atBats = [];\n        hitters.map(function(a) {atBats = atBats.concat(a.atBats);});\n\n        var LO = atBats.filter(function(ab) {return ab == 'LO';}).length;\n        log('line outs', LO);\n        var FO = atBats.filter(function(ab) {return ab == 'FO';}).length;\n        log('fly outs', FO);\n        var GO = atBats.filter(function(ab) {return ab == 'GO';}).length;\n        log('groundouts', GO);\n        var SO = atBats.filter(function(ab) {return ab == 'SO';}).length;\n        log('strikeouts', SO);\n        log('fouls', this.debug.filter(function(a){return a.foul;}).length);\n    },\n    startOpponentPitching : null, // late function\n    pitchTarget : {x : 100, y : 100},\n    pitchInFlight : {\n        x : 100,\n        y : 100,\n        breakDirection : [0, 0],\n        name : 'slider',\n        velocity : 50,\n        'break' : 50,\n        control : 50\n    },\n    swingResult : {\n        x : 100, //difference to pitch location\n        y : 100, //difference to pitch location\n        strike : false,\n        foul : false,\n        caught : false,\n        contact : false,\n        looking : true,\n        bases : 0,\n        fielder : 'short',\n        outs : 0\n    },\n    pitchSelect : function() {\n\n    },\n    field : null,\n    teams : {\n        away : null,\n        home : null\n    },\n    log : null,\n    half : 'top',\n    inning : 1,\n    scoreboard : {\n        away : {\n            1 : 0,\n            2 : 0,\n            3 : 0,\n            4 : 0,\n            5 : 0,\n            6 : 0,\n            7 : 0,\n            8 : 0,\n            9 : 0\n        },\n        home : {\n            1 : 0,\n            2 : 0,\n            3 : 0,\n            4 : 0,\n            5 : 0,\n            6 : 0,\n            7 : 0,\n            8 : 0,\n            9 : 0\n        }\n    },\n    tally : {\n        away : {\n            H : 0,\n            R : 0,\n            E : 0\n        },\n        home : {\n            H : 0,\n            R : 0,\n            E : 0\n        }\n    }\n};\n\nexports.Game = Game;","var Manager = function(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor : Manager,\n    init : function(team) {\n        this.team = team;\n    },\n    makeLineup : function() {\n        var jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        this.team.positions.pitcher.number = jerseyNumber++;\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], true);\n        this.team.positions.catcher.position = 'catcher';\n        this.team.positions.catcher.number = jerseyNumber++;\n        Iterator.each(this.team.bench, function(key, player) {\n            player.number = jerseyNumber++;\n        });\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], true);\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding']);\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill : function(pool, skillset, mustBeRightHanded) {\n        mustBeRightHanded = !!mustBeRightHanded;\n        if (this.team.bench.length || pool == this.team.positions) {\n            var selection = this.team.bench[0];\n            var rating = 0;\n            var index = 0;\n            Iterator.each(pool, function(key, player) {\n                var skills = skillset.slice();\n                var cursor = player.skill;\n                var property = skills.shift();\n                while (property) {\n                    cursor = cursor[property];\n                    property = skills.shift();\n                }\n                if (!(player.order+1) && cursor >= rating && (!mustBeRightHanded || player.throws == 'right')) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            if (pool == this.team.bench) {\n                delete this.team.bench[index];\n                this.team.bench = this.team.bench.filter(function(player) {\n                    return player instanceof selection.constructor;\n                });\n            }\n            return selection;\n        }\n        return 'no players available';\n    }\n};\n\nexports.Manager = Manager;","var Player = function(team) {\n    this.init(team);\n    var offense = this.skill.offense;\n    var defense = this.skill.defense;\n    var randBetween = function(a, b, skill) {\n        if (offense[skill]) skill = offense[skill];\n        if (defense[skill]) skill = defense[skill];\n        if (isNaN(skill)) skill = 50;\n        skill = Math.sqrt(0.05 + Math.random()*0.95)*skill;\n        return Math.floor((skill/100) * (b - a) + a);\n    };\n    // let's just say we're about X games into the season\n    var gamesIntoSeason = this.team.game.gamesIntoSeason;\n    var IP, ER, GS, W, L;\n    if (this.skill.pitching > 65) {\n        IP = (this.skill.pitching - 65)*gamesIntoSeason/20;\n        ER = (IP/9)*randBetween(800, 215, this.skill.pitching)/100;\n        if (IP > gamesIntoSeason) {\n            //starter\n            GS = Math.floor(gamesIntoSeason/5);\n            W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching/1.20);\n            L = randBetween((GS - W), 0, this.skill.pitching/3);\n        } else {\n            //reliever\n            GS = Math.floor(gamesIntoSeason/40);\n            W = randBetween(0, GS*0.6, this.skill.pitching);\n            L = randBetween((GS - W), 0, this.skill.pitching);\n        }\n    }\n    var pa = randBetween(gamesIntoSeason*3, gamesIntoSeason*5, 'speed');\n    var paRemaining = pa;\n    var bb = Math.floor(randBetween(0, 18, 'power')*paRemaining/100);\n    paRemaining -= bb;\n    var ab = paRemaining;\n    var so = Math.floor(randBetween(33, 2, 'eye')*paRemaining/100);\n    paRemaining -= so;\n    var h = Math.floor(randBetween(185, 472, 'eye')*paRemaining/1000);\n    paRemaining -= h;\n\n    var doubles = randBetween(0, h/3, 'power');\n    var triples = randBetween(0, h/12, 'speed');\n    var hr = Math.max(0, randBetween(-h/5, h/5, 'power'));\n    var r = randBetween(h/8, (h + bb)/3, 'speed') + hr;\n    var rbi = randBetween(h/8, (h)/2, 'power') + hr;\n    var hbp = randBetween(0, gamesIntoSeason/25);\n    var sf = randBetween(0, gamesIntoSeason/5, 'eye');\n\n    var chances = randBetween(0, gamesIntoSeason*10, 'fielding');\n    var E = randBetween(chances/10, 0, 'fielding');\n    var PO = chances - E;\n\n    this.stats = {\n        pitching : {\n            pitches : 0, // in game\n            GS : GS,\n            W: W,\n            L: L,\n            strikes : 0, // in game\n            K : 0, // in game\n            getERA : function() {\n                return 9 * this.ER / Math.max(1/3, this.IP[0] + this.IP[1]/3);\n            },\n            ERA : null,\n            ER : ER,\n            H : 0, // in game\n            HR : 0, // in game\n            BB : 0, // in game\n            IP : [IP,0]\n        },\n        batting : {\n            getBA : function() {\n                return this.h / (Math.max(1, this.ab));\n            },\n            ba : null,\n            getOBP : function() {\n                return (h + bb + hbp)/(ab + bb + hbp + sf);\n            },\n            obp : null,\n            getSLG : function() {\n                return ((h - doubles - triples - hr) + 2*doubles + 3*triples + 4*hr)/ab;\n            },\n            slg : null,\n            pa : pa,\n            ab : ab,\n            so : so,\n            bb : bb,\n            h : h,\n            '2b' : doubles,\n            '3b' : triples,\n            hr : hr,\n            r : r,\n            rbi : rbi,\n            hbp : hbp\n        },\n        fielding : {\n            E : E,\n            PO : PO, // should depend on position\n            A : Math.floor(Math.random()*5) + 1 // ehh should depend on position\n        }\n    };\n    this.stats.pitching.ERA = this.stats.pitching.getERA();\n    this.stats.batting.ba = this.stats.batting.getBA();\n};\n\nPlayer.prototype = {\n    constructor : Player,\n    init : function(team) {\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = {averaging : []};\n        this.number = 0;\n        this.randomizeSkills(Math.random() > 0.9);\n        var surnameKey = Math.floor(Math.random()*data.surnames.length),\n            nameKey = Math.floor(Math.random()*data.names.length);\n\n        this.name = data.surnames[surnameKey] + ' ' + data.names[nameKey];\n        var jSurname = data.surnamesJ[surnameKey],\n            jGivenName = data.namesJ[nameKey];\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surname = data.surnames[surnameKey];\n        this.surnameJ = data.surnamesJ[surnameKey];\n        this.atBats = [];\n    },\n    atBatObjects : [],\n    getAtBats : function() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            this.atBatObjects = this.atBats.map(function(item) {\n                return new AtBat(item);\n            });\n        }\n        return this.atBatObjects;\n    },\n    recordRBI : function() {\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.RBI_INDICATOR;\n    },\n    recordInfieldHit : function() {\n        this.atBats[this.atBats.length - 1] += AtBat.prototype.INFIELD_HIT_INDICATOR;\n    },\n    randomizeSkills : function(hero) {\n        this.hero = hero;\n        var giraffe = this;\n        var randValue = function(isPitching) {\n            var value = Math.floor(Math.pow(Math.random(), 0.75)*80 + Math.random()*20);\n            if (hero) {\n                value += Math.floor((100 - value)*Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value;\n        };\n        this.skill.offense = {\n            eye : randValue(),\n            power : randValue(),\n            speed : randValue()\n        };\n        this.skill.defense = {\n            catching : randValue(),\n            fielding : randValue(),\n            speed : randValue(),\n            throwing : randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity : randValue(true),\n            'break' : randValue(true),\n            control : randValue(true)\n        };\n        this.pitching.slider = {\n            velocity : randValue(true),\n            'break' : randValue(true),\n            control : randValue(true)\n        };\n        if (Math.random() < 0.17) {\n            // can pitch!\n            if (Math.random() > 0.6) {\n                this.pitching['2-seam'] = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                };\n            }\n            if (Math.random() < 0.18) {\n                this.pitching.fork = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                };\n            }\n            if (Math.random() > 0.77) {\n                this.pitching.cutter = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                };\n            }\n            if (Math.random() < 0.21) {\n                this.pitching.sinker = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.4) {\n                this.pitching.curve = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.9) {\n                this.pitching.change = {\n                    velocity : randValue(true),\n                    'break' : randValue(true),\n                    control : randValue(true)\n                };\n            }\n        }\n        this.skill.pitching = Math.floor((this.pitching.averaging.reduce(function(prev, current) {\n            return prev + current;\n        }))/this.pitching.averaging.length+this.pitching.averaging.length*3);\n        delete this.pitching.averaging;\n    },\n    getSurname : function() {\n        return mode == 'n' ? this.surnameJ : this.surname;\n    },\n    getName : function() {\n        return mode == 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber : function() {\n        return text('#') + this.number;\n    },\n    getOrder : function() {\n        return text([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\n    },\n    eye : {},\n    fatigue : 0,\n    name : '',\n    number : 0,\n    position : '',\n    atBats : []\n};\n\nexports.Player = Player;","var Team = function(game) {\n    this.init(game);\n};\n\nTeam.prototype = {\n    constructor : Team,\n    init : function(game) {\n        this.pickName();\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher : null,\n            catcher : null,\n            first : null,\n            second : null,\n            short : null,\n            third : null,\n            left : null,\n            center : null,\n            right : null\n        };\n        this.game = game;\n        for (var j = 0; j < 20; j++) {\n            this.bench.push(new Player(this));\n        }\n        if (this.bench.length == 20) {\n            this.manager = new Manager(this);\n            this.manager.makeLineup();\n        }\n    },\n    pickName : function() {\n        var teamNameIndex = Math.floor(Math.random()*data.teamNames.length);\n        this.name = data.teamNames[teamNameIndex];\n        this.nameJ = data.teamNamesJ[teamNameIndex];\n    },\n    getName : function() {\n        return mode == 'n' ? this.nameJ : this.name;\n    },\n    lineup : [],\n    positions : {},\n    manager : null,\n    bench : [],\n    bullpen : [],\n    nowBatting : 0,\n    expanded : 'Player&'\n};\n\nexports.Team = Team;","var Umpire = function(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor : Umpire,\n    init : function(game) {\n        this.game = game;\n        this.playBall();\n    },\n    count : {\n        strikes : 0,\n        balls : 0,\n        outs : 0\n    },\n    playBall : function() {\n        this.game.half = 'top';\n        this.game.inning = 1;\n        this.game.batter = this.game.teams.away.lineup[0];\n        this.game.batterRunner = this.game.teams.away.lineup[0];\n        this.game.deck = this.game.teams.away.lineup[1];\n        this.game.hole = this.game.teams.away.lineup[2];\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\n        var n = '一回のオモテ、'+this.game.teams.away.getName()+'の攻撃対'+this.game.teams.home.getName()+'、ピッチャーは'+this.game.teams.home.positions.pitcher.getName()+'。',\n            e = 'Top 1, '+this.game.teams.away.name+' offense vs. '+this.game.teams.home.positions.pitcher.name+' starting for '+this.game.teams.home.name;\n        this.game.log.note(e, n);\n        this.game.log.noteBatter(\n            this.game.batter\n        );\n    },\n    makeCall : function() {\n        this.says = '';\n\n        var result = this.game.swingResult;\n        var pitcher = this.game.pitcher;\n        var batter = this.game.batter;\n\n        this.game.batterRunner = this.game.batter;\n\n        pitcher.stats.pitching.pitches++;\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            if (result.contact) {\n                if (result.caught) {\n                    this.count.outs++;\n                    pitcher.stats.pitching.IP[1]++;\n                    if (result.flyAngle < 10) {\n                        this.game.batter.atBats.push(Log.prototype.LINEOUT);\n                    } else {\n                        this.game.batter.atBats.push(Log.prototype.FLYOUT);\n                    }\n                    batter.stats.batting.pa++;\n                    batter.stats.batting.ab++;\n                    this.newBatter(); //todo: sac fly\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        pitcher.stats.pitching.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\n                            this.newBatter(); //todo: sac\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][Log.prototype.SINGLE]++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away'].E++;\n                                    this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder].stats.fielding.E++;\n                                }\n                            }\n                            var bases = result.bases;\n                            switch (bases) {\n                                case 0 :\n                                    this.game.batter.atBats.push(Log.prototype.GROUNDOUT);\n                                    break;\n                                case 1 :\n                                    if (result.error) {\n                                        this.game.batter.atBats.push(Log.prototype.REACHED_ON_ERROR);\n                                    } else {\n                                        this.game.batter.atBats.push(Log.prototype.SINGLE);\n                                        batter.stats.batting.h++;\n                                    }\n                                    break;\n                                case 2 :\n                                    this.game.batter.atBats.push(Log.prototype.DOUBLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3 :\n                                    this.game.batter.atBats.push(Log.prototype.TRIPLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4 :\n                                    this.game.batter.atBats.push(Log.prototype.HOMERUN);\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            if (bases > 0 && bases < 4 && !result.error) {\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\n                                    batter.recordInfieldHit();\n                                }\n                            }\n                            if (bases >= 1) {\n                                this.advanceRunners();\n                                this.reachBase();\n                                bases -= 1;\n                            }\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                pitcher.stats.pitching.strikes++;\n                this.count.strikes++;\n            }\n        }\n\n        this.says = (this.count.balls + ' and ' + this.count.strikes);\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            batter.atBats.push(Log.prototype.STRIKEOUT);\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            batter.atBats.push(Log.prototype.WALK);\n            this.advanceRunners(true).reachBase().newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    reachBase : function() {\n        this.game.field.first = this.game.batter;\n        this.game.field.first.fatigue += 2;\n        return this;\n    },\n    advanceRunners : function(isWalk) {\n        isWalk = !!isWalk;\n\n        if (isWalk) {\n            if (this.game.field.first) {\n                if (this.game.field.second) {\n                    if (this.game.field.third) {\n                        //bases loaded\n                        this.game.batter.recordRBI();\n                        this.game.batter.stats.batting.rbi++;\n                        this.game.field.third.atBats.push(Log.prototype.RUN);\n                        this.game.field.third.stats.batting.r++;\n                        this.game.pitcher.stats.pitching.ER++;\n                        this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\n                        this.game.tally[this.game.half == 'top' ? 'away' : 'home'].R++;\n                        this.game.field.third = this.game.field.second;\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    } else {\n                        // 1st and second\n                        this.game.field.third = this.game.field.second;\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    }\n                } else {\n                    if (this.game.field.third) {\n                        // first and third\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    } else {\n                        // first only\n                        this.game.field.second = this.game.field.first;\n                        this.game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n            if (this.game.field.third instanceof this.game.batter.constructor) {\n                // run scored\n                this.game.scoreboard[this.game.half == 'top' ? 'away' : 'home'][this.game.inning]++;\n                this.game.tally[this.game.half == 'top' ? 'away' : 'home'].R++;\n                if (this.game.batter != this.game.field.third) {\n                    this.game.batter.recordRBI();\n                    this.game.field.third.atBats.push(Log.prototype.RUN);\n                }\n                this.game.batter.stats.batting.rbi++;\n                this.game.field.third.stats.batting.r++;\n                this.game.pitcher.stats.pitching.ER++;\n            }\n            this.game.field.third = this.game.field.second;\n            this.game.field.second = this.game.field.first;\n            this.game.field.first = null;\n        }\n        return this;\n    },\n    newBatter : function() {\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        this.game.log.notePlateAppearanceResult(this.game);\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\n        this.game.batter = team.lineup[(team.nowBatting + 1)%9];\n        this.game.deck = team.lineup[(team.nowBatting + 2)%9];\n        this.game.hole = team.lineup[(team.nowBatting + 3)%9];\n        team.nowBatting = (team.nowBatting + 1)%9;\n        if (this.count.outs < 3) {\n            this.game.log.noteBatter(this.game.batter);\n        }\n    },\n    changeSides : function() {\n        this.game.swingResult.looking = true; // hide bat\n        this.game.pitchInFlight.x = null; // hide ball\n        this.game.pitchInFlight.y = null; // hide ball\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        var offense, defense;\n        this.game.field.first = null;\n        this.game.field.second = null;\n        this.game.field.third = null;\n        if (this.game.half == 'top') {\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\n                return this.game.end();\n            }\n            this.game.half = 'bottom';\n        } else {\n            if (this.game.inning + 1 > 9) {\n                return this.game.end();\n            }\n            this.game.inning++;\n            this.game.half = 'top';\n        }\n        offense = this.game.half == 'top' ? 'away' : 'home';\n        defense = this.game.half == 'top' ? 'home' : 'away';\n        var n = this.game.inning+'回の'+(this.game.half == 'top' ? 'オモテ' : 'ウラ')\n                +'、'+this.game.teams[(this.game.half == 'top' ? 'away' : 'home')].getName()+'の攻撃。',\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom')+' '+this.game.inning;\n        this.game.log.note(e, n);\n        var team = this.game.teams[offense];\n        this.game.batter = team.lineup[team.nowBatting];\n        this.game.batterRunner = this.game.batter;\n        this.game.deck = team.lineup[(team.nowBatting + 1)%9];\n        this.game.hole = team.lineup[(team.nowBatting + 2)%9];\n\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\n        this.game.log.noteBatter(this.game.batter);\n    },\n    says : 'Play ball!',\n    game : null\n};\n\nexports.Umpire = Umpire;","var Catcher = function() {\n    this.init();\n};\n\nCatcher.prototype = {\n    init : function() {\n\n    }\n};","var Fielder = function() {\n    this.init();\n};\n\nFielder.prototype = {\n    init : function() {\n\n    }\n};","var Pitcher = function() {\n    this.init();\n};\n\nPitcher.prototype = {\n    init : function() {\n\n    }\n};","var Batter = function() {\n    this.init();\n};\n\nBatter.prototype = {\n    init : function() {\n\n    }\n};","var Runner = function() {\n    this.init();\n};\n\nRunner.prototype = {\n    init : function() {\n\n    }\n};","IndexController = function($scope) {\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            mode = setMode;\n        }\n        return mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode;\n        $scope.y = new Game();\n        var game = $scope.y;\n        s2.y = game;\n        bindMethods();\n        jQ('.blocking').remove();\n        if (game.humanControl == 'none' && game.quickMode) {\n            var n = 0;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            log('sim ended');\n            game.debugOut();\n        } else if (game.humanControl == 'none') {\n            var scalar = game.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if (game.stage == 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*(game.field.hasRunnersOn() ? 4000 : 5500));\n        }\n        if (game.humanControl == 'away') {\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'home') {\n\n        }\n    };\n\n    var bindMethods = function() {\n        var game = $scope.y;\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n\n        // avoid scope cycles, any other easy way?\n        var bat = jQ('.target .swing.stance-indicator');\n        var showBat = function(event) {\n            if (game.humanBatting()) {\n                var offset = jQ('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\n                bat.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\",\n                    transform: \"rotate(\" + angle + \"deg)\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    bat.hide();\n                } else {\n                    bat.show();\n                }\n            }\n        };\n        var glove = jQ('.target .glove.stance-indicator');\n        var showGlove = function(event) {\n            if (game.humanPitching()) {\n            }\n        };\n\n        $scope.selectPitch = function(pitchName) {\n            if (game.stage == 'pitch') {\n                game.pitchInFlight = jQ.extend({}, game.pitcher.pitching[pitchName]);\n                game.pitchInFlight.name = pitchName;\n                game.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            jQ('.no-swing').click();\n            $scope.$apply();\n        };\n        game.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if (game.pitcher.windingUp) {\n                return;\n            }\n            if (game.humanPitching()) $scope.allowInput = false;\n            var offset = jQ('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n        $scope.$watch('y.humanBatting()', function() {\n            if ($scope.y.humanBatting()) {\n                jQ('.target').mousemove(showBat);\n            } else {\n                jQ('.target').unbind('mousemove', showBat);\n                bat.hide();\n            }\n        });\n        $scope.$watch('y.humanPitching()', function() {\n            if ($scope.y.humanPitching()) {\n                jQ('.target').mousemove(showGlove);\n            } else {\n                jQ('.target').unbind('mousemove', showGlove);\n                glove.hide();\n            }\n        });\n    };\n\n\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'js/internal/angular/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective);\n\nangular.module('controllers', [])\n    .controller('IndexController', IndexController);"],"sourceRoot":"/source/"}
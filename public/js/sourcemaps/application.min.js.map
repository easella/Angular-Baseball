{"version":3,"sources":["IndexController.js","SocketService.js","battersData.js","batteryData.js","field.js","ratingBlock.js","scoreboard.js","application.js"],"names":["IndexController","$scope","socket","text","Baseball","util","Game","Animator","service","window","s","t","mode","setMode","localStorage","__$yakyuuaikoukai_text_mode","teamJapan","provider","teams","Provider","assignTeam","y","game","half","batter","away","lineup","order","deck","hole","pitcher","positions","sim","proceedToGame","seventh","playball","spectate","quickMode","spectateCpu","humanControl","field","location","hash","slice","home","name","Math","ceil","random","io","reconnection","socketService","start","s2","bindMethods","$","remove","n","console","simulateInput","callback","stage","log","debugOut","scalar","auto","setInterval","clearInterval","simulatePitchAndSwing","$apply","updateFlightPath","hasRunnersOn","TIME_FROM_SET","TIME_FROM_WINDUP","undefined","inning","showMessage","timeOfDay","h","delay","interval","startTime","setTimeout","passMinutes","holdUpTimeouts","expandScoreboard","bind","bat","showBat","event","humanBatting","offset","relativeOffset","x","pageX","left","pageY","top","angle","setBatAngle","css","transform","bats","hide","show","glove","showGlove","humanPitching","clickLineup","player","team","sub","substitute","expanded","selectSubstitute","selectPitch","pitchName","pitchInFlight","extend","pitching","swingResult","looking","allowInput","holdUp","click","startOpponentPitching","indicate","$event","windingUp","clearTimeout","lastTimeout","length","shift","receiveInput","abbreviatePosition","position","catcher","first","second","short","third","center","right","fielderShortName","$watch","mousemove","unbind","SocketService","Service","NO_OPERATION","animator","prototype","connected","key","this","opponentService","on","emit","giraffe","register","pitch","thePitch","scope","swing","theSwing","contact","animateFieldingTrajectory","opponentConnected","$digest","toData","data","fromData","off","emitPitch","emitSwing","BattersDirective","templateUrl","cacheKey","transclude","BatteryDirective","FieldDirective","RatingBlockDirective","rating","link","ScoreboardDirective","app","angular","module","controller","config","$interpolateProvider","startSymbol","endSymbol","floor","directive"],"mappings":"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","file":"application.min.js","sourcesContent":["IndexController = function($scope, socket) {\n    var text = Baseball.util.text;\n    var Game = Baseball.Game;\n    var Animator = Baseball.service.Animator;\n\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            text.mode = setMode;\n            if (localStorage) {\n                localStorage.__$yakyuuaikoukai_text_mode = setMode;\n            }\n        }\n        return text.mode;\n    };\n\n    if (localStorage) {\n        var mode = localStorage.__$yakyuuaikoukai_text_mode;\n        if (mode === 'e' || mode === 'n') {\n            $scope.mode(mode);\n        }\n    }\n\n    $scope.teamJapan = function() {\n        var provider = new Baseball.teams.Provider;\n        provider.assignTeam($scope.y, 'TeamJapan', 'away');\n        var game = $scope.y;\n        if (game.half === 'top') {\n            game.batter = game.teams.away.lineup[game.batter.order];\n            game.deck = game.teams.away.lineup[(game.batter.order + 1) % 9];\n            game.hole = game.teams.away.lineup[(game.batter.order + 2) % 9];\n        } else {\n            game.pitcher = game.teams.away.positions.pitcher;\n        }\n    };\n\n    $scope.sim = function() {$scope.proceedToGame(1, 1);};\n    $scope.seventh = function() {$scope.proceedToGame(7);};\n    $scope.playball = function() {$scope.proceedToGame();};\n    $scope.spectate = function() {$scope.proceedToGame(0,1);};\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        $scope.y = new Game();\n        var game = $scope.y;\n        game.humanControl = spectateCpu ? 'none' : 'home';\n        game.quickMode = !!quickMode && quickMode !== 7;\n        var field = window.location.hash ? window.location.hash.slice(1) : game.teams.home.name + Math.ceil(Math.random()*47);\n        if (typeof io !== 'undefined') {\n            socket.game = game;\n            $scope.socket = io(/*window.location.hostname*/'http://georgefu.info' + ':64321', {\n                reconnection: false\n            });\n            $scope.socketService = socket;\n            socket.socket = $scope.socket;\n            socket.start(field);\n        }\n        window.location.hash = '#' + field;\n        s2.y = game;\n        bindMethods();\n        $('.blocking').remove();\n        if (game.humanControl == 'none' && game.quickMode) {\n            var n = 0;\n            Animator.console = true;\n            game.console = true;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            Animator.console = game.console = false;\n            log('sim ended');\n            game.debugOut();\n        } else if (game.humanControl == 'none') {\n            var scalar = game.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if (game.stage == 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*(game.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 2000 : Animator.TIME_FROM_WINDUP + 2000));\n        } else if (quickMode === 7 && spectateCpu === undefined) {\n            Animator.console = game.quickMode = game.console = true;\n            do {\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.inning < 7);\n            log('sim halted in 7th');\n            // todo debug 7th inning excess callbacks\n            game.debugOut();\n            Animator.console = game.quickMode = game.console = false;\n            game.stage = 'pitch';\n            game.half = 'top';\n            game.humanControl = 'home';\n        }\n        if (game.humanControl == 'away') {\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'home') {\n            $scope.showMessage = true;\n        }\n        if (!quickMode || quickMode === 7) {\n            game.timeOfDay.h = '00';\n            var delay = 100,\n                interval = 150;\n            while (delay < (game.startTime.h - game.timeOfDay.h) * interval) {\n                setTimeout(function() {\n                    game.passMinutes(60);\n                    $scope.$apply();\n                }, delay);\n                delay += interval;\n            }\n        }\n    };\n\n    var bindMethods = function() {\n        var game = $scope.y;\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        $scope.updateFlightPath = Animator.updateFlightPath.bind($scope);\n\n        // avoid scope cycles, any other easy way?\n        var bat = $('.target .swing.stance-indicator');\n        var showBat = function(event) {\n            if (game.humanBatting()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\n                bat.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\",\n                    transform: \"rotate(\" + angle + \"deg) rotateY(\"+(game.batter.bats == \"left\" ? 0 : -0)+\"deg)\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    bat.hide();\n                } else {\n                    bat.show();\n                }\n            }\n        };\n        var glove = $('.target .glove.stance-indicator');\n        var showGlove = function(event) {\n            if (game.humanPitching()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                glove.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    glove.hide();\n                } else {\n                    glove.show();\n                }\n            }\n        };\n\n        $scope.clickLineup = function(player) {\n            if (player.team.sub) {\n                var sub = player.team.sub;\n                player.team.sub = null;\n                return sub.substitute(player);\n            }\n            player.team.expanded = (player.team.expanded == player ? null : player);\n        };\n        $scope.selectSubstitute = function(player) {\n            if (game.humanControl === 'home' && player.team !== game.teams.home) return;\n            if (game.humanControl === 'away' && player.team !== game.teams.away) return;\n            player.team.sub = (player.team.sub === player ? null : player);\n        };\n\n        $scope.selectPitch = function(pitchName) {\n            if (game.stage == 'pitch') {\n                game.pitchInFlight = $.extend({}, game.pitcher.pitching[pitchName]);\n                game.pitchInFlight.name = pitchName;\n                game.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            $('.input-area').click();\n            $scope.$apply();\n        };\n        game.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if (game.pitcher.windingUp) {\n                return;\n            }\n            if (game.humanPitching()) $scope.allowInput = false;\n            var offset = $('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            $scope.showMessage = false;\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (text.mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n        $scope.$watch('y.humanBatting()', function() {\n            if ($scope.y.humanBatting()) {\n                $('.input-area').mousemove(showBat);\n            } else {\n                $('.input-area').unbind('mousemove', showBat);\n                bat.hide();\n            }\n        });\n        $scope.$watch('y.humanPitching()', function() {\n            if ($scope.y.humanPitching()) {\n                $('.input-area').mousemove(showGlove);\n            } else {\n                $('.input-area').unbind('mousemove', showGlove);\n                glove.hide();\n            }\n        });\n        var aside = {\n            left: $('aside.image-panel.left'),\n            right: $('aside.image-panel.right')\n        };\n        //$scope.$watch('y.playResult', function() {\n        //    aside.left.hide();\n        //    aside.right.hide();\n        //    aside.left.fadeIn(1000, function() {\n        //        aside.left.fadeOut(1000);\n        //        aside.right.fadeIn(1000, function() {\n        //            aside.right.fadeOut(1000);\n        //        })\n        //    });\n        //    $scope.imagePanel = {\n        //        left: 'url(./public/images/' + $scope.y.playResult.batter + '.png)',\n        //        right: 'url(./public/images/' + $scope.y.playResult.fielder + '.png)'\n        //    };\n        //});\n    };\n\n\n};","var SocketService = function() {\n    var Service = function() {};\n    var game, socket, NO_OPERATION = function() {},\n        animator = Baseball.service.Animator;\n    Service.prototype = {\n        socket : {},\n        game : {},\n        connected : false,\n        start : function(key) {\n            game = this.game;\n            socket = this.socket;\n            game.opponentService = this;\n            this.connected = socket.connected;\n            this.on();\n            socket.emit('register', key);\n            socket.on('connect_failed reconnect_failed', function() {\n                console.log('connection unavailable');\n            });\n        },\n        on : function() {\n            var giraffe = this;\n            socket.on('register', this.register);\n            socket.on('connect reconnect', function() {\n                giraffe.connected = true;\n            });\n            socket.on('disconnect', function() {\n                giraffe.connected = false;\n            });\n            socket.on('pitch', function(pitch) {\n                //console.log('receive', 'pitch', pitch);\n                game.thePitch(0, 0, NO_OPERATION, pitch);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)();\n            });\n            socket.on('swing', function(swing) {\n                //console.log('receive', 'swing', swing);\n                game.theSwing(0, 0, NO_OPERATION, swing);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)(function() {\n                    if (swing.contact) {\n                        animator.animateFieldingTrajectory(game);\n                    }\n                });\n            });\n            socket.on('partner_disconnect', function() {\n                console.log('The opponent has disconnected');\n                game.opponentConnected = false;\n                var scope = window.s;\n                scope.$digest();\n            });\n            socket.on('partner_connect', function() {\n                game.opponentConnected = true;\n                var scope = window.s;\n                scope.$digest();\n            });\n            socket.on('opponent_taking_field', function() {\n                console.log('A challenger has appeared! Sending game data.');\n                socket.emit('game_data', game.toData());\n            });\n            socket.on('game_data', function(data) {\n                game.fromData(data);\n                var scope = window.s;\n                scope.$apply();\n            });\n            socket.on('field_in_use', function() {\n                game.opponentConnected = false;\n            });\n        },\n        off : function() {\n            socket.on('register', NO_OPERATION);\n        },\n        register: function(data) {\n            console.log(data);\n            if (data === 'away') {\n                game.humanControl = 'away';\n            }\n            socket.on('register', NO_OPERATION);\n        },\n        emitPitch : function(pitch) {\n            //console.log('emit', 'pitch', pitch);\n            socket.emit('pitch', pitch);\n        },\n        emitSwing : function(swing) {\n            //console.log('emit', 'swing', swing);\n            socket.emit('swing', swing);\n        },\n        swing : function() {\n\n        },\n        pitch : function() {\n\n        }\n    };\n    return new Service;\n};","BattersDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/batters.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","BatteryDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/battery.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","FieldDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/field.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","RatingBlockDirective = function() {\n    return {\n        scope: {\n            rating: '='\n        },\n        transclude: true,\n        templateUrl: 'public/html/views/directives/ratingBlock.html?cache='+cacheKey,\n        link: function(scope) {\n        }\n    };\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'public/html/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives'])\n    .service('socket', SocketService)\n    .controller('IndexController', ['$scope', 'socket', IndexController]);\n\napp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{{');\n    $interpolateProvider.endSymbol('}}');\n});\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective)\n    .directive('batters', BattersDirective)\n    .directive('battery', BatteryDirective)\n    .directive('field', FieldDirective)\n    .directive('ratingBlock', RatingBlockDirective);"],"sourceRoot":"/source/"}
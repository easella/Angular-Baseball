{"version":3,"sources":["bundle.js","IndexController.js","SocketService.js","battersData.js","batteryData.js","field.js","scoreboard.js","application.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_baseballUtilityLog","AtBat","text","this","infield","indexOf","INFIELD_HIT_INDICATOR","replace","split","RBI_INDICATOR","rbi","log","Log","beneficial","WALK","SINGLE","HOMERUN","DOUBLE","TRIPLE","SACRIFICE","REACHED_ON_ERROR","constructor","identifier","baseball/Utility/Log",2,"_baseballModelPlayer","_baseballServices_services","Field","game","init","first","second","third","hasRunnersOn","Player","determineSwingContactResult","swing","x","y","splayAngle","angle","flyAngle","power","batter","skill","offense","eye","bonus","landingDistance","Distribution","Math","abs","foul","fielder","findFielder","travelDistance","splay","sacrificeAdvances","half","teams","home","positions","away","fatigue","error","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","caught","umpire","count","outs","sacrificeThrowInTime","Mathinator","fielderReturnDelay","getBaseRunningTime","push","bases","thrownOut","fieldingReturnDelay","fieldingDelay","outfielder","left","center","right","baseRunningTime","difficulty","fieldersChoice","fielders","team","force","forcePlaySituation","additionalOuts","throwingDelay","infieldThrowDelay","catcher","doublePlay","firstOut","swingResult","Animator","animateFieldingTrajectory","pitcher","short","b","fieldingTest","random","distance","data","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","tally","distances","false","selections","returnFielder","minDistance","giraffe","Iterator","each","position","spot","thisDistance","baseball/Model/Player","baseball/Services/_services",3,"_baseballModelField","_baseballModelTeam","_baseballModelUmpire","_baseballUtility_utils","Game","m","gamesIntoSeason","humanControl","console","quickMode","debug","startTime","timeOfDay","slice","mode","floor","field","Team","helper","name","pickName","Umpire","humanPitching","stage","getInning","inning","toUpperCase","humanBatting","end","R","getName","stats","pitching","W","L","note","simulateInput","callback","pitchTarget","autoPitch","autoSwing","simulatePitchAndSwing","setTimeout","TIME_FROM_SET","TIME_FROM_WINDUP","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","selectRandomPitch","select","hasOwnProperty","pitch","pitchInFlight","windingUp","$","addClass","windup","css","pitchLocation","animate","width","removeClass","deceptiveX","deceptiveY","convergence","convergenceSum","balls","strikes","centralizedNumber","cpuSwing","swingProbability","swingLikelihood","opponentConnected","waitingCallback","awaitPitch","opponentService","emitSwing","awaitSwing","emitPitch","inFlight","override","breakDirection","pitchDefinitions","battersEye","getBattersEye","control","pitchControl","breakEffect","notePitch","setBatAngle","recalculation","getAngularOffset","precision","looking","contact","strike","max","sqrt","pow","noteSwing","result","makeCall","emit","startOpponentPitching","origin","bats","battingAngle","debugOut","filter","PO","map","hitters","lineup","concat","atBats","getAtBats","ab","LO","FO","GO","GIDP","SO","BB","SAC","FC","table","scoreboard","toData","players","deck","hole","nameJ","says","player","serialize","pitchRecord","record","fromData","playerJson","index","playerData","JSON","parse","side","resetStats","stabilizeShortRecord","velocity","break","playResult","showPlayResultPanels","batterOutcomes","atBat","pop","fielderOutcomes","pitchSelect",4,5,6,7,8,9,"resetTally","H","E","baseball/Model/Field","baseball/Model/Team","baseball/Model/Umpire","baseball/Utility/_utils","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","order","pool","skillset","requiredThrowingHandedness","selection","rating","skills","cursor","property","shift","_baseballModel_models","hero","averaging","randomizeSkills","surnameKey","surnames","nameKey","names","jSurname","surnamesJ","jGivenName","namesJ","surname","surnameJ","stringify","atBatObjects","IP","ER","GS","arguments","undefined","randBetween","total","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sac","chances","pitches","K","getK9","getERA","ERA","HR","WHIP","getWHIP","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","K9","item","recordRBI","recordInfieldHit","randValue","isPitching","catching","slider","fork","cutter","sinker","curve","change","reduce","prev","current","getSurname","getUniformNumber","getOrder","baseball/Model/_models","_baseballModelManager","bullpen","j","manager","teamNameIndex","teamNames","teamNamesJ","nowBatting","expanded","baseball/Model/Manager","playBall","batterRunner","noteBatter","advanceRunners","LINEOUT","FLYOUT","newBatter","runner","FIELDERS_CHOICE","reachBase","GROUNDOUT","hitByPitch","STRIKEOUT","changeSides","isWalk","RUN","canAdvance","notePlateAppearanceResult","lastBatter","_baseballModelAtBat","_baseballModelGame","baseball/Model/AtBat","baseball/Model/Game","TweenMax","loadTweenMax","window","set","to","from","killAll","HOLD_UP_ALLOWANCE","pitchBreak","updateFlightPath","$scope","top","breakTop","breakLeft","$baseballs","flightSpeed","originTop","originLeft","henka","quarter","pitchTransition","transitions","lastTimeout","allowInput","$apply","holdUpTimeouts","holdUp","ball","linearApproximateDragScalar","apexHeight","airTime","scalar","memory","bounding","sin","PI","velocityVerticalComponent","RADIAN","mathinator","transitionalTrajectory","show","time","transitionalCatcherPerspectiveTrajectory","fn","baseball/services/_services",10,"chance","scale","min","effect","actual",11,"collection","keys","Array",12,"square","SPLAY_INDICATOR_LEFT","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","radians","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","givenOrigin","height","currentDistance","projection","translateSwingResultToStylePosition","_top","_left","transform","intercept",13,"_baseballServicesAnimator","_baseballServicesDistribution","_baseballServicesIterator","_baseballServicesMathinator","baseball/Services/Animator","baseball/Services/Distribution","baseball/Services/Iterator","baseball/Services/Mathinator",14,"_baseballUtilityText","GITP","rec","shortRecord","stabilized","rec2","_note","noteJ","unshift","getBatter","longFormFielder","comma","recordJ","getPitchLocationDescription","batterIsLefty","say","noComma","noComma2","join","namePitch","stop","getSwing","getPlateAppearanceResult","out","outBy","contactResult","pointer","baseball/Utility/text",15,"_baseballUtilityData","_baseballUtilityHelper","baseball/Utility/data","baseball/Utility/helper",16,17,"4-seam","2-seam",18,"phrase","string","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike."," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Pitch","Control","Velocity","Break","At Bat","On Deck","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","2B","3B","RBI","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Play from the 7th","Throws/Bats","LHP","RHP","LHB","RHB","R "," L "," R ","#","Opponent connected","breaking","fielderShortName","slash","fielderLongName","charAt","statement","play","plural","is","base","fielderLong",19,"_baseballNamespace","Baseball","baseball/namespace",20,"model","service","util",21,"IndexController","socket","setMode","proceedToGame","spectateCpu","location","hash","ceil","io","hostname","socketService","start","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","SocketService","Service","NO_OPERATION","connected","on","register","scope","$digest","off","BattersDirective","templateUrl","cacheKey","transclude","BatteryDirective","FieldDirective","ScoreboardDirective","link","app","angular","controller","config","$interpolateProvider","startSymbol","endSymbol","directive"],"mappings":"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","file":"application.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar AtBat = (function () {\n    function AtBat(text) {\n        _classCallCheck(this, AtBat);\n\n        this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\n        text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\n        this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\n        this.rbi = text.split(this.text)[1] + '';\n\n        var log = new _baseballUtilityLog.Log();\n\n        var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\n        if (beneficial.indexOf(this.text) > -1) {\n            this.beneficial = true;\n        }\n    }\n\n    _createClass(AtBat, [{\n        key: 'toString',\n        value: function toString() {\n            return '' + this.infield + this.text + this.rbi;\n        }\n    }]);\n\n    return AtBat;\n})();\n\nAtBat.prototype.constructor = AtBat;\nAtBat.prototype.identifier = 'AtBat';\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\nAtBat.prototype.RBI_INDICATOR = '+';\n\nexports.AtBat = AtBat;\n\n},{\"baseball/Utility/Log\":14}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\n/**\n * The baseball field tracks the ball's movement, fielders, and what runners are on\n * @param game\n * @constructor\n */\nvar Field = function Field(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor: Field,\n    init: function init(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    /**\n     * @returns {boolean}\n     */\n    hasRunnersOn: function hasRunnersOn() {\n        return this.first instanceof _baseballModelPlayer.Player || this.second instanceof _baseballModelPlayer.Player || this.third instanceof _baseballModelPlayer.Player;\n    },\n    /**\n     * @param swing\n     * @returns {object}\n     */\n    determineSwingContactResult: function determineSwingContactResult(swing) {\n        var x = swing.x,\n            y = swing.y;\n        /**\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\n         * increase the left/right effect.\n         * @type {number}\n         */\n        var splayAngle = 90 - 1.5 * x + swing.angle * y / 35;\n        var flyAngle = -3 * y - swing.angle * y / 35;\n        var power = this.game.batter.skill.offense.power + (this.game.batter.eye.bonus || 0) / 5;\n        var landingDistance = _baseballServices_services.Distribution.landingDistance(power, flyAngle);\n        if (flyAngle < 0 && landingDistance > 120) {\n            landingDistance = (landingDistance - 120) / 4 + 120;\n        }\n        var game = this.game;\n\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        /**\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\n         * @type {number}\n         */\n        swing.splay = splayAngle - 90;\n        swing.sacrificeAdvances = [];\n\n        if (swing.fielder) {\n            var fielder = game.half == 'top' ? game.teams.home.positions[swing.fielder] : game.teams.away.positions[swing.fielder];\n            fielder.fatigue += 4;\n            swing.error = false;\n            var fieldingEase = fielder.skill.defense.fielding / 100,\n                throwingEase = fielder.skill.defense.throwing / 100;\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel * 1.65;\n            if (interceptRating > 0 && flyAngle > 0) {\n                //caught cleanly?\n                if (_baseballServices_services.Distribution.error(fielder)) {\n                    //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    swing.caught = false;\n                } else {\n                    swing.caught = true;\n                    if (game.umpire.count.outs < 2) {\n                        var sacrificeThrowInTime = _baseballServices_services.Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, 100);\n                        // todo ran into outfield assist\n                        if (this.first && sacrificeThrowInTime > this.first.getBaseRunningTime() + 4.5) {\n                            swing.sacrificeAdvances.push('first');\n                        }\n                        if (this.second && sacrificeThrowInTime > this.second.getBaseRunningTime()) {\n                            swing.sacrificeAdvances.push('second');\n                        }\n                        if (this.third && sacrificeThrowInTime > this.third.getBaseRunningTime() - 0.5) {\n                            swing.sacrificeAdvances.push('third');\n                        }\n                    }\n                }\n            } else {\n                swing.caught = false;\n            }\n\n            if (!swing.caught) {\n                swing.bases = 0;\n                swing.thrownOut = false; // default value\n                var fieldingReturnDelay = _baseballServices_services.Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, interceptRating);\n                swing.fieldingDelay = fieldingReturnDelay;\n                swing.outfielder = ({ 'left': 1, 'center': 1, 'right': 1 })[swing.fielder] == 1;\n                var speed = game.batter.skill.offense.speed,\n                    baseRunningTime = _baseballServices_services.Mathinator.baseRunningTime(speed);\n\n                if (swing.outfielder) {\n                    swing.bases = 1;\n                    fieldingReturnDelay -= baseRunningTime;\n                    var difficulty = 1.8;\n\n                    while (fieldingReturnDelay > baseRunningTime + difficulty && swing.bases < 3) {\n                        swing.bases++;\n                        difficulty = -1.3;\n                        fieldingReturnDelay -= baseRunningTime;\n                    }\n                } else {\n                    var first = this.first,\n                        second = this.second,\n                        third = this.third;\n                    swing.fieldersChoice = null;\n                    swing.bases = fieldingReturnDelay >= baseRunningTime + 1 ? 1 : 0;\n                    if (first && fieldingReturnDelay < first.getBaseRunningTime()) swing.fieldersChoice = 'first';\n                    if (first && second && fieldingReturnDelay < second.getBaseRunningTime() + 0.6) swing.fieldersChoice = 'second';\n                    if (third && fieldingReturnDelay < third.getBaseRunningTime()) swing.fieldersChoice = 'third';\n                    // double play\n                    var outs = game.umpire.count.outs;\n                    if (swing.fieldersChoice) {\n                        outs++;\n                        swing.bases = 1;\n                        var fielders = fielder.team.positions;\n                        var force = this.forcePlaySituation();\n                        if (force) {\n                            var additionalOuts = [];\n                            var throwingDelay = fieldingReturnDelay;\n                            if (third && force === 'third' && _baseballServices_services.Mathinator.infieldThrowDelay(fielders.catcher) + throwingDelay < second.getBaseRunningTime() && outs < 3) {\n                                throwingDelay += _baseballServices_services.Mathinator.infieldThrowDelay(fielders.catcher);\n                                fielders.catcher.fatigue += 4;\n                                additionalOuts.push('second');\n                                outs++;\n                                force = 'second';\n                            }\n                            if (second && force === 'second' && _baseballServices_services.Mathinator.infieldThrowDelay(fielders.third) + throwingDelay < first.getBaseRunningTime() && outs < 3) {\n                                throwingDelay += _baseballServices_services.Mathinator.infieldThrowDelay(fielders.third);\n                                fielders.third.fatigue += 4;\n                                additionalOuts.push('first');\n                                outs++;\n                                force = 'first';\n                            }\n                            if (first && force === 'first' && _baseballServices_services.Mathinator.infieldThrowDelay(fielders.second) + throwingDelay < game.batter.getBaseRunningTime() && outs < 3) {\n                                throwingDelay += _baseballServices_services.Mathinator.infieldThrowDelay(fielders.second);\n                                fielders.second.fatigue += 4;\n                                additionalOuts.push('batter');\n                                swing.bases = 0;\n                                // todo (or shortstop)\n                                outs++;\n                            }\n                            if (outs - game.umpire.count.outs === 2) {\n                                swing.doublePlay = true;\n                            }\n                            if (additionalOuts.length) {\n                                swing.additionalOuts = additionalOuts;\n                                swing.firstOut = swing.fieldersChoice;\n                                if (additionalOuts.indexOf('batter') > -1) {\n                                    delete swing.fieldersChoice;\n                                }\n                            }\n                        }\n                        //console.log('DP?', !!this.forcePlaySituation(), 'throwingDelay', throwingDelay,\n                        //    'fielding delay', fieldingReturnDelay, 'runner', game.batter.getBaseRunningTime());\n                        //if (typeof additionalOuts !== 'undefined' && additionalOuts.length) {\n                        //    console.log('omg dp', additionalOuts);\n                        //}\n                    } else {\n                            delete swing.additionalOuts;\n                            delete swing.firstOut;\n                            delete swing.doublePlay;\n                            delete swing.fieldersChoice;\n                        }\n                }\n                swing.thrownOut = swing.bases == 0;\n                if (swing.thrownOut) {\n                    swing.thrownOut = true;\n                    swing.error = false;\n                }\n            }\n        } else {\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        this.game.swingResult = swing;\n        return _baseballServices_services.Animator.animateFieldingTrajectory(this.game);\n    },\n    forcePlaySituation: function forcePlaySituation() {\n        var first = this.first,\n            second = this.second,\n            third = this.third;\n        return first && second && third && 'third' || first && second && 'second' || first && 'first';\n    },\n    //printRunnerNames : function() {\n    //    return [this.first ? this.first.getName() : '', this.second ? this.second.getName() : '', this.third ? this.third.getname() : ''];\n    //},\n    /**\n     * @param splayAngle\n     * @param landingDistance\n     * @returns {string|bool}\n     */\n    findFielder: function findFielder(splayAngle, landingDistance) {\n        if (Math.abs(90 - splayAngle) > 50) return false;\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\n            return 'pitcher';\n        }\n        if (landingDistance > 20 && landingDistance + Math.abs(90 - splayAngle) / 90 * 37 < 155) {\n            if (splayAngle < 45 + 23) {\n                return 'third';\n            } else if (splayAngle < 45 + 23 + 23) {\n                return 'short';\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\n                return 'second';\n            } else {\n                return 'first';\n            }\n        } else if (landingDistance > 90 && landingDistance < 310) {\n            if (splayAngle < 45 + 28) {\n                return 'left';\n            } else if (splayAngle < 45 + 28 + 34) {\n                return 'center';\n            } else {\n                return 'right';\n            }\n        } else {\n            return false;\n        }\n    },\n    positions: {\n        pitcher: [90, 66],\n        catcher: [0, 0],\n        first: [90 + 45 - 7, 98],\n        second: [90 + 12.5, 130],\n        short: [90 - 12.5, 130],\n        third: [90 - 45 + 7, 98],\n        left: [45 + 14, 280],\n        center: [90, 280],\n        right: [135 - 14, 280]\n    },\n    getPolarDistance: function getPolarDistance(a, b) {\n        return _baseballServices_services.Mathinator.getPolarDistance(a, b);\n    },\n    fieldingTest: function fieldingTest() {\n        var angle = Math.random() * 90 + 45;\n        var distance = Math.random() * 320;\n        var fielder = this.findFielder(angle, distance);\n        var data = {};\n        if (fielder) {\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\n            data.fielder = fielderCandidates[1];\n            data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\n            data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]]);\n            return data;\n        }\n    },\n    aggregateFieldingTest: function aggregateFieldingTest() {\n        var fielders = {\n            pitcher: { tally: 0, distances: [] },\n            catcher: { tally: 0, distances: [] },\n            first: { tally: 0, distances: [] },\n            second: { tally: 0, distances: [] },\n            short: { tally: 0, distances: [] },\n            third: { tally: 0, distances: [] },\n            left: { tally: 0, distances: [] },\n            center: { tally: 0, distances: [] },\n            right: { tally: 0, distances: [] },\n            'false': { tally: 0, distances: [] }\n        };\n        var selections = [];\n        for (var i = 0; i < 1000; i++) {\n            var angle = Math.random() * 90 + 45;\n            var distance = Math.random() * 320;\n            var fielder = this.findFielder(angle, distance);\n            fielders[fielder].tally++;\n            if (fielder) {\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\n            }\n            selections.push([angle, distance]);\n            selections.push(this.fielderSelectionTest(angle, distance, true));\n        }\n        return [fielders, selections];\n    },\n    fielderSelectionTest: function fielderSelectionTest(angle, distance, returnFielder) {\n        var distances = [];\n        var minDistance = 300;\n        var giraffe = this;\n        var fielder = false;\n        Iterator.each(this.positions, function (position, spot) {\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\n            distances[thisDistance] = position;\n            if (minDistance > thisDistance) {\n                minDistance = thisDistance;\n                fielder = position;\n            }\n        });\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\n    }\n};\n\nexports.Field = Field;\n\n},{\"baseball/Model/Player\":5,\"baseball/Services/_services\":13}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Game = function Game(m) {\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor: Game,\n    gamesIntoSeason: 0,\n    humanControl: 'home', //home, away, both, none\n    console: false,\n    quickMode: true,\n    debug: [],\n    pitcher: {}, // Player&\n    batter: {}, // Player&\n    init: function init(m) {\n        this.startTime = this.timeOfDay = ('00' + (Math.random() * 8 + 12 | 0)).slice(-2);\n        if (m) _baseballUtility_utils.text.mode = m;\n        this.gamesIntoSeason = 1 + Math.floor(Math.random() * 142);\n        this.field = new _baseballModelField.Field(this);\n        this.teams.away = new _baseballModelTeam.Team(this);\n        this.teams.home = new _baseballModelTeam.Team(this);\n        this.log = new _baseballUtilityLog.Log();\n        this.log.game = this;\n        this.debug = [];\n        this.helper = _baseballUtility_utils.helper;\n        while (this.teams.away.name == this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new _baseballModelUmpire.Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n    },\n    getInning: function getInning() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ') : this.half.toUpperCase() + ' ' + this.inning;\n    },\n    humanBatting: function humanBatting() {\n        var humanControl = this.humanControl;\n        if (humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return humanControl == 'both' || humanControl == 'away';\n            case 'bottom':\n                return humanControl == 'both' || humanControl == 'home';\n        }\n    },\n    humanPitching: function humanPitching() {\n        var humanControl = this.humanControl;\n        if (humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return humanControl == 'both' || humanControl == 'home';\n            case 'bottom':\n                return humanControl == 'both' || humanControl == 'away';\n        }\n    },\n    end: function end() {\n        this.stage = 'end';\n        var e, n;\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!';\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName() + 'の勝利' : this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName() + 'の勝利';\n        if (this.tally.home.R > this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.W++;\n            this.teams.away.positions.pitcher.stats.pitching.L++;\n        } else if (this.tally.home.R < this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.L++;\n            this.teams.away.positions.pitcher.stats.pitching.W++;\n        }\n        this.log.note(e, n);\n        this.log.note('Reload to play again', 'リロるは次の試合へ');\n    },\n    stage: 'pitch', //pitch, swing\n    simulateInput: function simulateInput(callback) {\n        var stage = this.stage,\n            pitchTarget = this.pitchTarget;\n        if (stage == 'end') {\n            return;\n        }\n        if (stage == 'pitch') {\n            this.autoPitch(callback);\n        } else if (stage == 'swing') {\n            if (typeof pitchTarget != 'object') {\n                this.pitchTarget = { x: 100, y: 100 };\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    simulatePitchAndSwing: function simulatePitchAndSwing(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        var giraffe = this;\n        setTimeout(function () {\n            if (typeof giraffe.pitchTarget != 'object') {\n                giraffe.pitchTarget = { x: 100, y: 100 };\n            }\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function (callback) {\n                callback();\n            });\n        }, giraffe.field.hasRunnersOn() ? _baseballServices_services.Animator.TIME_FROM_SET + 1200 : _baseballServices_services.Animator.TIME_FROM_WINDUP + 1200);\n    },\n    /**\n     * generically receive click input and decide what to do\n     * @param x\n     * @param y\n     * @param callback\n     */\n    receiveInput: function receiveInput(x, y, callback) {\n        if (this.humanControl == 'none') {\n            return;\n        }\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage == 'swing' && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    autoPitchSelect: function autoPitchSelect() {\n        var pitchName = this.helper.selectRandomPitch(),\n            select = this.helper.selectRandomPitch;\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\n            pitchName = select();\n        }\n        var pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    autoPitch: function autoPitch(callback) {\n        var pitcher = this.pitcher,\n            giraffe = this;\n        if (this.stage == 'pitch') {\n            pitcher.windingUp = true;\n            if (!this.console) {\n                $('.baseball').addClass('hide');\n                var windup = $('.windup');\n                windup.css('width', '100%');\n            }\n            this.autoPitchSelect();\n            var pitch = _baseballServices_services.Distribution.pitchLocation(),\n                x = pitch.x,\n                y = pitch.y;\n            if (this.quickMode) {\n                this.thePitch(x, y, callback);\n            } else {\n                windup.animate({ width: 0 }, this.field.hasRunnersOn() ? _baseballServices_services.Animator.TIME_FROM_SET : _baseballServices_services.Animator.TIME_FROM_WINDUP, function () {\n                    !giraffe.console && $('.baseball.pitch').removeClass('hide');\n                    giraffe.thePitch(x, y, callback);\n                    pitcher.windingUp = false;\n                });\n            }\n        }\n    },\n    autoSwing: function autoSwing(deceptiveX, deceptiveY, callback) {\n        var giraffe = this;\n        var bonus = this.batter.eye.bonus || 0,\n            eye = this.batter.skill.offense.eye + 6 * (this.umpire.count.balls + this.umpire.count.strikes) + bonus,\n            convergence,\n            convergenceSum;\n\n        var x = _baseballServices_services.Distribution.centralizedNumber(),\n            y = _baseballServices_services.Distribution.centralizedNumber();\n        if (100 * Math.random() < eye) {\n            convergence = 1.35 * 5 * eye / 100;\n            convergenceSum = 1 + convergence;\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n        } else {\n            convergence = 1.35 * 2 * eye / 100;\n            convergenceSum = 1 + convergence;\n        }\n        x = (deceptiveX * convergence + x) / convergenceSum;\n        y = (deceptiveY * convergence + y) / convergenceSum;\n\n        this.swingResult.x = _baseballServices_services.Distribution.cpuSwing(x, this.pitchInFlight.x, eye);\n        this.swingResult.y = _baseballServices_services.Distribution.cpuSwing(y, this.pitchInFlight.y, eye);\n\n        var swingProbability = _baseballServices_services.Distribution.swingLikelihood(eye, x, y, this.umpire);\n        if (swingProbability < 100 * Math.random()) {\n            x = -20;\n        }\n\n        callback(function () {\n            giraffe.theSwing(x, y);\n        });\n    },\n    opponentConnected: false,\n    waitingCallback: function waitingCallback() {},\n    awaitPitch: function awaitPitch(callback, swingResult) {\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitSwing(swingResult);\n        } else {\n            this.autoPitch(callback);\n        }\n    },\n    awaitSwing: function awaitSwing(x, y, callback, pitchInFlight, pitchTarget) {\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitPitch({\n                inFlight: pitchInFlight,\n                target: pitchTarget\n            });\n        } else {\n            this.autoSwing(x, y, callback);\n        }\n    },\n    thePitch: function thePitch(x, y, callback, override) {\n        if (this.stage == 'pitch') {\n            if (override) {\n                this.pitchInFlight = override.inFlight;\n                this.pitchTarget = override.target;\n                callback = this.waitingCallback;\n            } else {\n                this.pitcher.fatigue++;\n                this.pitchTarget.x = x;\n                this.pitchTarget.y = y;\n\n                this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\n                this.battersEye = _baseballUtility_utils.text.getBattersEye(this);\n\n                var control = Math.floor(this.pitchInFlight.control - this.pitcher.fatigue / 2);\n                this.pitchTarget.x = _baseballServices_services.Distribution.pitchControl(this.pitchTarget.x, control);\n                this.pitchTarget.y = _baseballServices_services.Distribution.pitchControl(this.pitchTarget.y, control);\n\n                if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\n\n                var breakEffect = _baseballServices_services.Distribution.breakEffect(this.pitchInFlight, this.pitcher, this.pitchTarget.x, this.pitchTarget.y);\n\n                this.pitchInFlight.x = breakEffect.x;\n                this.pitchInFlight.y = breakEffect.y;\n            }\n            this.log.notePitch(this.pitchInFlight, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\n                callback();\n            } else {\n                this.awaitSwing(x, y, callback, this.pitchInFlight, this.pitchTarget);\n            }\n        }\n    },\n    battersEye: {\n        e: '',\n        n: ''\n    },\n    theSwing: function theSwing(x, y, callback, override) {\n        if (this.stage == 'swing') {\n            if (override) {\n                this.swingResult = override;\n                callback = this.waitingCallback;\n            } else {\n                this.swingResult = {};\n                var bonus = this.batter.eye.bonus || 0,\n                    eye = this.batter.skill.offense.eye + 6 * (this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n\n                if (x >= 0 && x <= 200) {\n                    this.batter.fatigue++;\n\n                    this.swingResult.x = x - this.pitchInFlight.x;\n                    this.swingResult.y = y - this.pitchInFlight.y;\n                    this.swingResult.angle = this.setBatAngle();\n\n                    var recalculation = _baseballServices_services.Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\n                    var precision = _baseballServices_services.Distribution.swing(eye);\n\n                    this.swingResult.x = Math.abs(recalculation.x) > 20 ? recalculation.x * precision : recalculation.x;\n                    this.swingResult.y = -5 + (recalculation.y < 0 ? recalculation.y * precision : recalculation.y);\n\n                    //log(recalculation.y, precision);\n\n                    this.swingResult.looking = false;\n                    if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\n                        this.swingResult.contact = true;\n                        this.swingResult = this.field.determineSwingContactResult(this.swingResult);\n                        // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\n                        this.debug.push(this.swingResult);\n                    } else {\n                        this.swingResult.contact = false;\n                    }\n                } else {\n                    this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150 && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\n                    this.batter.eye.bonus = Math.max(0, eye - Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\n                    this.swingResult.contact = false;\n                    this.swingResult.looking = true;\n                    this.batter.eye.x = this.pitchInFlight.x;\n                    this.batter.eye.y = this.pitchInFlight.y;\n                }\n            }\n            this.log.noteSwing(this.swingResult);\n            this.stage = 'pitch';\n\n            var half = this.half;\n            var result = this.swingResult;\n            this.umpire.makeCall();\n            emit = false;\n            if (half != this.half) {\n                callback = this.startOpponentPitching;\n                var emit = !override;\n            }\n\n            if (typeof callback == 'function') {\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\n                    callback();\n                    if (emit) {\n                        if (this.opponentService && this.opponentConnected) {\n                            this.opponentService.emitSwing(result);\n                        }\n                    }\n                } else {\n                    this.awaitPitch(callback, result);\n                }\n            }\n        }\n    },\n    setBatAngle: function setBatAngle(x, y) {\n        var giraffe = this,\n            pitchInFlight = this.pitchInFlight,\n            swingResult = this.swingResult;\n        var origin = {\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\n            y: 160\n        };\n        var swing = {\n            x: x ? x : pitchInFlight.x + swingResult.x,\n            y: y ? y : pitchInFlight.y + swingResult.y\n        };\n        return _baseballServices_services.Mathinator.battingAngle(origin, swing);\n    },\n    debugOut: function debugOut() {\n        log('slugging', this.debug.filter(function (a) {\n            return a.bases == 1;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 2;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 3;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 4;\n        }).length);\n        log('grounders', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle < -5;\n        }).length);\n        log('grounders thrown out', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle < -5 && a.thrownOut;\n        }).length);\n        log('weak air hits (thrown out)', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle > 0 && a.thrownOut;\n        }).length);\n        log('good air hits (not caught)', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle > 0 && !a.thrownOut;\n        }).length);\n\n        var PO = {};\n        this.debug.map(function (a) {\n            if (!a.fielder) return;\n            if (!PO[a.fielder]) {\n                PO[a.fielder] = 0;\n            }\n            if (!a.bases && a.fielder) {\n                PO[a.fielder]++;\n            }\n        });\n        log('fielding outs', PO);\n\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\n        var atBats = [];\n        hitters.map(function (a) {\n            atBats = atBats.concat(a.getAtBats().map(function (ab) {\n                return ab.text;\n            }));\n        });\n\n        var LO = atBats.filter(function (ab) {\n            return ab == 'LO';\n        }).length;\n        var FO = atBats.filter(function (ab) {\n            return ab == 'FO';\n        }).length;\n        var GO = atBats.filter(function (ab) {\n            return ab == 'GO';\n        }).length;\n        var GIDP = atBats.filter(function (ab) {\n            return ab == '(IDP)';\n        }).length;\n        var SO = atBats.filter(function (ab) {\n            return ab == 'SO';\n        }).length;\n        var BB = atBats.filter(function (ab) {\n            return ab == 'BB';\n        }).length;\n        var SAC = atBats.filter(function (ab) {\n            return ab == 'SAC';\n        }).length;\n        var FC = atBats.filter(function (ab) {\n            return ab == 'FC';\n        }).length;\n        log('line outs', LO, 'fly outs', FO, 'groundouts', GO, 'strikeouts', SO, 'sacrifices', SAC, 'FC', FC, 'gidp', GIDP);\n        log('BB', BB);\n        log('fouls', this.debug.filter(function (a) {\n            return a.foul;\n        }).length);\n        log('fatigue, home vs away');\n        var teams = this.teams;\n        var fatigue = { home: {}, away: {} };\n        _baseballServices_services.Iterator.each(this.teams.home.positions, function (key) {\n            var position = key;\n            fatigue.home[position] = teams.home.positions[position].fatigue;\n            fatigue.away[position] = teams.away.positions[position].fatigue;\n        });\n        console.table(fatigue);\n        console.table(this.scoreboard);\n        console.table(this.tally);\n    },\n    toData: function toData() {\n        var data = {};\n        data.half = this.half;\n        data.inning = this.inning;\n        data.tally = this.tally;\n        var giraffe = this;\n        var players = this.teams.away.lineup.concat(this.teams.home.lineup);\n        // note: bench not included\n        data.field = {\n            first: players.indexOf(this.field.first),\n            second: players.indexOf(this.field.second),\n            third: players.indexOf(this.field.third)\n        };\n        data.batter = players.indexOf(this.batter);\n        data.deck = players.indexOf(this.deck);\n        data.hole = players.indexOf(this.hole);\n        data.teams = {\n            home: {\n                name: giraffe.teams.home.name,\n                nameJ: giraffe.teams.home.nameJ\n            },\n            away: {\n                name: giraffe.teams.away.name,\n                nameJ: giraffe.teams.away.nameJ\n            }\n        };\n        data.umpire = {\n            says: giraffe.umpire.says,\n            count: {\n                strikes: giraffe.umpire.count.strikes,\n                balls: giraffe.umpire.count.balls,\n                outs: giraffe.umpire.count.outs\n            }\n        };\n        data.players = players.map(function (player) {\n            return player.serialize();\n        });\n        data.log = {\n            pitchRecord: giraffe.log.pitchRecord,\n            record: giraffe.log.record\n        };\n        data.gamesIntoSeason = this.gamesIntoSeason;\n        return data;\n    },\n    fromData: function fromData(data) {\n        this.half = data.half;\n        this.inning = data.inning;\n        this.tally = data.tally;\n        var giraffe = this;\n        var players = data.players.map(function (playerJson, index) {\n            var playerData = JSON.parse(playerJson);\n            if (index > 8) {\n                var side = 'home';\n                index = index - 9;\n            } else {\n                side = 'away';\n            }\n            var player = giraffe.teams[side].positions[playerData.position];\n            player.fromData(playerData);\n            giraffe.teams[side].lineup[index] = player;\n            player.resetStats(data.gamesIntoSeason);\n            return player;\n        });\n        this.field.first = players[data.field.first];\n        this.field.second = players[data.field.second];\n        this.field.third = players[data.field.third];\n        this.batter = players[data.batter];\n        this.deck = players[data.deck];\n        this.hole = players[data.hole];\n        this.umpire.says = data.umpire.says;\n        this.umpire.count = data.umpire.count;\n        this.teams.away.name = data.teams.away.name;\n        this.teams.away.nameJ = data.teams.away.nameJ;\n        this.teams.home.name = data.teams.home.name;\n        this.teams.home.nameJ = data.teams.home.nameJ;\n        this.log.pitchRecord = data.log.pitchRecord;\n        this.log.record = data.log.record;\n        this.log.stabilizeShortRecord();\n        this.gamesIntoSeason = data.gamesIntoSeason;\n        return this;\n    },\n    startOpponentPitching: null, // late function\n    pitchTarget: { x: 100, y: 100 },\n    pitchInFlight: {\n        x: 100,\n        y: 100,\n        breakDirection: [0, 0],\n        name: 'slider',\n        velocity: 50,\n        'break': 50,\n        control: 50\n    },\n    swingResult: {\n        x: 100, //difference to pitch location\n        y: 100, //difference to pitch location\n        strike: false,\n        foul: false,\n        caught: false,\n        contact: false,\n        looking: true,\n        bases: 0,\n        fielder: 'short',\n        outs: 0\n    },\n    playResult: {\n        batter: '',\n        fielder: ''\n    },\n    showPlayResultPanels: function showPlayResultPanels(batter) {\n        var batterOutcomes = {};\n        var atBat = batter.atBats.slice(0).pop();\n        var fielderOutcomes = {};\n        var n = function n() {\n            var n = Math.floor(Math.random() * 3);\n            return n ? n : '';\n        };\n        this.playResult = {\n            batter: 'B_placeholder' + n() || batterOutcomes[atBat] || 'batter/' + atBat,\n            fielder: 'F_placeholder' + n() || fielderOutcomes[atBat] || 'fielder/' + atBat\n        };\n    },\n    pitchSelect: function pitchSelect() {},\n    field: null,\n    teams: {\n        away: null,\n        home: null\n    },\n    log: null,\n    half: 'top',\n    inning: 1,\n    scoreboard: {\n        away: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        },\n        home: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        }\n    },\n    resetTally: function resetTally() {\n        this.tally = {\n            away: {\n                H: 0,\n                R: 0,\n                E: 0\n            },\n            home: {\n                H: 0,\n                R: 0,\n                E: 0\n            }\n        };\n    },\n    tally: {\n        away: {\n            H: 0,\n            R: 0,\n            E: 0\n        },\n        home: {\n            H: 0,\n            R: 0,\n            E: 0\n        }\n    }\n};\n\nexports.Game = Game;\n\n},{\"baseball/Model/Field\":2,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7,\"baseball/Services/_services\":13,\"baseball/Utility/Log\":14,\"baseball/Utility/_utils\":15}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Manager = function Manager(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor: Manager,\n    init: function init(team) {\n        this.team = team;\n    },\n    makeLineup: function makeLineup() {\n        var jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        this.team.positions.pitcher.number = jerseyNumber++;\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], 'right');\n        this.team.positions.catcher.position = 'catcher';\n        this.team.positions.catcher.number = jerseyNumber++;\n        _baseballServices_services.Iterator.each(this.team.bench, function (key, player) {\n            player.number = jerseyNumber++;\n        });\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'left');\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill: function selectForSkill(pool, skillset, requiredThrowingHandedness) {\n        if (this.team.bench.length || pool == this.team.positions) {\n            var selection = this.team.bench[0];\n            var rating = 0;\n            var index = 0;\n            _baseballServices_services.Iterator.each(pool, function (key, player) {\n                var skills = skillset.slice();\n                var cursor = player.skill;\n                var property = skills.shift();\n                while (property) {\n                    cursor = cursor[property];\n                    property = skills.shift();\n                }\n                if (!(player.order + 1) && cursor >= rating && (!requiredThrowingHandedness || player.throws == requiredThrowingHandedness)) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            if (pool == this.team.bench) {\n                delete this.team.bench[index];\n                this.team.bench = this.team.bench.filter(function (player) {\n                    return player instanceof selection.constructor;\n                });\n            }\n            return selection;\n        }\n        return 'no players available';\n    }\n};\n\nexports.Manager = Manager;\n\n},{\"baseball/Services/_services\":13}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar _baseballModel_models = require('baseball/Model/_models');\n\nvar Player = function Player(team) {\n    this.init(team);\n    this.resetStats(this.team.game.gamesIntoSeason);\n};\n\nPlayer.prototype = {\n    constructor: Player,\n    init: function init(team, hero) {\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = { averaging: [] };\n        this.number = 0;\n        this.randomizeSkills(hero || Math.random() > 0.9);\n        var surnameKey = Math.floor(Math.random() * _baseballUtility_utils.data.surnames.length),\n            nameKey = Math.floor(Math.random() * _baseballUtility_utils.data.names.length);\n\n        this.name = _baseballUtility_utils.data.surnames[surnameKey] + ' ' + _baseballUtility_utils.data.names[nameKey];\n        var jSurname = _baseballUtility_utils.data.surnamesJ[surnameKey],\n            jGivenName = _baseballUtility_utils.data.namesJ[nameKey];\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surname = _baseballUtility_utils.data.surnames[surnameKey];\n        this.surnameJ = _baseballUtility_utils.data.surnamesJ[surnameKey];\n        this.atBats = [];\n    },\n    serialize: function serialize() {\n        var team = this.team;\n        delete this.team;\n        var data = JSON.stringify(this);\n        this.team = team;\n        return data;\n    },\n    fromData: function fromData(data) {\n        var giraffe = this;\n        _baseballServices_services.Iterator.each(data, function (key, value) {\n            giraffe[key] = value;\n        });\n        delete this.atBatObjects;\n        this.getAtBats();\n    },\n    resetStats: function resetStats() {\n        var gamesIntoSeason = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n        var offense = this.skill.offense;\n        var defense = this.skill.defense;\n        var randBetween = function randBetween(a, b, skill) {\n            var total = 0,\n                count = 0;\n            skill += '';\n            if (!skill) skill = '';\n            _baseballServices_services.Iterator.each(skill.split(' '), function (key, value) {\n                var skill = value;\n                if (offense[skill]) skill = offense[skill];\n                if (defense[skill]) skill = defense[skill];\n                if (isNaN(skill)) skill = 50;\n                total += skill;\n                count++;\n            });\n\n            skill = Math.sqrt(0.05 + Math.random() * 0.95) * (total / (count * 0.97));\n            return Math.floor(skill / 100 * (b - a) + a);\n        };\n        var IP, ER, GS, W, L;\n        if (this.skill.pitching > 65) {\n            IP = (this.skill.pitching - 65) * gamesIntoSeason / 20;\n            ER = IP / 9 * randBetween(800, 215, this.skill.pitching) / 100;\n            if (IP > gamesIntoSeason) {\n                //starter\n                GS = Math.floor(gamesIntoSeason / 5);\n                W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching / 1.20);\n                L = randBetween(GS - W, 0, this.skill.pitching / 3);\n            } else {\n                //reliever\n                GS = Math.floor(gamesIntoSeason / 40);\n                W = randBetween(0, GS * 0.6, this.skill.pitching);\n                L = randBetween(GS - W, 0, this.skill.pitching);\n            }\n        }\n        var pa = randBetween(gamesIntoSeason * 3, gamesIntoSeason * 5, 'speed eye');\n        var paRemaining = pa;\n        var bb = Math.floor(randBetween(0, 18, 'power eye') * paRemaining / 100);\n        paRemaining -= bb;\n        var ab = paRemaining;\n        var so = Math.floor(randBetween(25, 2, 'eye') * paRemaining / 100);\n        paRemaining -= so;\n        var h = Math.floor(randBetween(185, 472, 'eye power speed') * paRemaining / 1000);\n        paRemaining -= h;\n\n        var doubles = randBetween(0, h / 4, 'power speed');\n        var triples = randBetween(0, h / 12, 'speed');\n        var hr = Math.max(0, randBetween(-h / 20, h / 5, 'power eye'));\n        var r = randBetween(h / 8, (h + bb) / 3, 'speed') + hr;\n        var rbi = randBetween(h / 8, h / 2, 'power eye') + hr;\n        var hbp = randBetween(0, gamesIntoSeason / 25);\n        var sac = randBetween(0, gamesIntoSeason / 5, 'eye');\n\n        var chances = randBetween(0, gamesIntoSeason * 10, 'fielding');\n        var E = randBetween(chances / 10, 0, 'fielding');\n        var PO = chances - E;\n\n        this.stats = {\n            pitching: {\n                pitches: 0, // in game\n                GS: GS,\n                W: W,\n                L: L,\n                strikes: 0, // in game\n                K: 0, // in game\n                getK9: function getK9() {\n                    return this.K / (this.IP[0] / 9);\n                },\n                getERA: function getERA() {\n                    return 9 * this.ER / Math.max(1 / 3, this.IP[0] + this.IP[1] / 3);\n                },\n                ERA: null,\n                ER: ER,\n                H: 0, // in game\n                HR: 0, // in game\n                BB: 0, // in game\n                IP: [IP, 0],\n                WHIP: 0,\n                getWHIP: function getWHIP() {\n                    return (this.H + this.BB) / (this.IP[0] ? this.IP[0] : 1);\n                }\n            },\n            batting: {\n                getBA: function getBA() {\n                    return this.h / Math.max(1, this.ab);\n                },\n                ba: null,\n                getOBP: function getOBP() {\n                    return (this.h + this.bb + this.hbp) / (this.ab + this.bb + this.hbp + this.sac);\n                },\n                obp: null,\n                getSLG: function getSLG() {\n                    return (this.h - this['2b'] - this['3b'] - this.hr + 2 * this['2b'] + 3 * this['3b'] + 4 * this.hr) / this.ab;\n                },\n                slg: null,\n                pa: pa,\n                ab: ab,\n                so: so,\n                bb: bb,\n                h: h,\n                '2b': doubles,\n                '3b': triples,\n                hr: hr,\n                r: r,\n                rbi: rbi,\n                hbp: hbp,\n                sac: sac\n            },\n            fielding: {\n                E: E,\n                PO: PO, // should depend on position\n                A: Math.floor(Math.random() * 5) + 1 // ehh should depend on position\n            }\n        };\n        this.stats.pitching.ERA = this.stats.pitching.getERA();\n        this.stats.pitching.K9 = this.stats.pitching.getK9();\n        this.stats.pitching.WHIP = this.stats.pitching.getWHIP();\n        this.stats.batting.ba = this.stats.batting.getBA();\n    },\n    atBatObjects: [],\n    getAtBats: function getAtBats() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            this.atBatObjects = this.atBats.map(function (item) {\n                return new _baseballModel_models.AtBat(item);\n            });\n        }\n        return this.atBatObjects;\n    },\n    recordRBI: function recordRBI() {\n        this.atBats[this.atBats.length - 1] += _baseballModel_models.AtBat.prototype.RBI_INDICATOR;\n    },\n    recordInfieldHit: function recordInfieldHit() {\n        this.atBats[this.atBats.length - 1] += _baseballModel_models.AtBat.prototype.INFIELD_HIT_INDICATOR;\n    },\n    getBaseRunningTime: function getBaseRunningTime() {\n        return _baseballServices_services.Mathinator.baseRunningTime(this.skill.offense.speed);\n    },\n    randomizeSkills: function randomizeSkills(hero) {\n        this.hero = hero;\n        var giraffe = this;\n        var randValue = function randValue(isPitching) {\n            var value = Math.floor(Math.pow(Math.random(), 0.75) * 80 + Math.random() * 20);\n            if (hero) {\n                value += Math.floor((100 - value) * Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value;\n        };\n        this.skill.offense = {\n            eye: randValue(),\n            power: randValue(),\n            speed: randValue()\n        };\n        this.skill.defense = {\n            catching: randValue(),\n            fielding: randValue(),\n            speed: randValue(),\n            throwing: randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity: randValue(true),\n            'break': randValue(true),\n            control: randValue(true)\n        };\n        this.pitching.slider = {\n            velocity: randValue(true),\n            'break': randValue(true),\n            control: randValue(true)\n        };\n        if (Math.random() < 0.17) {\n            // can pitch!\n            if (Math.random() > 0.6) {\n                this.pitching['2-seam'] = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.18) {\n                this.pitching.fork = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() > 0.77) {\n                this.pitching.cutter = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.21) {\n                this.pitching.sinker = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.4) {\n                this.pitching.curve = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.9) {\n                this.pitching.change = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n        }\n        this.skill.pitching = Math.floor(this.pitching.averaging.reduce(function (prev, current) {\n            return prev + current;\n        }) / this.pitching.averaging.length + this.pitching.averaging.length * 3);\n        delete this.pitching.averaging;\n    },\n    getSurname: function getSurname() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.surnameJ : this.surname;\n    },\n    getName: function getName() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber: function getUniformNumber() {\n        return (0, _baseballUtility_utils.text)('#') + this.number;\n    },\n    getOrder: function getOrder() {\n        return (0, _baseballUtility_utils.text)([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\n    },\n    eye: {},\n    fatigue: 0,\n    name: '',\n    number: 0,\n    position: '',\n    atBats: []\n};\n\nexports.Player = Player;\n\n},{\"baseball/Model/_models\":8,\"baseball/Services/_services\":13,\"baseball/Utility/_utils\":15}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar Team = function Team(game) {\n    this.init(game);\n};\n\nTeam.prototype = {\n    constructor: Team,\n    init: function init(game) {\n        this.pickName();\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher: null,\n            catcher: null,\n            first: null,\n            second: null,\n            short: null,\n            third: null,\n            left: null,\n            center: null,\n            right: null\n        };\n        this.game = game;\n        for (var j = 0; j < 20; j++) {\n            this.bench.push(new _baseballModelPlayer.Player(this));\n        }\n        if (this.bench.length == 20) {\n            this.manager = new _baseballModelManager.Manager(this);\n            this.manager.makeLineup();\n        }\n    },\n    pickName: function pickName() {\n        var teamNameIndex = Math.floor(Math.random() * _baseballUtility_utils.data.teamNames.length);\n        this.name = _baseballUtility_utils.data.teamNames[teamNameIndex];\n        this.nameJ = _baseballUtility_utils.data.teamNamesJ[teamNameIndex];\n    },\n    getName: function getName() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.nameJ : this.name;\n    },\n    lineup: [],\n    positions: {},\n    manager: null,\n    bench: [],\n    bullpen: [],\n    nowBatting: 0,\n    expanded: 'Player&'\n};\n\nexports.Team = Team;\n\n},{\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Utility/_utils\":15}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar Umpire = function Umpire(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor: Umpire,\n    init: function init(game) {\n        this.game = game;\n        this.playBall();\n    },\n    count: {\n        strikes: 0,\n        balls: 0,\n        outs: 0\n    },\n    playBall: function playBall() {\n        var game = this.game;\n        game.half = 'top';\n        game.inning = 1;\n        game.batter = game.teams.away.lineup[0];\n        game.batterRunner = game.teams.away.lineup[0];\n        game.deck = game.teams.away.lineup[1];\n        game.hole = game.teams.away.lineup[2];\n        game.pitcher = game.teams.home.positions.pitcher;\n        var n = '一回のオモテ、' + game.teams.away.getName() + 'の攻撃対' + game.teams.home.getName() + '、ピッチャーは' + game.teams.home.positions.pitcher.getName() + '。',\n            e = 'Top 1, ' + game.teams.away.name + ' offense vs. ' + game.teams.home.positions.pitcher.name + ' starting for ' + game.teams.home.name;\n        game.log.note(e, n);\n        game.log.noteBatter(game.batter);\n    },\n    makeCall: function makeCall() {\n        this.says = '';\n        var game = this.game;\n        var result = game.swingResult;\n        var pitcher = game.pitcher;\n        var batter = game.batter;\n\n        if (game.swingResult.fielder) {\n            var fielder = game.teams[game.half == 'top' ? 'home' : 'away'].positions[result.fielder];\n        } else {\n            fielder = null;\n        }\n\n        game.batterRunner = game.batter;\n\n        pitcher.stats.pitching.pitches++;\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            pitcher.stats.pitching.strikes++;\n            if (result.contact) {\n                if (result.caught) {\n                    batter.stats.batting.pa++;\n                    pitcher.stats.pitching.IP[1]++;\n                    if (result.sacrificeAdvances.length && this.count.outs < 2) {\n                        batter.stats.batting.sac++;\n                        game.batter.atBats.push(_baseballUtility_utils.Log.prototype.SACRIFICE);\n                        this.advanceRunners(false, null, result.sacrificeAdvances);\n                    } else {\n                        batter.stats.batting.ab++;\n                        if (result.flyAngle < 15) {\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.LINEOUT);\n                        } else {\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.FLYOUT);\n                        }\n                    }\n                    this.count.outs++;\n                    this.newBatter();\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.firstOut) {\n                            result.additionalOuts.map(function (runner) {\n                                if (runner !== 'batter') {\n                                    game.field[runner] = null;\n                                }\n                            });\n                            this.count.outs += result.additionalOuts.length;\n                        }\n                        if (result.fieldersChoice && this.count.outs < 2) {\n                            result.bases = 0;\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.FIELDERS_CHOICE);\n                            this.advanceRunners(false, result.fieldersChoice);\n                            result.doublePlay && game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GIDP);\n                            this.reachBase();\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        } else if (result.fieldersChoice) {\n                            result.bases = 0;\n                            result.thrownOut = true;\n                        }\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GROUNDOUT);\n                            result.doublePlay && game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GIDP);\n                            if (this.count.outs < 3) {\n                                this.advanceRunners(false);\n                            }\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        }\n                        if (result.hitByPitch) {\n                            batter.stats.batting.ab--;\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                game.tally[game.half == 'top' ? 'away' : 'home'][_baseballUtility_utils.Log.prototype.SINGLE]++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    game.tally[game.half == 'top' ? 'home' : 'away'].E++;\n                                    fielder.stats.fielding.E++;\n                                }\n                            }\n                            var bases = result.bases;\n                            switch (bases) {\n                                case 0:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GROUNDOUT);\n                                    break;\n                                case 1:\n                                    if (result.error) {\n                                        game.batter.atBats.push(_baseballUtility_utils.Log.prototype.REACHED_ON_ERROR);\n                                    } else {\n                                        game.batter.atBats.push(_baseballUtility_utils.Log.prototype.SINGLE);\n                                        batter.stats.batting.h++;\n                                    }\n                                    break;\n                                case 2:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.DOUBLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.TRIPLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.HOMERUN);\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            if (bases > 0 && bases < 4 && !result.error) {\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\n                                    batter.recordInfieldHit();\n                                }\n                            }\n                            if (bases >= 1) {\n                                this.advanceRunners();\n                                this.reachBase();\n                                bases -= 1;\n                            }\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                this.count.strikes++;\n            }\n        }\n\n        this.says = this.count.balls + ' and ' + this.count.strikes;\n\n        result.outs = this.count.outs;\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            batter.atBats.push(_baseballUtility_utils.Log.prototype.STRIKEOUT);\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            batter.atBats.push(_baseballUtility_utils.Log.prototype.WALK);\n            this.advanceRunners(true).reachBase().newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    reachBase: function reachBase() {\n        var game = this.game;\n        game.field.first = game.batter;\n        game.field.first.fatigue += 2;\n        return this;\n    },\n    advanceRunners: function advanceRunners(isWalk, fieldersChoice, sacrificeAdvances) {\n        isWalk = !!isWalk;\n        var game = this.game;\n        var first = game.field.first,\n            second = game.field.second,\n            third = game.field.third,\n            swing = game.swingResult;\n\n        if (isWalk) {\n            if (first) {\n                if (second) {\n                    if (third) {\n                        //bases loaded\n                        game.batter.recordRBI();\n                        game.batter.stats.batting.rbi++;\n                        third.atBats.push(_baseballUtility_utils.Log.prototype.RUN);\n                        third.stats.batting.r++;\n                        game.pitcher.stats.pitching.ER++;\n                        game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\n                        game.tally[game.half == 'top' ? 'away' : 'home'].R++;\n                        game.field.third = second;\n                        game.field.second = first;\n                        first = null;\n                    } else {\n                        // 1st and second\n                        game.field.third = second;\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                } else {\n                    if (third) {\n                        // first and third\n                        game.field.second = first;\n                        game.field.first = null;\n                    } else {\n                        // first only\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n                if (fieldersChoice) {\n                    game.field[fieldersChoice] = null;\n                    first = game.field.first;\n                    second = game.field.second;\n                    third = game.field.third;\n                }\n                var canAdvance = function canAdvance() {\n                    return true;\n                };\n                if (sacrificeAdvances) {\n                    canAdvance = function (position) {\n                        switch (position) {\n                            case 'first':\n                                return sacrificeAdvances.indexOf('first') > -1 && (canAdvance('second') || !second);\n                            case 'second':\n                                return sacrificeAdvances.indexOf('second') > -1 && (canAdvance('third') || !third);\n                            case 'third':\n                                return sacrificeAdvances.indexOf('third') > -1;\n                        }\n                    };\n                }\n                if (third instanceof _baseballModelPlayer.Player && canAdvance('third')) {\n                    // run scored\n                    game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\n                    game.tally[game.half == 'top' ? 'away' : 'home'].R++;\n                    if (game.batter != third) {\n                        game.batter.recordRBI();\n                        third.atBats.push(_baseballUtility_utils.Log.prototype.RUN);\n                    }\n                    game.batter.stats.batting.rbi++;\n                    third.stats.batting.r++;\n                    game.pitcher.stats.pitching.ER++;\n                }\n                if (second && canAdvance('second')) {\n                    game.field.third = second;\n                } else {\n                    game.field.third = null;\n                }\n                if (first && canAdvance('first')) {\n                    game.field.second = first;\n                } else {\n                    game.field.second = null;\n                }\n                game.field.first = null;\n            }\n        return this;\n    },\n    newBatter: function newBatter() {\n        var game = this.game;\n        game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        game.log.notePlateAppearanceResult(game);\n        var team = game.half == 'bottom' ? game.teams.home : game.teams.away;\n        game.lastBatter = game.batter;\n        game.batter = team.lineup[(team.nowBatting + 1) % 9];\n        game.deck = team.lineup[(team.nowBatting + 2) % 9];\n        game.hole = team.lineup[(team.nowBatting + 3) % 9];\n        team.nowBatting = (team.nowBatting + 1) % 9;\n        if (this.count.outs < 3) {\n            game.log.noteBatter(game.batter);\n        }\n        game.showPlayResultPanels(game.lastBatter);\n    },\n    changeSides: function changeSides() {\n        var game = this.game;\n        game.swingResult = {};\n        game.swingResult.looking = true; // hide bat\n        game.pitchInFlight.x = null; // hide ball\n        game.pitchInFlight.y = null; // hide ball\n        game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        var offense, defense;\n        game.field.first = null;\n        game.field.second = null;\n        game.field.third = null;\n        if (game.half == 'top') {\n            if (game.inning == 9 && game.tally.home.R > game.tally.away.R) {\n                return game.end();\n            }\n            game.half = 'bottom';\n        } else {\n            if (game.inning + 1 > 9) {\n                return game.end();\n            }\n            game.inning++;\n            game.timeOfDay = ('00' + (game.startTime + game.inning / 2 | 0)).slice(-2);\n            game.half = 'top';\n        }\n        offense = game.half == 'top' ? 'away' : 'home';\n        defense = game.half == 'top' ? 'home' : 'away';\n        var n = game.inning + '回の' + (game.half == 'top' ? 'オモテ' : 'ウラ') + '、' + game.teams[game.half == 'top' ? 'away' : 'home'].getName() + 'の攻撃。',\n            e = (game.half == 'top' ? 'Top' : 'Bottom') + ' ' + game.inning;\n        game.log.note(e, n);\n        var team = game.teams[offense];\n        game.batter = team.lineup[team.nowBatting];\n        game.batterRunner = game.batter;\n        game.deck = team.lineup[(team.nowBatting + 1) % 9];\n        game.hole = team.lineup[(team.nowBatting + 2) % 9];\n\n        game.pitcher = game.teams[defense].positions.pitcher;\n        game.log.noteBatter(game.batter);\n        game.autoPitchSelect();\n    },\n    says: 'Play ball!',\n    game: null\n};\n\nexports.Umpire = Umpire;\n\n},{\"baseball/Model/Player\":5,\"baseball/Utility/_utils\":15}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballModelAtBat = require('baseball/Model/AtBat');\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelGame = require('baseball/Model/Game');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nexports.AtBat = _baseballModelAtBat.AtBat;\nexports.Field = _baseballModelField.Field;\nexports.Game = _baseballModelGame.Game;\nexports.Manager = _baseballModelManager.Manager;\nexports.Player = _baseballModelPlayer.Player;\nexports.Team = _baseballModelTeam.Team;\nexports.Umpire = _baseballModelUmpire.Umpire;\n\n},{\"baseball/Model/AtBat\":1,\"baseball/Model/Field\":2,\"baseball/Model/Game\":3,\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballServices_services = require('baseball/services/_services');\n\nvar Animator = function Animator() {\n    this.init();\n};\nAnimator.TweenMax = {};\nAnimator.prototype = {\n    identifier: 'Animator',\n    constructor: Animator,\n    console: false,\n    TweenMax: {},\n    init: function init() {},\n    loadTweenMax: function loadTweenMax() {\n        if (this.console || typeof window !== 'object') {\n            Animator.TweenMax = {\n                'set': function set() {},\n                'to': function to() {},\n                'from': function from() {},\n                killAll: function killAll() {}\n            };\n        } else {\n            Animator.TweenMax = window.TweenMax;\n        }\n        return Animator.TweenMax;\n    },\n    TIME_FROM_SET: 2300, //ms\n    TIME_FROM_WINDUP: 3600, //ms\n    HOLD_UP_ALLOWANCE: 0.75, // seconds\n    pitchTarget: null,\n    pitchBreak: null,\n    /**\n     * this is called from the scope context\n     * @param callback\n     */\n    updateFlightPath: function updateFlightPath(callback) {\n        if (Animator.console) return;\n        var TweenMax = Animator.loadTweenMax();\n        var $scope = this,\n            game = $scope.y,\n            top = 200 - game.pitchTarget.y,\n            left = game.pitchTarget.x,\n            breakTop = 200 - game.pitchInFlight.y,\n            breakLeft = game.pitchInFlight.x,\n            $baseballs = $('.baseball'),\n            flightSpeed = 1.3 - 0.6 * (game.pitchInFlight.velocity + 300) / 400,\n            originTop = 50,\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\n        var pitch = this.pitchTarget = $('.main-area .target .baseball.pitch'),\n            henka = this.pitchBreak = $('.main-area .target .baseball.break'),\n            quarter = flightSpeed / 4;\n\n        var pitchTransition = _baseballServices_services.Mathinator.pitchTransition(top, left, originTop, originLeft, quarter);\n\n        var transitions = [pitchTransition(0, 0), pitchTransition(10, 0), pitchTransition(30, 1), pitchTransition(50, 2), pitchTransition(100, 3), pitchTransition(100, 3, breakTop, breakLeft)];\n\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\n        //$('.baseball').addClass('spin');\n        //$('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\n\n        TweenMax.set([pitch, henka], transitions[0]);\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\n        TweenMax.to(pitch, quarter, transitions[4]);\n        TweenMax.to(henka, quarter, transitions[5]);\n\n        $scope.lastTimeout = setTimeout(function () {\n            $scope.allowInput = true;\n            if (typeof callback == 'function') {\n                callback();\n                $scope.$apply();\n            }\n        }, flightSpeed * 1000);\n\n        if (!game.pitchInFlight.x) {\n            $baseballs.addClass('hide');\n        } else {\n            if (game.humanBatting() && Math.random() * 180 > game.batter.skill.offense.eye) {\n                $('.baseball.break').addClass('hide');\n            } else {\n                $('.baseball.break').removeClass('hide');\n            }\n            $('.baseball.pitch').removeClass('hide');\n        }\n\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\n            $scope.holdUpTimeouts.push(setTimeout(function () {\n                $scope.holdUp();\n            }, (flightSpeed + Animator.HOLD_UP_ALLOWANCE) * 1000));\n        }\n    },\n    animateFieldingTrajectory: function animateFieldingTrajectory(game) {\n        this.init();\n        if (Animator.console) return game.swingResult;\n        var TweenMax = Animator.loadTweenMax();\n        var ball = $('.splay-indicator-ball');\n        TweenMax.killAll();\n        var result = game.swingResult;\n\n        var linearApproximateDragScalar = {\n            distance: 1,\n            apexHeight: 0.57,\n            airTime: 0.96\n        };\n\n        var angle = result.flyAngle,\n            distance = Math.abs(result.travelDistance),\n            scalar = result.travelDistance < 0 ? -1 : 1;\n\n        _baseballServices_services.Mathinator.memory.bounding = angle < 0;\n        angle = 1 + Math.abs(angle);\n        if (angle > 90) angle = 180 - angle;\n\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2 * Math.PI * angle / 180));\n        var velocityVerticalComponent = Math.sin(_baseballServices_services.Mathinator.RADIAN * angle) * velocity;\n        var apexHeight = velocityVerticalComponent * velocityVerticalComponent / (2 * 9.81) * linearApproximateDragScalar.apexHeight;\n        var airTime = 1.5 * Math.sqrt(2 * apexHeight / 9.81) * linearApproximateDragScalar.airTime; // 2x freefall equation\n\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\n        var quarter = airTime / 4;\n        var mathinator = new _baseballServices_services.Mathinator();\n        var transitions = [mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay), mathinator.transitionalTrajectory(25, quarter, 0), mathinator.transitionalTrajectory(50, quarter, 1), mathinator.transitionalTrajectory(75, quarter, 2), mathinator.transitionalTrajectory(100, quarter, 3)];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, quarter, transitions[1]);\n        TweenMax.to(ball, quarter, transitions[2]);\n        TweenMax.to(ball, quarter, transitions[3]);\n        TweenMax.to(ball, quarter, transitions[4]);\n\n        ball = $('.baseball.break').show();\n        var time = quarter / 2;\n        transitions = [mathinator.transitionalCatcherPerspectiveTrajectory(0, time, 0, apexHeight, scalar * distance, result.splay, game.pitchInFlight), mathinator.transitionalCatcherPerspectiveTrajectory(12.5, time * 0.75, 0), mathinator.transitionalCatcherPerspectiveTrajectory(25, time * 0.80, 1), mathinator.transitionalCatcherPerspectiveTrajectory(37.5, time * 0.85, 2), mathinator.transitionalCatcherPerspectiveTrajectory(50, time * 0.90, 3), mathinator.transitionalCatcherPerspectiveTrajectory(62.5, time * 0.95, 4), mathinator.transitionalCatcherPerspectiveTrajectory(75, time, 5), mathinator.transitionalCatcherPerspectiveTrajectory(87.5, time, 6), mathinator.transitionalCatcherPerspectiveTrajectory(100, time, 7)];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, time, transitions[1]);\n        TweenMax.to(ball, time, transitions[2]);\n        TweenMax.to(ball, time, transitions[3]);\n        TweenMax.to(ball, time, transitions[4]);\n        TweenMax.to(ball, time, transitions[5]);\n        TweenMax.to(ball, time, transitions[6]);\n        TweenMax.to(ball, time, transitions[7]);\n        TweenMax.to(ball, time, transitions[8]);\n\n        return game.swingResult;\n    }\n};\n\nfor (var fn in Animator.prototype) {\n    if (Animator.prototype.hasOwnProperty(fn)) {\n        Animator[fn] = Animator.prototype[fn];\n    }\n}\n\nexports.Animator = Animator;\n\n},{\"baseball/services/_services\":21}],10:[function(require,module,exports){\n/**\n * For Probability!\n * @constructor\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Distribution = function Distribution() {};\n\nDistribution.prototype = {\n    identifier: 'Distribution',\n    constructor: Distribution,\n    /**\n     * @param scale {number}\n     * @returns {number}\n     */\n    chance: function chance(scale) {\n        if (!scale) scale = 1;\n        return Math.random() * scale;\n    },\n    /**\n     * @param fielder {Player}\n     * @returns {boolean}\n     */\n    error: function error(fielder) {\n        return (100 - fielder.skill.defense.fielding) * 0.40 + 4 > Math.random() * 100;\n    },\n    /**\n     * @param power\n     * @param flyAngle\n     * @returns {number}\n     */\n    landingDistance: function landingDistance(power, flyAngle) {\n        return (10 + power / 2 + Math.random() * 310 + power / 100 * 30) * (1 - Math.abs(flyAngle - 30) / 60);\n    },\n    /**\n     * @returns {{x: number, y: number}}\n     */\n    pitchLocation: function pitchLocation() {\n        var x, y;\n        if (Math.random() < 0.5) {\n            x = 50 + Math.floor(Math.random() * 70) - Math.floor(Math.random() * 15);\n        } else {\n            x = 150 + Math.floor(Math.random() * 15) - Math.floor(Math.random() * 70);\n        }\n        y = 30 + (170 - Math.floor(Math.sqrt(Math.random() * 28900)));\n        return { x: x, y: y };\n    },\n    /**\n     * swing centering basis\n     * @returns {number}\n     */\n    centralizedNumber: function centralizedNumber() {\n        return 100 + Math.floor(Math.random() * 15) - Math.floor(Math.random() * 15);\n    },\n    /**\n     * @param eye {Player.skill.offense.eye}\n     * @param x\n     * @param y\n     * @param umpire {Umpire}\n     */\n    swingLikelihood: function swingLikelihood(eye, x, y, umpire) {\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y)) / 2;\n        if (x < 60 || x > 140 || y < 50 || y > 150) {\n            // ball\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15 * umpire.count.balls;\n        } else {\n            swingLikelihood = Math.max(45, (2 * swingLikelihood + eye) / 3);\n        }\n        return swingLikelihood - 35 + 10 * (umpire.count.balls + 2 * umpire.count.strikes);\n    },\n    /**\n     * @param target {number} 0-200\n     * @param control {number} 0-100\n     * @returns {number}\n     */\n    pitchControl: function pitchControl(target, control) {\n        var effect = (50 - Math.random() * 100) / (1 + control / 100);\n        return Math.min(199.9, Math.max(0.1, target + effect));\n    },\n    /**\n     * @param pitch {Game.pitchInFlight}\n     * @param pitcher {Player}\n     * @param x {number}\n     * @param y {number}\n     * @returns {object|{x: number, y: number}}\n     */\n    breakEffect: function breakEffect(pitch, pitcher, x, y) {\n        var effect = {};\n        effect.x = Math.floor(x + pitch.breakDirection[0] * (0.55 + 1.5 * Math.random() * pitcher.pitching[pitch.name]['break'] / 250));\n        effect.y = Math.floor(y + pitch.breakDirection[1] * (0.55 + 1.5 * Math.random() * pitcher.pitching[pitch.name]['break'] / 250 / (0.5 + y / 200)));\n        return effect;\n    },\n    /**\n     * Determine the swing target along an axis\n     * @param target {number} 0-200\n     * @param actual {number} 0-200\n     * @param eye {number} 0-100\n     * @returns {number} 0-200\n     */\n    cpuSwing: function cpuSwing(target, actual, eye) {\n        eye = Math.max(eye, 100);\n        return 100 + (target - 100) * (0.5 + Math.random() * eye / 200) - actual;\n    },\n    /**\n     * Determine the swing scalar\n     * @param eye {number} 0-100\n     * @returns {number}\n     */\n    swing: function swing(eye) {\n        return 100 / (eye + 25 + Math.random() * 50);\n    }\n};\n\nfor (var fn in Distribution.prototype) {\n    if (Distribution.prototype.hasOwnProperty(fn)) {\n        Distribution[fn] = Distribution.prototype[fn];\n    }\n}\n\nexports.Distribution = Distribution;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Iterator = function Iterator() {};\n\nIterator.prototype = {\n    identifier: 'Iterator',\n    constructor: Iterator,\n    each: function each(collection, map) {\n        var keys, i;\n        if (collection instanceof Array) {\n            for (i = 0; i < collection.length; i++) {\n                map(i, collection[i]);\n            }\n        } else {\n            keys = Object.keys(collection);\n            for (i = 0; i < keys.length; i++) {\n                map(keys[i], collection[keys[i]]);\n            }\n        }\n    }\n};\n\nfor (var fn in Iterator.prototype) {\n    if (Iterator.prototype.hasOwnProperty(fn)) {\n        Iterator[fn] = Iterator.prototype[fn];\n    }\n}\n\nexports.Iterator = Iterator;\n\n},{}],12:[function(require,module,exports){\n/**\n * For Math!\n * @constructor\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Mathinator = function Mathinator() {};\n\n/**\n * @param n\n * @returns {number}\n */\nMathinator.square = function (n) {\n    return n * n;\n};\n\nMathinator.prototype = {\n    identifier: 'Mathinator',\n    constructor: Mathinator,\n    /**\n     * CONST\n     */\n    RADIAN: Math.PI / 180,\n    SPLAY_INDICATOR_LEFT: -4,\n    /**\n     * @param offset {{x: number, y: number}}\n     * @param angle {number}\n     * @returns {{x: number, y: number}}\n     */\n    getAngularOffset: function getAngularOffset(offset, angle) {\n        var xScalar = offset.x < 0 ? -1 : 1,\n            yScalar = offset.y < 0 ? -1 : 1;\n        var originalAngle = Math.atan(offset.x / offset.y) / this.RADIAN;\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\n        return {\n            x: angledX,\n            y: angledY\n        };\n    },\n    /**\n     * @param a {Array<Number>}\n     * @param b {Array<Number>}\n     * @returns {number}\n     */\n    getPolarDistance: function getPolarDistance(a, b) {\n        var radians = this.RADIAN;\n        return Math.sqrt(a[1] * a[1] + b[1] * b[1] - 2 * a[1] * b[1] * Math.cos(a[0] * radians - b[0] * radians));\n    },\n    /**\n     * @param origin\n     * @param target\n     * @returns {number}\n     * 0 is flat (left-right), positive is clockwise.\n     * We use 125 instead of 180 to account for natural hand-height adjustments\n     * of various swing heights.\n     */\n    battingAngle: function battingAngle(origin, target) {\n        return Math.atan((origin.y - target.y) / (target.x - origin.x)) / Math.PI * 125;\n    },\n    memory: {},\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalTrajectory: function transitionalTrajectory(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\n            distance = Mathinator.prototype.memory.distance,\n            splay = Mathinator.prototype.memory.splay;\n        var bottom, left, padding, borderWidth;\n        var bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            quarter *= 4;\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        bottom = Math.cos(splay * radian) * percent / 100 * distance * 95 / 300;\n        left = Math.sin(splay * radian) * percent / 100 * distance * 95 / 300 + this.SPLAY_INDICATOR_LEFT;\n\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50)) / 100) * (1 / 0.7071);\n        if (bounding) {\n            padding = 1;\n            borderWidth = 1;\n        } else {\n            padding = apexRatio * apexHeight / 90 * 15;\n            borderWidth = 2 + apexRatio * 2;\n        }\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n        padding = Math.max(Math.min(padding, 12), 0);\n        return {\n            bottom: bottom,\n            left: left,\n            padding: padding,\n            borderWidth: borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @param [givenOrigin] Object with x, y -- pitchInFlight\n     * @returns {{top: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalCatcherPerspectiveTrajectory: function transitionalCatcherPerspectiveTrajectory(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle, givenOrigin) {\n        var memory = Mathinator.prototype.memory;\n        if (givenApexHeight) memory.apexHeight = givenApexHeight;\n        if (givenDistance) memory.distance = givenDistance;\n        if (givenSplayAngle) memory.splay = givenSplayAngle;\n        if (givenOrigin) memory.origin = givenOrigin;\n        var apexHeight = memory.apexHeight,\n            distance = memory.distance,\n            splay = memory.splay,\n            origin = memory.origin;\n        var top, left, padding, borderWidth;\n        var bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        var height = apexHeight - Math.pow(Math.abs(50 - percent) / 50, 1.2) * apexHeight,\n            currentDistance = distance * percent / 100;\n\n        var projection = Math.pow((500 - currentDistance) / 500, 2); // reduction of dimensions due to distance\n\n        top = 200 - origin.y - height * 20 * projection;\n        left = origin.x + Math.sin(splay * radian) * (currentDistance * 8) * projection;\n        padding = 12 * projection;\n        borderWidth = Math.max(Math.min(padding / 3, 4), 0);\n\n        top = Math.max(Math.min(top, 500), -10000);\n        left = Math.max(Math.min(left, 10000), -10000);\n        padding = Math.max(Math.min(padding, 24), 1);\n\n        //console.log('height', height|0, apexHeight|0, projection, 'left/pad/border', left|0, padding|0, borderWidth|0, 'top', top);\n\n        return {\n            top: top,\n            left: left,\n            padding: padding,\n            borderWidth: borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param swingResult\n     * @returns {Game.swingResult}\n     */\n    translateSwingResultToStylePosition: function translateSwingResultToStylePosition(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        var bottom, left;\n\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95 / 300;\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95 / 300 + this.SPLAY_INDICATOR_LEFT;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n\n        swingResult.bottom = bottom + 'px';\n        swingResult.left = left + 'px';\n        return swingResult;\n    },\n    /**\n     * @param left {number} 0-200\n     * @param top {number} 0-200\n     * @param originLeft {number} 0-200\n     * @param originTop {number} 0-200\n     * @param quarter {number} seconds\n     * @returns {Function}\n     */\n    pitchTransition: function pitchTransition(top, left, originTop, originLeft, quarter) {\n        /**\n         * @param percent {number} 0-100\n         * @param step {number} 0 and up\n         * @param [breakTop] {number} 0-200 override\n         * @param [breakLeft] {number} 0-200 override\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\n         */\n        return function (percent, step, breakTop, breakLeft) {\n            var _top, _left;\n            _top = breakTop || top;\n            _left = breakLeft || left;\n            _top = originTop + Mathinator.square(percent / 100) * (_top - originTop);\n            if (step == 1) {\n                _top -= 2;\n            }\n            if (step == 2) {\n                _top -= 1;\n            }\n            _left = originLeft + Mathinator.square(percent / 100) * (_left - originLeft);\n            var padding = Math.max(Mathinator.square(percent / 100) * 12, 1),\n                borderWidth = Math.max(Mathinator.square(percent / 100) * 4, 1);\n            return {\n                top: _top,\n                left: _left,\n                padding: padding + 'px',\n                borderWidth: borderWidth + 'px',\n                transform: 'translateZ(0)',\n                delay: quarter * step,\n                ease: Linear.easeNone\n            };\n        };\n    },\n    /**\n     * @param distance {number} feet\n     * @param throwing {number} 0-1\n     * @param fielding {number} 0-1\n     * @param intercept {number} approx. -140 to 140\n     * @returns {number} seconds\n     */\n    fielderReturnDelay: function fielderReturnDelay(distance, throwing, fielding, intercept) {\n        return distance / 90 // bip distance\n         + distance / 90 / (0.5 + throwing / 2) // throwing distance\n         + 1 - (0.2 + fielding * 0.8) + 9 * (distance / 310) * Math.min(intercept - 120, 0) / -240; // gather time\n    },\n    /**\n     * @param player {Player}\n     * @returns {number} ~2.0\n     */\n    infieldThrowDelay: function infieldThrowDelay(player) {\n        var fielding = player.skill.defense.fielding,\n            throwing = player.skill.defense.throwing;\n        return 3.5 - (fielding + throwing) / 200;\n    },\n    /**\n     * @param speed {number} 0-100\n     * @returns {number} seconds\n     */\n    baseRunningTime: function baseRunningTime(speed) {\n        return 6.0 - speed / 100 * 2.2;\n    }\n};\n\nfor (var fn in Mathinator.prototype) {\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\n        Mathinator[fn] = Mathinator.prototype[fn];\n    }\n}\n\nexports.Mathinator = Mathinator;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballServicesAnimator = require('baseball/Services/Animator');\n\nvar _baseballServicesDistribution = require('baseball/Services/Distribution');\n\nvar _baseballServicesIterator = require('baseball/Services/Iterator');\n\nvar _baseballServicesMathinator = require('baseball/Services/Mathinator');\n\nexports.Animator = _baseballServicesAnimator.Animator;\nexports.Distribution = _baseballServicesDistribution.Distribution;\nexports.Iterator = _baseballServicesIterator.Iterator;\nexports.Mathinator = _baseballServicesMathinator.Mathinator;\n\n},{\"baseball/Services/Animator\":9,\"baseball/Services/Distribution\":10,\"baseball/Services/Iterator\":11,\"baseball/Services/Mathinator\":12}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtilityText = require('baseball/Utility/text');\n\nvar Log = function Log() {\n    this.init();\n};\n\nLog.prototype = {\n    game: 'instance of Game',\n    init: function init() {\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n    },\n    SINGLE: 'H',\n    DOUBLE: '2B',\n    TRIPLE: '3B',\n    HOMERUN: 'HR',\n    WALK: 'BB',\n    GROUNDOUT: 'GO',\n    FLYOUT: 'FO',\n    LINEOUT: 'LO',\n    RUN: 'R',\n    STRIKEOUT: 'SO',\n    SACRIFICE: 'SAC',\n    REACHED_ON_ERROR: 'ROE',\n    FIELDERS_CHOICE: 'FC',\n    GIDP: '(IDP)',\n    GITP: '(ITP)',\n    stabilizeShortRecord: function stabilizeShortRecord() {\n        var rec = this.record.e.slice(0, 6);\n        this.shortRecord.e = rec;\n        this.stabilized.shortRecord.e = rec.concat(['', '', '', '', '', '']).slice(0, 6);\n\n        var rec2 = this.record.n.slice(0, 6);\n        this.shortRecord.n = rec2;\n        this.stabilized.shortRecord.n = rec2.concat(['', '', '', '', '', '']).slice(0, 6);\n    },\n    note: function note(_note, noteJ) {\n        this.record.e.unshift(_note);\n        this.record.n.unshift(noteJ);\n        this.stabilizeShortRecord();\n    },\n    getBatter: function getBatter(batter) {\n        var order = batter.team.nowBatting;\n        order = ({\n            0: (0, _baseballUtilityText.text)(' 1st'),\n            1: (0, _baseballUtilityText.text)(' 2nd'),\n            2: (0, _baseballUtilityText.text)(' 3rd'),\n            3: (0, _baseballUtilityText.text)(' 4th'),\n            4: (0, _baseballUtilityText.text)(' 5th'),\n            5: (0, _baseballUtilityText.text)(' 6th'),\n            6: (0, _baseballUtilityText.text)(' 7th'),\n            7: (0, _baseballUtilityText.text)(' 8th'),\n            8: (0, _baseballUtilityText.text)(' 9th')\n        })[order];\n        var positions = this.longFormFielder();\n        return (0, _baseballUtilityText.text)('Now batting') + order + _baseballUtilityText.text.comma() + positions[batter.position] + _baseballUtilityText.text.comma() + batter.getUniformNumber() + _baseballUtilityText.text.comma() + batter.getName();\n    },\n    noteBatter: function noteBatter(batter) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getBatter(batter);\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getBatter(batter);\n        _baseballUtilityText.text.mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription: function getPitchLocationDescription(pitchInFlight, batterIsLefty) {\n        var x = pitchInFlight.x,\n            y = pitchInFlight.y,\n            say = '';\n        var noComma = false,\n            noComma2 = false;\n        var ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += (0, _baseballUtilityText.text)('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += (0, _baseballUtilityText.text)('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += (0, _baseballUtilityText.text)('inside');\n        } else {\n            say += (0, _baseballUtilityText.text)('way inside');\n            ball = true;\n        }\n        if (say != '') say += _baseballUtilityText.text.comma();\n        if (y < 35) {\n            say += (0, _baseballUtilityText.text)('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += (0, _baseballUtilityText.text)('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += (0, _baseballUtilityText.text)('high');\n        } else {\n            say += (0, _baseballUtilityText.text)('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(_baseballUtilityText.text.comma()).join('');\n            if (noComma && noComma2) {\n                say = (0, _baseballUtilityText.text)('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = _baseballUtilityText.text.namePitch(pitchInFlight) + _baseballUtilityText.text.comma() + say + _baseballUtilityText.text.stop();\n        return say;\n    },\n    notePitch: function notePitch(pitchInFlight, batter) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.pop();\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.pop();\n        _baseballUtilityText.text.mode = m;\n    },\n    getSwing: function getSwing(swingResult) {\n        var result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += (0, _baseballUtilityText.text)('Strike.');\n            } else {\n                result += (0, _baseballUtilityText.text)('Ball.');\n            }\n        } else {\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += (0, _baseballUtilityText.text)('Fouled off.');\n                } else {\n                    if (swingResult.caught) {\n                        result += (0, _baseballUtilityText.text)('In play.');\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += (0, _baseballUtilityText.text)('In play.');\n                        } else {\n                            result += (0, _baseballUtilityText.text)('In play.');\n                        }\n                    }\n                }\n            } else {\n                result += (0, _baseballUtilityText.text)('Swinging strike.');\n            }\n        }\n        return result;\n    },\n    noteSwing: function noteSwing(swingResult) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getSwing(swingResult);\n        this.pitchRecord.e[0] += record;\n        this.stabilized.pitchRecord.e[0] += record;\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        this.pitchRecord.n[0] += recordJ;\n        this.stabilized.pitchRecord.n[0] += recordJ;\n        _baseballUtilityText.text.mode = m;\n    },\n    getPlateAppearanceResult: function getPlateAppearanceResult(game) {\n        var r = game.swingResult;\n        var record = '';\n        var batter = game.batter.getName();\n        var out = [];\n        if (r.looking) {\n            if (r.strike) {\n                record = batter + (0, _baseballUtilityText.text)(' struck out looking.');\n            } else {\n                record = batter + (0, _baseballUtilityText.text)(' walked.');\n            }\n        } else {\n            if (r.contact) {\n                var fielder = r.fielder,\n                    bases = r.bases,\n                    outBy;\n                if (r.caught) {\n                    if (r.flyAngle < 15) {\n                        outBy = 'line';\n                    } else {\n                        if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                            outBy = 'pop';\n                        } else {\n                            outBy = 'fly';\n                        }\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                            if (r.error) {\n                                bases = 1;\n                                outBy = 'error';\n                            } else {\n                                if (r.thrownOut) {\n                                    if (Math.random() < 0.5) {\n                                        outBy = 'ground';\n                                    } else {\n                                        outBy = 'thrown';\n                                    }\n                                } else {\n                                    switch (r.bases) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            bases = r.bases;\n                                            break;\n                                        case 4:\n                                            bases = 4;\n                                            if (r.splay < -15) {\n                                                fielder = 'left';\n                                            } else if (r.splay < 15) {\n                                                fielder = 'center';\n                                            } else {\n                                                fielder = 'right';\n                                            }\n                                            break;\n                                    }\n                                }\n                                if (r.firstOut) {\n                                    out = out.concat(r.additionalOuts.filter(function (runner) {\n                                        return runner !== 'batter';\n                                    }));\n                                    out.doublePlay = r.doublePlay;\n                                }\n                                if (r.fieldersChoice) {\n                                    out.push(r.fieldersChoice);\n                                    if (r.outs == 3) {\n                                        outBy = 'ground';\n                                    } else {\n                                        outBy = 'fieldersChoice';\n                                    }\n                                }\n                            }\n                        }\n                }\n                record = _baseballUtilityText.text.contactResult(batter, fielder, bases, outBy, r.outs === 3 ? [] : r.sacrificeAdvances, out);\n            } else {\n                record = batter + (0, _baseballUtilityText.text)(' struck out swinging.');\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult: function notePlateAppearanceResult(game) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getPlateAppearanceResult(game);\n        this.record.e.unshift(record);\n        this.pitchRecord.e = [(0, _baseballUtilityText.text)('Previous: ') + record];\n        this.stabilized.pitchRecord.e = [(0, _baseballUtilityText.text)('Previous: ') + record, '', '', '', '', ''];\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getPlateAppearanceResult(game);\n        this.record.n.unshift(recordJ);\n        this.pitchRecord.n = [(0, _baseballUtilityText.text)('Previous: ') + recordJ];\n        this.stabilized.pitchRecord.n = [(0, _baseballUtilityText.text)('Previous: ') + recordJ, '', '', '', '', ''];\n        _baseballUtilityText.text.mode = m;\n    },\n    pointer: 0,\n    stabilized: {\n        pitchRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        },\n        shortRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        }\n    },\n    pitchRecord: {\n        e: [],\n        n: []\n    },\n    shortRecord: {\n        e: [],\n        n: []\n    },\n    record: {\n        e: [],\n        n: []\n    },\n    longFormFielder: function longFormFielder() {\n        return {\n            first: (0, _baseballUtilityText.text)('first baseman'),\n            second: (0, _baseballUtilityText.text)('second baseman'),\n            third: (0, _baseballUtilityText.text)('third baseman'),\n            short: (0, _baseballUtilityText.text)('shortstop'),\n            pitcher: (0, _baseballUtilityText.text)('pitcher'),\n            catcher: (0, _baseballUtilityText.text)('catcher'),\n            left: (0, _baseballUtilityText.text)('left fielder'),\n            center: (0, _baseballUtilityText.text)('center fielder'),\n            right: (0, _baseballUtilityText.text)('right fielder')\n        };\n    }\n};\n\nexports.Log = Log;\n\n},{\"baseball/Utility/text\":18}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballUtilityData = require('baseball/Utility/data');\n\nvar _baseballUtilityHelper = require('baseball/Utility/helper');\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar _baseballUtilityText = require('baseball/Utility/text');\n\nexports.data = _baseballUtilityData.data;\nexports.helper = _baseballUtilityHelper.helper;\nexports.Log = _baseballUtilityLog.Log;\nexports.text = _baseballUtilityText.text;\n\n},{\"baseball/Utility/Log\":14,\"baseball/Utility/data\":16,\"baseball/Utility/helper\":17,\"baseball/Utility/text\":18}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar data = {\n    surnames: ['Sato', 'Suzuki', 'Takahashi', 'Tanaka', 'Watanabe', 'Ito', 'Nakamura', 'Kobayashi', 'Yamamoto', 'Kato', 'Yoshida', 'Yamada', 'Sasaki', 'Yamaguchi', 'Matsumoto', 'Inoue', 'Kimura', 'Shimizu', 'Hayashi', 'Saito', 'Saito', 'Yamazaki', 'Nakajima', 'Mori', 'Abe', 'Ikeda', 'Hashimoto', 'Ishikawa', 'Yamashita', 'Ogawa', 'Ishii', 'Hasegawa', 'Goto', 'Okada', 'Kondo', 'Maeda', 'Fujita', 'Endo', 'Aoki', 'Sakamoto', 'Murakami', 'Ota', 'Kaneko', 'Fujii', 'Fukuda', 'Nishimura', 'Miura', 'Takeuchi', 'Nakagawa', 'Okamoto', 'Matsuda', 'Harada', 'Nakano'],\n    surnamesJ: ['佐藤', '鈴木', '高橋', '田中', '渡辺', '伊藤', '中村', '小林', '山本', '加藤', '吉田', '山田', '佐々木', '山口', '松本', '井上', '木村', '清水', '林', '斉藤', '斎藤', '山崎', '中島', '森', '阿部', '池田', '橋本', '石川', '山下', '小川', '石井', '長谷川', '後藤', '岡田', '近藤', '前田', '藤田', '遠藤', '青木', '坂本', '村上', '太田', '金子', '藤井', '福田', '西村', '三浦', '竹内', '中川', '岡本', '松田', '原田', '中野'],\n\n    namesJ: ['匠', 'ヒカル', 'ゆうき', '翔太', '冬馬', '漣', '港区', 'ルイ', '樹', '賢治', '五木', '春', '光一', '宗介', 'こうすけ', '雄太', '大樹', '瑛太',\n    // newer set\n    '宏', '亨', '道夫', '聡', '昭', '茂雄', '勝', '純一', '和夫', '勲', '省三', '隆', '達夫', '正一', '輝夫', '俊夫', '史郎', '勇', '義弘', '良雄', '登', '義明', '正義', '秀夫', '肇', '月', '克己', '正男', '光男', '久', '耕三', '清', '次郎', '正博', '明子', '武', '勉', '晴夫', '裕二', '稔', '障子', '和子', '敦', '茂', '信夫', '恵一', '忠', '高尾', '薫', 'ケン', '健治', '哲夫', '啓二', '光一', '真一', '貞夫', '靖', '武', '雄', '文雄', '久雄', '一朗', '健一', '正明', '五郎', '誠', '昭夫', '誠司', '洋一', '康夫', '誠一', '正美', '則夫', '幸雄', '忠雄', '仁', 'シンジ', '豊', '邦雄', '修', '雅之', '三郎', '英治', '浩二', '栄一', '恒夫', '義郎', '進', '博之', '巌'],\n    names: ['Takumi', 'Hikaru', 'Yuuki', 'Shouta', 'Touma', 'Ren', 'Minato', 'Rui', 'Tatsuki', 'Kenji', 'Itsuki', 'Haru', 'Kouichi', 'Sousuke', 'Kousuke', 'Yuuta', 'Daiki', 'Eita',\n    // newer set\n    'Hiroshi', 'Toru', 'Michio', 'Satoshi', 'Akira', 'Shigeo', 'Masaru', 'Junichi', 'Kazuo', 'Isao', 'Shozo', 'Takashi', 'Tatsuo', 'Shoichi', 'Teruo', 'Toshio', 'Shiro', 'Isamu', 'Yoshihiro', 'Yoshio', 'Noboru', 'Yoshiaki', 'Tadayoshi', 'Hideo', 'Hajime', 'Akari', 'Katsumi', 'Masao', 'Mitsuo', 'Hisashi', 'Kozo', 'Kiyoshi', 'Jiro', 'Masahiro', 'Akiko', 'Takeshi', 'Tsutomu', 'Haruo', 'Yuji', 'Minoru', 'Shoji', 'Kazuko', 'Atsushi', 'Shigeru', 'Shinobu', 'Keiichi', 'Tadashi', 'Takao', 'Kaoru', 'Ken', 'Kenji', 'Tetsuo', 'Keiji', 'Koichi', 'Shinichi', 'Sadao', 'Yasushi', 'Takeshi', 'Yu', 'Fumio', 'Hisao', 'Ichiro', 'Kenichi', 'Masaaki', 'Goro', 'Makoto', 'Akio', 'Seiji', 'Yoichi', 'Yasuo', 'Seiichi', 'Masami', 'Norio', 'Yukio', 'Tadao', 'Hitoshi', 'Shinji', 'Yutaka', 'Kunio', 'Osamu', 'Masayuki', 'Saburo', 'Eiji', 'Koji', 'Eiichi', 'Tsuneo', 'Yoshio', 'Susumu', 'Hiroyuki', 'Iwao'],\n    teamNamesJ: ['横浜', '大阪', '名古屋', '札幌', '神戸', '京都', '福岡', '川崎', '埼玉県', '広島', '仙台', '千葉県', '新潟', '浜松', '静岡', '相模原', '岡山', '熊本', '鹿児島', '船橋', '川口', '姫路', '松山', '宇都宮', '松戸', '西宮', '倉敷', '市川', '福山', '尼崎', '金沢', '長崎', '横須賀', '富山', '高松', '町田', '岐阜', '枚方', '藤沢', '柏', '豊中', '長野県', '豊橋', '一宮', '和歌山', '岡崎', '宮崎', '奈良', '吹田', '高槻', '旭川', 'いわき', '高崎', '所沢', '川越', '秋田', '越谷', '前橋', '那覇', '四日市', '青森', '久留米', '春日井', '盛岡', '明石', '福島', '下関', '長岡', '市原', '函館', '茨城県', '福井', '加古川', '徳島', '水戸', '平塚', '佐世保', '呉', '八戸', '佐賀', '寝屋川', '富士', '春日部', '茅ヶ崎', '松本', '厚木', '大和', '上尾', '宝塚', '筑波', '沼津', '熊谷', '伊勢崎', '岸和田', '鳥取', '小田原', '鈴鹿', '松江', '日立'],\n    teamNames: ['Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Kyoto', 'Fukuoka', 'Kawasaki', 'Saitama', 'Hiroshima', 'Sendai', 'Chiba', 'Niigata', 'Hamamatsu', 'Shizuoka', 'Sagamihara', 'Okayama', 'Kumamoto', 'Kagoshima', 'Funabashi', 'Kawaguchi', 'Himeji', 'Matsuyama', 'Utsunomiya', 'Matsudo', 'Nishinomiya', 'Kurashiki', 'Ichikawa', 'Fukuyama', 'Amagasaki', 'Kanazawa', 'Nagasaki', 'Yokosuka', 'Toyama', 'Takamatsu', 'Machida', 'Gifu', 'Hirakata', 'Fujisawa', 'Kashiwa', 'Toyonaka', 'Nagano', 'Toyohashi', 'Ichinomiya', 'Wakayama', 'Okazaki', 'Miyazaki', 'Nara', 'Suita', 'Takatsuki', 'Asahikawa', 'Iwaki', 'Takasaki', 'Tokorozawa', 'Kawagoe', 'Akita', 'Koshigaya', 'Maebashi', 'Naha', 'Yokkaichi', 'Aomori', 'Kurume', 'Kasugai', 'Morioka', 'Akashi', 'Fukushima', 'Shimonoseki', 'Nagaoka', 'Ichihara', 'Hakodate', 'Ibaraki', 'Fukui', 'Kakogawa', 'Tokushima', 'Mito', 'Hiratsuka', 'Sasebo', 'Kure', 'Hachinohe', 'Saga', 'Neyagawa', 'Fuji', 'Kasukabe', 'Chigasaki', 'Matsumoto', 'Atsugi', 'Yamato', 'Ageo', 'Takarazuka', 'Tsukuba', 'Numazu', 'Kumagaya', 'Isesaki', 'Kishiwada', 'Tottori', 'Odawara', 'Suzuka', 'Matsue', 'Hitachi']\n};\n\nexports.data = data;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar helper = {\n    pitchDefinitions: {\n        '4-seam': [0, 0, 1], //x movement, y movement, speed ratio\n        '2-seam': [20, -20, 0.90],\n        'cutter': [-25, -20, 0.95],\n        'sinker': [-15, -30, 0.95],\n\n        'slider': [-50, -35, 0.9],\n        'fork': [0, -70, 0.87],\n        'curve': [0, -90, 0.82],\n\n        'change': [0, -10, 0.88]\n    },\n    selectRandomPitch: function selectRandomPitch() {\n        return ['4-seam', '2-seam', 'cutter', 'sinker', 'slider', 'fork', 'curve', 'change'][Math.floor(Math.random() * 8)];\n    }\n};\n\nexports.helper = helper;\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar text = function text(phrase, override) {\n    if (!text.mode) text.mode = 'n';\n    var string = ({\n        n: {\n            empty: '-',\n            ' 1st': '1番',\n            ' 2nd': '2番',\n            ' 3rd': '3番',\n            ' 4th': '4番',\n            ' 5th': '5番',\n            ' 6th': '6番',\n            ' 7th': '7番',\n            ' 8th': '8番',\n            ' 9th': '9番',\n            'Now batting': '次のバッター、',\n            'way outside': '相当外角',\n            'outside': '外角',\n            'inside': '内角',\n            'way inside': '相当内角',\n            'way low': '相当低め',\n            'low': '低め',\n            'high': '高め',\n            'way high': '相当高め',\n            'down the middle': '真ん中',\n            'first baseman': 'ファースト',\n            'second baseman': 'セカンド',\n            'third baseman': 'サード',\n            'shortstop': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left fielder': 'レフト',\n            'center fielder': 'センター',\n            'right fielder': 'ライト',\n            'Strike.': 'ストライク。',\n            'Ball.': 'ボール。',\n            'Fouled off.': 'ファウル。',\n            'In play.': 'インプレー。',\n            'Swinging strike.': '空振り。',\n            '4-seam': 'ストレート',\n            '2-seam': 'シュート',\n            'slider': 'スライダー',\n            'fork': 'フォーク',\n            'cutter': 'カット',\n            'sinker': 'シンカー',\n            'curve': 'カーブ',\n            'change': 'チェンジ',\n            ' struck out looking.': '、見逃し三振。',\n            ' walked.': '、フォアボール。',\n            ' struck out swinging.': '、空振り三振。',\n            'Previous: ': '前：',\n            'looks like: ': '予想',\n            'breaking ball': '変化球',\n            'fastball': 'ストレート',\n            'Batting, ': '打球',\n            'Catching, pitch selection': '捕球選択',\n            'Season': '記録',\n            'Game': '今試合',\n            'Pitch': '球',\n            'Control': '制球',\n            'Velocity': '速度',\n            'Break': '変化',\n            'At Bat': 'バッター',\n            'On Deck': '次バッター',\n            'Eye :': '目',\n            'Power :': '力',\n            'Speed :': '速',\n            'Up to Bat': '打席',\n            'Fielding': '守備',\n            'BA': '打率',\n            'OBP': '出塁',\n            'SLG': '長打',\n            'PA': '打席',\n            'H/2B/3B/HR': '安／二／三／本',\n            'H': '安',\n            '2B': '二',\n            '3B': '三',\n            'HR': '本塁打',\n            'RBI': '打点',\n            'R': '得点',\n            'BB': '四球',\n            'SO': '三振',\n\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n\n            'Select Language:': '言語',\n            'Run Fast Simulation': 'シミュレーションを試合終了まで行う',\n            'Play Ball!': 'プレーボール',\n            'Spectate the CPU': 'CPU観戦',\n            'Play from the 7th': '７回からプレーする',\n\n            'Throws/Bats': ' ',\n            'LHP': '左投',\n            'RHP': '右投',\n            'LHB': '左打',\n            'RHB': '右打',\n            'L': '左投',\n            'R ': '右投',\n            ' L ': '左打',\n            ' R ': '右打',\n            '#': '背番号',\n\n            'Opponent connected': '相手選手見参'\n        },\n        e: {\n            empty: '-',\n            'Season': 'Season'\n        }\n    })[override ? override : text.mode][phrase];\n    return string ? string : phrase;\n};\n\ntext.getBattersEye = function (game) {\n    var eye = {},\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\n    eye.e = text('looks like: ', 'e') + breaking ? text('breaking ball', 'e') : text('fastball', 'e');\n    eye.n = text('looks like: ', 'n') + breaking ? text('breaking ball', 'n') : text('fastball', 'n');\n    return eye;\n};\n\ntext.fielderShortName = function (fielder) {\n    if (text.mode == 'n') {\n        return ({\n            'first': '一',\n            'second': '二',\n            'third': '三',\n            'short': '遊',\n            'pitcher': '投',\n            'catcher': '捕',\n            'left': '左',\n            'center': '中',\n            'right': '右'\n        })[fielder];\n    }\n    return fielder;\n};\n\ntext.slash = function () {\n    if (text.mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = function (fielder) {\n    if (text.mode == 'n') {\n        return ({\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'short': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left': 'レフト',\n            'center': 'センター',\n            'right': 'ライト'\n        })[fielder];\n    }\n    return ({\n        first: text('first baseman'),\n        second: text('second baseman'),\n        third: text('third baseman'),\n        short: text('shortstop'),\n        pitcher: text('pitcher'),\n        catcher: text('catcher'),\n        left: text('left fielder'),\n        center: text('center fielder'),\n        right: text('right fielder')\n    })[fielder];\n};\n\ntext.comma = function () {\n    return ({ n: '、', e: ', ' })[text.mode];\n};\ntext.stop = function () {\n    return ({ n: '。', e: '. ' })[text.mode];\n};\n\ntext.namePitch = function (pitch) {\n    if (text.mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1);\n    }\n    if (text.mode == 'n') {\n        return text(pitch.name);\n    }\n};\n\ntext.contactResult = function (batter, fielder, bases, outBy, sacrificeAdvances, out) {\n    var statement = '';\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    var doublePlay = out.doublePlay;\n    if (text.mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'fieldersChoice':\n                    play = out.length === 2 ? 'double play' : '';\n                    statement += ' reached on a fielder\\'s choice ' + play + ' by ' + text.fielderShortName(fielder);\n                    break;\n                case 'line':\n                    statement += ' lined out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'fly':\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'error':\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\n                    break;\n                case 'pop':\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'ground':\n                    var play = doublePlay ? 'into a double play by' : 'out to';\n                    statement += ' grounded ' + play + ' ' + text.fielderShortName(fielder);\n                    break;\n                case 'thrown':\n                    play = doublePlay ? ' on a double play' : '';\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder) + play;\n                    break;\n            }\n            if (out.length) {\n                var plural = out.length > 1;\n                var runner = plural ? 'Runners' : 'Runner';\n                var is = plural ? 'are' : 'is';\n                statement += '. ' + runner + ' from ' + text(out.join(text.comma())) + ' ' + is + ' out';\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\n                    } else {\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\n                    }\n                    break;\n                case 2:\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\n                    break;\n                case 3:\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\n                    break;\n                case 4:\n                    statement += ' homered to ' + text.fielderShortName(fielder);\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map(function (base) {\n                if (base == 'third') {\n                    statement += text.stop() + 'Runner on third scores';\n                } else {\n                    statement += text.stop() + 'Runner on ' + base + ' advances';\n                }\n            });\n        }\n        statement += text.stop();\n    }\n    if (text.mode == 'n') {\n        var stop = text.stop();\n        statement += batter + 'は';\n        if (outBy) {\n            var fielderLong = text.fielderLongName(fielder);\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'fieldersChoice':\n                    statement += '野選(' + fielder + ')で出塁';\n                    break;\n                case 'line':\n                    statement += fielder + '直';\n                    break;\n                case 'fly':\n                    statement += fielder + '飛';\n                    break;\n                case 'error':\n                    statement += 'エラー(' + fielder + ')で出塁';\n                    break;\n                case 'pop':\n                    statement += 'ポップフライで' + fielder + '飛';\n                    break;\n                case 'ground':\n                    statement += fielderLong + 'ゴロに封殺';\n                    break;\n                case 'thrown':\n                    statement += fielder + 'ゴロ';\n                    break;\n            }\n            if (out.length) {\n                statement += '。' + out.map(function (runner) {\n                    return text(runner);\n                }).join(text.comma()) + 'ランナーはアウト';\n            }\n            if (doublePlay) {\n                statement += '。ゲッツー';\n            }\n        } else {\n            fielder = text.fielderShortName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += '内野安打' + '(' + fielder + ')' + 'で出塁';\n                    } else {\n                        statement += '安打(' + fielder + ')' + 'で出塁';\n                    }\n                    break;\n                case 2:\n                    statement += '二塁打（' + fielder + '）で出塁';\n                    break;\n                case 3:\n                    statement += '三塁打（' + fielder + '）で出塁';\n                    break;\n                case 4:\n                    statement += '本塁打（' + fielder + '）';\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map(function (base) {\n                if (base == 'third') {\n                    statement += stop + 'サードランナーホームイン';\n                } else {\n                    statement += stop + text(base) + 'ランナー進塁';\n                }\n            });\n        }\n        statement += stop;\n    }\n    return statement;\n};\n\nexports.text = text;\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballNamespace = require('baseball/namespace');\n\nif (typeof window == 'object') {\n    window.Baseball = _baseballNamespace.Baseball;\n}\n\nexports.Baseball = _baseballNamespace.Baseball;\n\n},{\"baseball/namespace\":20}],20:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballModelAtBat = require('baseball/Model/AtBat');\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelGame = require('baseball/Model/Game');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Baseball = {};\n\nBaseball.model = {};\nBaseball.model.Game = Baseball.Game = _baseballModelGame.Game;\nBaseball.model.Player = Baseball.Player = _baseballModelPlayer.Player;\nBaseball.model.Team = Baseball.Team = _baseballModelTeam.Team;\n\nBaseball.service = {};\nBaseball.service.Animator = _baseballServices_services.Animator;\n\nBaseball.util = {};\nBaseball.util.text = _baseballUtility_utils.text;\n\nexports.Baseball = Baseball;\n\n},{\"baseball/Model/AtBat\":1,\"baseball/Model/Field\":2,\"baseball/Model/Game\":3,\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7,\"baseball/Services/_services\":13,\"baseball/Utility/_utils\":15}],21:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballServicesAnimator = require('baseball/Services/Animator');\n\nvar _baseballServicesDistribution = require('baseball/Services/Distribution');\n\nvar _baseballServicesIterator = require('baseball/Services/Iterator');\n\nvar _baseballServicesMathinator = require('baseball/Services/Mathinator');\n\nexports.Animator = _baseballServicesAnimator.Animator;\nexports.Distribution = _baseballServicesDistribution.Distribution;\nexports.Iterator = _baseballServicesIterator.Iterator;\nexports.Mathinator = _baseballServicesMathinator.Mathinator;\n\n},{\"baseball/Services/Animator\":9,\"baseball/Services/Distribution\":10,\"baseball/Services/Iterator\":11,\"baseball/Services/Mathinator\":12}]},{},[19]);\n","IndexController = function($scope, socket) {\n    var text = Baseball.util.text;\n    var Game = Baseball.Game;\n    var Animator = Baseball.service.Animator;\n\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            text.mode = setMode;\n        }\n        return text.mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode && quickMode !== 7;\n        $scope.y = new Game();\n        var game = $scope.y;\n        var field = window.location.hash ? window.location.hash.slice(1) : game.teams.home.name + Math.ceil(Math.random()*47);\n        if (typeof io !== 'undefined') {\n            socket.game = game;\n            $scope.socket = io(window.location.hostname + ':64321');\n            $scope.socketService = socket;\n            socket.socket = $scope.socket;\n            socket.start(field);\n        }\n        window.location.hash = '#' + field;\n        s2.y = game;\n        bindMethods();\n        $('.blocking').remove();\n        if (game.humanControl == 'none' && game.quickMode) {\n            var n = 0;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            log('sim ended');\n            game.debugOut();\n        } else if (game.humanControl == 'none') {\n            var scalar = game.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if (game.stage == 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*(game.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 2000 : Animator.TIME_FROM_WINDUP + 2000));\n        }\n        if (quickMode === 7 && spectateCpu === undefined) {\n            Game.prototype.quickMode = true;\n            do {\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && game.inning != 7);\n            log('sim halted in 7th');\n            game.debugOut();\n            Game.prototype.quickMode = false;\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'away') {\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'home') {\n\n        }\n    };\n\n    var bindMethods = function() {\n        var game = $scope.y;\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n\n        // avoid scope cycles, any other easy way?\n        var bat = $('.target .swing.stance-indicator');\n        var showBat = function(event) {\n            if (game.humanBatting()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\n                bat.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\",\n                    transform: \"rotate(\" + angle + \"deg) rotateY(\"+(game.batter.bats == \"left\" ? 0 : -0)+\"deg)\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    bat.hide();\n                } else {\n                    bat.show();\n                }\n            }\n        };\n        var glove = $('.target .glove.stance-indicator');\n        var showGlove = function(event) {\n            if (game.humanPitching()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                glove.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    glove.hide();\n                } else {\n                    glove.show();\n                }\n            }\n        };\n\n        $scope.selectPitch = function(pitchName) {\n            if (game.stage == 'pitch') {\n                game.pitchInFlight = $.extend({}, game.pitcher.pitching[pitchName]);\n                game.pitchInFlight.name = pitchName;\n                game.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            $('.no-swing').click();\n            $scope.$apply();\n        };\n        game.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if (game.pitcher.windingUp) {\n                return;\n            }\n            if (game.humanPitching()) $scope.allowInput = false;\n            var offset = $('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (text.mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n        $scope.$watch('y.humanBatting()', function() {\n            if ($scope.y.humanBatting()) {\n                $('.target').mousemove(showBat);\n            } else {\n                $('.target').unbind('mousemove', showBat);\n                bat.hide();\n            }\n        });\n        $scope.$watch('y.humanPitching()', function() {\n            if ($scope.y.humanPitching()) {\n                $('.target').mousemove(showGlove);\n            } else {\n                $('.target').unbind('mousemove', showGlove);\n                glove.hide();\n            }\n        });\n        var aside = {\n            left: $('aside.image-panel.left'),\n            right: $('aside.image-panel.right')\n        };\n        //$scope.$watch('y.playResult', function() {\n        //    aside.left.hide();\n        //    aside.right.hide();\n        //    aside.left.fadeIn(1000, function() {\n        //        aside.left.fadeOut(1000);\n        //        aside.right.fadeIn(1000, function() {\n        //            aside.right.fadeOut(1000);\n        //        })\n        //    });\n        //    $scope.imagePanel = {\n        //        left: 'url(./public/images/' + $scope.y.playResult.batter + '.png)',\n        //        right: 'url(./public/images/' + $scope.y.playResult.fielder + '.png)'\n        //    };\n        //});\n    };\n\n\n};","var SocketService = function() {\n    var Service = function() {};\n    var game, socket, NO_OPERATION = function() {},\n        animator = Baseball.service.Animator;\n    Service.prototype = {\n        socket : {},\n        game : {},\n        connected : false,\n        start : function(key) {\n            game = this.game;\n            socket = this.socket;\n            game.opponentService = this;\n            this.connected = socket.connected;\n            this.on();\n            socket.emit('register', key);\n        },\n        on : function() {\n            var giraffe = this;\n            socket.on('register', this.register);\n            socket.on('connect reconnect', function() {\n                giraffe.connected = true;\n            });\n            socket.on('disconnect', function() {\n                giraffe.connected = false;\n            });\n            socket.on('pitch', function(pitch) {\n                //console.log('receive', 'pitch', pitch);\n                game.thePitch(0, 0, NO_OPERATION, pitch);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)();\n            });\n            socket.on('swing', function(swing) {\n                //console.log('receive', 'swing', swing);\n                game.theSwing(0, 0, NO_OPERATION, swing);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)(function() {\n                    if (swing.contact) {\n                        animator.animateFieldingTrajectory(game);\n                    }\n                });\n            });\n            socket.on('partner_disconnect', function() {\n                console.log('The opponent has disconnected');\n                game.opponentConnected = false;\n                var scope = window.s;\n                scope.$digest();\n            });\n            socket.on('partner_connect', function() {\n                game.opponentConnected = true;\n                var scope = window.s;\n                scope.$digest();\n            });\n            socket.on('opponent_taking_field', function() {\n                console.log('A challenger has appeared! Sending game data.');\n                socket.emit('game_data', game.toData());\n            });\n            socket.on('game_data', function(data) {\n                game.fromData(data);\n                var scope = window.s;\n                scope.$apply();\n            });\n            socket.on('field_in_use', function() {\n                game.opponentConnected = false;\n            });\n        },\n        off : function() {\n            socket.on('register', NO_OPERATION);\n        },\n        register: function(data) {\n            console.log(data);\n            if (data === 'away') {\n                game.humanControl = 'away';\n            }\n            socket.on('register', NO_OPERATION);\n        },\n        emitPitch : function(pitch) {\n            //console.log('emit', 'pitch', pitch);\n            socket.emit('pitch', pitch);\n        },\n        emitSwing : function(swing) {\n            //console.log('emit', 'swing', swing);\n            socket.emit('swing', swing);\n        },\n        swing : function() {\n\n        },\n        pitch : function() {\n\n        }\n    };\n    return new Service;\n};","BattersDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/batters.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","BatteryDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/battery.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","FieldDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/field.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'public/html/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives'])\n    .service('socket', SocketService)\n    .controller('IndexController', ['$scope', 'socket', IndexController]);\n\napp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{{');\n    $interpolateProvider.endSymbol('}}');\n});\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective)\n    .directive('batters', BattersDirective)\n    .directive('battery', BatteryDirective)\n    .directive('field', FieldDirective);"],"sourceRoot":"/source/"}
{"version":3,"sources":["bundle.js","IndexController.js","SocketService.js","scoreboard.js","application.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_baseballUtilityLog","AtBat","text","this","infield","indexOf","INFIELD_HIT_INDICATOR","replace","split","RBI_INDICATOR","rbi","log","Log","beneficial","WALK","SINGLE","HOMERUN","DOUBLE","TRIPLE","SACRIFICE","REACHED_ON_ERROR","constructor","identifier","baseball/Utility/Log",2,"_baseballModelPlayer","_baseballServices_services","Field","game","init","first","second","third","hasRunnersOn","Player","determineSwingContactResult","swing","x","y","splayAngle","angle","flyAngle","power","batter","skill","offense","eye","bonus","landingDistance","Distribution","Math","abs","foul","fielder","findFielder","travelDistance","splay","sacrificeAdvances","half","teams","home","positions","away","fatigue","error","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","caught","umpire","count","outs","sacrificeThrowInTime","Mathinator","fielderReturnDelay","getBaseRunningTime","push","bases","thrownOut","fieldingReturnDelay","fieldingDelay","outFielder","left","center","right","baseRunningTime","difficulty","fieldersChoice","swingResult","Animator","animateFieldingTrajectory","pitcher","catcher","short","b","fieldingTest","random","distance","data","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","fielders","tally","distances","false","selections","returnFielder","minDistance","giraffe","Iterator","each","position","spot","thisDistance","baseball/Model/Player","baseball/Services/_services",3,"_baseballModelField","_baseballModelTeam","_baseballModelUmpire","_baseballUtility_utils","Game","m","gamesIntoSeason","humanControl","console","quickMode","debug","mode","floor","field","Team","helper","name","pickName","Umpire","humanPitching","stage","getInning","inning","toUpperCase","humanBatting","end","R","getName","stats","pitching","W","L","note","simulateInput","callback","autoPitch","pitchTarget","autoSwing","simulatePitchAndSwing","setTimeout","TIME_FROM_SET","TIME_FROM_WINDUP","receiveInput","thePitch","theSwing","autoPitchSelect","pitchName","selectRandomPitch","hasOwnProperty","pitch","pitchInFlight","windingUp","$","addClass","windup","css","pitchLocation","animate","width","removeClass","deceptiveX","deceptiveY","convergence","convergenceSum","balls","strikes","centralizedNumber","cpuSwing","swingProbability","swingLikelihood","opponentConnected","waitingCallback","awaitPitch","opponentService","emitSwing","awaitSwing","emitPitch","inFlight","override","breakDirection","pitchDefinitions","slice","battersEye","getBattersEye","control","pitchControl","breakEffect","notePitch","setBatAngle","recalculation","getAngularOffset","precision","looking","contact","strike","max","sqrt","pow","noteSwing","result","makeCall","emit","startOpponentPitching","team","origin","bats","battingAngle","debugOut","filter","PO","map","hitters","lineup","concat","atBats","LO","ab","FO","GO","SO","toData","players","deck","hole","nameJ","says","player","serialize","pitchRecord","record","fromData","playerJson","index","playerData","JSON","parse","side","resetStats","stabilizeShortRecord","velocity","break","pitchSelect","scoreboard",4,5,6,7,8,9,"resetTally","H","E","baseball/Model/Field","baseball/Model/Team","baseball/Model/Umpire","baseball/Utility/_utils","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","order","pool","skillset","requiredThrowingHandedness","selection","rating","skills","cursor","property","shift","_baseballModel_models","hero","averaging","randomizeSkills","surnameKey","surnames","nameKey","names","jSurname","surnamesJ","jGivenName","namesJ","surname","surnameJ","stringify","IP","ER","GS","arguments","undefined","randBetween","total","isNaN","pa","paRemaining","bb","so","h","doubles","triples","hr","hbp","sac","chances","pitches","K","getK9","getERA","ERA","HR","BB","WHIP","getWHIP","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","K9","atBatObjects","getAtBats","item","recordRBI","recordInfieldHit","randValue","isPitching","catching","slider","fork","cutter","sinker","curve","change","reduce","prev","current","getSurname","getUniformNumber","getOrder","baseball/Model/_models","_baseballModelManager","bullpen","j","manager","teamNameIndex","teamNames","teamNamesJ","nowBatting","expanded","baseball/Model/Manager","playBall","batterRunner","noteBatter","advanceRunners","LINEOUT","FLYOUT","newBatter","FIELDERS_CHOICE","reachBase","GROUNDOUT","hitByPitch","STRIKEOUT","changeSides","isWalk","RUN","canAdvance","notePlateAppearanceResult","_baseballModelAtBat","_baseballModelGame","baseball/Model/AtBat","baseball/Model/Game","TweenMax","loadTweenMax","window","set","to","from","killAll","HOLD_UP_ALLOWANCE","pitchBreak","updateFlightPath","$scope","top","breakTop","breakLeft","$baseballs","flightSpeed","originTop","originLeft","henka","quarter","pitchTransition","transitions","lastTimeout","allowInput","$apply","holdUpTimeouts","holdUp","ball","linearApproximateDragScalar","apexHeight","airTime","scalar","memory","bounding","sin","PI","velocityVerticalComponent","RADIAN","mathinator","transitionalTrajectory","fn","baseball/services/_services",10,"chance","scale","min","effect","actual",11,"collection","keys","Array",12,"square","SPLAY_INDICATOR_LEFT","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","radians","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","translateSwingResultToStylePosition","_top","_left","transform","intercept",13,"_baseballServicesAnimator","_baseballServicesDistribution","_baseballServicesIterator","_baseballServicesMathinator","baseball/Services/Animator","baseball/Services/Distribution","baseball/Services/Iterator","baseball/Services/Mathinator",14,"_baseballUtilityText","rec","shortRecord","stabilized","rec2","_note","noteJ","unshift","getBatter","longFormFielder","comma","recordJ","getPitchLocationDescription","batterIsLefty","say","noComma","noComma2","join","namePitch","stop","pop","getSwing","getPlateAppearanceResult","out","outBy","contactResult","pointer","baseball/Utility/text",15,"_baseballUtilityData","_baseballUtilityHelper","baseball/Utility/data","baseball/Utility/helper",16,17,"4-seam","2-seam",18,"phrase","string","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike."," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Pitch","Control","Velocity","Break","At Bat :","On Deck :","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","2B","3B","RBI","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Throws/Bats","LHP","RHP","LHB","RHB","R "," L "," R ","#","breaking","fielderShortName","slash","fielderLongName","charAt","statement","plural","runner","is","base","fielderLong",19,"_baseballNamespace","Baseball","baseball/namespace",20,"model","service","util",21,"IndexController","socket","setMode","proceedToGame","spectateCpu","io","location","hostname","socketService","start","s2","bindMethods","remove","auto","setInterval","clearInterval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","show","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","SocketService","Service","NO_OPERATION","connected","on","register","scope","off","ScoreboardDirective","templateUrl","cacheKey","link","app","angular","controller","config","$interpolateProvider","startSymbol","endSymbol","directive"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,QAAAU,OAAAJ,SACA,YAQA,SAAAK,iBAAAC,SAAAC,aAAA,KAAAD,mBAAAC,cAAA,KAAA,IAAAC,WAAA,qCANAC,OAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAC,cAAA,WAAA,QAAAC,kBAAAC,OAAAC,OAAA,IAAA,GAAApB,GAAA,EAAAA,EAAAoB,MAAAb,OAAAP,IAAA,CAAA,GAAAqB,YAAAD,MAAApB,EAAAqB,YAAAC,WAAAD,WAAAC,aAAA,EAAAD,WAAAE,cAAA,EAAA,SAAAF,cAAAA,WAAAG,UAAA,GAAAV,OAAAC,eAAAI,OAAAE,WAAAI,IAAAJ,aAAA,MAAA,UAAAT,YAAAc,WAAAC,aAAA,MAAAD,aAAAR,iBAAAN,YAAAgB,UAAAF,YAAAC,aAAAT,iBAAAN,YAAAe,aAAAf,gBAIAiB,oBAAA9B,QAAA,wBAEA+B,MAAA,WACA,QAAAA,OAAAC,MACArB,gBAAAsB,KAAAF,OAEAE,KAAAC,QAAAF,KAAAG,QAAAJ,MAAAF,UAAAO,uBAAA,GAAAL,MAAAF,UAAAO,sBAAA,GACAJ,KAAAA,KAAAK,QAAAN,MAAAF,UAAAO,sBAAA,IACAH,KAAAD,KAAAA,KAAAM,MAAAP,MAAAF,UAAAU,eAAA,GACAN,KAAAO,IAAAR,KAAAM,MAAAL,KAAAD,MAAA,GAAA,EAEA,IAAAS,KAAA,GAAAX,qBAAAY,IAEAC,YAAAF,IAAAG,KAAAH,IAAAI,OAAAJ,IAAAK,QAAAL,IAAAM,OAAAN,IAAAO,OAAAP,IAAAQ,UAAAR,IAAAS,iBACAP,YAAAR,QAAAF,KAAAD,MAAA,KACAC,KAAAU,YAAA,GAWA,MAPAzB,cAAAa,QACAL,IAAA,WACAT,MAAA,WACA,MAAA,GAAAgB,KAAAC,QAAAD,KAAAD,KAAAC,KAAAO,QAIAT,QAGAA,OAAAF,UAAAsB,YAAApB,MACAA,MAAAF,UAAAuB,WAAA,QACArB,MAAAF,UAAAO,sBAAA,GACAL,MAAAF,UAAAU,cAAA,IAEAjC,QAAAyB,MAAAA,QAEAsB,uBAAA,KAAAC,GAAA,SAAAtD,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAsC,sBAAAvD,QAAA,yBAEAwD,2BAAAxD,QAAA,+BAOAyD,MAAA,SAAAC,MACAzB,KAAA0B,KAAAD,MAGAD,OAAA5B,WACAsB,YAAAM,MACAE,KAAA,SAAAD,MACAzB,KAAAyB,KAAAA,KACAzB,KAAA2B,MAAA,KACA3B,KAAA4B,OAAA,KACA5B,KAAA6B,MAAA,MAKAC,aAAA,WACA,MAAA9B,MAAA2B,gBAAAL,sBAAAS,QAAA/B,KAAA4B,iBAAAN,sBAAAS,QAAA/B,KAAA6B,gBAAAP,sBAAAS,QAMAC,4BAAA,SAAAC,OACA,GAAAC,GAAAD,MAAAC,EACAC,EAAAF,MAAAE,EAQAC,WAAA,GAAA,IAAAF,EAAAD,MAAAI,MAAAF,EAAA,GACAG,SAAA,GAAAH,EAAAF,MAAAI,MAAAF,EAAA,GACAI,MAAAvC,KAAAyB,KAAAe,OAAAC,MAAAC,QAAAH,OAAAvC,KAAAyB,KAAAe,OAAAG,IAAAC,OAAA,GAAA,EACAC,gBAAAtB,2BAAAuB,aAAAD,gBAAAN,MAAAD,SAgBA,IAfA,EAAAA,UAAAO,gBAAA,MACAA,iBAAAA,gBAAA,KAAA,EAAA,KAGAE,KAAAC,IAAA,GAAAZ,YAAA,KAAAH,MAAAgB,MAAA,GACAhB,MAAAiB,QAAAlD,KAAAmD,YAAAf,WAAAS,iBACAZ,MAAAmB,eAAAP,gBACAZ,MAAAK,SAAAA,SAKAL,MAAAoB,MAAAjB,WAAA,GACAH,MAAAqB,qBAEArB,MAAAiB,QAAA,CACA,GAAAA,SAAA,OAAAlD,KAAAyB,KAAA8B,KAAAvD,KAAAyB,KAAA+B,MAAAC,KAAAC,UAAAzB,MAAAiB,SAAAlD,KAAAyB,KAAA+B,MAAAG,KAAAD,UAAAzB,MAAAiB,QACAA,SAAAU,SAAA,EACA3B,MAAA4B,OAAA,CACA,IAAAC,cAAAZ,QAAAT,MAAAsB,QAAAC,SAAA,IACAC,aAAAf,QAAAT,MAAAsB,QAAAG,SAAA,GAEAjC,OAAAkC,cAAAnE,KAAAoE,iBAAApE,KAAA0D,UAAAzB,MAAAiB,UAAAd,WAAAS,iBACA,IAAAwB,iBAAAnB,QAAAT,MAAAsB,QAAAO,MAAAhC,SAAA,KAAAL,MAAAkC,aACA,IAAAE,gBAAA,GAAA/B,SAAA,GAEA,GAAAf,2BAAAuB,aAAAe,MAAAX,SAEAY,cAAA,GACA7B,MAAA4B,OAAA,EACA5B,MAAAsC,QAAA,MAGA,IADAtC,MAAAsC,QAAA,EACAvE,KAAAyB,KAAA+C,OAAAC,MAAAC,KAAA,EAAA,CACA,GAAAC,sBAAApD,2BAAAqD,WAAAC,mBAAA5C,MAAAmB,eAAAa,aAAAH,aAAA,IACA9D,MAAA2B,OAAAgD,qBAAA3E,KAAA2B,MAAAmD,qBAAA,KACA7C,MAAAqB,kBAAAyB,KAAA,SAEA/E,KAAA4B,QAAA+C,qBAAA3E,KAAA4B,OAAAkD,sBACA7C,MAAAqB,kBAAAyB,KAAA,UAEA/E,KAAA6B,OAAA8C,qBAAA3E,KAAA6B,MAAAiD,qBAAA,IACA7C,MAAAqB,kBAAAyB,KAAA,cAKA9C,OAAAsC,QAAA,CAGA,KAAAtC,MAAAsC,OAAA,CACAtC,MAAA+C,MAAA,EACA/C,MAAAgD,WAAA,CACA,IAAAC,qBAAA3D,2BAAAqD,WAAAC,mBAAA5C,MAAAmB,eAAAa,aAAAH,aAAAO,gBACApC,OAAAkD,cAAAD,oBACAjD,MAAAmD,WAAA,IAAAC,KAAA,EAAAC,OAAA,EAAAC,MAAA,GAAAtD,MAAAiB,QACA,IAAAoB,OAAAtE,KAAAyB,KAAAe,OAAAC,MAAAC,QAAA4B,MACAkB,gBAAAjE,2BAAAqD,WAAAY,gBAAAlB,MAEA,IAAArC,MAAAmD,WAAA,CAEAnD,MAAA+C,MAAA,EACAE,qBAAAM,eAGA,KAFA,GAAAC,YAAA,IAEAP,oBAAAM,gBAAAC,YAAAxD,MAAA+C,MAAA,GACA/C,MAAA+C,QACAS,WAAA,KACAP,qBAAAM,oBAIAvD,OAAAyD,eAAA,KACAzD,MAAA+C,MAAAE,qBAAAM,gBAAA,EAAA,EAAA,EACAxF,KAAA2B,OAAAuD,oBAAAlF,KAAA2B,MAAAmD,uBAAA7C,MAAAyD,eAAA,SACA1F,KAAA2B,OAAA3B,KAAA4B,QAAAsD,oBAAAlF,KAAA4B,OAAAkD,qBAAA,KAAA7C,MAAAyD,eAAA,UACA1F,KAAA6B,OAAAqD,oBAAAlF,KAAA6B,MAAAiD,uBAAA7C,MAAAyD,eAAA,SACAzD,MAAAyD,iBAAAzD,MAAA+C,MAAA,EAEA/C,OAAAgD,UAAA,GAAAhD,MAAA+C,MACA/C,MAAAgD,YACAhD,MAAAgD,WAAA,EACAhD,MAAA4B,OAAA,QAIAd,MAAAC,IAAA,GAAAZ,YAAA,IAAAS,gBAAA,IACAZ,MAAA+C,MAAA,GAEA/C,MAAAgB,MAAA,EACAhB,MAAAsC,QAAA,EAIA,OADAvE,MAAAyB,KAAAkE,YAAA1D,MACAV,2BAAAqE,SAAAC,0BAAA7F,KAAAyB,OAUA0B,YAAA,SAAAf,WAAAS,iBACA,MAAAE,MAAAC,IAAA,GAAAZ,YAAA,IAAA,EACA,GAAAS,iBAAAA,gBAAA,IACA,UACAA,iBAAA,IAAA,GAAAA,iBAAAE,KAAAC,IAAA,GAAAZ,YAAA,EACA,UAEAS,gBAAA,IAAAA,gBAAAE,KAAAC,IAAA,GAAAZ,YAAA,GAAA,GAAA,IACA,GAAAA,WACA,QACA,GAAAA,WACA,QACA,IAAAA,WACA,SAEA,QAEAS,gBAAA,IAAA,IAAAA,gBACA,GAAAT,WACA,OACA,IAAAA,WACA,SAEA,SAGA,GAGAsB,WACAoC,SAAA,GAAA,IACAC,SAAA,EAAA,GACApE,OAAA,IAAA,IACAC,QAAA,MAAA,KACAoE,SAAA,KAAA,KACAnE,OAAA,GAAA,IACAwD,MAAA,GAAA,KACAC,QAAA,GAAA,KACAC,OAAA,IAAA,MAEAnB,iBAAA,SAAAtG,EAAAmI,GACA,MAAA1E,4BAAAqD,WAAAR,iBAAAtG,EAAAmI,IAEAC,aAAA,WACA,GAAA7D,OAAA,GAAAU,KAAAoD,SAAA,GACAC,SAAA,IAAArD,KAAAoD,SACAjD,QAAAlD,KAAAmD,YAAAd,MAAA+D,UACAC,OACA,IAAAnD,QAAA,CACA,GAAAoD,mBAAAtG,KAAAuG,qBAAAlE,MAAA+D,UAAA,EAIA,OAHAC,MAAAnD,QAAAoD,kBAAA,GACAD,KAAAC,kBAAA,IAAAtG,KAAAoE,kBAAA/B,MAAA+D,WAAApG,KAAA0D,UAAA4C,kBAAA,IAAA,GAAAtG,KAAA0D,UAAA4C,kBAAA,IAAA,KACAD,KAAAC,kBAAA,IAAAtG,KAAAoE,kBAAA/B,MAAA+D,WAAApG,KAAA0D,UAAA4C,kBAAA,IAAA,GAAAtG,KAAA0D,UAAA4C,kBAAA,IAAA,KACAD,OAGAG,sBAAA,WAcA,IAAA,GAbAC,WACAX,SAAAY,MAAA,EAAAC,cACAZ,SAAAW,MAAA,EAAAC,cACAhF,OAAA+E,MAAA,EAAAC,cACA/E,QAAA8E,MAAA,EAAAC,cACAX,SAAAU,MAAA,EAAAC,cACA9E,OAAA6E,MAAA,EAAAC,cACAtB,MAAAqB,MAAA,EAAAC,cACArB,QAAAoB,MAAA,EAAAC,cACApB,OAAAmB,MAAA,EAAAC,cACAC,SAAAF,MAAA,EAAAC,eAEAE,cACA7I,EAAA,EAAA,IAAAA,EAAAA,IAAA,CACA,GAAAqE,OAAA,GAAAU,KAAAoD,SAAA,GACAC,SAAA,IAAArD,KAAAoD,SACAjD,QAAAlD,KAAAmD,YAAAd,MAAA+D,SACAK,UAAAvD,SAAAwD,QACAxD,SACAuD,SAAAvD,SAAAyD,UAAA5B,KAAA/E,KAAAoE,kBAAA/B,MAAA+D,WAAApG,KAAA0D,UAAAR,SAAA,GAAAlD,KAAA0D,UAAAR,SAAA,MAEA2D,WAAA9B,MAAA1C,MAAA+D,WACAS,WAAA9B,KAAA/E,KAAAuG,qBAAAlE,MAAA+D,UAAA,IAEA,OAAAK,SAAAI,aAEAN,qBAAA,SAAAlE,MAAA+D,SAAAU,eACA,GAAAH,cACAI,YAAA,IACAC,QAAAhH,KACAkD,SAAA,CASA,OARA+D,UAAAC,KAAAlH,KAAA0D,UAAA,SAAAyD,SAAAC,MACA,GAAAC,cAAAL,QAAA5C,kBAAA/B,MAAA+D,UAAAgB,KACAT,WAAAU,cAAAF,SACAJ,YAAAM,eACAN,YAAAM,aACAnE,QAAAiE,YAGAL,eAAA5D,QAAAlD,KAAAmD,YAAAd,MAAA+D,WAAAO,YAIAtI,QAAAmD,MAAAA,QAEA8F,wBAAA,EAAAC,8BAAA,KAAAC,GAAA,SAAAzJ,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAyI,qBAAA1J,QAAA,wBAEA2J,mBAAA3J,QAAA,uBAEA4J,qBAAA5J,QAAA,yBAEA8B,oBAAA9B,QAAA,wBAEA6J,uBAAA7J,QAAA,2BAEAwD,2BAAAxD,QAAA,+BAEA8J,KAAA,SAAAC,GACA9H,KAAA0B,KAAAoG,GAGAD,MAAAjI,WACAsB,YAAA2G,KACAE,gBAAA,EACAC,aAAA,OACAC,SAAA,EACAC,WAAA,EACAC,SACArC,WACAtD,UACAd,KAAA,SAAAoG,GAUA,IATAA,IAAAF,uBAAA7H,KAAAqI,KAAAN,GACA9H,KAAA+H,gBAAA,EAAAhF,KAAAsF,MAAA,IAAAtF,KAAAoD,UACAnG,KAAAsI,MAAA,GAAAb,qBAAAjG,MAAAxB,MACAA,KAAAwD,MAAAG,KAAA,GAAA+D,oBAAAa,KAAAvI,MACAA,KAAAwD,MAAAC,KAAA,GAAAiE,oBAAAa,KAAAvI,MACAA,KAAAQ,IAAA,GAAAX,qBAAAY,IACAT,KAAAQ,IAAAiB,KAAAzB,KACAA,KAAAmI,SACAnI,KAAAwI,OAAAZ,uBAAAY,OACAxI,KAAAwD,MAAAG,KAAA8E,MAAAzI,KAAAwD,MAAAC,KAAAgF,MACAzI,KAAAwD,MAAAG,KAAA+E,UAEA1I,MAAAwE,OAAA,GAAAmD,sBAAAgB,OAAA3I,MACAA,KAAA4I,kBACA5I,KAAA6I,MAAA,UAGAC,UAAA,WACA,MAAA,KAAAlB,uBAAA7H,KAAAqI,KAAApI,KAAA+I,QAAA,OAAA/I,KAAAuD,KAAA,MAAA,MAAAvD,KAAAuD,KAAAyF,cAAA,IAAAhJ,KAAA+I,QAEAE,aAAA,WACA,GAAA,QAAAjJ,KAAAgI,aAAA,OAAA,CACA,QAAAhI,KAAAuD,MACA,IAAA,MACA,MAAA,QAAAvD,KAAAgI,cAAA,QAAAhI,KAAAgI,YACA,KAAA,SACA,MAAA,QAAAhI,KAAAgI,cAAA,QAAAhI,KAAAgI,eAGAY,cAAA,WACA,GAAA,QAAA5I,KAAAgI,aAAA,OAAA,CACA,QAAAhI,KAAAuD,MACA,IAAA,MACA,MAAA,QAAAvD,KAAAgI,cAAA,QAAAhI,KAAAgI,YACA,KAAA,SACA,MAAA,QAAAhI,KAAAgI,cAAA,QAAAhI,KAAAgI,eAGAkB,IAAA,WACAlJ,KAAA6I,MAAA,KACA,IAAAtL,GAAAE,CACAF,GAAAyC,KAAA0G,MAAAjD,KAAA0F,EAAAnJ,KAAA0G,MAAA/C,KAAAwF,EAAA,kBAAAnJ,KAAA0G,MAAAjD,KAAA0F,GAAAnJ,KAAA0G,MAAA/C,KAAAwF,EAAA,kCAAA,gBACA1L,EAAAuC,KAAA0G,MAAAjD,KAAA0F,EAAAnJ,KAAA0G,MAAA/C,KAAAwF,EAAAnJ,KAAAwD,MAAAC,KAAA2F,UAAA,MAAApJ,KAAA0G,MAAAjD,KAAA0F,GAAAnJ,KAAA0G,MAAA/C,KAAAwF,EAAA,OAAAnJ,KAAAwD,MAAAG,KAAAyF,UAAA,MACApJ,KAAA0G,MAAAjD,KAAA0F,EAAAnJ,KAAA0G,MAAA/C,KAAAwF,GACAnJ,KAAAwD,MAAAC,KAAAC,UAAAoC,QAAAuD,MAAAC,SAAAC,IACAvJ,KAAAwD,MAAAG,KAAAD,UAAAoC,QAAAuD,MAAAC,SAAAE,KACAxJ,KAAA0G,MAAAjD,KAAA0F,EAAAnJ,KAAA0G,MAAA/C,KAAAwF,IACAnJ,KAAAwD,MAAAC,KAAAC,UAAAoC,QAAAuD,MAAAC,SAAAE,IACAxJ,KAAAwD,MAAAG,KAAAD,UAAAoC,QAAAuD,MAAAC,SAAAC,KAEAvJ,KAAAQ,IAAAiJ,KAAAlM,EAAAE,GACAuC,KAAAQ,IAAAiJ,KAAA,uBAAA,cAEAZ,MAAA,QACAa,cAAA,SAAAC,UACA,OAAA3J,KAAA6I,QAGA,SAAA7I,KAAA6I,MACA7I,KAAA4J,UAAAD,UACA,SAAA3J,KAAA6I,QACA,gBAAA7I,MAAA6J,cACA7J,KAAA6J,aAAA3H,EAAA,IAAAC,EAAA,MAEAnC,KAAA8J,UAAA9J,KAAA6J,YAAA3H,EAAAlC,KAAA6J,YAAA1H,EAAAwH,aAGAI,sBAAA,SAAAJ,UACA,GAAA,OAAA3J,KAAA6I,MAAA,CAGA7I,KAAA4J,UAAAD,SACA,IAAA3C,SAAAhH,IACAgK,YAAA,WACA,gBAAAhD,SAAA6C,cACA7C,QAAA6C,aAAA3H,EAAA,IAAAC,EAAA,MAEA6E,QAAA8C,UAAA9C,QAAA6C,YAAA3H,EAAA8E,QAAA6C,YAAA1H,EAAA,SAAAwH,UACAA,cAEA3C,QAAAsB,MAAAxG,eAAAP,2BAAAqE,SAAAqE,cAAA,KAAA1I,2BAAAqE,SAAAsE,iBAAA,QAQAC,aAAA,SAAAjI,EAAAC,EAAAwH,UACA,QAAA3J,KAAAgI,cAGA,OAAAhI,KAAA6I,QAGA,SAAA7I,KAAA6I,OAAA7I,KAAA4I,gBACA5I,KAAAoK,SAAAlI,EAAAC,EAAAwH,UACA,SAAA3J,KAAA6I,OAAA7I,KAAAiJ,gBACAjJ,KAAAqK,SAAAnI,EAAAC,EAAAwH,YAGAW,gBAAA,WAEA,IADA,GAAAC,WAAAvK,KAAAwI,OAAAgC,qBACAxK,KAAA8F,QAAAwD,SAAAmB,eAAAF,YACAA,UAAAvK,KAAAwI,OAAAgC,mBAEA,IAAAE,OAAA1K,KAAA8F,QAAAwD,SAAAiB,UACAG,OAAAjC,KAAA8B,UACAvK,KAAA2K,cAAAD,OAEAd,UAAA,SAAAD,UACA,GAAA7D,SAAA9F,KAAA8F,QACAkB,QAAAhH,IACA,IAAA,SAAAA,KAAA6I,MAAA,CAEA,GADA/C,QAAA8E,WAAA,GACA5K,KAAAiI,QAAA,CACA4C,EAAA,aAAAC,SAAA,OACA,IAAAC,QAAAF,EAAA,UACAE,QAAAC,IAAA,QAAA,QAEAhL,KAAAsK,iBACA,IAAAI,OAAAnJ,2BAAAuB,aAAAmI,gBACA/I,EAAAwI,MAAAxI,EACAC,EAAAuI,MAAAvI,CACAnC,MAAAkI,UACAlI,KAAAoK,SAAAlI,EAAAC,EAAAwH,UAEAoB,OAAAG,SAAAC,MAAA,GAAAnL,KAAAsI,MAAAxG,eAAAP,2BAAAqE,SAAAqE,cAAA1I,2BAAAqE,SAAAsE,iBAAA,YACAlD,QAAAiB,SAAA4C,EAAA,mBAAAO,YAAA,QACApE,QAAAoD,SAAAlI,EAAAC,EAAAwH,UACA7D,QAAA8E,WAAA,MAKAd,UAAA,SAAAuB,WAAAC,WAAA3B,UACA,GAGA4B,aACAC,eAJAxE,QAAAhH,KACA4C,MAAA5C,KAAAwC,OAAAG,IAAAC,OAAA,EACAD,IAAA3C,KAAAwC,OAAAC,MAAAC,QAAAC,IAAA,GAAA3C,KAAAwE,OAAAC,MAAAgH,MAAAzL,KAAAwE,OAAAC,MAAAiH,SAAA9I,MAIAV,EAAAX,2BAAAuB,aAAA6I,oBACAxJ,EAAAZ,2BAAAuB,aAAA6I,mBACA,KAAA5I,KAAAoD,SAAAxD,KACA4I,YAAA,KAAA5I,IAAA,IACA6I,eAAA,EAAAD,YACAF,WAAArL,KAAA2K,cAAAzI,EACAoJ,WAAAtL,KAAA2K,cAAAxI,IAEAoJ,YAAA,IAAA5I,IAAA,IACA6I,eAAA,EAAAD,aAEArJ,GAAAmJ,WAAAE,YAAArJ,GAAAsJ,eACArJ,GAAAmJ,WAAAC,YAAApJ,GAAAqJ,eAEAxL,KAAA2F,YAAAzD,EAAAX,2BAAAuB,aAAA8I,SAAA1J,EAAAlC,KAAA2K,cAAAzI,EAAAS,KACA3C,KAAA2F,YAAAxD,EAAAZ,2BAAAuB,aAAA8I,SAAAzJ,EAAAnC,KAAA2K,cAAAxI,EAAAQ,IAEA,IAAAkJ,kBAAAtK,2BAAAuB,aAAAgJ,gBAAAnJ,IAAAT,EAAAC,EAAAnC,KAAAwE,OACAqH,kBAAA,IAAA9I,KAAAoD,WACAjE,EAAA,KAGAyH,SAAA,WACA3C,QAAAqD,SAAAnI,EAAAC,MAGA4J,mBAAA,EACAC,gBAAA,aACAC,WAAA,SAAAtC,SAAAhE,aACA3F,KAAA+L,mBACA/L,KAAAgM,gBAAArC,SACA3J,KAAAkM,gBAAAC,UAAAxG,cAEA3F,KAAA4J,UAAAD,WAGAyC,WAAA,SAAAlK,EAAAC,EAAAwH,SAAAgB,cAAAd,aACA7J,KAAA+L,mBACA/L,KAAAgM,gBAAArC,SACA3J,KAAAkM,gBAAAG,WACAC,SAAA3B,cACAxL,OAAA0K,eAGA7J,KAAA8J,UAAA5H,EAAAC,EAAAwH,WAGAS,SAAA,SAAAlI,EAAAC,EAAAwH,SAAA4C,UACA,GAAA,SAAAvM,KAAA6I,MAAA,CACA,GAAA0D,SACAvM,KAAA2K,cAAA4B,SAAAD,SACAtM,KAAA6J,YAAA0C,SAAApN,OACAwK,SAAA3J,KAAAgM,oBACA,CACAhM,KAAA8F,QAAAlC,UACA5D,KAAA6J,YAAA3H,EAAAA,EACAlC,KAAA6J,YAAA1H,EAAAA,EAEAnC,KAAA2K,cAAA6B,eAAAxM,KAAAwI,OAAAiE,iBAAAzM,KAAA2K,cAAAlC,MAAAiE,MAAA,EAAA,GACA1M,KAAA2M,WAAA/E,uBAAA7H,KAAA6M,cAAA5M,KAEA,IAAA6M,SAAA7M,KAAA2K,cAAAkC,OACA7M,MAAA6J,YAAA3H,EAAAX,2BAAAuB,aAAAgK,aAAA9M,KAAA6J,YAAA3H,EAAA2K,SACA7M,KAAA6J,YAAA1H,EAAAZ,2BAAAuB,aAAAgK,aAAA9M,KAAA6J,YAAA1H,EAAA0K,SAEA,SAAA7M,KAAA8F,QAAA9F,YAAAA,KAAA2K,cAAA6B,eAAA,IAAA,GAEA,IAAAO,aAAAxL,2BAAAuB,aAAAiK,YAAA/M,KAAA2K,cAAA3K,KAAA8F,QAAA9F,KAAA6J,YAAA3H,EAAAlC,KAAA6J,YAAA1H,EAEAnC,MAAA2K,cAAAzI,EAAA6K,YAAA7K,EACAlC,KAAA2K,cAAAxI,EAAA4K,YAAA5K,EAEAnC,KAAAQ,IAAAwM,UAAAhN,KAAA2K,cAAA3K,KAAAwC,QAEAxC,KAAA6I,MAAA,QACA,QAAA7I,KAAAgI,cAAA,QAAAhI,KAAAgI,eAAAhI,KAAAiJ,eAGAjJ,KAAAoM,WAAAlK,EAAAC,EAAAwH,SAAA3J,KAAA2K,cAAA3K,KAAA6J,aAFAF,aAMAgD,YACApP,EAAA,GACAE,EAAA,IAEA4M,SAAA,SAAAnI,EAAAC,EAAAwH,SAAA4C,UACA,GAAA,SAAAvM,KAAA6I,MAAA,CACA,GAAA0D,SACAvM,KAAA2F,YAAA4G,SACA5C,SAAA3J,KAAAgM,oBACA,CACAhM,KAAA2F,cACA,IAAA/C,OAAA5C,KAAAwC,OAAAG,IAAAC,OAAA,EACAD,IAAA3C,KAAAwC,OAAAC,MAAAC,QAAAC,IAAA,GAAA3C,KAAAwE,OAAAC,MAAAgH,MAAAzL,KAAAwE,OAAAC,MAAAiH,SAAA9I,KAEA,IAAAV,GAAA,GAAA,KAAAA,EAAA,CACAlC,KAAAwC,OAAAoB,UAEA5D,KAAA2F,YAAAzD,EAAAA,EAAAlC,KAAA2K,cAAAzI,EACAlC,KAAA2F,YAAAxD,EAAAA,EAAAnC,KAAA2K,cAAAxI,EACAnC,KAAA2F,YAAAtD,MAAArC,KAAAiN,aAEA,IAAAC,eAAA3L,2BAAAqD,WAAAuI,iBAAAnN,KAAA2F,YAAA3F,KAAA2F,YAAAtD,OACA+K,UAAA7L,2BAAAuB,aAAAb,MAAAU,IAEA3C,MAAA2F,YAAAzD,EAAAa,KAAAC,IAAAkK,cAAAhL,GAAA,GAAAgL,cAAAhL,EAAAkL,UAAAF,cAAAhL,EACAlC,KAAA2F,YAAAxD,EAAA,IAAA+K,cAAA/K,EAAA,EAAA+K,cAAA/K,EAAAiL,UAAAF,cAAA/K,GAIAnC,KAAA2F,YAAA0H,SAAA,EACAtK,KAAAC,IAAAhD,KAAA2F,YAAAzD,GAAA,IAAAa,KAAAC,IAAAhD,KAAA2F,YAAAxD,GAAA,IACAnC,KAAA2F,YAAA2H,SAAA,EACAtN,KAAA2F,YAAA3F,KAAAsI,MAAAtG,4BAAAhC,KAAA2F,aAEA3F,KAAAmI,MAAApD,KAAA/E,KAAA2F,cAEA3F,KAAA2F,YAAA2H,SAAA,MAGAtN,MAAA2F,YAAA4H,OAAAvN,KAAA2K,cAAAzI,EAAA,IAAAlC,KAAA2K,cAAAzI,EAAA,KAAAlC,KAAA2K,cAAAxI,EAAA,IAAAnC,KAAA2K,cAAAxI,EAAA,IACAnC,KAAAwC,OAAAG,IAAAC,MAAAG,KAAAyK,IAAA,EAAA7K,IAAA,IAAAI,KAAA0K,KAAA1K,KAAA2K,IAAA1N,KAAAwC,OAAAG,IAAAT,EAAAlC,KAAA2K,cAAAzI,EAAA,GAAAa,KAAA2K,IAAA1N,KAAAwC,OAAAG,IAAAR,EAAAnC,KAAA2K,cAAAxI,EAAA,KACAnC,KAAA2F,YAAA2H,SAAA,EACAtN,KAAA2F,YAAA0H,SAAA,EACArN,KAAAwC,OAAAG,IAAAT,EAAAlC,KAAA2K,cAAAzI,EACAlC,KAAAwC,OAAAG,IAAAR,EAAAnC,KAAA2K,cAAAxI,EAGAnC,KAAAQ,IAAAmN,UAAA3N,KAAA2F,aACA3F,KAAA6I,MAAA,OAEA,IAAAtF,MAAAvD,KAAAuD,KACAqK,OAAA5N,KAAA2F,WAGA,IAFA3F,KAAAwE,OAAAqJ,WACAC,MAAA,EACAvK,MAAAvD,KAAAuD,KAAA,CACAoG,SAAA3J,KAAA+N,qBACA,IAAAD,OAAAvB,SAGA,kBAAA5C,YACA,QAAA3J,KAAAgI,cAAA,QAAAhI,KAAAgI,cAAAhI,KAAAwD,MAAAxD,KAAAgI,eAAAhI,KAAA8F,QAAAkI,KAQAhO,KAAAiM,WAAAtC,SAAAiE,SAPAjE,WACAmE,MACA9N,KAAAkM,iBAAAlM,KAAA+L,mBACA/L,KAAAkM,gBAAAC,UAAAyB,YASAX,YAAA,SAAA/K,EAAAC,GACA,GAAA6E,SAAAhH,KACAiO,QACA/L,EAAA,SAAA8E,QAAAxE,OAAA0L,KAAA,IAAA,IACA/L,EAAA,KAEAF,OACAC,EAAAA,EAAAA,EAAA8E,QAAA2D,cAAAzI,EAAAlC,KAAA2F,YAAAzD,EACAC,EAAAA,EAAAA,EAAA6E,QAAA2D,cAAAxI,EAAAnC,KAAA2F,YAAAxD,EAEA,OAAAZ,4BAAAqD,WAAAuJ,aAAAF,OAAAhM,QAEAmM,SAAA,WACA5N,IAAA,WAAAR,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,MAAA,IAAAA,EAAAkH,QACAzG,OAAAyB,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,MAAA,IAAAA,EAAAkH,QACAzG,OAAAyB,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,MAAA,IAAAA,EAAAkH,QACAzG,OAAAyB,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,MAAA,IAAAA,EAAAkH,QACAzG,QACAiC,IAAA,YAAAR,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,OAAAA,EAAAyG,SAAAzG,EAAAmF,MAAAnF,EAAAwE,SAAA,KACA/D,QACAiC,IAAA,uBAAAR,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,OAAAA,EAAAyG,SAAAzG,EAAAmF,MAAAnF,EAAAwE,SAAA,IAAAxE,EAAAmH,YACA1G,QACAiC,IAAA,6BAAAR,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,OAAAA,EAAAyG,SAAAzG,EAAAmF,MAAAnF,EAAAwE,SAAA,GAAAxE,EAAAmH,YACA1G,QACAiC,IAAA,6BAAAR,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,OAAAA,EAAAyG,SAAAzG,EAAAmF,MAAAnF,EAAAwE,SAAA,IAAAxE,EAAAmH,YACA1G,OAEA,IAAA+P,MACAtO,MAAAmI,MAAAoG,IAAA,SAAAzQ,GACAwQ,GAAAxQ,EAAAoF,WACAoL,GAAAxQ,EAAAoF,SAAA,IAEApF,EAAAkH,OAAAlH,EAAAoF,SACAoL,GAAAxQ,EAAAoF,aAGA1C,IAAA,gBAAA8N,GAEA,IAAAE,SAAAxO,KAAAwD,MAAAG,KAAA8K,OAAAC,OAAA1O,KAAAwD,MAAAC,KAAAgL,QACAE,SACAH,SAAAD,IAAA,SAAAzQ,GACA6Q,OAAAA,OAAAD,OAAA5Q,EAAA6Q,SAGA,IAAAC,IAAAD,OAAAN,OAAA,SAAAQ,IACA,MAAA,MAAAA,KACAtQ,MACAiC,KAAA,YAAAoO,GACA,IAAAE,IAAAH,OAAAN,OAAA,SAAAQ,IACA,MAAA,MAAAA,KACAtQ,MACAiC,KAAA,WAAAsO,GACA,IAAAC,IAAAJ,OAAAN,OAAA,SAAAQ,IACA,MAAA,MAAAA,KACAtQ,MACAiC,KAAA,aAAAuO,GACA,IAAAC,IAAAL,OAAAN,OAAA,SAAAQ,IACA,MAAA,MAAAA,KACAtQ,MACAiC,KAAA,aAAAwO,IACAxO,IAAA,QAAAR,KAAAmI,MAAAkG,OAAA,SAAAvQ,GACA,MAAAA,GAAAmF,OACA1E,SAEA0Q,OAAA,WACA,GAAA5I,QACAA,MAAA9C,KAAAvD,KAAAuD,KACA8C,KAAA0C,OAAA/I,KAAA+I,OACA1C,KAAAK,MAAA1G,KAAA0G,KACA,IAAAM,SAAAhH,KACAkP,QAAAlP,KAAAwD,MAAAG,KAAA8K,OAAAC,OAAA1O,KAAAwD,MAAAC,KAAAgL,OAoCA,OAlCApI,MAAAiC,OACA3G,MAAAuN,QAAAhP,QAAAF,KAAAsI,MAAA3G,OACAC,OAAAsN,QAAAhP,QAAAF,KAAAsI,MAAA1G,QACAC,MAAAqN,QAAAhP,QAAAF,KAAAsI,MAAAzG,QAEAwE,KAAA7D,OAAA0M,QAAAhP,QAAAF,KAAAwC,QACA6D,KAAA8I,KAAAD,QAAAhP,QAAAF,KAAAmP,MACA9I,KAAA+I,KAAAF,QAAAhP,QAAAF,KAAAoP,MACA/I,KAAA7C,OACAC,MACAgF,KAAAzB,QAAAxD,MAAAC,KAAAgF,KACA4G,MAAArI,QAAAxD,MAAAC,KAAA4L,OAEA1L,MACA8E,KAAAzB,QAAAxD,MAAAG,KAAA8E,KACA4G,MAAArI,QAAAxD,MAAAG,KAAA0L,QAGAhJ,KAAA7B,QACA8K,KAAAtI,QAAAxC,OAAA8K,KACA7K,OACAiH,QAAA1E,QAAAxC,OAAAC,MAAAiH,QACAD,MAAAzE,QAAAxC,OAAAC,MAAAgH,MACA/G,KAAAsC,QAAAxC,OAAAC,MAAAC,OAGA2B,KAAA6I,QAAAA,QAAAX,IAAA,SAAAgB,QACA,MAAAA,QAAAC,cAEAnJ,KAAA7F,KACAiP,YAAAzI,QAAAxG,IAAAiP,YACAC,OAAA1I,QAAAxG,IAAAkP,QAEArJ,KAAA0B,gBAAA/H,KAAA+H,gBACA1B,MAEAsJ,SAAA,SAAAtJ,MACArG,KAAAuD,KAAA8C,KAAA9C,KACAvD,KAAA+I,OAAA1C,KAAA0C,OACA/I,KAAA0G,MAAAL,KAAAK,KACA,IAAAM,SAAAhH,KACAkP,QAAA7I,KAAA6I,QAAAX,IAAA,SAAAqB,WAAAC,OACA,GAAAC,YAAAC,KAAAC,MAAAJ,WACA,IAAAC,MAAA,EAAA,CACA,GAAAI,MAAA,MACAJ,QAAA,MAEAI,MAAA,MAEA,IAAAV,QAAAvI,QAAAxD,MAAAyM,MAAAvM,UAAAoM,WAAA3I,SAIA,OAHAoI,QAAAI,SAAAG,YACA9I,QAAAxD,MAAAyM,MAAAxB,OAAAoB,OAAAN,OACAA,OAAAW,WAAA7J,KAAA0B,iBACAwH,QAkBA,OAhBAvP,MAAAsI,MAAA3G,MAAAuN,QAAA7I,KAAAiC,MAAA3G,OACA3B,KAAAsI,MAAA1G,OAAAsN,QAAA7I,KAAAiC,MAAA1G,QACA5B,KAAAsI,MAAAzG,MAAAqN,QAAA7I,KAAAiC,MAAAzG,OACA7B,KAAAwC,OAAA0M,QAAA7I,KAAA7D,QACAxC,KAAAmP,KAAAD,QAAA7I,KAAA8I,MACAnP,KAAAoP,KAAAF,QAAA7I,KAAA+I,MACApP,KAAAwE,OAAA8K,KAAAjJ,KAAA7B,OAAA8K,KACAtP,KAAAwE,OAAAC,MAAA4B,KAAA7B,OAAAC,MACAzE,KAAAwD,MAAAG,KAAA8E,KAAApC,KAAA7C,MAAAG,KAAA8E,KACAzI,KAAAwD,MAAAG,KAAA0L,MAAAhJ,KAAA7C,MAAAG,KAAA0L,MACArP,KAAAwD,MAAAC,KAAAgF,KAAApC,KAAA7C,MAAAC,KAAAgF,KACAzI,KAAAwD,MAAAC,KAAA4L,MAAAhJ,KAAA7C,MAAAC,KAAA4L,MACArP,KAAAQ,IAAAiP,YAAApJ,KAAA7F,IAAAiP,YACAzP,KAAAQ,IAAAkP,OAAArJ,KAAA7F,IAAAkP,OACA1P,KAAAQ,IAAA2P,uBACAnQ,KAAA+H,gBAAA1B,KAAA0B,gBACA/H,MAEA+N,sBAAA,KACAlE,aAAA3H,EAAA,IAAAC,EAAA,KACAwI,eACAzI,EAAA,IACAC,EAAA,IACAqK,gBAAA,EAAA,GACA/D,KAAA,SACA2H,SAAA,GACAC,QAAA,GACAxD,QAAA,IAEAlH,aACAzD,EAAA,IACAC,EAAA,IACAoL,QAAA,EACAtK,MAAA,EACAsB,QAAA,EACA+I,SAAA,EACAD,SAAA,EACArI,MAAA,EACA9B,QAAA,QACAwB,KAAA,GAEA4L,YAAA,aACAhI,MAAA,KACA9E,OACAG,KAAA,KACAF,KAAA,MAEAjD,IAAA,KACA+C,KAAA,MACAwF,OAAA,EACAwH,YACA5M,MACAnF,EAAA,EACA6C,EAAA,EACAmG,EAAA,EACAgJ,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEApN,MACAjF,EAAA,EACA6C,EAAA,EACAmG,EAAA,EACAgJ,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,IAGAC,WAAA,WACA9Q,KAAA0G,OACA/C,MACAoN,EAAA,EACA5H,EAAA,EACA6H,EAAA,GAEAvN,MACAsN,EAAA,EACA5H,EAAA,EACA6H,EAAA,KAIAtK,OACA/C,MACAoN,EAAA,EACA5H,EAAA,EACA6H,EAAA,GAEAvN,MACAsN,EAAA,EACA5H,EAAA,EACA6H,EAAA,KAKA3S,QAAAwJ,KAAAA,OAEAoJ,uBAAA,EAAAC,sBAAA,EAAAC,wBAAA,EAAA5J,8BAAA,GAAAnG,uBAAA,GAAAgQ,0BAAA,KAAAZ,GAAA,SAAAzS,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAuC,4BAAAxD,QAAA,+BAEAsT,QAAA,SAAArD,MACAhO,KAAA0B,KAAAsM,MAGAqD,SAAAzR,WACAsB,YAAAmQ,QACA3P,KAAA,SAAAsM,MACAhO,KAAAgO,KAAAA,MAEAsD,WAAA,WACA,GAAAC,cAAA,CACAvR,MAAAgO,KAAAtK,UAAAoC,QAAA9F,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,aACAzR,KAAAgO,KAAAtK,UAAAoC,QAAAqB,SAAA,UACAnH,KAAAgO,KAAAtK,UAAAoC,QAAA4L,OAAAH,eACAvR,KAAAgO,KAAAtK,UAAAqC,QAAA/F,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,YAAA,SACAzR,KAAAgO,KAAAtK,UAAAqC,QAAAoB,SAAA,UACAnH,KAAAgO,KAAAtK,UAAAqC,QAAA2L,OAAAH,eACAhQ,2BAAA0F,SAAAC,KAAAlH,KAAAgO,KAAAyD,MAAA,SAAAhS,IAAA8P,QACAA,OAAAmC,OAAAH,iBAEAvR,KAAAgO,KAAAtK,UAAA1D,SAAAA,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,YAAA,SACAzR,KAAAgO,KAAAtK,UAAA1D,SAAAmH,SAAA,QACAnH,KAAAgO,KAAAtK,UAAA9B,OAAA5B,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,YAAA,SACAzR,KAAAgO,KAAAtK,UAAA9B,OAAAuF,SAAA,SACAnH,KAAAgO,KAAAtK,UAAA7B,MAAA7B,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,YAAA,SACAzR,KAAAgO,KAAAtK,UAAA7B,MAAAsF,SAAA,QACAnH,KAAAgO,KAAAtK,UAAA4B,OAAAtF,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,UACAzR,KAAAgO,KAAAtK,UAAA4B,OAAA6B,SAAA,SACAnH,KAAAgO,KAAAtK,UAAA2B,KAAArF,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,UACAzR,KAAAgO,KAAAtK,UAAA2B,KAAA8B,SAAA,OACAnH,KAAAgO,KAAAtK,UAAA6B,MAAAvF,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,UACAzR,KAAAgO,KAAAtK,UAAA6B,MAAA4B,SAAA,QACAnH,KAAAgO,KAAAtK,UAAA/B,MAAA3B,KAAAwR,eAAAxR,KAAAgO,KAAAyD,OAAA,UAAA,YAAA,QACAzR,KAAAgO,KAAAtK,UAAA/B,MAAAwF,SAAA,QAEAnH,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,UACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,UACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,UACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,UACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,QACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,QACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,QACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,QACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,EACA3R,KAAAgO,KAAAS,OAAA,GAAAzO,KAAAwR,eAAAxR,KAAAgO,KAAAtK,WAAA,UAAA,UACA1D,KAAAgO,KAAAS,OAAA,GAAAkD,MAAA,GAEAH,eAAA,SAAAI,KAAAC,SAAAC,4BACA,GAAA9R,KAAAgO,KAAAyD,MAAAlT,QAAAqT,MAAA5R,KAAAgO,KAAAtK,UAAA,CACA,GAAAqO,WAAA/R,KAAAgO,KAAAyD,MAAA,GACAO,OAAA,EACAnC,MAAA,CAqBA,OApBAtO,4BAAA0F,SAAAC,KAAA0K,KAAA,SAAAnS,IAAA8P,QAIA,IAHA,GAAA0C,QAAAJ,SAAAnF,QACAwF,OAAA3C,OAAA9M,MACA0P,SAAAF,OAAAG,QACAD,UACAD,OAAAA,OAAAC,UACAA,SAAAF,OAAAG,OAEA7C,QAAAoC,MAAA,KAAAO,QAAAF,SAAAF,4BAAAvC,OAAAA,WAAAuC,6BACAE,OAAAE,OACAH,UAAAxC,OACAM,MAAApQ,OAGAmS,MAAA5R,KAAAgO,KAAAyD,cACAzR,MAAAgO,KAAAyD,MAAA5B,OACA7P,KAAAgO,KAAAyD,MAAAzR,KAAAgO,KAAAyD,MAAApD,OAAA,SAAAkB,QACA,MAAAA,kBAAAwC,WAAA7Q,eAGA6Q,UAEA,MAAA,yBAIA1T,QAAAgT,QAAAA,UAEA9J,8BAAA,KAAAkJ,GAAA,SAAA1S,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAA4I,wBAAA7J,QAAA,2BAEAwD,2BAAAxD,QAAA,+BAEAsU,sBAAAtU,QAAA,0BAEAgE,OAAA,SAAAiM,MACAhO,KAAA0B,KAAAsM,MACAhO,KAAAkQ,WAAAlQ,KAAAgO,KAAAvM,KAAAsG,iBAGAhG,QAAAnC,WACAsB,YAAAa,OACAL,KAAA,SAAAsM,KAAAsE,MACAtS,KAAAA,UAAA+C,KAAAoD,SAAA,IAAA,OAAA,QACAnG,KAAAkO,KAAAnL,KAAAoD,SAAA,IAAA,OAAA,QACAnG,KAAAgO,KAAAA,KACAhO,KAAAyC,SACAzC,KAAA2C,KACAT,EAAA,IACAC,EAAA,KAEAnC,KAAAsJ,UAAAiJ,cACAvS,KAAA0R,OAAA,EACA1R,KAAAwS,gBAAAF,MAAAvP,KAAAoD,SAAA,GACA,IAAAsM,YAAA1P,KAAAsF,MAAAtF,KAAAoD,SAAAyB,uBAAAvB,KAAAqM,SAAAnU,QACAoU,QAAA5P,KAAAsF,MAAAtF,KAAAoD,SAAAyB,uBAAAvB,KAAAuM,MAAArU,OAEAyB,MAAAyI,KAAAb,uBAAAvB,KAAAqM,SAAAD,YAAA,IAAA7K,uBAAAvB,KAAAuM,MAAAD,QACA,IAAAE,UAAAjL,uBAAAvB,KAAAyM,UAAAL,YACAM,WAAAnL,uBAAAvB,KAAA2M,OAAAL,QACA,IAAAE,SAAAtU,QAAAwU,WAAAxU,QAAA,IAAAsU,UAAA,KACA,GAAAE,WAAAxU,QAAAsU,SAAA3S,QAAA,KAAA,IAAA2S,UAAA,KACA7S,KAAAqP,MAAAwD,SAAAE,WACA/S,KAAAiT,QAAArL,uBAAAvB,KAAAqM,SAAAD,YACAzS,KAAAkT,SAAAtL,uBAAAvB,KAAAyM,UAAAL,YACAzS,KAAA2O,WAEAa,UAAA,WACA,GAAAxB,MAAAhO,KAAAgO,WACAhO,MAAAgO,IACA,IAAA3H,MAAA0J,KAAAoD,UAAAnT,KAEA,OADAA,MAAAgO,KAAAA,KACA3H,MAEAsJ,SAAA,SAAAtJ,MACA,GAAAW,SAAAhH,IACAuB,4BAAA0F,SAAAC,KAAAb,KAAA,SAAA5G,IAAAT,OACAgI,QAAAvH,KAAAT,SAGAkR,WAAA,WACA,GAqBAkD,IAAAC,GAAAC,GAAA/J,EAAAC,EArBAzB,gBAAAwL,UAAAhV,QAAA,GAAAiV,SAAAD,UAAA,GAAA,EAAAA,UAAA,GAEA7Q,QAAA1C,KAAAyC,MAAAC,QACAqB,QAAA/D,KAAAyC,MAAAsB,QACA0P,YAAA,SAAA3V,EAAAmI,EAAAxD,OACA,GAAAiR,OAAA,EACAjP,MAAA,CAaA,OAZAhC,QAAA,GACAA,QAAAA,MAAA,IACAlB,2BAAA0F,SAAAC,KAAAzE,MAAApC,MAAA,KAAA,SAAAZ,IAAAT,OACA,GAAAyD,OAAAzD,KACA0D,SAAAD,SAAAA,MAAAC,QAAAD,QACAsB,QAAAtB,SAAAA,MAAAsB,QAAAtB,QACAkR,MAAAlR,SAAAA,MAAA,IACAiR,OAAAjR,MACAgC,UAGAhC,MAAAM,KAAA0K,KAAA,IAAA,IAAA1K,KAAAoD,WAAAuN,OAAA,IAAAjP,QACA1B,KAAAsF,MAAA5F,MAAA,KAAAwD,EAAAnI,GAAAA,GAGAkC,MAAAyC,MAAA6G,SAAA,KACA8J,IAAApT,KAAAyC,MAAA6G,SAAA,IAAAvB,gBAAA,GACAsL,GAAAD,GAAA,EAAAK,YAAA,IAAA,IAAAzT,KAAAyC,MAAA6G,UAAA,IACA8J,GAAArL,iBAEAuL,GAAAvQ,KAAAsF,MAAAN,gBAAA,GACAwB,EAAAkK,YAAA,GAAAH,GAAA,GAAAA,GAAAtT,KAAAyC,MAAA6G,SAAA,KACAE,EAAAiK,YAAAH,GAAA/J,EAAA,EAAAvJ,KAAAyC,MAAA6G,SAAA,KAGAgK,GAAAvQ,KAAAsF,MAAAN,gBAAA,IACAwB,EAAAkK,YAAA,EAAA,GAAAH,GAAAtT,KAAAyC,MAAA6G,UACAE,EAAAiK,YAAAH,GAAA/J,EAAA,EAAAvJ,KAAAyC,MAAA6G,WAGA,IAAAsK,IAAAH,YAAA,EAAA1L,gBAAA,EAAAA,gBAAA,aACA8L,YAAAD,GACAE,GAAA/Q,KAAAsF,MAAAoL,YAAA,EAAA,GAAA,aAAAI,YAAA,IACAA,cAAAC,EACA,IAAAjF,IAAAgF,YACAE,GAAAhR,KAAAsF,MAAAoL,YAAA,GAAA,EAAA,OAAAI,YAAA,IACAA,cAAAE,EACA,IAAAC,GAAAjR,KAAAsF,MAAAoL,YAAA,IAAA,IAAA,mBAAAI,YAAA,IACAA,cAAAG,CAEA,IAAAC,SAAAR,YAAA,EAAAO,EAAA,EAAA,eACAE,QAAAT,YAAA,EAAAO,EAAA,GAAA,SACAG,GAAApR,KAAAyK,IAAA,EAAAiG,aAAAO,EAAA,GAAAA,EAAA,EAAA,cACAtW,EAAA+V,YAAAO,EAAA,GAAAA,EAAAF,IAAA,EAAA,SAAAK,GACA5T,IAAAkT,YAAAO,EAAA,EAAAA,EAAA,EAAA,aAAAG,GACAC,IAAAX,YAAA,EAAA1L,gBAAA,IACAsM,IAAAZ,YAAA,EAAA1L,gBAAA,EAAA,OAEAuM,QAAAb,YAAA,EAAA,GAAA1L,gBAAA,YACAiJ,EAAAyC,YAAAa,QAAA,GAAA,EAAA,YACAhG,GAAAgG,QAAAtD,CAEAhR,MAAAqJ,OACAC,UACAiL,QAAA,EACAjB,GAAAA,GACA/J,EAAAA,EACAC,EAAAA,EACAkC,QAAA,EACA8I,EAAA,EACAC,MAAA,WACA,MAAAzU,MAAAwU,GAAAxU,KAAAoT,GAAA,GAAA,IAEAsB,OAAA,WACA,MAAA,GAAA1U,KAAAqT,GAAAtQ,KAAAyK,IAAA,EAAA,EAAAxN,KAAAoT,GAAA,GAAApT,KAAAoT,GAAA,GAAA,IAEAuB,IAAA,KACAtB,GAAAA,GACAtC,EAAA,EACA6D,GAAA,EACAC,GAAA,EACAzB,IAAAA,GAAA,GACA0B,KAAA,EACAC,QAAA,WACA,OAAA/U,KAAA+Q,EAAA/Q,KAAA6U,KAAA7U,KAAAoT,GAAA,GAAApT,KAAAoT,GAAA,GAAA,KAGA4B,SACAC,MAAA,WACA,MAAAjV,MAAAgU,EAAAjR,KAAAyK,IAAA,EAAAxN,KAAA6O,KAEAqG,GAAA,KACAC,OAAA,WACA,OAAAnV,KAAAgU,EAAAhU,KAAA8T,GAAA9T,KAAAoU,MAAApU,KAAA6O,GAAA7O,KAAA8T,GAAA9T,KAAAoU,IAAApU,KAAAqU,MAEAe,IAAA,KACAC,OAAA,WACA,OAAArV,KAAAgU,EAAAhU,KAAA,MAAAA,KAAA,MAAAA,KAAAmU,GAAA,EAAAnU,KAAA,MAAA,EAAAA,KAAA,MAAA,EAAAA,KAAAmU,IAAAnU,KAAA6O,IAEAyG,IAAA,KACA1B,GAAAA,GACA/E,GAAAA,GACAkF,GAAAA,GACAD,GAAAA,GACAE,EAAAA,EACAuB,KAAAtB,QACAuB,KAAAtB,QACAC,GAAAA,GACAzW,EAAAA,EACA6C,IAAAA,IACA6T,IAAAA,IACAC,IAAAA,KAEArQ,UACAgN,EAAAA,EACA1C,GAAAA,GACAmH,EAAA1S,KAAAsF,MAAA,EAAAtF,KAAAoD,UAAA,IAGAnG,KAAAqJ,MAAAC,SAAAqL,IAAA3U,KAAAqJ,MAAAC,SAAAoL,SACA1U,KAAAqJ,MAAAC,SAAAoM,GAAA1V,KAAAqJ,MAAAC,SAAAmL,QACAzU,KAAAqJ,MAAAC,SAAAwL,KAAA9U,KAAAqJ,MAAAC,SAAAyL,UACA/U,KAAAqJ,MAAA2L,QAAAE,GAAAlV,KAAAqJ,MAAA2L,QAAAC,SAEAU,gBACAC,UAAA,WAMA,MALA5V,MAAA2O,OAAApQ,OAAAyB,KAAA2V,aAAApX,SACAyB,KAAA2V,aAAA3V,KAAA2O,OAAAJ,IAAA,SAAAsH,MACA,MAAA,IAAAxD,uBAAAvS,MAAA+V,SAGA7V,KAAA2V,cAEAG,UAAA,WACA9V,KAAA2O,OAAA3O,KAAA2O,OAAApQ,OAAA,IAAA8T,sBAAAvS,MAAAF,UAAAU,eAEAyV,iBAAA,WACA/V,KAAA2O,OAAA3O,KAAA2O,OAAApQ,OAAA,IAAA8T,sBAAAvS,MAAAF,UAAAO,uBAEA2E,mBAAA,WACA,MAAAvD,4BAAAqD,WAAAY,gBAAAxF,KAAAyC,MAAAC,QAAA4B,QAEAkO,gBAAA,SAAAF,MACAtS,KAAAsS,KAAAA,IACA,IAAAtL,SAAAhH,KACAgW,UAAA,SAAAC,YACA,GAAAjX,OAAA+D,KAAAsF,MAAA,GAAAtF,KAAA2K,IAAA3K,KAAAoD,SAAA,KAAA,GAAApD,KAAAoD,SAKA,OAJAmM,QACAtT,OAAA+D,KAAAsF,OAAA,IAAArJ,OAAA+D,KAAAyK,IAAAzK,KAAAoD,SAAA8P,WAAA,EAAA,OAEAA,YAAAjP,QAAAsC,SAAAiJ,UAAAxN,KAAA/F,OACAA,MAEAgB,MAAAyC,MAAAC,SACAC,IAAAqT,YACAzT,MAAAyT,YACA1R,MAAA0R,aAEAhW,KAAAyC,MAAAsB,SACAmS,SAAAF,YACAhS,SAAAgS,YACA1R,MAAA0R,YACA9R,SAAA8R,aAEAhW,KAAAsJ,SAAAiJ,aACAvS,KAAAsJ,SAAA,WACA8G,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,IAEAhW,KAAAsJ,SAAA6M,QACA/F,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,IAEAjT,KAAAoD,SAAA,MAEApD,KAAAoD,SAAA,KACAnG,KAAAsJ,SAAA,WACA8G,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,KAGAjT,KAAAoD,SAAA,MACAnG,KAAAsJ,SAAA8M,MACAhG,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,KAGAjT,KAAAoD,SAAA,MACAnG,KAAAsJ,SAAA+M,QACAjG,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,KAGAjT,KAAAoD,SAAA,MACAnG,KAAAsJ,SAAAgN,QACAlG,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,KAIAjT,KAAAoD,SAAA,KACAnG,KAAAsJ,SAAAiN,OACAnG,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,KAIAjT,KAAAoD,SAAA,KACAnG,KAAAsJ,SAAAkN,QACApG,SAAA4F,WAAA,GACA3F,QAAA2F,WAAA,GACAnJ,QAAAmJ,WAAA,MAIAhW,KAAAyC,MAAA6G,SAAAvG,KAAAsF,MAAArI,KAAAsJ,SAAAiJ,UAAAkE,OAAA,SAAAC,KAAAC,SACA,MAAAD,MAAAC,UACA3W,KAAAsJ,SAAAiJ,UAAAhU,OAAA,EAAAyB,KAAAsJ,SAAAiJ,UAAAhU,cACAyB,MAAAsJ,SAAAiJ,WAEAqE,WAAA,WACA,MAAA,KAAAhP,uBAAA7H,KAAAqI,KAAApI,KAAAkT,SAAAlT,KAAAiT,SAEA7J,QAAA,WACA,MAAA,KAAAxB,uBAAA7H,KAAAqI,KAAApI,KAAAqP,MAAArP,KAAAyI,MAEAoO,iBAAA,WACA,MAAAjP,wBAAA7H,KAAA,KAAAC,KAAA0R,QAEAoF,SAAA,WACA,MAAAlP,wBAAA7H,MAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,MAAA,OAAA,QAAAC,KAAA2R,SAEAhP,OACAiB,QAAA,EACA6E,KAAA,GACAiJ,OAAA,EACAvK,SAAA,GACAwH,WAGAtQ,QAAA0D,OAAAA,SAEAgV,yBAAA,EAAAxP,8BAAA,GAAA6J,0BAAA,KAAAV,GAAA,SAAA3S,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA;AACAW,OAAA,GAGA,IAAAsC,sBAAAvD,QAAA,yBAEAiZ,sBAAAjZ,QAAA,0BAEA6J,uBAAA7J,QAAA,2BAEAwK,KAAA,SAAA9G,MACAzB,KAAA0B,KAAAD,MAGA8G,MAAA3I,WACAsB,YAAAqH,KACA7G,KAAA,SAAAD,MACAzB,KAAA0I,WACA1I,KAAAyO,UACAzO,KAAAyR,SACAzR,KAAAiX,WACAjX,KAAA0D,WACAoC,QAAA,KACAC,QAAA,KACApE,MAAA,KACAC,OAAA,KACAoE,QAAA,KACAnE,MAAA,KACAwD,KAAA,KACAC,OAAA,KACAC,MAAA,MAEAvF,KAAAyB,KAAAA,IACA,KAAA,GAAAyV,GAAA,EAAA,GAAAA,EAAAA,IACAlX,KAAAyR,MAAA1M,KAAA,GAAAzD,sBAAAS,OAAA/B,MAEA,KAAAA,KAAAyR,MAAAlT,SACAyB,KAAAmX,QAAA,GAAAH,uBAAA3F,QAAArR,MACAA,KAAAmX,QAAA7F,eAGA5I,SAAA,WACA,GAAA0O,eAAArU,KAAAsF,MAAAtF,KAAAoD,SAAAyB,uBAAAvB,KAAAgR,UAAA9Y,OACAyB,MAAAyI,KAAAb,uBAAAvB,KAAAgR,UAAAD,eACApX,KAAAqP,MAAAzH,uBAAAvB,KAAAiR,WAAAF,gBAEAhO,QAAA,WACA,MAAA,KAAAxB,uBAAA7H,KAAAqI,KAAApI,KAAAqP,MAAArP,KAAAyI,MAEAgG,UACA/K,aACAyT,QAAA,KACA1F,SACAwF,WACAM,WAAA,EACAC,SAAA,WAGAnZ,QAAAkK,KAAAA,OAEAkP,yBAAA,EAAAnQ,wBAAA,EAAA8J,0BAAA,KAAAT,GAAA,SAAA5S,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAA4I,wBAAA7J,QAAA,2BAEAuD,qBAAAvD,QAAA,yBAEA4K,OAAA,SAAAlH,MACAzB,KAAA0B,KAAAD,MAGAkH,QAAA/I,WACAsB,YAAAyH,OACAjH,KAAA,SAAAD,MACAzB,KAAAyB,KAAAA,KACAzB,KAAA0X,YAEAjT,OACAiH,QAAA,EACAD,MAAA,EACA/G,KAAA,GAEAgT,SAAA,WACA1X,KAAAyB,KAAA8B,KAAA,MACAvD,KAAAyB,KAAAsH,OAAA,EACA/I,KAAAyB,KAAAe,OAAAxC,KAAAyB,KAAA+B,MAAAG,KAAA8K,OAAA,GACAzO,KAAAyB,KAAAkW,aAAA3X,KAAAyB,KAAA+B,MAAAG,KAAA8K,OAAA,GACAzO,KAAAyB,KAAA0N,KAAAnP,KAAAyB,KAAA+B,MAAAG,KAAA8K,OAAA,GACAzO,KAAAyB,KAAA2N,KAAApP,KAAAyB,KAAA+B,MAAAG,KAAA8K,OAAA,GACAzO,KAAAyB,KAAAqE,QAAA9F,KAAAyB,KAAA+B,MAAAC,KAAAC,UAAAoC,OACA,IAAArI,GAAA,UAAAuC,KAAAyB,KAAA+B,MAAAG,KAAAyF,UAAA,OAAApJ,KAAAyB,KAAA+B,MAAAC,KAAA2F,UAAA,UAAApJ,KAAAyB,KAAA+B,MAAAC,KAAAC,UAAAoC,QAAAsD,UAAA,IACA7L,EAAA,UAAAyC,KAAAyB,KAAA+B,MAAAG,KAAA8E,KAAA,gBAAAzI,KAAAyB,KAAA+B,MAAAC,KAAAC,UAAAoC,QAAA2C,KAAA,iBAAAzI,KAAAyB,KAAA+B,MAAAC,KAAAgF,IACAzI,MAAAyB,KAAAjB,IAAAiJ,KAAAlM,EAAAE,GACAuC,KAAAyB,KAAAjB,IAAAoX,WAAA5X,KAAAyB,KAAAe,SAEAqL,SAAA,WACA7N,KAAAsP,KAAA,EAEA,IAAA1B,QAAA5N,KAAAyB,KAAAkE,YACAG,QAAA9F,KAAAyB,KAAAqE,QACAtD,OAAAxC,KAAAyB,KAAAe,MAEA,IAAAxC,KAAAyB,KAAAkE,YAAAzC,QACA,GAAAA,SAAAlD,KAAAyB,KAAA+B,MAAA,OAAAxD,KAAAyB,KAAA8B,KAAA,OAAA,QAAAG,UAAAkK,OAAA1K,aAEAA,SAAA,IAMA,IAHAlD,KAAAyB,KAAAkW,aAAA3X,KAAAyB,KAAAe,OAEAsD,QAAAuD,MAAAC,SAAAiL,UACA3G,OAAAP,QACAO,OAAAL,QACAvN,KAAAyE,MAAAiH,UACA5F,QAAAuD,MAAAC,SAAAoC,WAEA1L,KAAAyE,MAAAgH,YAGA,IAAAmC,OAAAN,SACA,GAAAM,OAAArJ,OACA/B,OAAA6G,MAAA2L,QAAApB,KACA9N,QAAAuD,MAAAC,SAAA8J,GAAA,KACAxF,OAAAtK,kBAAA/E,QAAAyB,KAAAyE,MAAAC,KAAA,GACAlC,OAAA6G,MAAA2L,QAAAX,MACArU,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAoB,WACAhB,KAAA6X,gBAAA,EAAA,KAAAjK,OAAAtK,qBAEAd,OAAA6G,MAAA2L,QAAAnG,KACAjB,OAAAtL,SAAA,GACAtC,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAkY,SAEA9X,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAmY,SAGA/X,KAAAyE,MAAAC,OACA1E,KAAAgY,gBAEA,IAAApK,OAAA3K,KACAjD,KAAAyE,MAAAiH,UACA5F,QAAAuD,MAAAC,SAAAoC,UACA1L,KAAAyE,MAAAiH,QAAA,IAAA1L,KAAAyE,MAAAiH,QAAA,OA8BA,IA5BAlJ,OAAA6G,MAAA2L,QAAApB,KACApR,OAAA6G,MAAA2L,QAAAnG,KACAjB,OAAAlI,gBAAA1F,KAAAyE,MAAAC,KAAA,GACAkJ,OAAA5I,MAAA,EACAhF,KAAAyE,MAAAC,OACAoB,QAAAuD,MAAAC,SAAA8J,GAAA,KACApT,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAqY,iBACAjY,KAAA6X,gBAAA,EAAAjK,OAAAlI,gBACA1F,KAAAkY,YACAtK,OAAAlJ,KAAA1E,KAAAyE,MAAAC,KACA1E,KAAAgY,aACApK,OAAAlI,iBACAkI,OAAA5I,MAAA,EACA4I,OAAA3I,WAAA,GAEA2I,OAAA3I,YACAjF,KAAAyE,MAAAC,OACAoB,QAAAuD,MAAAC,SAAA8J,GAAA,KACApT,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAuY,WACAnY,KAAAyE,MAAAC,KAAA,GACA1E,KAAA6X,gBAAA,GAEAjK,OAAAlJ,KAAA1E,KAAAyE,MAAAC,KACA1E,KAAAgY,aAEApK,OAAAwK,YACA5V,OAAA6G,MAAA2L,QAAAnG,KAEAjB,OAAA5I,MAAA,CACA4I,OAAA/J,MAIA+J,OAAA5I,MAAA,IACAhF,KAAAyB,KAAAiF,MAAA,OAAA1G,KAAAyB,KAAA8B,KAAA,OAAA,QAAAyN,IACA9N,QAAAmG,MAAArF,SAAAgN,MALAhR,KAAAyB,KAAAiF,MAAA,OAAA1G,KAAAyB,KAAA8B,KAAA,OAAA,QAAAqE,uBAAAnH,IAAAb,UAAAgB,UACAkF,QAAAuD,MAAAC,SAAAyH,IAOA,IAAA/L,OAAA4I,OAAA5I,KACA,QAAAA,OACA,IAAA,GACAhF,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAuY,UACA,MACA,KAAA,GACAvK,OAAA/J,MACA7D,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAqB,mBAEAjB,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAgB,QACA4B,OAAA6G,MAAA2L,QAAAhB,IAEA,MACA,KAAA,GACAhU,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAkB,QACA0B,OAAA6G,MAAA2L,QAAAhB,IACAxR,OAAA6G,MAAA2L,QAAA,OACA,MACA,KAAA,GACAhV,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAmB,QACAyB,OAAA6G,MAAA2L,QAAAhB,IACAxR,OAAA6G,MAAA2L,QAAA,OACA,MACA,KAAA,GACAhV,KAAAyB,KAAAe,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAiB,SACAiF,QAAAuD,MAAAC,SAAAsL,KACApS,OAAA6G,MAAA2L,QAAAhB,IACAxR,OAAA6G,MAAA2L,QAAAb,KAaA,IAVAnP,MAAA,GAAA,EAAAA,QAAA4I,OAAA/J,OACA,KAAA,OAAA,QAAA,UAAA3D,QAAA0N,OAAA1K,UACAV,OAAAuT,mBAGA/Q,OAAA,IACAhF,KAAA6X,iBACA7X,KAAAkY,YACAlT,OAAA,GAEAA,MAAA,GACAA,OAAA,EACAhF,KAAA6X,gBAEA7X,MAAAgY,iBAKAlS,SAAAuD,MAAAC,SAAAoC,UACA1L,KAAAyE,MAAAiH,SAIA1L,MAAAsP,KAAAtP,KAAAyE,MAAAgH,MAAA,QAAAzL,KAAAyE,MAAAiH,QAEAkC,OAAAlJ,KAAA1E,KAAAyE,MAAAC,KAEA1E,KAAAyE,MAAAiH,QAAA,IACAlJ,OAAA6G,MAAA2L,QAAApB,KACApR,OAAA6G,MAAA2L,QAAAnG,KACArM,OAAA6G,MAAA2L,QAAAjB,KACAjO,QAAAuD,MAAAC,SAAAkL,IACAxU,KAAAyE,MAAAC,OACAoB,QAAAuD,MAAAC,SAAA8J,GAAA,KACApT,KAAAyE,MAAAgH,MAAAzL,KAAAyE,MAAAiH,QAAA,EACA1L,KAAAsP,KAAA,4BACA9M,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAyY,WACArY,KAAAgY,aAEAhY,KAAAyE,MAAAgH,MAAA,IACAjJ,OAAA6G,MAAA2L,QAAApB,KACApR,OAAA6G,MAAA2L,QAAAlB,KACAhO,QAAAuD,MAAAC,SAAAuL,KACA7U,KAAAsP,KAAA,aACAtP,KAAAyE,MAAAgH,MAAAzL,KAAAyE,MAAAiH,QAAA,EACAlJ,OAAAmM,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAAe,MACAX,KAAA6X,gBAAA,GAAAK,YAAAF,aAEAhY,KAAAyE,MAAAC,KAAA,IACA1E,KAAAsP,KAAA,sBACAtP,KAAAyE,MAAAC,KAAA1E,KAAAyE,MAAAgH,MAAAzL,KAAAyE,MAAAiH,QAAA,EACA5F,QAAAuD,MAAAC,SAAA8J,GAAA,KACAtN,QAAAuD,MAAAC,SAAA8J,GAAA,GAAA,EACApT,KAAAsY,gBAGAJ,UAAA,WAGA,MAFAlY,MAAAyB,KAAA6G,MAAA3G,MAAA3B,KAAAyB,KAAAe,OACAxC,KAAAyB,KAAA6G,MAAA3G,MAAAiC,SAAA,EACA5D,MAEA6X,eAAA,SAAAU,OAAA7S,eAAApC,mBACAiV,SAAAA,MACA,IAAA5W,OAAA3B,KAAAyB,KAAA6G,MAAA3G,MACAC,OAAA5B,KAAAyB,KAAA6G,MAAA1G,OACAC,MAAA7B,KAAAyB,KAAA6G,MAAAzG,MACAJ,KAAAzB,KAAAyB,IACAzB,MAAAyB,KAAAkE,WAEA,IAAA4S,OACA5W,QACAC,OACAC,OAEAJ,KAAAe,OAAAsT,YACArU,KAAAe,OAAA6G,MAAA2L,QAAAzU,MACAsB,MAAA8M,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAA4Y,KACA3W,MAAAwH,MAAA2L,QAAAtX,IACA+D,KAAAqE,QAAAuD,MAAAC,SAAA+J,KACA5R,KAAA8O,WAAA,OAAA9O,KAAA8B,KAAA,OAAA,QAAA9B,KAAAsH,UACAtH,KAAAiF,MAAA,OAAAjF,KAAA8B,KAAA,OAAA,QAAA4F,IACA1H,KAAA6G,MAAAzG,MAAAD,OACAH,KAAA6G,MAAA1G,OAAAD,MACAA,MAAA,OAGAF,KAAA6G,MAAAzG,MAAAD,OACAH,KAAA6G,MAAA1G,OAAAD,MACAF,KAAA6G,MAAA3G,MAAA,MAGAE,OAEAJ,KAAA6G,MAAA1G,OAAAD,MACAF,KAAA6G,MAAA3G,MAAA,OAGAF,KAAA6G,MAAA1G,OAAAD,MACAF,KAAA6G,MAAA3G,MAAA,WAMA,CACA+D,iBACAjE,KAAA6G,MAAA5C,gBAAA,KACA/D,MAAA3B,KAAAyB,KAAA6G,MAAA3G,MACAC,OAAA5B,KAAAyB,KAAA6G,MAAA1G,OACAC,MAAA7B,KAAAyB,KAAA6G,MAAAzG,MAEA,IAAA4W,YAAA,WACA,OAAA,EAEAnV,qBACAmV,WAAA,SAAAtR,UACA,OAAAA,UACA,IAAA,QACA,MAAA7D,mBAAApD,QAAA,SAAA,KAAAuY,WAAA,YAAA7W,OACA,KAAA,SACA,MAAA0B,mBAAApD,QAAA,UAAA,KAAAuY,WAAA,WAAA5W,MACA,KAAA,QACA,MAAAyB,mBAAApD,QAAA,SAAA,MAIA2B,gBAAAP,sBAAAS,QAAA0W,WAAA,WAEAhX,KAAA8O,WAAA,OAAA9O,KAAA8B,KAAA,OAAA,QAAA9B,KAAAsH,UACAtH,KAAAiF,MAAA,OAAAjF,KAAA8B,KAAA,OAAA,QAAA4F,IACA1H,KAAAe,QAAAX,QACAJ,KAAAe,OAAAsT,YACAjU,MAAA8M,OAAA5J,KAAA6C,uBAAAnH,IAAAb,UAAA4Y,MAEA/W,KAAAe,OAAA6G,MAAA2L,QAAAzU,MACAsB,MAAAwH,MAAA2L,QAAAtX,IACA+D,KAAAqE,QAAAuD,MAAAC,SAAA+J,MAEAzR,QAAA6W,WAAA,UACAhX,KAAA6G,MAAAzG,MAAAD,OAEAH,KAAA6G,MAAAzG,MAAA,KAEAF,OAAA8W,WAAA,SACAhX,KAAA6G,MAAA1G,OAAAD,MAEAF,KAAA6G,MAAA1G,OAAA,KAEAH,KAAA6G,MAAA3G,MAAA,KAEA,MAAA3B,OAEAgY,UAAA,WACAhY,KAAAyB,KAAAjB,IAAAiP,aACAlS,KACAE,MAEAuC,KAAAyE,MAAAgH,MAAAzL,KAAAyE,MAAAiH,QAAA,EACA1L,KAAAyB,KAAAjB,IAAAkY,0BAAA1Y,KAAAyB,KACA,IAAAuM,MAAA,UAAAhO,KAAAyB,KAAA8B,KAAAvD,KAAAyB,KAAA+B,MAAAC,KAAAzD,KAAAyB,KAAA+B,MAAAG,IACA3D,MAAAyB,KAAAe,OAAAwL,KAAAS,QAAAT,KAAAuJ,WAAA,GAAA,GACAvX,KAAAyB,KAAA0N,KAAAnB,KAAAS,QAAAT,KAAAuJ,WAAA,GAAA,GACAvX,KAAAyB,KAAA2N,KAAApB,KAAAS,QAAAT,KAAAuJ,WAAA,GAAA,GACAvJ,KAAAuJ,YAAAvJ,KAAAuJ,WAAA,GAAA,EACAvX,KAAAyE,MAAAC,KAAA,GACA1E,KAAAyB,KAAAjB,IAAAoX,WAAA5X,KAAAyB,KAAAe,SAGA8V,YAAA,WACAtY,KAAAyB,KAAAkE,eACA3F,KAAAyB,KAAAkE,YAAA0H,SAAA,EACArN,KAAAyB,KAAAkJ,cAAAzI,EAAA,KACAlC,KAAAyB,KAAAkJ,cAAAxI,EAAA,KACAnC,KAAAyB,KAAAjB,IAAAiP,aACAlS,KACAE,KAEA,IAAAiF,SAAAqB,OAIA,IAHA/D,KAAAyB,KAAA6G,MAAA3G,MAAA,KACA3B,KAAAyB,KAAA6G,MAAA1G,OAAA,KACA5B,KAAAyB,KAAA6G,MAAAzG,MAAA,KACA,OAAA7B,KAAAyB,KAAA8B,KAAA,CACA,GAAA,GAAAvD,KAAAyB,KAAAsH,QAAA/I,KAAAyB,KAAAiF,MAAAjD,KAAA0F,EAAAnJ,KAAAyB,KAAAiF,MAAA/C,KAAAwF,EACA,MAAAnJ,MAAAyB,KAAAyH,KAEAlJ,MAAAyB,KAAA8B,KAAA,aACA,CACA,GAAAvD,KAAAyB,KAAAsH,OAAA,EAAA,EACA,MAAA/I,MAAAyB,KAAAyH,KAEAlJ,MAAAyB,KAAAsH,SACA/I,KAAAyB,KAAA8B,KAAA,MAEAb,QAAA,OAAA1C,KAAAyB,KAAA8B,KAAA,OAAA,OACAQ,QAAA,OAAA/D,KAAAyB,KAAA8B,KAAA,OAAA,MACA,IAAA9F,GAAAuC,KAAAyB,KAAAsH,OAAA,MAAA,OAAA/I,KAAAyB,KAAA8B,KAAA,MAAA,MAAA,IAAAvD,KAAAyB,KAAA+B,MAAA,OAAAxD,KAAAyB,KAAA8B,KAAA,OAAA,QAAA6F,UAAA,OACA7L,GAAA,OAAAyC,KAAAyB,KAAA8B,KAAA,MAAA,UAAA,IAAAvD,KAAAyB,KAAAsH,MACA/I,MAAAyB,KAAAjB,IAAAiJ,KAAAlM,EAAAE,EACA,IAAAuQ,MAAAhO,KAAAyB,KAAA+B,MAAAd,QACA1C,MAAAyB,KAAAe,OAAAwL,KAAAS,OAAAT,KAAAuJ,YACAvX,KAAAyB,KAAAkW,aAAA3X,KAAAyB,KAAAe,OACAxC,KAAAyB,KAAA0N,KAAAnB,KAAAS,QAAAT,KAAAuJ,WAAA,GAAA,GACAvX,KAAAyB,KAAA2N,KAAApB,KAAAS,QAAAT,KAAAuJ,WAAA,GAAA,GAEAvX,KAAAyB,KAAAqE,QAAA9F,KAAAyB,KAAA+B,MAAAO,SAAAL,UAAAoC,QACA9F,KAAAyB,KAAAjB,IAAAoX,WAAA5X,KAAAyB,KAAAe,QACAxC,KAAAyB,KAAA6I,mBAEAgF,KAAA,aACA7N,KAAA,MAGApD,QAAAsK,OAAAA,SAEArB,wBAAA,EAAA8J,0BAAA,KAAAR,GAAA,SAAA7S,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAA2Z,qBAAA5a,QAAA,wBAEA0J,oBAAA1J,QAAA,wBAEA6a,mBAAA7a,QAAA,uBAEAiZ,sBAAAjZ,QAAA,0BAEAuD,qBAAAvD,QAAA,yBAEA2J,mBAAA3J,QAAA,uBAEA4J,qBAAA5J,QAAA,wBAEAM,SAAAyB,MAAA6Y,oBAAA7Y,MACAzB,QAAAmD,MAAAiG,oBAAAjG,MACAnD,QAAAwJ,KAAA+Q,mBAAA/Q,KACAxJ,QAAAgT,QAAA2F,sBAAA3F,QACAhT,QAAA0D,OAAAT,qBAAAS,OACA1D,QAAAkK,KAAAb,mBAAAa,KACAlK,QAAAsK,OAAAhB,qBAAAgB,SAEAkQ,uBAAA,EAAA5H,uBAAA,EAAA6H,sBAAA,EAAArB,yBAAA,EAAAnQ,wBAAA,EAAA4J,sBAAA,EAAAC,wBAAA,IAAAN,GAAA,SAAA9S,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAuC,4BAAAxD,QAAA,+BAEA6H,SAAA,WACA5F,KAAA0B,OAEAkE,UAAAmT,YACAnT,SAAAhG,WACAuB,WAAA,WACAD,YAAA0E,SACAqC,SAAA,EACA8Q,YACArX,KAAA,aACAsX,aAAA,WAWA,MAVAhZ,MAAAiI,SAAA,gBAAAgR,QACArT,SAAAmT,UACAG,IAAA,aACAC,GAAA,aACAC,KAAA,aACAC,QAAA,cAGAzT,SAAAmT,SAAAE,OAAAF,SAEAnT,SAAAmT,UAEA9O,cAAA,KACAC,iBAAA,KACAoP,kBAAA,IACAzP,YAAA,KACA0P,WAAA,KAKAC,iBAAA,SAAA7P,UACA,IAAA/D,SAAAqC,QAAA,CACA,GAAA8Q,UAAAnT,SAAAoT,eACAS,OAAAzZ,KACAyB,KAAAgY,OAAAtX,EACAuX,IAAA,IAAAjY,KAAAoI,YAAA1H,EACAkD,KAAA5D,KAAAoI,YAAA3H,EACAyX,SAAA,IAAAlY,KAAAkJ,cAAAxI,EACAyX,UAAAnY,KAAAkJ,cAAAzI,EACA2X,WAAAhP,EAAA,aACAiP,YAAA,IAAA,IAAArY,KAAAkJ,cAAAyF,SAAA,KAAA,IACA2J,UAAA,GACAC,WAAA,KAAA,QAAAvY,KAAAqE,QAAArE,UAAA,GAAA,KACAiJ,MAAA1K,KAAA6J,YAAAgB,EAAA,sCACAoP,MAAAja,KAAAuZ,WAAA1O,EAAA,sCACAqP,QAAAJ,YAAA,EAEAK,gBAAA5Y,2BAAAqD,WAAAuV,gBAAAT,IAAArU,KAAA0U,UAAAC,WAAAE,SAEAE,aAAAD,gBAAA,EAAA,GAAAA,gBAAA,GAAA,GAAAA,gBAAA,GAAA,GAAAA,gBAAA,GAAA,GAAAA,gBAAA,IAAA,GAAAA,gBAAA,IAAA,EAAAR,SAAAC,WAMAb,UAAAG,KAAAxO,MAAAuP,OAAAG,YAAA,IACArB,SAAAI,IAAAzO,MAAAuP,OAAAC,QAAAE,YAAA,IACArB,SAAAI,IAAAzO,MAAAuP,OAAAC,QAAAE,YAAA,IACArB,SAAAI,IAAAzO,MAAAuP,OAAAC,QAAAE,YAAA,IACArB,SAAAI,GAAAzO,MAAAwP,QAAAE,YAAA,IACArB,SAAAI,GAAAc,MAAAC,QAAAE,YAAA,IAEAX,OAAAY,YAAArQ,WAAA,WACAyP,OAAAa,YAAA,EACA,kBAAA3Q,YACAA,WACA8P,OAAAc,WAEA,IAAAT,aAEArY,KAAAkJ,cAAAzI,GAGAT,KAAAwH,gBAAA,IAAAlG,KAAAoD,SAAA1E,KAAAe,OAAAC,MAAAC,QAAAC,IACAkI,EAAA,mBAAAC,SAAA,QAEAD,EAAA,mBAAAO,YAAA,QAEAP,EAAA,mBAAAO,YAAA,SAPAyO,WAAA/O,SAAA,QAUA2O,OAAAtX,EAAA8G,iBAAAwQ,OAAAtX,EAAAyG,iBACA6Q,OAAAe,eAAAzV,KAAAiF,WAAA,WACAyP,OAAAgB,UACA,KAAAX,YAAAlU,SAAA0T,uBAGAzT,0BAAA,SAAApE,MAEA,GADAzB,KAAA0B,OACAkE,SAAAqC,QAAA,MAAAxG,MAAAkE,WACA,IAAAoT,UAAAnT,SAAAoT,eACA0B,KAAA7P,EAAA,wBACAkO,UAAAM,SACA,IAAAzL,QAAAnM,KAAAkE,YAEAgV,6BACAvU,SAAA,EACAwU,WAAA,IACAC,QAAA,KAGAxY,MAAAuL,OAAAtL,SACA8D,SAAArD,KAAAC,IAAA4K,OAAAxK,gBACA0X,OAAAlN,OAAAxK,eAAA,EAAA,GAAA,CAEA7B,4BAAAqD,WAAAmW,OAAAC,SAAA,EAAA3Y,MACAA,MAAA,EAAAU,KAAAC,IAAAX,OACAA,MAAA,KAAAA,MAAA,IAAAA,MAEA,IAAA+N,UAAAuK,4BAAAvU,SAAArD,KAAA0K,KAAA,KAAArH,SAAArD,KAAAkY,IAAA,EAAAlY,KAAAmY,GAAA7Y,MAAA,MACA8Y,0BAAApY,KAAAkY,IAAA1Z,2BAAAqD,WAAAwW,OAAA/Y,OAAA+N,SACAwK,WAAAO,0BAAAA,0BAAA,MAAAR,4BAAAC,WACAC,QAAA9X,KAAA0K,KAAA,EAAAmN,WAAA,MAAAD,4BAAAE,QAGAX,QAAAW,QAAA,EACAQ,WAAA,GAAA9Z,4BAAAqD,WACAwV,aAAAiB,WAAAC,uBAAA,EAAApB,QAAA,EAAAU,WAAAE,OAAA1U,SAAAwH,OAAAvK,OAAAgY,WAAAC,uBAAA,GAAApB,QAAA,GAAAmB,WAAAC,uBAAA,GAAApB,QAAA,GAAAmB,WAAAC,uBAAA,GAAApB,QAAA,GAAAmB,WAAAC,uBAAA,IAAApB,QAAA,GAOA,OANAnB,UAAAG,IAAAwB,KAAAN,YAAA,IACArB,SAAAI,GAAAuB,KAAAR,QAAAE,YAAA,IACArB,SAAAI,GAAAuB,KAAAR,QAAAE,YAAA,IACArB,SAAAI,GAAAuB,KAAAR,QAAAE,YAAA,IACArB,SAAAI,GAAAuB,KAAAR,QAAAE,YAAA,IAEA3Y,KAAAkE,aAIA,KAAA,GAAA4V,MAAA3V,UAAAhG,UACAgG,SAAAhG,UAAA6K,eAAA8Q,MACA3V,SAAA2V,IAAA3V,SAAAhG,UAAA2b,IAIAld,SAAAuH,SAAAA,WAEA4V,8BAAA,KAAAC,IAAA,SAAA1d,QAAAU,OAAAJ,SAKA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAEA,IAAA8D,cAAA,YAEAA,cAAAlD,WACAuB,WAAA,eACAD,YAAA4B,aAKA4Y,OAAA,SAAAC,OAEA,MADAA,SAAAA,MAAA,GACA5Y,KAAAoD,SAAAwV,OAMA9X,MAAA,SAAAX,SACA,MAAA,IAAA,IAAAA,QAAAT,MAAAsB,QAAAC,UAAA,EAAA,IAAAjB,KAAAoD,UAOAtD,gBAAA,SAAAN,MAAAD,UACA,OAAA,GAAAC,MAAA,EAAA,IAAAQ,KAAAoD,SAAA5D,MAAA,IAAA,KAAA,EAAAQ,KAAAC,IAAAV,SAAA,IAAA,KAKA2I,cAAA,WACA,GAAA/I,GAAAC,CAOA,OALAD,GADAa,KAAAoD,SAAA,GACA,GAAApD,KAAAsF,MAAA,GAAAtF,KAAAoD,UAAApD,KAAAsF,MAAA,GAAAtF,KAAAoD,UAEA,IAAApD,KAAAsF,MAAA,GAAAtF,KAAAoD,UAAApD,KAAAsF,MAAA,GAAAtF,KAAAoD,UAEAhE,EAAA,IAAA,IAAAY,KAAAsF,MAAAtF,KAAA0K,KAAA,MAAA1K,KAAAoD,aACAjE,EAAAA,EAAAC,EAAAA,IAMAwJ,kBAAA,WACA,MAAA,KAAA5I,KAAAsF,MAAA,GAAAtF,KAAAoD,UAAApD,KAAAsF,MAAA,GAAAtF,KAAAoD,WAQA2F,gBAAA,QAAAA,iBAAAnJ,IAAAT,EAAAC,EAAAqC,QACA,GAAAsH,kBAAA,IAAA/I,KAAAC,IAAA,IAAAd,GAAAa,KAAAC,IAAA,IAAAb,IAAA,CAOA,OAJA2J,iBAFA,GAAA5J,GAAAA,EAAA,KAAA,GAAAC,GAAAA,EAAA,IAEAY,KAAA6Y,IAAA9P,gBAAA,IAAAnJ,KAAA,GAAA6B,OAAAC,MAAAgH,MAEA1I,KAAAyK,IAAA,IAAA,EAAA1B,gBAAAnJ,KAAA,GAEAmJ,gBAAA,GAAA,IAAAtH,OAAAC,MAAAgH,MAAA,EAAAjH,OAAAC,MAAAiH,UAOAoB,aAAA,SAAA3N,OAAA0N,SACA,MAAA9J,MAAA6Y,IAAA,MAAA7Y,KAAAyK,IAAA,GAAArO,QAAA,GAAA,IAAA4D,KAAAoD,WAAA,EAAA0G,QAAA,QASAE,YAAA,SAAArC,MAAA5E,QAAA5D,EAAAC,GACA,GAAA0Z,UAGA,OAFAA,QAAA3Z,EAAAa,KAAAsF,MAAAnG,EAAAwI,MAAA8B,eAAA,IAAA,GAAAzJ,KAAAoD,SAAAL,QAAAwD,SAAAoB,MAAAjC,MAAA,SAAA,MACAoT,OAAA1Z,EAAAY,KAAAsF,MAAAlG,EAAAuI,MAAA8B,eAAA,IAAA,GAAAzJ,KAAAoD,SAAAL,QAAAwD,SAAAoB,MAAAjC,MAAA,SAAA,KAAA,GAAAtG,EAAA,OACA0Z,QASAjQ,SAAA,SAAAzM,OAAA2c,OAAAnZ,KAEA,MADAA,KAAAI,KAAAyK,IAAA7K,IAAA,KACA,KAAAxD,OAAA,MAAA,GAAA4D,KAAAoD,SAAAxD,IAAA,KAAAmZ,QAOA7Z,MAAA,SAAAU,KACA,MAAA,MAAAA,IAAA,GAAA,GAAAI,KAAAoD,WAIA,KAAA,GAAAoV,MAAAzY,cAAAlD,UACAkD,aAAAlD,UAAA6K,eAAA8Q,MACAzY,aAAAyY,IAAAzY,aAAAlD,UAAA2b,IAIAld,SAAAyE,aAAAA,kBAEAiZ,IAAA,SAAAhe,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAEA,IAAAiI,UAAA,YAEAA,UAAArH,WACAuB,WAAA,WACAD,YAAA+F,SACAC,KAAA,SAAA8U,WAAAzN,KACA,GAAA0N,MAAAje,CACA,IAAAge,qBAAAE,OACA,IAAAle,EAAA,EAAAA,EAAAge,WAAAzd,OAAAP,IACAuQ,IAAAvQ,EAAAge,WAAAhe,QAIA,KADAie,KAAAnd,OAAAmd,KAAAD,YACAhe,EAAA,EAAAA,EAAAie,KAAA1d,OAAAP,IACAuQ,IAAA0N,KAAAje,GAAAge,WAAAC,KAAAje,MAMA,KAAA,GAAAud,MAAAtU,UAAArH,UACAqH,SAAArH,UAAA6K,eAAA8Q,MACAtU,SAAAsU,IAAAtU,SAAArH,UAAA2b,IAIAld,SAAA4I,SAAAA,cAEAkV,IAAA,SAAApe,QAAAU,OAAAJ,SAKA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAEA,IAAA4F,YAAA,YAMAA,YAAAwX,OAAA,SAAA3e,GACA,MAAAA,GAAAA,GAGAmH,WAAAhF,WACAuB,WAAA,aACAD,YAAA0D,WAIAwW,OAAArY,KAAAmY,GAAA,IACAmB,qBAAA,GAMAlP,iBAAA,SAAAmP,OAAAja,OACA,GAAAka,SAAAD,OAAApa,EAAA,EAAA,GAAA,EACAsa,QAAAF,OAAAna,EAAA,EAAA,GAAA,EACAsa,cAAA1Z,KAAA2Z,KAAAJ,OAAApa,EAAAoa,OAAAna,GAAAnC,KAAAob,OACAhV,SAAArD,KAAA0K,KAAA6O,OAAApa,EAAAoa,OAAApa,EAAAoa,OAAAna,EAAAma,OAAAna,GACAwa,QAAAH,QAAAzZ,KAAA6Z,KAAAva,MAAAoa,eAAAzc,KAAAob,QAAAhV,SACAyW,QAAAN,QAAAxZ,KAAA0K,KAAArH,SAAAA,SAAAuW,QAAAA,QACA,QACAza,EAAA2a,QACA1a,EAAAwa,UAQAvY,iBAAA,SAAAtG,EAAAmI,GACA,GAAA6W,SAAA9c,KAAAob,MACA,OAAArY,MAAA0K,KAAA3P,EAAA,GAAAA,EAAA,GAAAmI,EAAA,GAAAA,EAAA,GAAA,EAAAnI,EAAA,GAAAmI,EAAA,GAAAlD,KAAA6Z,IAAA9e,EAAA,GAAAgf,QAAA7W,EAAA,GAAA6W,WAUA3O,aAAA,SAAAF,OAAA9O,QACA,MAAA4D,MAAA2Z,MAAAzO,OAAA9L,EAAAhD,OAAAgD,IAAAhD,OAAA+C,EAAA+L,OAAA/L,IAAAa,KAAAmY,GAAA,KAEAH,UAUAO,uBAAA,SAAAyB,QAAA7C,QAAA8C,KAAAC,gBAAAC,cAAAC,iBACAF,kBAAArY,WAAAhF,UAAAmb,OAAAH,WAAAqC,iBACAC,gBAAAtY,WAAAhF,UAAAmb,OAAA3U,SAAA8W,eACAC,kBAAAvY,WAAAhF,UAAAmb,OAAA1X,MAAA8Z,gBACA,IAGAC,QAAA/X,KAAAgY,QAAAC,YAHA1C,WAAAhW,WAAAhF,UAAAmb,OAAAH,WACAxU,SAAAxB,WAAAhF,UAAAmb,OAAA3U,SACA/C,MAAAuB,WAAAhF,UAAAmb,OAAA1X,MAEA2X,SAAApW,WAAAhF,UAAAmb,OAAAC,SACAuC,OAAAvd,KAAAob,MAEAJ,YACAd,SAAA,EACA6C,QAAAha,KAAAsF,MAAA,IAAAtF,KAAA0K,KAAAsP,QAAA,OAGAK,OAAAra,KAAA6Z,IAAAvZ,MAAAka,QAAAR,QAAA,IAAA3W,SAAA,GAAA,IACAf,KAAAtC,KAAAkY,IAAA5X,MAAAka,QAAAR,QAAA,IAAA3W,SAAA,GAAA,IAAApG,KAAAqc,oBAEA,IAAAmB,WAAAza,KAAA0K,MAAA,GAAA1K,KAAAC,IAAA+Z,QAAA,KAAA,MAAA,EAAA,MAWA,OAVA/B,WACAqC,QAAA,EACAC,YAAA,IAEAD,QAAAG,UAAA5C,WAAA,GAAA,GACA0C,YAAA,EAAA,EAAAE,WAEAJ,OAAAra,KAAAyK,IAAAzK,KAAA6Y,IAAAwB,OAAA,KAAA,KACA/X,KAAAtC,KAAAyK,IAAAzK,KAAA6Y,IAAAvW,KAAA,KAAA,MACAgY,QAAAta,KAAAyK,IAAAzK,KAAA6Y,IAAAyB,QAAA,IAAA,IAEAD,OAAAA,OACA/X,KAAAA,KACAgY,QAAAA,QACAC,YAAAA,YACAG,MAAAvD,QAAA8C,KACAU,KAAA1C,SAAA2C,OAAAC,QAAAC,OAAAC,WAOAC,oCAAA,SAAApY,aAEA,GAAAyX,QAAA/X,IAUA,OARA+X,QAAAra,KAAA6Z,IAAAjX,YAAAtC,MAAA,IAAAN,KAAAmY,IAAAvV,YAAAvC,eAAA,GAAA,IACAiC,KAAAtC,KAAAkY,IAAAtV,YAAAtC,MAAA,IAAAN,KAAAmY,IAAAvV,YAAAvC,eAAA,GAAA,IAAApD,KAAAqc,qBAEAe,OAAAra,KAAAyK,IAAAzK,KAAA6Y,IAAAwB,OAAA,KAAA,KACA/X,KAAAtC,KAAAyK,IAAAzK,KAAA6Y,IAAAvW,KAAA,KAAA,MAEAM,YAAAyX,OAAAA,OAAA,KACAzX,YAAAN,KAAAA,KAAA,KACAM,aAUAwU,gBAAA,SAAAT,IAAArU,KAAA0U,UAAAC,WAAAE,SAQA,MAAA,UAAA6C,QAAAC,KAAArD,SAAAC,WACA,GAAAoE,MAAAC,KACAD,MAAArE,UAAAD,IACAuE,MAAArE,WAAAvU,KACA2Y,KAAAjE,UAAAnV,WAAAwX,OAAAW,QAAA,MAAAiB,KAAAjE,WACA,GAAAiD,OACAgB,MAAA,GAEA,GAAAhB,OACAgB,MAAA,GAEAC,MAAAjE,WAAApV,WAAAwX,OAAAW,QAAA,MAAAkB,MAAAjE,WACA,IAAAqD,SAAAta,KAAAyK,IAAA,GAAA5I,WAAAwX,OAAAW,QAAA,KAAA,GACAO,YAAAva,KAAAyK,IAAA,EAAA5I,WAAAwX,OAAAW,QAAA,KAAA,EACA,QACArD,IAAAsE,KACA3Y,KAAA4Y,MACAZ,QAAAA,QAAA,KACAC,YAAAA,YAAA,KACAY,UAAA,gBACAT,MAAAvD,QAAA8C,KACAU,KAAAG,OAAAC,YAWAjZ,mBAAA,SAAAuB,SAAAlC,SAAAF,SAAAma,WACA,MAAA/X,UAAA,GACAA,SAAA,IAAA,GAAAlC,SAAA,GACA,GAAA,GAAA,GAAAF,UAAA,GAAAoC,SAAA,KAAArD,KAAA6Y,IAAAuC,UAAA,IAAA,GAAA,MAMA3Y,gBAAA,SAAAlB,OACA,MAAA,GAAAA,MAAA,IAAA,KAIA,KAAA,GAAAiX,MAAA3W,YAAAhF,UACAgF,WAAAhF,UAAA6K,eAAA8Q,MACA3W,WAAA2W,IAAA3W,WAAAhF,UAAA2b,IAIAld,SAAAuG,WAAAA,gBAEAwZ,IAAA,SAAArgB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAqf,2BAAAtgB,QAAA,8BAEAugB,8BAAAvgB,QAAA,kCAEAwgB,0BAAAxgB,QAAA,8BAEAygB,4BAAAzgB,QAAA,+BAEAM,SAAAuH,SAAAyY,0BAAAzY,SACAvH,QAAAyE,aAAAwb,8BAAAxb,aACAzE,QAAA4I,SAAAsX,0BAAAtX,SACA5I,QAAAuG,WAAA4Z,4BAAA5Z,aAEA6Z,6BAAA,EAAAC,iCAAA,GAAAC,6BAAA,GAAAC,+BAAA,KAAAC,IAAA,SAAA9gB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAA8f,sBAAA/gB,QAAA,yBAEA0C,IAAA,WACAT,KAAA0B,OAGAjB,KAAAb,WACA6B,KAAA,mBACAC,KAAA,WACA1B,KAAAyP,aACAlS,KACAE,OAGAmD,OAAA,IACAE,OAAA,KACAC,OAAA,KACAF,QAAA,KACAF,KAAA,KACAwX,UAAA,KACAJ,OAAA,KACAD,QAAA,KACAU,IAAA,IACAH,UAAA,KACArX,UAAA,MACAC,iBAAA,MACAgX,gBAAA,KACA9H,qBAAA,WACA,GAAA4O,KAAA/e,KAAA0P,OAAAnS,EAAAmP,MAAA,EAAA,EACA1M,MAAAgf,YAAAzhB,EAAAwhB,IACA/e,KAAAif,WAAAD,YAAAzhB,EAAAwhB,IAAArQ,QAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAAhC,MAAA,EAAA,EAEA,IAAAwS,MAAAlf,KAAA0P,OAAAjS,EAAAiP,MAAA,EAAA,EACA1M,MAAAgf,YAAAvhB,EAAAyhB,KACAlf,KAAAif,WAAAD,YAAAvhB,EAAAyhB,KAAAxQ,QAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAAhC,MAAA,EAAA,IAEAjD,KAAA,SAAA0V,MAAAC,OACApf,KAAA0P,OAAAnS,EAAA8hB,QAAAF,OACAnf,KAAA0P,OAAAjS,EAAA4hB,QAAAD,OACApf,KAAAmQ,wBAEAmP,UAAA,SAAA9c,QACA,GAAAmP,OAAAnP,OAAAwL,KAAAuJ,UACA5F,QACA,EAAAmN,qBAAA/e,KAAA,QACAvB,EAAAsgB,qBAAA/e,KAAA,QACAsB,EAAAyd,qBAAA/e,KAAA,QACAyH,EAAAsX,qBAAA/e,KAAA,QACAyQ,EAAAsO,qBAAA/e,KAAA,QACA0Q,EAAAqO,qBAAA/e,KAAA,QACA2Q,EAAAoO,qBAAA/e,KAAA,QACA4Q,EAAAmO,qBAAA/e,KAAA,QACA6Q,EAAAkO,qBAAA/e,KAAA,SACA4R,MACA,IAAAjO,WAAA1D,KAAAuf,iBACA,OAAAT,sBAAA/e,KAAA,eAAA4R,MAAAmN,qBAAA/e,KAAAyf,QAAA9b,UAAAlB,OAAA2E,UAAA2X,qBAAA/e,KAAAyf,QAAAhd,OAAAqU,mBAAAiI,qBAAA/e,KAAAyf,QAAAhd,OAAA4G,WAEAwO,WAAA,SAAApV,QACA,GACAkN,QACA+P,QAFA3X,EAAAgX,qBAAA/e,KAAAqI,IAGA0W,sBAAA/e,KAAAqI,KAAA,IACAsH,OAAA1P,KAAAsf,UAAA9c,QACAsc,qBAAA/e,KAAAqI,KAAA,IACAqX,QAAAzf,KAAAsf,UAAA9c,QACAsc,qBAAA/e,KAAAqI,KAAAN,EACA9H,KAAAyJ,KAAAiG,OAAA+P,UAEAC,4BAAA,SAAA/U,cAAAgV,eACA,GAAAzd,GAAAyI,cAAAzI,EACAC,EAAAwI,cAAAxI,EACAyd,IAAA,GACAC,SAAA,EACAC,UAAA,EACApF,MAAA,CA0CA,OAzCAiF,iBAAAzd,EAAA,IAAAA,GACA,GAAAA,GACA0d,KAAAd,qBAAA/e,KAAA,eACA2a,MAAA,GACA,GAAAxY,EACA0d,KAAAd,qBAAA/e,KAAA,WACA,IAAAmC,GACA0d,KAAA,GACAC,SAAA,GACA,IAAA3d,GACA0d,KAAA,GACAC,SAAA,GACA,IAAA3d,EACA0d,KAAAd,qBAAA/e,KAAA,WAEA6f,KAAAd,qBAAA/e,KAAA,cACA2a,MAAA,GAEA,IAAAkF,MAAAA,KAAAd,qBAAA/e,KAAAyf,SACA,GAAArd,GACAyd,KAAAd,qBAAA/e,KAAA,WACA2a,MAAA,GACA,GAAAvY,EACAyd,KAAAd,qBAAA/e,KAAA,OACA,IAAAoC,GACAyd,KAAA,GACAE,UAAA,GACA,IAAA3d,EACAyd,KAAAd,qBAAA/e,KAAA,SAEA6f,KAAAd,qBAAA/e,KAAA,YACA2a,MAAA,IAEAmF,SAAAC,YACAF,IAAAA,IAAAvf,MAAAye,qBAAA/e,KAAAyf,SAAAO,KAAA,IACAF,SAAAC,WACAF,IAAAd,qBAAA/e,KAAA,qBAIA6f,IAAAd,qBAAA/e,KAAAigB,UAAArV,eAAAmU,qBAAA/e,KAAAyf,QAAAI,IAAAd,qBAAA/e,KAAAkgB,QAGAjT,UAAA,SAAArC,cAAAnI,QACA,GACAkN,QACA+P,QAFA3X,EAAAgX,qBAAA/e,KAAAqI,IAGA0W,sBAAA/e,KAAAqI,KAAA,IACAsH,OAAA1P,KAAA0f,4BAAA/U,cAAA,QAAAnI,OAAA0L,MACAlO,KAAAyP,YAAAlS,EAAA8hB,QAAA3P,QACA1P,KAAAif,WAAAxP,YAAAlS,EAAA8hB,QAAA3P,QACA1P,KAAAif,WAAAxP,YAAAlS,EAAA2iB,MACApB,qBAAA/e,KAAAqI,KAAA,IACAqX,QAAAzf,KAAA0f,4BAAA/U,cAAA,QAAAnI,OAAA0L,MACAlO,KAAAyP,YAAAhS,EAAA4hB,QAAAI,SACAzf,KAAAif,WAAAxP,YAAAhS,EAAA4hB,QAAAI,SACAzf,KAAAif,WAAAxP,YAAAhS,EAAAyiB,MACApB,qBAAA/e,KAAAqI,KAAAN,GAEAqY,SAAA,SAAAxa,aACA,GAAAiI,QAAA,EA0BA,OAvBAA,SAFAjI,YAAA0H,QACA1H,YAAA4H,OACAuR,qBAAA/e,KAAA,WAEA+e,qBAAA/e,KAAA,SAGA4F,YAAA2H,QACA3H,YAAA1C,KACA6b,qBAAA/e,KAAA,eAEA4F,YAAApB,OACAua,qBAAA/e,KAAA,YAEA4F,YAAAV,UACA6Z,qBAAA/e,KAAA,YAEA+e,qBAAA/e,KAAA,YAKA+e,qBAAA/e,KAAA,qBAKA4N,UAAA,SAAAhI,aACA,GACA+J,QACA+P,QAFA3X,EAAAgX,qBAAA/e,KAAAqI,IAGA0W,sBAAA/e,KAAAqI,KAAA,IACAsH,OAAA1P,KAAAmgB,SAAAxa,aACA3F,KAAAyP,YAAAlS,EAAA,IAAAmS,OACA1P,KAAAif,WAAAxP,YAAAlS,EAAA,IAAAmS,OACAoP,qBAAA/e,KAAAqI,KAAA,IACAqX,QAAAzf,KAAAmgB,SAAAxa,aACA3F,KAAAyP,YAAAhS,EAAA,IAAAgiB,QACAzf,KAAAif,WAAAxP,YAAAhS,EAAA,IAAAgiB,QACAX,qBAAA/e,KAAAqI,KAAAN,GAEAsY,yBAAA,SAAA3e,MACA,GAAA/D,GAAA+D,KAAAkE,YACA+J,OAAA,GACAlN,OAAAf,KAAAe,OAAA4G,UACAiX,MACA,IAAA3iB,EAAA2P,QAEAqC,OADAhS,EAAA6P,OACA/K,OAAAsc,qBAAA/e,KAAA,wBAEAyC,OAAAsc,qBAAA/e,KAAA,gBAGA,IAAArC,EAAA4P,QAAA,CACA,GAEAgT,OAFApd,QAAAxF,EAAAwF,QACA8B,MAAAtH,EAAAsH,KAEA,IAAAtH,EAAA6G,OAEA+b,MADA5iB,EAAA4E,SAAA,GACA,QAEA,OAAA,SAAA,SAAApC,QAAAxC,EAAAwF,SAAA,EACA,MAEA,UAIA,IAAAxF,EAAAuF,UAGA,IAAAvF,EAAAmG,MACAmB,MAAA,EACAsb,MAAA,YACA,CACA,GAAA5iB,EAAAuH,UAEAqb,MADAvd,KAAAoD,SAAA,GACA,SAEA,aAGA,QAAAzI,EAAAsH,OACA,IAAA,GACA,IAAA,GACA,IAAA,GACAA,MAAAtH,EAAAsH,KACA,MACA,KAAA,GACAA,MAAA,EAEA9B,QADAxF,EAAA2F,MAAA,IACA,OACA3F,EAAA2F,MAAA,GACA,SAEA,QAKA3F,EAAAgI,iBACA2a,IAAAtb,KAAArH,EAAAgI,gBAEA4a,MADA,GAAA5iB,EAAAgH,KACA,SAEA,kBAMAgL,OAAAoP,qBAAA/e,KAAAwgB,cAAA/d,OAAAU,QAAA8B,MAAAsb,MAAA,IAAA5iB,EAAAgH,QAAAhH,EAAA4F,kBAAA+c,SAEA3Q,QAAAlN,OAAAsc,qBAAA/e,KAAA,wBAGA,OAAA2P,SAEAgJ,0BAAA,SAAAjX,MACA,GACAiO,QACA+P,QAFA3X,EAAAgX,qBAAA/e,KAAAqI,IAGA0W,sBAAA/e,KAAAqI,KAAA,IACAsH,OAAA1P,KAAAogB,yBAAA3e,MACAzB,KAAA0P,OAAAnS,EAAA8hB,QAAA3P,QACA1P,KAAAyP,YAAAlS,GAAAuhB,qBAAA/e,KAAA,cAAA2P,QACA1P,KAAAif,WAAAxP,YAAAlS,GAAAuhB,qBAAA/e,KAAA,cAAA2P,OAAA,GAAA,GAAA,GAAA,GAAA,IACAoP,qBAAA/e,KAAAqI,KAAA,IACAqX,QAAAzf,KAAAogB,yBAAA3e,MACAzB,KAAA0P,OAAAjS,EAAA4hB,QAAAI,SACAzf,KAAAyP,YAAAhS,GAAAqhB,qBAAA/e,KAAA,cAAA0f,SACAzf,KAAAif,WAAAxP,YAAAhS,GAAAqhB,qBAAA/e,KAAA,cAAA0f,QAAA,GAAA,GAAA,GAAA,GAAA,IACAX,qBAAA/e,KAAAqI,KAAAN,GAEA0Y,QAAA,EACAvB,YACAxP,aACAlS,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACAE,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAuhB,aACAzhB,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACAE,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MAGAgS,aACAlS,KACAE,MAEAuhB,aACAzhB,KACAE,MAEAiS,QACAnS,KACAE,MAEA8hB,gBAAA,WACA,OACA5d,MAAAmd,qBAAA/e,KAAA,iBACA6B,OAAAkd,qBAAA/e,KAAA,kBACA8B,MAAAid,qBAAA/e,KAAA,iBACAiG,QAAA8Y,qBAAA/e,KAAA,aACA+F,QAAAgZ,qBAAA/e,KAAA,WACAgG,QAAA+Y,qBAAA/e,KAAA,WACAsF,KAAAyZ,qBAAA/e,KAAA,gBACAuF,OAAAwZ,qBAAA/e,KAAA,kBACAwF,MAAAuZ,qBAAA/e,KAAA,oBAKA1B,QAAAoC,IAAAA,MAEAggB,wBAAA,KAAAC,IAAA,SAAA3iB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAA2hB,sBAAA5iB,QAAA,yBAEA6iB,uBAAA7iB,QAAA,2BAEA8B,oBAAA9B,QAAA,wBAEA+gB,qBAAA/gB,QAAA,wBAEAM,SAAAgI,KAAAsa,qBAAAta,KACAhI,QAAAmK,OAAAoY,uBAAApY,OACAnK,QAAAoC,IAAAZ,oBAAAY,IACApC,QAAA0B,KAAA+e,qBAAA/e,OAEAqB,uBAAA,GAAAyf,wBAAA,GAAAC,0BAAA,GAAAL,wBAAA,KAAAM,IAAA,SAAAhjB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAEA,IAAAqH,OACAqM,UAAA,OAAA,SAAA,YAAA,SAAA,WAAA,MAAA,WAAA,YAAA,WAAA,OAAA,UAAA,SAAA,SAAA,YAAA,YAAA,QAAA,SAAA,UAAA,UAAA,QAAA,QAAA,WAAA,WAAA,OAAA,MAAA,QAAA,YAAA,WAAA,YAAA,QAAA,QAAA,WAAA,OAAA,QAAA,QAAA,QAAA,SAAA,OAAA,OAAA,WAAA,WAAA,MAAA,SAAA,QAAA,SAAA,YAAA,QAAA,WAAA,WAAA,UAAA,UAAA,SAAA,UACAI,WAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAEAE,QAAA,IAAA,MAAA,MAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,OAAA,KAAA,KAAA,KAEA,IAAA,IAAA,KAAA,IAAA,IAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,KAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,MAAA,IAAA,KAAA,IAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,KACAJ,OAAA,SAAA,SAAA,QAAA,SAAA,QAAA,MAAA,SAAA,MAAA,UAAA,QAAA,SAAA,OAAA,UAAA,UAAA,UAAA,QAAA,QAAA,OAEA,UAAA,OAAA,SAAA,UAAA,QAAA,SAAA,SAAA,UAAA,QAAA,OAAA,QAAA,UAAA,SAAA,UAAA,QAAA,SAAA,QAAA,QAAA,YAAA,SAAA,SAAA,WAAA,YAAA,QAAA,SAAA,QAAA,UAAA,QAAA,SAAA,UAAA,OAAA,UAAA,OAAA,WAAA,QAAA,UAAA,UAAA,QAAA,OAAA,SAAA,QAAA,SAAA,UAAA,UAAA,UAAA,UAAA,UAAA,QAAA,QAAA,MAAA,QAAA,SAAA,QAAA,SAAA,WAAA,QAAA,UAAA,UAAA,KAAA,QAAA,QAAA,SAAA,UAAA,UAAA,OAAA,SAAA,OAAA,QAAA,SAAA,QAAA,UAAA,SAAA,QAAA,QAAA,QAAA,UAAA,SAAA,SAAA,QAAA,QAAA,WAAA,SAAA,OAAA,OAAA,SAAA,SAAA,SAAA,SAAA,WAAA,QACA0E,YAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,IAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,KAAA,MAAA,KAAA,KAAA,KAAA,MAAA,IAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MACAD,WAAA,WAAA,QAAA,SAAA,UAAA,OAAA,QAAA,UAAA,WAAA,UAAA,YAAA,SAAA,QAAA,UAAA,YAAA,WAAA,aAAA,UAAA,WAAA,YAAA,YAAA,YAAA,SAAA,YAAA,aAAA,UAAA,cAAA,YAAA,WAAA,WAAA,YAAA,WAAA,WAAA,WAAA,SAAA,YAAA,UAAA,OAAA,WAAA,WAAA,UAAA,WAAA,SAAA,YAAA,aAAA,WAAA,UAAA,WAAA,OAAA,QAAA,YAAA,YAAA,QAAA,WAAA,aAAA,UAAA,QAAA,YAAA,WAAA,OAAA,YAAA,SAAA,SAAA,UAAA,UAAA,SAAA,YAAA,cAAA,UAAA,WAAA,WAAA,UAAA,QAAA,WAAA,YAAA,OAAA,YAAA,SAAA,OAAA,YAAA,OAAA,WAAA,OAAA,WAAA,YAAA,YAAA,SAAA,SAAA,OAAA,aAAA,UAAA,SAAA,WAAA,UAAA,YAAA,UAAA,UAAA,SAAA,SAAA;CAGAhZ,SAAAgI,KAAAA,UAEA2a,IAAA,SAAAjjB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAEA,IAAAwJ,SACAiE,kBACAwU,UAAA,EAAA,EAAA,GACAC,UAAA,GAAA,IAAA,IACA7K,QAAA,IAAA,IAAA,KACAC,QAAA,IAAA,IAAA,KAEAH,QAAA,IAAA,IAAA,IACAC,MAAA,EAAA,IAAA,KACAG,OAAA,EAAA,IAAA,KAEAC,QAAA,EAAA,IAAA,MAEAhM,kBAAA,WACA,OAAA,SAAA,SAAA,SAAA,SAAA,SAAA,OAAA,QAAA,UAAAzH,KAAAsF,MAAA,EAAAtF,KAAAoD,YAIA9H,SAAAmK,OAAAA,YAEA2Y,IAAA,SAAApjB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAEA,IAAAe,MAAA,QAAAA,MAAAqhB,OAAA7U,UACAxM,KAAAqI,OAAArI,KAAAqI,KAAA,IACA,IAAAiZ,SACA5jB,GACA6jB,MAAA,IACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,OAAA,KACAC,cAAA,UACAC,cAAA,OACAC,QAAA,KACAC,OAAA,KACAC,aAAA,OACAC,UAAA,OACAC,IAAA,KACAC,KAAA,KACAC,WAAA,OACAC,kBAAA,MACAC,gBAAA,QACAC,iBAAA,OACAC,gBAAA,MACAC,UAAA,OACA/c,QAAA,QACAC,QAAA,SACA+c,eAAA,MACAC,iBAAA,OACAC,gBAAA,MACAC,UAAA,SACAC,QAAA,OACAC,cAAA,QACAC,WAAA,SACAC,mBAAA,OACApC,SAAA,QACAC,SAAA,OACA/K,OAAA,QACAC,KAAA,OACAC,OAAA,MACAC,OAAA,OACAC,MAAA,MACAC,OAAA,OACA8M,uBAAA,UACAC,WAAA,WACAC,wBAAA,UACAC,aAAA,KACAC,eAAA,KACAC,gBAAA,MACAC,SAAA,QACAC,YAAA,KACAC,4BAAA,OACAC,OAAA,KACAlc,KAAA,MACAmc,MAAA,IACAC,QAAA,KACAC,SAAA,KACAC,MAAA,KACAC,WAAA,OACAC,YAAA,QACAC,QAAA,IACAC,UAAA,IACAC,UAAA,IACAC,YAAA,KACAC,SAAA,KACAC,GAAA,KACAC,IAAA,KACAC,IAAA,KACAC,GAAA,KACAC,aAAA,UACAhU,EAAA,IACAiU,KAAA,IACAC,KAAA,IACArQ,GAAA,MACAsQ,IAAA,KACA/b,EAAA,KACA0L,GAAA,KACA7F,GAAA,KAEArN,MAAA,QACAC,OAAA,OACAC,MAAA,MAEAsjB,mBAAA,KACAC,sBAAA,oBACAC,aAAA,SACAC,mBAAA,QAEAC,cAAA,IACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAnc,EAAA,KACAoc,KAAA,KACAC,MAAA,KACAC,MAAA,KACAC,IAAA,OAEAxoB,GACA+jB,MAAA,IACAyC,OAAA,WAEAxX,SAAAA,SAAAxM,KAAAqI,MAAAgZ,OACA,OAAAC,QAAAA,OAAAD,OAGArhB,MAAA6M,cAAA,SAAAnL,MACA,GAAAkB,QACAqjB,SAAAjjB,KAAAC,IAAAvB,KAAAkJ,cAAA6B,eAAA,IAAAzJ,KAAAC,IAAAvB,KAAAkJ,cAAA6B,eAAA,IAAA,EAGA,OAFA7J,KAAApF,EAAAwC,KAAA,eAAA,KAAAimB,SAAAjmB,KAAA,gBAAA,KAAAA,KAAA,WAAA,KACA4C,IAAAlF,EAAAsC,KAAA,eAAA,KAAAimB,SAAAjmB,KAAA,gBAAA,KAAAA,KAAA,WAAA,KACA4C,KAGA5C,KAAAkmB,iBAAA,SAAA/iB,SACA,MAAA,KAAAnD,KAAAqI,MAEAzG,MAAA,IACAC,OAAA,IACAC,MAAA,IACAmE,QAAA,IACAF,QAAA,IACAC,QAAA,IACAV,KAAA,IACAC,OAAA,IACAC,MAAA,KACArC,SAEAA,SAGAnD,KAAAmmB,MAAA,WACA,MAAA,KAAAnmB,KAAAqI,KACA,IAEA,KAGArI,KAAAomB,gBAAA,SAAAjjB,SACA,MAAA,KAAAnD,KAAAqI,MAEAzG,MAAA,QACAC,OAAA,OACAC,MAAA,MACAmE,QAAA,OACAF,QAAA,QACAC,QAAA,SACAV,KAAA,MACAC,OAAA,OACAC,MAAA,OACArC,UAGAvB,MAAA5B,KAAA,iBACA6B,OAAA7B,KAAA,kBACA8B,MAAA9B,KAAA,iBACAiG,QAAAjG,KAAA,aACA+F,QAAA/F,KAAA,WACAgG,QAAAhG,KAAA,WACAsF,KAAAtF,KAAA,gBACAuF,OAAAvF,KAAA,kBACAwF,MAAAxF,KAAA,kBACAmD,UAGAnD,KAAAyf,MAAA,WACA,OAAA/hB,EAAA,IAAAF,EAAA,MAAAwC,KAAAqI,OAEArI,KAAAkgB,KAAA,WACA,OAAAxiB,EAAA,IAAAF,EAAA,MAAAwC,KAAAqI,OAGArI,KAAAigB,UAAA,SAAAtV,OACA,MAAA,KAAA3K,KAAAqI,KACAsC,MAAAjC,KAAA2d,OAAA,GAAApd,cAAA0B,MAAAjC,KAAAiE,MAAA,GAEA,KAAA3M,KAAAqI,KACArI,KAAA2K,MAAAjC,MADA,QAKA1I,KAAAwgB,cAAA,SAAA/d,OAAAU,QAAA8B,MAAAsb,MAAAhd,kBAAA+c,KACA,GAAAgG,WAAA,GACApmB,SAAA,OAAA,SAAA,SAAAC,QAAAgD,SAAA,CACA,IAAA,KAAAnD,KAAAqI,KAAA,CAEA,GADAie,WAAA7jB,OACA8d,MACA,OAAAA,OACA,IAAA,iBACA,GAAAgG,QAAAjG,IAAA9hB,OAAA,EACAgoB,OAAAD,OAAA,UAAA,SACAE,GAAAF,OAAA,MAAA,IACAD,YAAA,qCAAAtmB,KAAAkmB,iBAAA/iB,SAAA,KAAAqjB,OAAA,SAAAxmB,KAAAsgB,IAAAN,KAAAhgB,KAAAyf,UAAA,IAAAgH,GAAA,MACA,MACA,KAAA,OACAH,WAAA,iBAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,MACAmjB,WAAA,gBAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,QACAmjB,WAAA,wBAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,MACAmjB,WAAA,kBAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,SACAmjB,WAAA,iCAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,SACAmjB,WAAA,sBAAAtmB,KAAAkmB,iBAAA/iB,aAIA,QAAA8B,OACA,IAAA,GAEAqhB,WADApmB,QACA,iCAAAF,KAAAkmB,iBAAA/iB,SAEA,2BAAAnD,KAAAkmB,iBAAA/iB,QAEA,MACA,KAAA,GACAmjB,WAAA,iBAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,GACAmjB,WAAA,iBAAAtmB,KAAAkmB,iBAAA/iB,QACA,MACA,KAAA,GACAmjB,WAAA,eAAAtmB,KAAAkmB,iBAAA/iB,SAIAI,mBACAA,kBAAAiL,IAAA,SAAAkY,MAEAJ,WADA,SAAAI,KACA1mB,KAAAkgB,OAAA,yBAEAlgB,KAAAkgB,OAAA,aAAAwG,KAAA,cAIAJ,WAAAtmB,KAAAkgB,OAEA,GAAA,KAAAlgB,KAAAqI,KAAA,CACA,GAAA6X,MAAAlgB,KAAAkgB,MAEA,IADAoG,WAAA7jB,OAAA,IACA8d,MAAA,CACA,GAAAoG,aAAA3mB,KAAAomB,gBAAAjjB,QAEA,QADAA,QAAAnD,KAAAkmB,iBAAA/iB,SACAod,OACA,IAAA,iBACA+F,WAAA,MAAAnjB,QAAA,QAAAnD,KAAAsgB,IAAAN,KAAAhgB,KAAAyf,UAAA,UACA,MACA,KAAA,OACA6G,WAAAnjB,QAAA,GACA,MACA,KAAA,MACAmjB,WAAAnjB,QAAA,GACA,MACA,KAAA,QACAmjB,WAAA,OAAAnjB,QAAA,MACA,MACA,KAAA,MACAmjB,WAAA,UAAAnjB,QAAA,GACA,MACA,KAAA,SACAmjB,WAAAK,YAAA,OACA,MACA,KAAA,SACAL,WAAAnjB,QAAA,UAKA,QADAA,QAAAnD,KAAAkmB,iBAAA/iB,SACA8B,OACA,IAAA,GAEAqhB,WADApmB,QACA,QAAAiD,QAAA,OAEA,MAAAA,QAAA,MAEA,MACA,KAAA,GACAmjB,WAAA,OAAAnjB,QAAA,MACA,MACA,KAAA,GACAmjB,WAAA,OAAAnjB,QAAA,MACA,MACA,KAAA,GACAmjB,WAAA,OAAAnjB,QAAA,IAIAI,mBACAA,kBAAAiL,IAAA,SAAAkY,MAEAJ,WADA,SAAAI,KACAxG,KAAA,eAEAA,KAAAlgB,KAAA0mB,MAAA,WAIAJ,WAAApG,KAEA,MAAAoG,YAGAhoB,QAAA0B,KAAAA,UAEA4mB,IAAA,SAAA5oB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAA4nB,oBAAA7oB,QAAA,qBAEA,iBAAAkb,UACAA,OAAA4N,SAAAD,mBAAAC,UAGAxoB,QAAAwoB,SAAAD,mBAAAC,WAEAC,qBAAA,KAAAC,IAAA,SAAAhpB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAIA4Z,qBAJA7a,QAAA,wBAEAA,QAAA,wBAEAA,QAAA,wBAIAuD,sBAFAvD,QAAA,0BAEAA,QAAA,0BAEA2J,mBAAA3J,QAAA,uBAIA6J,wBAFA7J,QAAA,yBAEAA,QAAA,4BAEAwD,2BAAAxD,QAAA,+BAEA8oB,WAEAA,UAAAG,SACAH,SAAAG,MAAAnf,KAAAgf,SAAAhf,KAAA+Q,mBAAA/Q,KACAgf,SAAAG,MAAAjlB,OAAA8kB,SAAA9kB,OAAAT,qBAAAS,OACA8kB,SAAAG,MAAAze,KAAAse,SAAAte,KAAAb,mBAAAa,KAEAse,SAAAI,WACAJ,SAAAI,QAAArhB,SAAArE,2BAAAqE,SAEAihB,SAAAK,QACAL,SAAAK,KAAAnnB,KAAA6H,uBAAA7H,KAEA1B,QAAAwoB,SAAAA,WAEAhO,uBAAA,EAAA5H,uBAAA,EAAA6H,sBAAA,EAAArB,yBAAA,EAAAnQ,wBAAA,EAAA4J,sBAAA,EAAAC,wBAAA,EAAA5J,8BAAA,GAAA6J,0BAAA,KAAA+V,IAAA,SAAAppB,QAAAU,OAAAJ,SACA,YAEAS,QAAAC,eAAAV,QAAA,cACAW,OAAA,GAGA,IAAAqf,2BAAAtgB,QAAA,8BAEAugB,8BAAAvgB,QAAA,kCAEAwgB,0BAAAxgB,QAAA,8BAEAygB,4BAAAzgB,QAAA,+BAEAM,SAAAuH,SAAAyY,0BAAAzY,SACAvH,QAAAyE,aAAAwb,8BAAAxb,aACAzE,QAAA4I,SAAAsX,0BAAAtX,SACA5I,QAAAuG,WAAA4Z,4BAAA5Z,aAEA6Z,6BAAA,EAAAC,iCAAA,GAAAC,6BAAA,GAAAC,+BAAA,UAAA,KCp+FAwI,gBAAA,SAAA3N,OAAA4N,QACA,GAAAtnB,MAAA8mB,SAAAK,KAAAnnB,KACA8H,KAAAgf,SAAAhf,KACAjC,SAAAihB,SAAAI,QAAArhB,QAEAqT,QAAAtb,EAAA8b,OACAA,OAAAjc,EAAAuC,KAEA0Z,OAAArR,KAAA,SAAAkf,SAIA,MAHAA,WACAvnB,KAAAqI,KAAAkf,SAEAvnB,KAAAqI,MAGAqR,OAAA8N,cAAA,SAAArf,UAAAsf,aACA3f,KAAAjI,UAAAoI,aAAAwf,YAAA,OAAA,OACA3f,KAAAjI,UAAAsI,YAAAA,UACAuR,OAAAtX,EAAA,GAAA0F,KACA,IAAApG,MAAAgY,OAAAtX,CASA,IARAklB,OAAA5lB,KAAAA,KACAgY,OAAA4N,OAAAI,GAAAxO,OAAAyO,SAAAC,SAAA,UACAlO,OAAAmO,cAAAP,OACAA,OAAAA,OAAA5N,OAAA4N,OACAA,OAAAQ,QACAC,GAAA3lB,EAAAV,KACAsmB,cACAld,EAAA,aAAAmd,SACA,QAAAvmB,KAAAuG,cAAAvG,KAAAyG,UAAA,CACA,GAAAzK,GAAA,CACA,GACAA,KACAgE,KAAAiI,cAAA,SAAAC,UACA,kBAAAA,WAAAA,mBAEA,OAAAlI,KAAAoH,OAAA,IAAApL,EACA+C,KAAA,aACAiB,KAAA2M,eACA,IAAA,QAAA3M,KAAAuG,aACA,GAAA8S,QAAArZ,KAAAyG,UAAA,IAAA,EACA+f,KAAAC,YAAA,WACA,OAAAzmB,KAAAoH,OACAsf,cAAAF,MAEAxmB,KAAAsI,sBAAA,SAAAJ,UACAlI,KAAAyG,UAAA,OAAAuR,OAAAc,SACAd,OAAAD,iBAAA7P,aAEAmR,QAAArZ,KAAA6G,MAAAxG,eAAA8D,SAAAqE,cAAA,IAAArE,SAAAsE,iBAAA,KAEA,SAAAzI,KAAAuG,cACAvG,KAAAiI,cAAA,SAAAC,UACA8P,OAAAD,iBAAA7P,YAGA,QAAAlI,KAAAuG,aAKA,IAAA+f,aAAA,WACA,GAAAtmB,MAAAgY,OAAAtX,CACAsX,QAAAe,kBACAf,OAAA2O,kBAAA,CACA,IAAAC,UAAA,GAAAziB,SACA6T,QAAAD,iBAAA6O,SAAA7O,iBAAA8O,KAAA7O,OAGA,IAAA8O,KAAA1d,EAAA,mCACA2d,QAAA,SAAAC,OACA,GAAAhnB,KAAAwH,eAAA,CACA,GAAAqT,QAAAzR,EAAA,WAAAyR,SACAoM,gBACAxmB,EAAAumB,MAAAE,MAAArM,OAAAjX,KACAlD,EAAA,KAAAsmB,MAAAG,MAAAtM,OAAA5C,MAEArX,MAAAZ,KAAAwL,YAAAyb,eAAAxmB,EAAAwmB,eAAAvmB,EACAomB,KAAAvd,KACA0O,IAAA,IAAAgP,eAAAvmB,EAAA,KACAkD,KAAAqjB,eAAAxmB,EAAA,KACAgc,UAAA,UAAA7b,MAAA,iBAAA,QAAAZ,KAAAe,OAAA0L,KAAA,GAAA,GAAA,SAEAwa,eAAAxmB,EAAA,KAAAwmB,eAAAxmB,EAAA,GAAAwmB,eAAAvmB,EAAA,KAAAumB,eAAAvmB,EAAA,EACAomB,IAAAM,OAEAN,IAAAO,SAIAC,MAAAle,EAAA,mCACAme,UAAA,SAAAP,OACA,GAAAhnB,KAAAmH,gBAAA,CACA,GAAA0T,QAAAzR,EAAA,WAAAyR,SACAoM,gBACAxmB,EAAAumB,MAAAE,MAAArM,OAAAjX,KACAlD,EAAA,KAAAsmB,MAAAG,MAAAtM,OAAA5C,KAEAqP,OAAA/d,KACA0O,IAAA,IAAAgP,eAAAvmB,EAAA,KACAkD,KAAAqjB,eAAAxmB,EAAA,OAEAwmB,eAAAxmB,EAAA,KAAAwmB,eAAAxmB,EAAA,GAAAwmB,eAAAvmB,EAAA,KAAAumB,eAAAvmB,EAAA,EACA4mB,MAAAF,OAEAE,MAAAD,QAKArP,QAAAwP,YAAA,SAAA1e,WACA,SAAA9I,KAAAoH,QACApH,KAAAkJ,cAAAE,EAAAqe,UAAAznB,KAAAqE,QAAAwD,SAAAiB,YACA9I,KAAAkJ,cAAAlC,KAAA8B,UACA9I,KAAAkE,YAAA0H,SAAA,IAGAoM,OAAAa,YAAA,EACAb,OAAAgB,OAAA,WACA5P,EAAA,aAAAse,QACA1P,OAAAc,UAEA9Y,KAAAsM,sBAAA,SAAApE,UACA8P,OAAAD,iBAAA7P,WAEA8P,OAAA2P,SAAA,SAAAC,QACA,GAAA5P,OAAAa,aAGA7Y,KAAAqE,QAAA8E,UAAA,CAGAnJ,KAAAmH,kBAAA6Q,OAAAa,YAAA,EACA,IAAAgC,QAAAzR,EAAA,WAAAyR,SACAoM,gBACAxmB,EAAAmnB,OAAAV,MAAArM,OAAAjX,KACAlD,EAAA,KAAAknB,OAAAT,MAAAtM,OAAA5C,KAGA,KADA4P,aAAA7P,OAAAY,aACAZ,OAAAe,eAAAjc,QACA+qB,aAAA7P,OAAAe,eAAApI,QAEA3Q,MAAA0I,aAAAue,eAAAxmB,EAAAwmB,eAAAvmB,EAAA,SAAAwH,UACA8P,OAAAD,iBAAA7P,cAGA8P,OAAA8P,mBAAA,SAAApiB,UACA,MAAA,KAAApH,KAAAqI,MAEAtC,QAAA,IACAC,QAAA,IACApE,MAAA,KACAC,OAAA,KACAoE,QAAA,KACAnE,MAAA,KACAwD,KAAA,KACAC,OAAA,KACAC,MAAA,MACA4B,UAEApH,KAAAkmB,iBAAA9e,WAEAsS,OAAA+P,OAAA,mBAAA,WACA/P,OAAAtX,EAAA8G,eACA4B,EAAA,WAAA4e,UAAAjB,UAEA3d,EAAA,WAAA6e,OAAA,YAAAlB,SACAD,IAAAM,UAGApP,OAAA+P,OAAA,oBAAA,WACA/P,OAAAtX,EAAAyG,gBACAiC,EAAA,WAAA4e,UAAAT,YAEAne,EAAA,WAAA6e,OAAA,YAAAV,WACAD,MAAAF,WC9KA,IAAAc,eAAA,WACA,GACAloB,MAAA4lB,OADAuC,QAAA,aACAC,aAAA,aACAxB,SAAAxB,SAAAI,QAAArhB,QA+EA,OA9EAgkB,SAAAhqB,WACAynB,UACA5lB,QACAqoB,WAAA,EACAjC,MAAA,WACApmB,KAAAzB,KAAAyB,KACA4lB,OAAArnB,KAAAqnB,OACA5lB,KAAAyK,gBAAAlM,KACAA,KAAA8pB,UAAAzC,OAAAyC,SACA,IAAArqB,KAAA,EACAO,MAAA+pB,KACA1C,OAAAvZ,KAAA,WAAArO,MAEAsqB,GAAA,WACA,GAAA/iB,SAAAhH,IACAqnB,QAAA0C,GAAA,WAAA/pB,KAAAgqB,UACA3C,OAAA0C,GAAA,oBAAA,WACA/iB,QAAA8iB,WAAA,IAEAzC,OAAA0C,GAAA,aAAA,WACA/iB,QAAA8iB,WAAA,IAEAzC,OAAA0C,GAAA,QAAA,SAAArf,OAEAjJ,KAAA2I,SAAA,EAAA,EAAAyf,aAAAnf,SAEA2c,OAAA0C,GAAA,QAAA,SAAA9nB,OAEAR,KAAA4I,SAAA,EAAA,EAAAwf,aAAA5nB,MACA,IAAAgoB,OAAAhR,OAAAtb,CACA0qB,UAAA7O,iBAAA8O,KAAA2B,OAAA,WACAhoB,MAAAqL,SACA+a,SAAAxiB,0BAAApE,UAIA4lB,OAAA0C,GAAA,qBAAA,WACA9hB,QAAAzH,IAAA,iCACAiB,KAAAsK,mBAAA,IAEAsb,OAAA0C,GAAA,kBAAA,WACAtoB,KAAAsK,mBAAA,IAEAsb,OAAA0C,GAAA,wBAAA,WACA9hB,QAAAzH,IAAA,iDACA6mB,OAAAvZ,KAAA,YAAArM,KAAAwN,YAEAoY,OAAA0C,GAAA,YAAA,SAAA1jB,MACA5E,KAAAkO,SAAAtJ,KACA,IAAA4jB,OAAAhR,OAAAtb,CACAssB,OAAA1P,YAGA2P,IAAA,WACA7C,OAAA0C,GAAA,WAAAF,eAEAG,SAAA,SAAA3jB,MACA4B,QAAAzH,IAAA6F,MACA,SAAAA,OACA5E,KAAAuG,aAAA,QAEAqf,OAAA0C,GAAA,WAAAF,eAEAxd,UAAA,SAAA3B,OAEA2c,OAAAvZ,KAAA,QAAApD,QAEAyB,UAAA,SAAAlK,OAEAolB,OAAAvZ,KAAA,QAAA7L,QAEAA,MAAA,aAGAyI,MAAA,cAIA,GAAAkf,SClFAO,qBAAA,WACA,OACAF,OACAxoB,KAAA,IACA1B,KAAA,KAEAqqB,YAAA,sDAAAC,SACAC,KAAA,SAAAL,OACAhR,OAAA6O,GAAAmC,MACAA,MAAAzsB,EAAAysB,MAAAlqB,KACAkqB,MAAA9nB,EAAA8nB,MAAAxoB,OCVA,IAAA8oB,KAAAC,QAAA/rB,OAAA,kBAAA,eACAwoB,QAAA,SAAA0C,eACAc,WAAA,mBAAA,SAAA,SAAArD,iBAEAmD,KAAAG,OAAA,SAAAC,sBACAA,qBAAAC,YAAA,MACAD,qBAAAE,UAAA,QAGAR,SAAAtnB,KAAAsF,MAAA,KAAAtF,KAAAoD,UAEAqkB,QAAA/rB,OAAA,iBACAqsB,UAAA,aAAAX","file":"application.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar AtBat = (function () {\n    function AtBat(text) {\n        _classCallCheck(this, AtBat);\n\n        this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\n        text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\n        this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\n        this.rbi = text.split(this.text)[1] + '';\n\n        var log = new _baseballUtilityLog.Log();\n\n        var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\n        if (beneficial.indexOf(this.text) > -1) {\n            this.beneficial = true;\n        }\n    }\n\n    _createClass(AtBat, [{\n        key: 'toString',\n        value: function toString() {\n            return '' + this.infield + this.text + this.rbi;\n        }\n    }]);\n\n    return AtBat;\n})();\n\nAtBat.prototype.constructor = AtBat;\nAtBat.prototype.identifier = 'AtBat';\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\nAtBat.prototype.RBI_INDICATOR = '+';\n\nexports.AtBat = AtBat;\n\n},{\"baseball/Utility/Log\":14}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\n/**\n * The baseball field tracks the ball's movement, fielders, and what runners are on\n * @param game\n * @constructor\n */\nvar Field = function Field(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor: Field,\n    init: function init(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    /**\n     * @returns {boolean}\n     */\n    hasRunnersOn: function hasRunnersOn() {\n        return this.first instanceof _baseballModelPlayer.Player || this.second instanceof _baseballModelPlayer.Player || this.third instanceof _baseballModelPlayer.Player;\n    },\n    /**\n     * @param swing\n     * @returns {object}\n     */\n    determineSwingContactResult: function determineSwingContactResult(swing) {\n        var x = swing.x,\n            y = swing.y;\n        /**\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\n         * increase the left/right effect.\n         * @type {number}\n         */\n        var splayAngle = 90 - 1.5 * x + swing.angle * y / 35;\n        var flyAngle = -3 * y - swing.angle * y / 35;\n        var power = this.game.batter.skill.offense.power + (this.game.batter.eye.bonus || 0) / 5;\n        var landingDistance = _baseballServices_services.Distribution.landingDistance(power, flyAngle);\n        if (flyAngle < 0 && landingDistance > 120) {\n            landingDistance = (landingDistance - 120) / 4 + 120;\n        }\n\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        /**\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\n         * @type {number}\n         */\n        swing.splay = splayAngle - 90;\n        swing.sacrificeAdvances = [];\n\n        if (swing.fielder) {\n            var fielder = this.game.half == 'top' ? this.game.teams.home.positions[swing.fielder] : this.game.teams.away.positions[swing.fielder];\n            fielder.fatigue += 4;\n            swing.error = false;\n            var fieldingEase = fielder.skill.defense.fielding / 100,\n                throwingEase = fielder.skill.defense.throwing / 100;\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel * 1.65;\n            if (interceptRating > 0 && flyAngle > 0) {\n                //caught cleanly?\n                if (_baseballServices_services.Distribution.error(fielder)) {\n                    //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    swing.caught = false;\n                } else {\n                    swing.caught = true;\n                    if (this.game.umpire.count.outs < 2) {\n                        var sacrificeThrowInTime = _baseballServices_services.Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, 100);\n                        if (this.first && sacrificeThrowInTime > this.first.getBaseRunningTime() + 2.5) {\n                            swing.sacrificeAdvances.push('first');\n                        }\n                        if (this.second && sacrificeThrowInTime > this.second.getBaseRunningTime()) {\n                            swing.sacrificeAdvances.push('second');\n                        }\n                        if (this.third && sacrificeThrowInTime > this.third.getBaseRunningTime() - 0.5) {\n                            swing.sacrificeAdvances.push('third');\n                        }\n                    }\n                }\n            } else {\n                swing.caught = false;\n            }\n\n            if (!swing.caught) {\n                swing.bases = 0;\n                swing.thrownOut = false; // default value\n                var fieldingReturnDelay = _baseballServices_services.Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, interceptRating);\n                swing.fieldingDelay = fieldingReturnDelay;\n                swing.outFielder = ({ 'left': 1, 'center': 1, 'right': 1 })[swing.fielder] == 1;\n                var speed = this.game.batter.skill.offense.speed,\n                    baseRunningTime = _baseballServices_services.Mathinator.baseRunningTime(speed);\n\n                if (swing.outFielder) {\n                    //log('OF', fieldingReturnDelay.toString().slice(0,4), baseRunningTime.toString().slice(0,4));\n                    swing.bases = 1;\n                    fieldingReturnDelay -= baseRunningTime;\n                    var difficulty = 1.8;\n\n                    while (fieldingReturnDelay > baseRunningTime + difficulty && swing.bases < 3) {\n                        swing.bases++;\n                        difficulty = -1.3;\n                        fieldingReturnDelay -= baseRunningTime;\n                    }\n                } else {\n                    //log('-------- IF', fieldingReturnDelay.toString().slice(0,4), baseRunningTime.toString().slice(0,4));\n                    swing.fieldersChoice = null;\n                    swing.bases = fieldingReturnDelay >= baseRunningTime + 1 ? 1 : 0;\n                    if (this.first && fieldingReturnDelay < this.first.getBaseRunningTime()) swing.fieldersChoice = 'first';\n                    if (this.first && this.second && fieldingReturnDelay < this.second.getBaseRunningTime() + 0.6) swing.fieldersChoice = 'second';\n                    if (this.third && fieldingReturnDelay < this.third.getBaseRunningTime()) swing.fieldersChoice = 'third';\n                    if (swing.fieldersChoice) swing.bases = 1;\n                }\n                swing.thrownOut = swing.bases == 0;\n                if (swing.thrownOut) {\n                    swing.thrownOut = true;\n                    swing.error = false;\n                }\n            }\n        } else {\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        this.game.swingResult = swing;\n        return _baseballServices_services.Animator.animateFieldingTrajectory(this.game);\n    },\n    //printRunnerNames : function() {\n    //    return [this.first ? this.first.getName() : '', this.second ? this.second.getName() : '', this.third ? this.third.getname() : ''];\n    //},\n    /**\n     * @param splayAngle\n     * @param landingDistance\n     * @returns {string|bool}\n     */\n    findFielder: function findFielder(splayAngle, landingDistance) {\n        if (Math.abs(90 - splayAngle) > 50) return false;\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\n            return 'pitcher';\n        }\n        if (landingDistance > 20 && landingDistance + Math.abs(90 - splayAngle) / 90 * 37 < 155) {\n            if (splayAngle < 45 + 23) {\n                return 'third';\n            } else if (splayAngle < 45 + 23 + 23) {\n                return 'short';\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\n                return 'second';\n            } else {\n                return 'first';\n            }\n        } else if (landingDistance > 90 && landingDistance < 310) {\n            if (splayAngle < 45 + 28) {\n                return 'left';\n            } else if (splayAngle < 45 + 28 + 34) {\n                return 'center';\n            } else {\n                return 'right';\n            }\n        } else {\n            return false;\n        }\n    },\n    positions: {\n        pitcher: [90, 66],\n        catcher: [0, 0],\n        first: [90 + 45 - 7, 98],\n        second: [90 + 12.5, 130],\n        short: [90 - 12.5, 130],\n        third: [90 - 45 + 7, 98],\n        left: [45 + 14, 280],\n        center: [90, 280],\n        right: [135 - 14, 280]\n    },\n    getPolarDistance: function getPolarDistance(a, b) {\n        return _baseballServices_services.Mathinator.getPolarDistance(a, b);\n    },\n    fieldingTest: function fieldingTest() {\n        var angle = Math.random() * 90 + 45;\n        var distance = Math.random() * 320;\n        var fielder = this.findFielder(angle, distance);\n        var data = {};\n        if (fielder) {\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\n            data.fielder = fielderCandidates[1];\n            data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\n            data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]]);\n            return data;\n        }\n    },\n    aggregateFieldingTest: function aggregateFieldingTest() {\n        var fielders = {\n            pitcher: { tally: 0, distances: [] },\n            catcher: { tally: 0, distances: [] },\n            first: { tally: 0, distances: [] },\n            second: { tally: 0, distances: [] },\n            short: { tally: 0, distances: [] },\n            third: { tally: 0, distances: [] },\n            left: { tally: 0, distances: [] },\n            center: { tally: 0, distances: [] },\n            right: { tally: 0, distances: [] },\n            'false': { tally: 0, distances: [] }\n        };\n        var selections = [];\n        for (var i = 0; i < 1000; i++) {\n            var angle = Math.random() * 90 + 45;\n            var distance = Math.random() * 320;\n            var fielder = this.findFielder(angle, distance);\n            fielders[fielder].tally++;\n            if (fielder) {\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\n            }\n            selections.push([angle, distance]);\n            selections.push(this.fielderSelectionTest(angle, distance, true));\n        }\n        return [fielders, selections];\n    },\n    fielderSelectionTest: function fielderSelectionTest(angle, distance, returnFielder) {\n        var distances = [];\n        var minDistance = 300;\n        var giraffe = this;\n        var fielder = false;\n        Iterator.each(this.positions, function (position, spot) {\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\n            distances[thisDistance] = position;\n            if (minDistance > thisDistance) {\n                minDistance = thisDistance;\n                fielder = position;\n            }\n        });\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\n    }\n};\n\nexports.Field = Field;\n\n},{\"baseball/Model/Player\":5,\"baseball/Services/_services\":13}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Game = function Game(m) {\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor: Game,\n    gamesIntoSeason: 0,\n    humanControl: 'home', //home, away, both, none\n    console: false,\n    quickMode: true,\n    debug: [],\n    pitcher: {}, // Player&\n    batter: {}, // Player&\n    init: function init(m) {\n        if (m) _baseballUtility_utils.text.mode = m;\n        this.gamesIntoSeason = 1 + Math.floor(Math.random() * 142);\n        this.field = new _baseballModelField.Field(this);\n        this.teams.away = new _baseballModelTeam.Team(this);\n        this.teams.home = new _baseballModelTeam.Team(this);\n        this.log = new _baseballUtilityLog.Log();\n        this.log.game = this;\n        this.debug = [];\n        this.helper = _baseballUtility_utils.helper;\n        while (this.teams.away.name == this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new _baseballModelUmpire.Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n    },\n    getInning: function getInning() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ') : this.half.toUpperCase() + ' ' + this.inning;\n    },\n    humanBatting: function humanBatting() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n        }\n    },\n    humanPitching: function humanPitching() {\n        if (this.humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return this.humanControl == 'both' || this.humanControl == 'home';\n            case 'bottom':\n                return this.humanControl == 'both' || this.humanControl == 'away';\n        }\n    },\n    end: function end() {\n        this.stage = 'end';\n        var e, n;\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!';\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName() + 'の勝利' : this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName() + 'の勝利';\n        if (this.tally.home.R > this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.W++;\n            this.teams.away.positions.pitcher.stats.pitching.L++;\n        } else if (this.tally.home.R < this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.L++;\n            this.teams.away.positions.pitcher.stats.pitching.W++;\n        }\n        this.log.note(e, n);\n        this.log.note('Reload to play again', 'リロるは次の試合へ');\n    },\n    stage: 'pitch', //pitch, swing\n    simulateInput: function simulateInput(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch') {\n            this.autoPitch(callback);\n        } else if (this.stage == 'swing') {\n            if (typeof this.pitchTarget != 'object') {\n                this.pitchTarget = { x: 100, y: 100 };\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    simulatePitchAndSwing: function simulatePitchAndSwing(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        var giraffe = this;\n        setTimeout(function () {\n            if (typeof giraffe.pitchTarget != 'object') {\n                giraffe.pitchTarget = { x: 100, y: 100 };\n            }\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function (callback) {\n                callback();\n            });\n        }, giraffe.field.hasRunnersOn() ? _baseballServices_services.Animator.TIME_FROM_SET + 1200 : _baseballServices_services.Animator.TIME_FROM_WINDUP + 1200);\n    },\n    /**\n     * generically receive click input and decide what to do\n     * @param x\n     * @param y\n     * @param callback\n     */\n    receiveInput: function receiveInput(x, y, callback) {\n        if (this.humanControl == 'none') {\n            return;\n        }\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage == 'swing' && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    autoPitchSelect: function autoPitchSelect() {\n        var pitchName = this.helper.selectRandomPitch();\n        while (!this.pitcher.pitching.hasOwnProperty(pitchName)) {\n            pitchName = this.helper.selectRandomPitch();\n        }\n        var pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    autoPitch: function autoPitch(callback) {\n        var pitcher = this.pitcher,\n            giraffe = this;\n        if (this.stage == 'pitch') {\n            pitcher.windingUp = true;\n            if (!this.console) {\n                $('.baseball').addClass('hide');\n                var windup = $('.windup');\n                windup.css('width', '100%');\n            }\n            this.autoPitchSelect();\n            var pitch = _baseballServices_services.Distribution.pitchLocation(),\n                x = pitch.x,\n                y = pitch.y;\n            if (this.quickMode) {\n                this.thePitch(x, y, callback);\n            } else {\n                windup.animate({ width: 0 }, this.field.hasRunnersOn() ? _baseballServices_services.Animator.TIME_FROM_SET : _baseballServices_services.Animator.TIME_FROM_WINDUP, function () {\n                    !giraffe.console && $('.baseball.pitch').removeClass('hide');\n                    giraffe.thePitch(x, y, callback);\n                    pitcher.windingUp = false;\n                });\n            }\n        }\n    },\n    autoSwing: function autoSwing(deceptiveX, deceptiveY, callback) {\n        var giraffe = this;\n        var bonus = this.batter.eye.bonus || 0,\n            eye = this.batter.skill.offense.eye + 6 * (this.umpire.count.balls + this.umpire.count.strikes) + bonus,\n            convergence,\n            convergenceSum;\n\n        var x = _baseballServices_services.Distribution.centralizedNumber(),\n            y = _baseballServices_services.Distribution.centralizedNumber();\n        if (100 * Math.random() < eye) {\n            convergence = 1.35 * 5 * eye / 100;\n            convergenceSum = 1 + convergence;\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n        } else {\n            convergence = 1.35 * 2 * eye / 100;\n            convergenceSum = 1 + convergence;\n        }\n        x = (deceptiveX * convergence + x) / convergenceSum;\n        y = (deceptiveY * convergence + y) / convergenceSum;\n\n        this.swingResult.x = _baseballServices_services.Distribution.cpuSwing(x, this.pitchInFlight.x, eye);\n        this.swingResult.y = _baseballServices_services.Distribution.cpuSwing(y, this.pitchInFlight.y, eye);\n\n        var swingProbability = _baseballServices_services.Distribution.swingLikelihood(eye, x, y, this.umpire);\n        if (swingProbability < 100 * Math.random()) {\n            x = -20;\n        }\n\n        callback(function () {\n            giraffe.theSwing(x, y);\n        });\n    },\n    opponentConnected: false,\n    waitingCallback: function waitingCallback() {},\n    awaitPitch: function awaitPitch(callback, swingResult) {\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitSwing(swingResult);\n        } else {\n            this.autoPitch(callback);\n        }\n    },\n    awaitSwing: function awaitSwing(x, y, callback, pitchInFlight, pitchTarget) {\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitPitch({\n                inFlight: pitchInFlight,\n                target: pitchTarget\n            });\n        } else {\n            this.autoSwing(x, y, callback);\n        }\n    },\n    thePitch: function thePitch(x, y, callback, override) {\n        if (this.stage == 'pitch') {\n            if (override) {\n                this.pitchInFlight = override.inFlight;\n                this.pitchTarget = override.target;\n                callback = this.waitingCallback;\n            } else {\n                this.pitcher.fatigue++;\n                this.pitchTarget.x = x;\n                this.pitchTarget.y = y;\n\n                this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\n                this.battersEye = _baseballUtility_utils.text.getBattersEye(this);\n\n                var control = this.pitchInFlight.control;\n                this.pitchTarget.x = _baseballServices_services.Distribution.pitchControl(this.pitchTarget.x, control);\n                this.pitchTarget.y = _baseballServices_services.Distribution.pitchControl(this.pitchTarget.y, control);\n\n                if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\n\n                var breakEffect = _baseballServices_services.Distribution.breakEffect(this.pitchInFlight, this.pitcher, this.pitchTarget.x, this.pitchTarget.y);\n\n                this.pitchInFlight.x = breakEffect.x;\n                this.pitchInFlight.y = breakEffect.y;\n            }\n            this.log.notePitch(this.pitchInFlight, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\n                callback();\n            } else {\n                this.awaitSwing(x, y, callback, this.pitchInFlight, this.pitchTarget);\n            }\n        }\n    },\n    battersEye: {\n        e: '',\n        n: ''\n    },\n    theSwing: function theSwing(x, y, callback, override) {\n        if (this.stage == 'swing') {\n            if (override) {\n                this.swingResult = override;\n                callback = this.waitingCallback;\n            } else {\n                this.swingResult = {};\n                var bonus = this.batter.eye.bonus || 0,\n                    eye = this.batter.skill.offense.eye + 6 * (this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n\n                if (x >= 0 && x <= 200) {\n                    this.batter.fatigue++;\n\n                    this.swingResult.x = x - this.pitchInFlight.x;\n                    this.swingResult.y = y - this.pitchInFlight.y;\n                    this.swingResult.angle = this.setBatAngle();\n\n                    var recalculation = _baseballServices_services.Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\n                    var precision = _baseballServices_services.Distribution.swing(eye);\n\n                    this.swingResult.x = Math.abs(recalculation.x) > 20 ? recalculation.x * precision : recalculation.x;\n                    this.swingResult.y = -5 + (recalculation.y < 0 ? recalculation.y * precision : recalculation.y);\n\n                    //log(recalculation.y, precision);\n\n                    this.swingResult.looking = false;\n                    if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\n                        this.swingResult.contact = true;\n                        this.swingResult = this.field.determineSwingContactResult(this.swingResult);\n                        // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\n                        this.debug.push(this.swingResult);\n                    } else {\n                        this.swingResult.contact = false;\n                    }\n                } else {\n                    this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150 && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\n                    this.batter.eye.bonus = Math.max(0, eye - Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\n                    this.swingResult.contact = false;\n                    this.swingResult.looking = true;\n                    this.batter.eye.x = this.pitchInFlight.x;\n                    this.batter.eye.y = this.pitchInFlight.y;\n                }\n            }\n            this.log.noteSwing(this.swingResult);\n            this.stage = 'pitch';\n\n            var half = this.half;\n            var result = this.swingResult;\n            this.umpire.makeCall();\n            emit = false;\n            if (half != this.half) {\n                callback = this.startOpponentPitching;\n                var emit = !override;\n            }\n\n            if (typeof callback == 'function') {\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\n                    callback();\n                    if (emit) {\n                        if (this.opponentService && this.opponentConnected) {\n                            this.opponentService.emitSwing(result);\n                        }\n                    }\n                } else {\n                    this.awaitPitch(callback, result);\n                }\n            }\n        }\n    },\n    setBatAngle: function setBatAngle(x, y) {\n        var giraffe = this;\n        var origin = {\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\n            y: 160\n        };\n        var swing = {\n            x: x ? x : giraffe.pitchInFlight.x + this.swingResult.x,\n            y: y ? y : giraffe.pitchInFlight.y + this.swingResult.y\n        };\n        return _baseballServices_services.Mathinator.battingAngle(origin, swing);\n    },\n    debugOut: function debugOut() {\n        log('slugging', this.debug.filter(function (a) {\n            return a.bases == 1;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 2;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 3;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 4;\n        }).length);\n        log('grounders', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle < -5;\n        }).length);\n        log('grounders thrown out', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle < -5 && a.thrownOut;\n        }).length);\n        log('weak fly hits (thrown out)', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle > 0 && a.thrownOut;\n        }).length);\n        log('good fly hits (not caught)', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle > 0 && !a.thrownOut;\n        }).length);\n\n        var PO = {};\n        this.debug.map(function (a) {\n            if (!PO[a.fielder]) {\n                PO[a.fielder] = 0;\n            }\n            if (!a.bases && a.fielder) {\n                PO[a.fielder]++;\n            }\n        });\n        log('fielding outs', PO);\n\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\n        var atBats = [];\n        hitters.map(function (a) {\n            atBats = atBats.concat(a.atBats);\n        });\n\n        var LO = atBats.filter(function (ab) {\n            return ab == 'LO';\n        }).length;\n        log('line outs', LO);\n        var FO = atBats.filter(function (ab) {\n            return ab == 'FO';\n        }).length;\n        log('fly outs', FO);\n        var GO = atBats.filter(function (ab) {\n            return ab == 'GO';\n        }).length;\n        log('groundouts', GO);\n        var SO = atBats.filter(function (ab) {\n            return ab == 'SO';\n        }).length;\n        log('strikeouts', SO);\n        log('fouls', this.debug.filter(function (a) {\n            return a.foul;\n        }).length);\n    },\n    toData: function toData() {\n        var data = {};\n        data.half = this.half;\n        data.inning = this.inning;\n        data.tally = this.tally;\n        var giraffe = this;\n        var players = this.teams.away.lineup.concat(this.teams.home.lineup);\n        // note: bench not included\n        data.field = {\n            first: players.indexOf(this.field.first),\n            second: players.indexOf(this.field.second),\n            third: players.indexOf(this.field.third)\n        };\n        data.batter = players.indexOf(this.batter);\n        data.deck = players.indexOf(this.deck);\n        data.hole = players.indexOf(this.hole);\n        data.teams = {\n            home: {\n                name: giraffe.teams.home.name,\n                nameJ: giraffe.teams.home.nameJ\n            },\n            away: {\n                name: giraffe.teams.away.name,\n                nameJ: giraffe.teams.away.nameJ\n            }\n        };\n        data.umpire = {\n            says: giraffe.umpire.says,\n            count: {\n                strikes: giraffe.umpire.count.strikes,\n                balls: giraffe.umpire.count.balls,\n                outs: giraffe.umpire.count.outs\n            }\n        };\n        data.players = players.map(function (player) {\n            return player.serialize();\n        });\n        data.log = {\n            pitchRecord: giraffe.log.pitchRecord,\n            record: giraffe.log.record\n        };\n        data.gamesIntoSeason = this.gamesIntoSeason;\n        return data;\n    },\n    fromData: function fromData(data) {\n        this.half = data.half;\n        this.inning = data.inning;\n        this.tally = data.tally;\n        var giraffe = this;\n        var players = data.players.map(function (playerJson, index) {\n            var playerData = JSON.parse(playerJson);\n            if (index > 8) {\n                var side = 'home';\n                index = index - 9;\n            } else {\n                side = 'away';\n            }\n            var player = giraffe.teams[side].positions[playerData.position];\n            player.fromData(playerData);\n            giraffe.teams[side].lineup[index] = player;\n            player.resetStats(data.gamesIntoSeason);\n            return player;\n        });\n        this.field.first = players[data.field.first];\n        this.field.second = players[data.field.second];\n        this.field.third = players[data.field.third];\n        this.batter = players[data.batter];\n        this.deck = players[data.deck];\n        this.hole = players[data.hole];\n        this.umpire.says = data.umpire.says;\n        this.umpire.count = data.umpire.count;\n        this.teams.away.name = data.teams.away.name;\n        this.teams.away.nameJ = data.teams.away.nameJ;\n        this.teams.home.name = data.teams.home.name;\n        this.teams.home.nameJ = data.teams.home.nameJ;\n        this.log.pitchRecord = data.log.pitchRecord;\n        this.log.record = data.log.record;\n        this.log.stabilizeShortRecord();\n        this.gamesIntoSeason = data.gamesIntoSeason;\n        return this;\n    },\n    startOpponentPitching: null, // late function\n    pitchTarget: { x: 100, y: 100 },\n    pitchInFlight: {\n        x: 100,\n        y: 100,\n        breakDirection: [0, 0],\n        name: 'slider',\n        velocity: 50,\n        'break': 50,\n        control: 50\n    },\n    swingResult: {\n        x: 100, //difference to pitch location\n        y: 100, //difference to pitch location\n        strike: false,\n        foul: false,\n        caught: false,\n        contact: false,\n        looking: true,\n        bases: 0,\n        fielder: 'short',\n        outs: 0\n    },\n    pitchSelect: function pitchSelect() {},\n    field: null,\n    teams: {\n        away: null,\n        home: null\n    },\n    log: null,\n    half: 'top',\n    inning: 1,\n    scoreboard: {\n        away: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        },\n        home: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        }\n    },\n    resetTally: function resetTally() {\n        this.tally = {\n            away: {\n                H: 0,\n                R: 0,\n                E: 0\n            },\n            home: {\n                H: 0,\n                R: 0,\n                E: 0\n            }\n        };\n    },\n    tally: {\n        away: {\n            H: 0,\n            R: 0,\n            E: 0\n        },\n        home: {\n            H: 0,\n            R: 0,\n            E: 0\n        }\n    }\n};\n\nexports.Game = Game;\n\n},{\"baseball/Model/Field\":2,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7,\"baseball/Services/_services\":13,\"baseball/Utility/Log\":14,\"baseball/Utility/_utils\":15}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Manager = function Manager(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor: Manager,\n    init: function init(team) {\n        this.team = team;\n    },\n    makeLineup: function makeLineup() {\n        var jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        this.team.positions.pitcher.number = jerseyNumber++;\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], 'right');\n        this.team.positions.catcher.position = 'catcher';\n        this.team.positions.catcher.number = jerseyNumber++;\n        _baseballServices_services.Iterator.each(this.team.bench, function (key, player) {\n            player.number = jerseyNumber++;\n        });\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'left');\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill: function selectForSkill(pool, skillset, requiredThrowingHandedness) {\n        if (this.team.bench.length || pool == this.team.positions) {\n            var selection = this.team.bench[0];\n            var rating = 0;\n            var index = 0;\n            _baseballServices_services.Iterator.each(pool, function (key, player) {\n                var skills = skillset.slice();\n                var cursor = player.skill;\n                var property = skills.shift();\n                while (property) {\n                    cursor = cursor[property];\n                    property = skills.shift();\n                }\n                if (!(player.order + 1) && cursor >= rating && (!requiredThrowingHandedness || player.throws == requiredThrowingHandedness)) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            if (pool == this.team.bench) {\n                delete this.team.bench[index];\n                this.team.bench = this.team.bench.filter(function (player) {\n                    return player instanceof selection.constructor;\n                });\n            }\n            return selection;\n        }\n        return 'no players available';\n    }\n};\n\nexports.Manager = Manager;\n\n},{\"baseball/Services/_services\":13}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar _baseballModel_models = require('baseball/Model/_models');\n\nvar Player = function Player(team) {\n    this.init(team);\n    this.resetStats(this.team.game.gamesIntoSeason);\n};\n\nPlayer.prototype = {\n    constructor: Player,\n    init: function init(team, hero) {\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = { averaging: [] };\n        this.number = 0;\n        this.randomizeSkills(hero || Math.random() > 0.9);\n        var surnameKey = Math.floor(Math.random() * _baseballUtility_utils.data.surnames.length),\n            nameKey = Math.floor(Math.random() * _baseballUtility_utils.data.names.length);\n\n        this.name = _baseballUtility_utils.data.surnames[surnameKey] + ' ' + _baseballUtility_utils.data.names[nameKey];\n        var jSurname = _baseballUtility_utils.data.surnamesJ[surnameKey],\n            jGivenName = _baseballUtility_utils.data.namesJ[nameKey];\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surname = _baseballUtility_utils.data.surnames[surnameKey];\n        this.surnameJ = _baseballUtility_utils.data.surnamesJ[surnameKey];\n        this.atBats = [];\n    },\n    serialize: function serialize() {\n        var team = this.team;\n        delete this.team;\n        var data = JSON.stringify(this);\n        this.team = team;\n        return data;\n    },\n    fromData: function fromData(data) {\n        var giraffe = this;\n        _baseballServices_services.Iterator.each(data, function (key, value) {\n            giraffe[key] = value;\n        });\n    },\n    resetStats: function resetStats() {\n        var gamesIntoSeason = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n        var offense = this.skill.offense;\n        var defense = this.skill.defense;\n        var randBetween = function randBetween(a, b, skill) {\n            var total = 0,\n                count = 0;\n            skill += '';\n            if (!skill) skill = '';\n            _baseballServices_services.Iterator.each(skill.split(' '), function (key, value) {\n                var skill = value;\n                if (offense[skill]) skill = offense[skill];\n                if (defense[skill]) skill = defense[skill];\n                if (isNaN(skill)) skill = 50;\n                total += skill;\n                count++;\n            });\n\n            skill = Math.sqrt(0.05 + Math.random() * 0.95) * (total / (count * 0.97));\n            return Math.floor(skill / 100 * (b - a) + a);\n        };\n        var IP, ER, GS, W, L;\n        if (this.skill.pitching > 65) {\n            IP = (this.skill.pitching - 65) * gamesIntoSeason / 20;\n            ER = IP / 9 * randBetween(800, 215, this.skill.pitching) / 100;\n            if (IP > gamesIntoSeason) {\n                //starter\n                GS = Math.floor(gamesIntoSeason / 5);\n                W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching / 1.20);\n                L = randBetween(GS - W, 0, this.skill.pitching / 3);\n            } else {\n                //reliever\n                GS = Math.floor(gamesIntoSeason / 40);\n                W = randBetween(0, GS * 0.6, this.skill.pitching);\n                L = randBetween(GS - W, 0, this.skill.pitching);\n            }\n        }\n        var pa = randBetween(gamesIntoSeason * 3, gamesIntoSeason * 5, 'speed eye');\n        var paRemaining = pa;\n        var bb = Math.floor(randBetween(0, 18, 'power eye') * paRemaining / 100);\n        paRemaining -= bb;\n        var ab = paRemaining;\n        var so = Math.floor(randBetween(25, 2, 'eye') * paRemaining / 100);\n        paRemaining -= so;\n        var h = Math.floor(randBetween(185, 472, 'eye power speed') * paRemaining / 1000);\n        paRemaining -= h;\n\n        var doubles = randBetween(0, h / 4, 'power speed');\n        var triples = randBetween(0, h / 12, 'speed');\n        var hr = Math.max(0, randBetween(-h / 20, h / 5, 'power eye'));\n        var r = randBetween(h / 8, (h + bb) / 3, 'speed') + hr;\n        var rbi = randBetween(h / 8, h / 2, 'power eye') + hr;\n        var hbp = randBetween(0, gamesIntoSeason / 25);\n        var sac = randBetween(0, gamesIntoSeason / 5, 'eye');\n\n        var chances = randBetween(0, gamesIntoSeason * 10, 'fielding');\n        var E = randBetween(chances / 10, 0, 'fielding');\n        var PO = chances - E;\n\n        this.stats = {\n            pitching: {\n                pitches: 0, // in game\n                GS: GS,\n                W: W,\n                L: L,\n                strikes: 0, // in game\n                K: 0, // in game\n                getK9: function getK9() {\n                    return this.K / (this.IP[0] / 9);\n                },\n                getERA: function getERA() {\n                    return 9 * this.ER / Math.max(1 / 3, this.IP[0] + this.IP[1] / 3);\n                },\n                ERA: null,\n                ER: ER,\n                H: 0, // in game\n                HR: 0, // in game\n                BB: 0, // in game\n                IP: [IP, 0],\n                WHIP: 0,\n                getWHIP: function getWHIP() {\n                    return (this.H + this.BB) / (this.IP[0] ? this.IP[0] : 1);\n                }\n            },\n            batting: {\n                getBA: function getBA() {\n                    return this.h / Math.max(1, this.ab);\n                },\n                ba: null,\n                getOBP: function getOBP() {\n                    return (this.h + this.bb + this.hbp) / (this.ab + this.bb + this.hbp + this.sac);\n                },\n                obp: null,\n                getSLG: function getSLG() {\n                    return (this.h - this['2b'] - this['3b'] - this.hr + 2 * this['2b'] + 3 * this['3b'] + 4 * this.hr) / this.ab;\n                },\n                slg: null,\n                pa: pa,\n                ab: ab,\n                so: so,\n                bb: bb,\n                h: h,\n                '2b': doubles,\n                '3b': triples,\n                hr: hr,\n                r: r,\n                rbi: rbi,\n                hbp: hbp,\n                sac: sac\n            },\n            fielding: {\n                E: E,\n                PO: PO, // should depend on position\n                A: Math.floor(Math.random() * 5) + 1 // ehh should depend on position\n            }\n        };\n        this.stats.pitching.ERA = this.stats.pitching.getERA();\n        this.stats.pitching.K9 = this.stats.pitching.getK9();\n        this.stats.pitching.WHIP = this.stats.pitching.getWHIP();\n        this.stats.batting.ba = this.stats.batting.getBA();\n    },\n    atBatObjects: [],\n    getAtBats: function getAtBats() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            this.atBatObjects = this.atBats.map(function (item) {\n                return new _baseballModel_models.AtBat(item);\n            });\n        }\n        return this.atBatObjects;\n    },\n    recordRBI: function recordRBI() {\n        this.atBats[this.atBats.length - 1] += _baseballModel_models.AtBat.prototype.RBI_INDICATOR;\n    },\n    recordInfieldHit: function recordInfieldHit() {\n        this.atBats[this.atBats.length - 1] += _baseballModel_models.AtBat.prototype.INFIELD_HIT_INDICATOR;\n    },\n    getBaseRunningTime: function getBaseRunningTime() {\n        return _baseballServices_services.Mathinator.baseRunningTime(this.skill.offense.speed);\n    },\n    randomizeSkills: function randomizeSkills(hero) {\n        this.hero = hero;\n        var giraffe = this;\n        var randValue = function randValue(isPitching) {\n            var value = Math.floor(Math.pow(Math.random(), 0.75) * 80 + Math.random() * 20);\n            if (hero) {\n                value += Math.floor((100 - value) * Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value;\n        };\n        this.skill.offense = {\n            eye: randValue(),\n            power: randValue(),\n            speed: randValue()\n        };\n        this.skill.defense = {\n            catching: randValue(),\n            fielding: randValue(),\n            speed: randValue(),\n            throwing: randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity: randValue(true),\n            'break': randValue(true),\n            control: randValue(true)\n        };\n        this.pitching.slider = {\n            velocity: randValue(true),\n            'break': randValue(true),\n            control: randValue(true)\n        };\n        if (Math.random() < 0.17) {\n            // can pitch!\n            if (Math.random() > 0.6) {\n                this.pitching['2-seam'] = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.18) {\n                this.pitching.fork = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() > 0.77) {\n                this.pitching.cutter = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.21) {\n                this.pitching.sinker = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.4) {\n                this.pitching.curve = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.9) {\n                this.pitching.change = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n        }\n        this.skill.pitching = Math.floor(this.pitching.averaging.reduce(function (prev, current) {\n            return prev + current;\n        }) / this.pitching.averaging.length + this.pitching.averaging.length * 3);\n        delete this.pitching.averaging;\n    },\n    getSurname: function getSurname() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.surnameJ : this.surname;\n    },\n    getName: function getName() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber: function getUniformNumber() {\n        return (0, _baseballUtility_utils.text)('#') + this.number;\n    },\n    getOrder: function getOrder() {\n        return (0, _baseballUtility_utils.text)([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\n    },\n    eye: {},\n    fatigue: 0,\n    name: '',\n    number: 0,\n    position: '',\n    atBats: []\n};\n\nexports.Player = Player;\n\n},{\"baseball/Model/_models\":8,\"baseball/Services/_services\":13,\"baseball/Utility/_utils\":15}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar Team = function Team(game) {\n    this.init(game);\n};\n\nTeam.prototype = {\n    constructor: Team,\n    init: function init(game) {\n        this.pickName();\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher: null,\n            catcher: null,\n            first: null,\n            second: null,\n            short: null,\n            third: null,\n            left: null,\n            center: null,\n            right: null\n        };\n        this.game = game;\n        for (var j = 0; j < 20; j++) {\n            this.bench.push(new _baseballModelPlayer.Player(this));\n        }\n        if (this.bench.length == 20) {\n            this.manager = new _baseballModelManager.Manager(this);\n            this.manager.makeLineup();\n        }\n    },\n    pickName: function pickName() {\n        var teamNameIndex = Math.floor(Math.random() * _baseballUtility_utils.data.teamNames.length);\n        this.name = _baseballUtility_utils.data.teamNames[teamNameIndex];\n        this.nameJ = _baseballUtility_utils.data.teamNamesJ[teamNameIndex];\n    },\n    getName: function getName() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.nameJ : this.name;\n    },\n    lineup: [],\n    positions: {},\n    manager: null,\n    bench: [],\n    bullpen: [],\n    nowBatting: 0,\n    expanded: 'Player&'\n};\n\nexports.Team = Team;\n\n},{\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Utility/_utils\":15}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar Umpire = function Umpire(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor: Umpire,\n    init: function init(game) {\n        this.game = game;\n        this.playBall();\n    },\n    count: {\n        strikes: 0,\n        balls: 0,\n        outs: 0\n    },\n    playBall: function playBall() {\n        this.game.half = 'top';\n        this.game.inning = 1;\n        this.game.batter = this.game.teams.away.lineup[0];\n        this.game.batterRunner = this.game.teams.away.lineup[0];\n        this.game.deck = this.game.teams.away.lineup[1];\n        this.game.hole = this.game.teams.away.lineup[2];\n        this.game.pitcher = this.game.teams.home.positions.pitcher;\n        var n = '一回のオモテ、' + this.game.teams.away.getName() + 'の攻撃対' + this.game.teams.home.getName() + '、ピッチャーは' + this.game.teams.home.positions.pitcher.getName() + '。',\n            e = 'Top 1, ' + this.game.teams.away.name + ' offense vs. ' + this.game.teams.home.positions.pitcher.name + ' starting for ' + this.game.teams.home.name;\n        this.game.log.note(e, n);\n        this.game.log.noteBatter(this.game.batter);\n    },\n    makeCall: function makeCall() {\n        this.says = '';\n\n        var result = this.game.swingResult;\n        var pitcher = this.game.pitcher;\n        var batter = this.game.batter;\n\n        if (this.game.swingResult.fielder) {\n            var fielder = this.game.teams[this.game.half == 'top' ? 'home' : 'away'].positions[result.fielder];\n        } else {\n            fielder = null;\n        }\n\n        this.game.batterRunner = this.game.batter;\n\n        pitcher.stats.pitching.pitches++;\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            if (result.contact) {\n                if (result.caught) {\n                    batter.stats.batting.pa++;\n                    pitcher.stats.pitching.IP[1]++;\n                    if (result.sacrificeAdvances.length && this.count.outs < 2) {\n                        batter.stats.batting.sac++;\n                        this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.SACRIFICE);\n                        this.advanceRunners(false, null, result.sacrificeAdvances);\n                    } else {\n                        batter.stats.batting.ab++;\n                        if (result.flyAngle < 15) {\n                            this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.LINEOUT);\n                        } else {\n                            this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.FLYOUT);\n                        }\n                    }\n                    this.count.outs++;\n                    this.newBatter();\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        pitcher.stats.pitching.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.fieldersChoice && this.count.outs < 2) {\n                            result.bases = 0;\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.FIELDERS_CHOICE);\n                            this.advanceRunners(false, result.fieldersChoice);\n                            this.reachBase();\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        } else if (result.fieldersChoice) {\n                            result.bases = 0;\n                            result.thrownOut = true;\n                        }\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GROUNDOUT);\n                            if (this.count.outs < 3) {\n                                this.advanceRunners(false);\n                            }\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        }\n                        if (result.hitByPitch) {\n                            batter.stats.batting.ab--;\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                this.game.tally[this.game.half == 'top' ? 'away' : 'home'][_baseballUtility_utils.Log.prototype.SINGLE]++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    this.game.tally[this.game.half == 'top' ? 'home' : 'away'].E++;\n                                    fielder.stats.fielding.E++;\n                                }\n                            }\n                            var bases = result.bases;\n                            switch (bases) {\n                                case 0:\n                                    this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GROUNDOUT);\n                                    break;\n                                case 1:\n                                    if (result.error) {\n                                        this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.REACHED_ON_ERROR);\n                                    } else {\n                                        this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.SINGLE);\n                                        batter.stats.batting.h++;\n                                    }\n                                    break;\n                                case 2:\n                                    this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.DOUBLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3:\n                                    this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.TRIPLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4:\n                                    this.game.batter.atBats.push(_baseballUtility_utils.Log.prototype.HOMERUN);\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            if (bases > 0 && bases < 4 && !result.error) {\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\n                                    batter.recordInfieldHit();\n                                }\n                            }\n                            if (bases >= 1) {\n                                this.advanceRunners();\n                                this.reachBase();\n                                bases -= 1;\n                            }\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                pitcher.stats.pitching.strikes++;\n                this.count.strikes++;\n            }\n        }\n\n        this.says = this.count.balls + ' and ' + this.count.strikes;\n\n        result.outs = this.count.outs;\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            batter.atBats.push(_baseballUtility_utils.Log.prototype.STRIKEOUT);\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            batter.atBats.push(_baseballUtility_utils.Log.prototype.WALK);\n            this.advanceRunners(true).reachBase().newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    reachBase: function reachBase() {\n        this.game.field.first = this.game.batter;\n        this.game.field.first.fatigue += 2;\n        return this;\n    },\n    advanceRunners: function advanceRunners(isWalk, fieldersChoice, sacrificeAdvances) {\n        isWalk = !!isWalk;\n        var first = this.game.field.first,\n            second = this.game.field.second,\n            third = this.game.field.third,\n            game = this.game,\n            swing = this.game.swingResult;\n\n        if (isWalk) {\n            if (first) {\n                if (second) {\n                    if (third) {\n                        //bases loaded\n                        game.batter.recordRBI();\n                        game.batter.stats.batting.rbi++;\n                        third.atBats.push(_baseballUtility_utils.Log.prototype.RUN);\n                        third.stats.batting.r++;\n                        game.pitcher.stats.pitching.ER++;\n                        game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\n                        game.tally[game.half == 'top' ? 'away' : 'home'].R++;\n                        game.field.third = second;\n                        game.field.second = first;\n                        first = null;\n                    } else {\n                        // 1st and second\n                        game.field.third = second;\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                } else {\n                    if (third) {\n                        // first and third\n                        game.field.second = first;\n                        game.field.first = null;\n                    } else {\n                        // first only\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n                if (fieldersChoice) {\n                    game.field[fieldersChoice] = null;\n                    first = this.game.field.first;\n                    second = this.game.field.second;\n                    third = this.game.field.third;\n                }\n                var canAdvance = function canAdvance() {\n                    return true;\n                };\n                if (sacrificeAdvances) {\n                    canAdvance = function (position) {\n                        switch (position) {\n                            case 'first':\n                                return sacrificeAdvances.indexOf('first') > -1 && (canAdvance('second') || !second);\n                            case 'second':\n                                return sacrificeAdvances.indexOf('second') > -1 && (canAdvance('third') || !third);\n                            case 'third':\n                                return sacrificeAdvances.indexOf('third') > -1;\n                        }\n                    };\n                }\n                if (third instanceof _baseballModelPlayer.Player && canAdvance('third')) {\n                    // run scored\n                    game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\n                    game.tally[game.half == 'top' ? 'away' : 'home'].R++;\n                    if (game.batter != third) {\n                        game.batter.recordRBI();\n                        third.atBats.push(_baseballUtility_utils.Log.prototype.RUN);\n                    }\n                    game.batter.stats.batting.rbi++;\n                    third.stats.batting.r++;\n                    game.pitcher.stats.pitching.ER++;\n                }\n                if (second && canAdvance('second')) {\n                    game.field.third = second;\n                } else {\n                    game.field.third = null;\n                }\n                if (first && canAdvance('first')) {\n                    game.field.second = first;\n                } else {\n                    game.field.second = null;\n                }\n                game.field.first = null;\n            }\n        return this;\n    },\n    newBatter: function newBatter() {\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        this.game.log.notePlateAppearanceResult(this.game);\n        var team = this.game.half == 'bottom' ? this.game.teams.home : this.game.teams.away;\n        this.game.batter = team.lineup[(team.nowBatting + 1) % 9];\n        this.game.deck = team.lineup[(team.nowBatting + 2) % 9];\n        this.game.hole = team.lineup[(team.nowBatting + 3) % 9];\n        team.nowBatting = (team.nowBatting + 1) % 9;\n        if (this.count.outs < 3) {\n            this.game.log.noteBatter(this.game.batter);\n        }\n    },\n    changeSides: function changeSides() {\n        this.game.swingResult = {};\n        this.game.swingResult.looking = true; // hide bat\n        this.game.pitchInFlight.x = null; // hide ball\n        this.game.pitchInFlight.y = null; // hide ball\n        this.game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        var offense, defense;\n        this.game.field.first = null;\n        this.game.field.second = null;\n        this.game.field.third = null;\n        if (this.game.half == 'top') {\n            if (this.game.inning == 9 && this.game.tally.home.R > this.game.tally.away.R) {\n                return this.game.end();\n            }\n            this.game.half = 'bottom';\n        } else {\n            if (this.game.inning + 1 > 9) {\n                return this.game.end();\n            }\n            this.game.inning++;\n            this.game.half = 'top';\n        }\n        offense = this.game.half == 'top' ? 'away' : 'home';\n        defense = this.game.half == 'top' ? 'home' : 'away';\n        var n = this.game.inning + '回の' + (this.game.half == 'top' ? 'オモテ' : 'ウラ') + '、' + this.game.teams[this.game.half == 'top' ? 'away' : 'home'].getName() + 'の攻撃。',\n            e = (this.game.half == 'top' ? 'Top' : 'Bottom') + ' ' + this.game.inning;\n        this.game.log.note(e, n);\n        var team = this.game.teams[offense];\n        this.game.batter = team.lineup[team.nowBatting];\n        this.game.batterRunner = this.game.batter;\n        this.game.deck = team.lineup[(team.nowBatting + 1) % 9];\n        this.game.hole = team.lineup[(team.nowBatting + 2) % 9];\n\n        this.game.pitcher = this.game.teams[defense].positions.pitcher;\n        this.game.log.noteBatter(this.game.batter);\n        this.game.autoPitchSelect();\n    },\n    says: 'Play ball!',\n    game: null\n};\n\nexports.Umpire = Umpire;\n\n},{\"baseball/Model/Player\":5,\"baseball/Utility/_utils\":15}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballModelAtBat = require('baseball/Model/AtBat');\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelGame = require('baseball/Model/Game');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nexports.AtBat = _baseballModelAtBat.AtBat;\nexports.Field = _baseballModelField.Field;\nexports.Game = _baseballModelGame.Game;\nexports.Manager = _baseballModelManager.Manager;\nexports.Player = _baseballModelPlayer.Player;\nexports.Team = _baseballModelTeam.Team;\nexports.Umpire = _baseballModelUmpire.Umpire;\n\n},{\"baseball/Model/AtBat\":1,\"baseball/Model/Field\":2,\"baseball/Model/Game\":3,\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballServices_services = require('baseball/services/_services');\n\nvar Animator = function Animator() {\n    this.init();\n};\nAnimator.TweenMax = {};\nAnimator.prototype = {\n    identifier: 'Animator',\n    constructor: Animator,\n    console: false,\n    TweenMax: {},\n    init: function init() {},\n    loadTweenMax: function loadTweenMax() {\n        if (this.console || typeof window !== 'object') {\n            Animator.TweenMax = {\n                'set': function set() {},\n                'to': function to() {},\n                'from': function from() {},\n                killAll: function killAll() {}\n            };\n        } else {\n            Animator.TweenMax = window.TweenMax;\n        }\n        return Animator.TweenMax;\n    },\n    TIME_FROM_SET: 2300, //ms\n    TIME_FROM_WINDUP: 3600, //ms\n    HOLD_UP_ALLOWANCE: 4.5, // seconds\n    pitchTarget: null,\n    pitchBreak: null,\n    /**\n     * this is called from the scope context\n     * @param callback\n     */\n    updateFlightPath: function updateFlightPath(callback) {\n        if (Animator.console) return;\n        var TweenMax = Animator.loadTweenMax();\n        var $scope = this,\n            game = $scope.y,\n            top = 200 - game.pitchTarget.y,\n            left = game.pitchTarget.x,\n            breakTop = 200 - game.pitchInFlight.y,\n            breakLeft = game.pitchInFlight.x,\n            $baseballs = $('.baseball'),\n            flightSpeed = 1.3 - 0.6 * (game.pitchInFlight.velocity + 300) / 400,\n            originTop = 50,\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\n        var pitch = this.pitchTarget = $('.main-area .target .baseball.pitch'),\n            henka = this.pitchBreak = $('.main-area .target .baseball.break'),\n            quarter = flightSpeed / 4;\n\n        var pitchTransition = _baseballServices_services.Mathinator.pitchTransition(top, left, originTop, originLeft, quarter);\n\n        var transitions = [pitchTransition(0, 0), pitchTransition(10, 0), pitchTransition(30, 1), pitchTransition(50, 2), pitchTransition(100, 3), pitchTransition(100, 3, breakTop, breakLeft)];\n\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\n        //$('.baseball').addClass('spin');\n        //$('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\n\n        TweenMax.set([pitch, henka], transitions[0]);\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\n        TweenMax.to(pitch, quarter, transitions[4]);\n        TweenMax.to(henka, quarter, transitions[5]);\n\n        $scope.lastTimeout = setTimeout(function () {\n            $scope.allowInput = true;\n            if (typeof callback == 'function') {\n                callback();\n                $scope.$apply();\n            }\n        }, flightSpeed * 1000);\n\n        if (!game.pitchInFlight.x) {\n            $baseballs.addClass('hide');\n        } else {\n            if (game.humanBatting() && Math.random() * 180 > game.batter.skill.offense.eye) {\n                $('.baseball.break').addClass('hide');\n            } else {\n                $('.baseball.break').removeClass('hide');\n            }\n            $('.baseball.pitch').removeClass('hide');\n        }\n\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\n            $scope.holdUpTimeouts.push(setTimeout(function () {\n                $scope.holdUp();\n            }, (flightSpeed + Animator.HOLD_UP_ALLOWANCE) * 1000));\n        }\n    },\n    animateFieldingTrajectory: function animateFieldingTrajectory(game) {\n        this.init();\n        if (Animator.console) return game.swingResult;\n        var TweenMax = Animator.loadTweenMax();\n        var ball = $('.splay-indicator-ball');\n        TweenMax.killAll();\n        var result = game.swingResult;\n\n        var linearApproximateDragScalar = {\n            distance: 1,\n            apexHeight: 0.57,\n            airTime: 0.96\n        };\n\n        var angle = result.flyAngle,\n            distance = Math.abs(result.travelDistance),\n            scalar = result.travelDistance < 0 ? -1 : 1;\n\n        _baseballServices_services.Mathinator.memory.bounding = angle < 0;\n        angle = 1 + Math.abs(angle);\n        if (angle > 90) angle = 180 - angle;\n\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2 * Math.PI * angle / 180));\n        var velocityVerticalComponent = Math.sin(_baseballServices_services.Mathinator.RADIAN * angle) * velocity;\n        var apexHeight = velocityVerticalComponent * velocityVerticalComponent / (2 * 9.81) * linearApproximateDragScalar.apexHeight;\n        var airTime = Math.sqrt(2 * apexHeight / 9.81) * linearApproximateDragScalar.airTime;\n\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\n        var quarter = airTime / 4;\n        var mathinator = new _baseballServices_services.Mathinator();\n        var transitions = [mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay), mathinator.transitionalTrajectory(25, quarter, 0), mathinator.transitionalTrajectory(50, quarter, 1), mathinator.transitionalTrajectory(75, quarter, 2), mathinator.transitionalTrajectory(100, quarter, 3)];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, quarter, transitions[1]);\n        TweenMax.to(ball, quarter, transitions[2]);\n        TweenMax.to(ball, quarter, transitions[3]);\n        TweenMax.to(ball, quarter, transitions[4]);\n\n        return game.swingResult;\n    }\n};\n\nfor (var fn in Animator.prototype) {\n    if (Animator.prototype.hasOwnProperty(fn)) {\n        Animator[fn] = Animator.prototype[fn];\n    }\n}\n\nexports.Animator = Animator;\n\n},{\"baseball/services/_services\":21}],10:[function(require,module,exports){\n/**\n * For Probability!\n * @constructor\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Distribution = function Distribution() {};\n\nDistribution.prototype = {\n    identifier: 'Distribution',\n    constructor: Distribution,\n    /**\n     * @param scale {number}\n     * @returns {number}\n     */\n    chance: function chance(scale) {\n        if (!scale) scale = 1;\n        return Math.random() * scale;\n    },\n    /**\n     * @param fielder {Player}\n     * @returns {boolean}\n     */\n    error: function error(fielder) {\n        return (100 - fielder.skill.defense.fielding) * 0.40 + 4 > Math.random() * 100;\n    },\n    /**\n     * @param power\n     * @param flyAngle\n     * @returns {number}\n     */\n    landingDistance: function landingDistance(power, flyAngle) {\n        return (10 + power / 2 + Math.random() * 310 + power / 100 * 30) * (1 - Math.abs(flyAngle - 30) / 60);\n    },\n    /**\n     * @returns {{x: number, y: number}}\n     */\n    pitchLocation: function pitchLocation() {\n        var x, y;\n        if (Math.random() < 0.5) {\n            x = 50 + Math.floor(Math.random() * 70) - Math.floor(Math.random() * 15);\n        } else {\n            x = 150 + Math.floor(Math.random() * 15) - Math.floor(Math.random() * 70);\n        }\n        y = 30 + (170 - Math.floor(Math.sqrt(Math.random() * 28900)));\n        return { x: x, y: y };\n    },\n    /**\n     * swing centering basis\n     * @returns {number}\n     */\n    centralizedNumber: function centralizedNumber() {\n        return 100 + Math.floor(Math.random() * 15) - Math.floor(Math.random() * 15);\n    },\n    /**\n     * @param eye {Player.skill.offense.eye}\n     * @param x\n     * @param y\n     * @param umpire {Umpire}\n     */\n    swingLikelihood: function swingLikelihood(eye, x, y, umpire) {\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y)) / 2;\n        if (x < 60 || x > 140 || y < 50 || y > 150) {\n            // ball\n            swingLikelihood = Math.min(swingLikelihood, 100 - eye) - 15 * umpire.count.balls;\n        } else {\n            swingLikelihood = Math.max(45, (2 * swingLikelihood + eye) / 3);\n        }\n        return swingLikelihood - 35 + 10 * (umpire.count.balls + 2 * umpire.count.strikes);\n    },\n    /**\n     * @param target {number} 0-200\n     * @param control {number} 0-100\n     * @returns {number}\n     */\n    pitchControl: function pitchControl(target, control) {\n        return Math.min(199.9, Math.max(0.1, target + (50 - Math.random() * 100) / (1 + control / 100)));\n    },\n    /**\n     * @param pitch {Game.pitchInFlight}\n     * @param pitcher {Player}\n     * @param x {number}\n     * @param y {number}\n     * @returns {object|{x: number, y: number}}\n     */\n    breakEffect: function breakEffect(pitch, pitcher, x, y) {\n        var effect = {};\n        effect.x = Math.floor(x + pitch.breakDirection[0] * (0.8 + Math.random() * pitcher.pitching[pitch.name]['break'] / 250));\n        effect.y = Math.floor(y + pitch.breakDirection[1] * (0.8 + Math.random() * pitcher.pitching[pitch.name]['break'] / 250 / (0.5 + y / 200)));\n        return effect;\n    },\n    /**\n     * Determine the swing target along an axis\n     * @param target {number} 0-200\n     * @param actual {number} 0-200\n     * @param eye {number} 0-100\n     * @returns {number} 0-200\n     */\n    cpuSwing: function cpuSwing(target, actual, eye) {\n        eye = Math.max(eye, 100);\n        return 100 + (target - 100) * (0.5 + Math.random() * eye / 200) - actual;\n    },\n    /**\n     * Determine the swing scalar\n     * @param eye {number} 0-100\n     * @returns {number}\n     */\n    swing: function swing(eye) {\n        return 100 / (eye + 25 + Math.random() * 50);\n    }\n};\n\nfor (var fn in Distribution.prototype) {\n    if (Distribution.prototype.hasOwnProperty(fn)) {\n        Distribution[fn] = Distribution.prototype[fn];\n    }\n}\n\nexports.Distribution = Distribution;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Iterator = function Iterator() {};\n\nIterator.prototype = {\n    identifier: 'Iterator',\n    constructor: Iterator,\n    each: function each(collection, map) {\n        var keys, i;\n        if (collection instanceof Array) {\n            for (i = 0; i < collection.length; i++) {\n                map(i, collection[i]);\n            }\n        } else {\n            keys = Object.keys(collection);\n            for (i = 0; i < keys.length; i++) {\n                map(keys[i], collection[keys[i]]);\n            }\n        }\n    }\n};\n\nfor (var fn in Iterator.prototype) {\n    if (Iterator.prototype.hasOwnProperty(fn)) {\n        Iterator[fn] = Iterator.prototype[fn];\n    }\n}\n\nexports.Iterator = Iterator;\n\n},{}],12:[function(require,module,exports){\n/**\n * For Math!\n * @constructor\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Mathinator = function Mathinator() {};\n\n/**\n * @param n\n * @returns {number}\n */\nMathinator.square = function (n) {\n    return n * n;\n};\n\nMathinator.prototype = {\n    identifier: 'Mathinator',\n    constructor: Mathinator,\n    /**\n     * CONST\n     */\n    RADIAN: Math.PI / 180,\n    SPLAY_INDICATOR_LEFT: -4,\n    /**\n     * @param offset {{x: number, y: number}}\n     * @param angle {number}\n     * @returns {{x: number, y: number}}\n     */\n    getAngularOffset: function getAngularOffset(offset, angle) {\n        var xScalar = offset.x < 0 ? -1 : 1,\n            yScalar = offset.y < 0 ? -1 : 1;\n        var originalAngle = Math.atan(offset.x / offset.y) / this.RADIAN;\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\n        return {\n            x: angledX,\n            y: angledY\n        };\n    },\n    /**\n     * @param a {Array<Number>}\n     * @param b {Array<Number>}\n     * @returns {number}\n     */\n    getPolarDistance: function getPolarDistance(a, b) {\n        var radians = this.RADIAN;\n        return Math.sqrt(a[1] * a[1] + b[1] * b[1] - 2 * a[1] * b[1] * Math.cos(a[0] * radians - b[0] * radians));\n    },\n    /**\n     * @param origin\n     * @param target\n     * @returns {number}\n     * 0 is flat (left-right), positive is clockwise.\n     * We use 125 instead of 180 to account for natural hand-height adjustments\n     * of various swing heights.\n     */\n    battingAngle: function battingAngle(origin, target) {\n        return Math.atan((origin.y - target.y) / (target.x - origin.x)) / Math.PI * 125;\n    },\n    memory: {},\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalTrajectory: function transitionalTrajectory(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\n            distance = Mathinator.prototype.memory.distance,\n            splay = Mathinator.prototype.memory.splay;\n        var bottom, left, padding, borderWidth;\n        var bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            quarter *= 4;\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        bottom = Math.cos(splay * radian) * percent / 100 * distance * 95 / 300;\n        left = Math.sin(splay * radian) * percent / 100 * distance * 95 / 300 + this.SPLAY_INDICATOR_LEFT;\n\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50)) / 100) * (1 / 0.7071);\n        if (bounding) {\n            padding = 1;\n            borderWidth = 1;\n        } else {\n            padding = apexRatio * apexHeight / 90 * 15;\n            borderWidth = 2 + apexRatio * 2;\n        }\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n        padding = Math.max(Math.min(padding, 12), 0);\n        return {\n            bottom: bottom,\n            left: left,\n            padding: padding,\n            borderWidth: borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param swingResult\n     * @returns {Game.swingResult}\n     */\n    translateSwingResultToStylePosition: function translateSwingResultToStylePosition(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        var bottom, left;\n\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95 / 300;\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95 / 300 + this.SPLAY_INDICATOR_LEFT;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n\n        swingResult.bottom = bottom + 'px';\n        swingResult.left = left + 'px';\n        return swingResult;\n    },\n    /**\n     * @param left {number} 0-200\n     * @param top {number} 0-200\n     * @param originLeft {number} 0-200\n     * @param originTop {number} 0-200\n     * @param quarter {number} seconds\n     * @returns {Function}\n     */\n    pitchTransition: function pitchTransition(top, left, originTop, originLeft, quarter) {\n        /**\n         * @param percent {number} 0-100\n         * @param step {number} 0 and up\n         * @param [breakTop] {number} 0-200 override\n         * @param [breakLeft] {number} 0-200 override\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\n         */\n        return function (percent, step, breakTop, breakLeft) {\n            var _top, _left;\n            _top = breakTop || top;\n            _left = breakLeft || left;\n            _top = originTop + Mathinator.square(percent / 100) * (_top - originTop);\n            if (step == 1) {\n                _top -= 2;\n            }\n            if (step == 2) {\n                _top -= 1;\n            }\n            _left = originLeft + Mathinator.square(percent / 100) * (_left - originLeft);\n            var padding = Math.max(Mathinator.square(percent / 100) * 12, 1),\n                borderWidth = Math.max(Mathinator.square(percent / 100) * 4, 1);\n            return {\n                top: _top,\n                left: _left,\n                padding: padding + 'px',\n                borderWidth: borderWidth + 'px',\n                transform: 'translateZ(0)',\n                delay: quarter * step,\n                ease: Linear.easeNone\n            };\n        };\n    },\n    /**\n     * @param distance {number} feet\n     * @param throwing {number} 0-1\n     * @param fielding {number} 0-1\n     * @param intercept {number} approx. -140 to 140\n     * @returns {number} seconds\n     */\n    fielderReturnDelay: function fielderReturnDelay(distance, throwing, fielding, intercept) {\n        return distance / 90 // bip distance\n         + distance / 90 / (0.5 + throwing / 2) // throwing distance\n         + 1 - (0.2 + fielding * 0.8) + 9 * (distance / 310) * Math.min(intercept - 120, 0) / -240; // gather time\n    },\n    /**\n     * @param speed {number} 0-100\n     * @returns {number} seconds\n     */\n    baseRunningTime: function baseRunningTime(speed) {\n        return 6.0 - speed / 100 * 2.2;\n    }\n};\n\nfor (var fn in Mathinator.prototype) {\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\n        Mathinator[fn] = Mathinator.prototype[fn];\n    }\n}\n\nexports.Mathinator = Mathinator;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballServicesAnimator = require('baseball/Services/Animator');\n\nvar _baseballServicesDistribution = require('baseball/Services/Distribution');\n\nvar _baseballServicesIterator = require('baseball/Services/Iterator');\n\nvar _baseballServicesMathinator = require('baseball/Services/Mathinator');\n\nexports.Animator = _baseballServicesAnimator.Animator;\nexports.Distribution = _baseballServicesDistribution.Distribution;\nexports.Iterator = _baseballServicesIterator.Iterator;\nexports.Mathinator = _baseballServicesMathinator.Mathinator;\n\n},{\"baseball/Services/Animator\":9,\"baseball/Services/Distribution\":10,\"baseball/Services/Iterator\":11,\"baseball/Services/Mathinator\":12}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtilityText = require('baseball/Utility/text');\n\nvar Log = function Log() {\n    this.init();\n};\n\nLog.prototype = {\n    game: 'instance of Game',\n    init: function init() {\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n    },\n    SINGLE: 'H',\n    DOUBLE: '2B',\n    TRIPLE: '3B',\n    HOMERUN: 'HR',\n    WALK: 'BB',\n    GROUNDOUT: 'GO',\n    FLYOUT: 'FO',\n    LINEOUT: 'LO',\n    RUN: 'R',\n    STRIKEOUT: 'SO',\n    SACRIFICE: 'SAC',\n    REACHED_ON_ERROR: 'ROE',\n    FIELDERS_CHOICE: 'FC',\n    stabilizeShortRecord: function stabilizeShortRecord() {\n        var rec = this.record.e.slice(0, 6);\n        this.shortRecord.e = rec;\n        this.stabilized.shortRecord.e = rec.concat(['', '', '', '', '', '']).slice(0, 6);\n\n        var rec2 = this.record.n.slice(0, 6);\n        this.shortRecord.n = rec2;\n        this.stabilized.shortRecord.n = rec2.concat(['', '', '', '', '', '']).slice(0, 6);\n    },\n    note: function note(_note, noteJ) {\n        this.record.e.unshift(_note);\n        this.record.n.unshift(noteJ);\n        this.stabilizeShortRecord();\n    },\n    getBatter: function getBatter(batter) {\n        var order = batter.team.nowBatting;\n        order = ({\n            0: (0, _baseballUtilityText.text)(' 1st'),\n            1: (0, _baseballUtilityText.text)(' 2nd'),\n            2: (0, _baseballUtilityText.text)(' 3rd'),\n            3: (0, _baseballUtilityText.text)(' 4th'),\n            4: (0, _baseballUtilityText.text)(' 5th'),\n            5: (0, _baseballUtilityText.text)(' 6th'),\n            6: (0, _baseballUtilityText.text)(' 7th'),\n            7: (0, _baseballUtilityText.text)(' 8th'),\n            8: (0, _baseballUtilityText.text)(' 9th')\n        })[order];\n        var positions = this.longFormFielder();\n        return (0, _baseballUtilityText.text)('Now batting') + order + _baseballUtilityText.text.comma() + positions[batter.position] + _baseballUtilityText.text.comma() + batter.getUniformNumber() + _baseballUtilityText.text.comma() + batter.getName();\n    },\n    noteBatter: function noteBatter(batter) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getBatter(batter);\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getBatter(batter);\n        _baseballUtilityText.text.mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription: function getPitchLocationDescription(pitchInFlight, batterIsLefty) {\n        var x = pitchInFlight.x,\n            y = pitchInFlight.y,\n            say = '';\n        var noComma = false,\n            noComma2 = false;\n        var ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += (0, _baseballUtilityText.text)('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += (0, _baseballUtilityText.text)('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += (0, _baseballUtilityText.text)('inside');\n        } else {\n            say += (0, _baseballUtilityText.text)('way inside');\n            ball = true;\n        }\n        if (say != '') say += _baseballUtilityText.text.comma();\n        if (y < 35) {\n            say += (0, _baseballUtilityText.text)('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += (0, _baseballUtilityText.text)('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += (0, _baseballUtilityText.text)('high');\n        } else {\n            say += (0, _baseballUtilityText.text)('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(_baseballUtilityText.text.comma()).join('');\n            if (noComma && noComma2) {\n                say = (0, _baseballUtilityText.text)('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = _baseballUtilityText.text.namePitch(pitchInFlight) + _baseballUtilityText.text.comma() + say + _baseballUtilityText.text.stop();\n        return say;\n    },\n    notePitch: function notePitch(pitchInFlight, batter) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.pop();\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.pop();\n        _baseballUtilityText.text.mode = m;\n    },\n    getSwing: function getSwing(swingResult) {\n        var result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += (0, _baseballUtilityText.text)('Strike.');\n            } else {\n                result += (0, _baseballUtilityText.text)('Ball.');\n            }\n        } else {\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += (0, _baseballUtilityText.text)('Fouled off.');\n                } else {\n                    if (swingResult.caught) {\n                        result += (0, _baseballUtilityText.text)('In play.');\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += (0, _baseballUtilityText.text)('In play.');\n                        } else {\n                            result += (0, _baseballUtilityText.text)('In play.');\n                        }\n                    }\n                }\n            } else {\n                result += (0, _baseballUtilityText.text)('Swinging strike.');\n            }\n        }\n        return result;\n    },\n    noteSwing: function noteSwing(swingResult) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getSwing(swingResult);\n        this.pitchRecord.e[0] += record;\n        this.stabilized.pitchRecord.e[0] += record;\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        this.pitchRecord.n[0] += recordJ;\n        this.stabilized.pitchRecord.n[0] += recordJ;\n        _baseballUtilityText.text.mode = m;\n    },\n    getPlateAppearanceResult: function getPlateAppearanceResult(game) {\n        var r = game.swingResult;\n        var record = '';\n        var batter = game.batter.getName();\n        var out = [];\n        if (r.looking) {\n            if (r.strike) {\n                record = batter + (0, _baseballUtilityText.text)(' struck out looking.');\n            } else {\n                record = batter + (0, _baseballUtilityText.text)(' walked.');\n            }\n        } else {\n            if (r.contact) {\n                var fielder = r.fielder,\n                    bases = r.bases,\n                    outBy;\n                if (r.caught) {\n                    if (r.flyAngle < 15) {\n                        outBy = 'line';\n                    } else {\n                        if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                            outBy = 'pop';\n                        } else {\n                            outBy = 'fly';\n                        }\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                            if (r.error) {\n                                bases = 1;\n                                outBy = 'error';\n                            } else {\n                                if (r.thrownOut) {\n                                    if (Math.random() < 0.5) {\n                                        outBy = 'ground';\n                                    } else {\n                                        outBy = 'thrown';\n                                    }\n                                } else {\n                                    switch (r.bases) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            bases = r.bases;\n                                            break;\n                                        case 4:\n                                            bases = 4;\n                                            if (r.splay < -15) {\n                                                fielder = 'left';\n                                            } else if (r.splay < 15) {\n                                                fielder = 'center';\n                                            } else {\n                                                fielder = 'right';\n                                            }\n                                            break;\n                                    }\n                                }\n                                if (r.fieldersChoice) {\n                                    out.push(r.fieldersChoice);\n                                    if (r.outs == 3) {\n                                        outBy = 'ground';\n                                    } else {\n                                        outBy = 'fieldersChoice';\n                                    }\n                                }\n                            }\n                        }\n                }\n                record = _baseballUtilityText.text.contactResult(batter, fielder, bases, outBy, r.outs === 3 ? [] : r.sacrificeAdvances, out);\n            } else {\n                record = batter + (0, _baseballUtilityText.text)(' struck out swinging.');\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult: function notePlateAppearanceResult(game) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getPlateAppearanceResult(game);\n        this.record.e.unshift(record);\n        this.pitchRecord.e = [(0, _baseballUtilityText.text)('Previous: ') + record];\n        this.stabilized.pitchRecord.e = [(0, _baseballUtilityText.text)('Previous: ') + record, '', '', '', '', ''];\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getPlateAppearanceResult(game);\n        this.record.n.unshift(recordJ);\n        this.pitchRecord.n = [(0, _baseballUtilityText.text)('Previous: ') + recordJ];\n        this.stabilized.pitchRecord.n = [(0, _baseballUtilityText.text)('Previous: ') + recordJ, '', '', '', '', ''];\n        _baseballUtilityText.text.mode = m;\n    },\n    pointer: 0,\n    stabilized: {\n        pitchRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        },\n        shortRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        }\n    },\n    pitchRecord: {\n        e: [],\n        n: []\n    },\n    shortRecord: {\n        e: [],\n        n: []\n    },\n    record: {\n        e: [],\n        n: []\n    },\n    longFormFielder: function longFormFielder() {\n        return {\n            first: (0, _baseballUtilityText.text)('first baseman'),\n            second: (0, _baseballUtilityText.text)('second baseman'),\n            third: (0, _baseballUtilityText.text)('third baseman'),\n            short: (0, _baseballUtilityText.text)('shortstop'),\n            pitcher: (0, _baseballUtilityText.text)('pitcher'),\n            catcher: (0, _baseballUtilityText.text)('catcher'),\n            left: (0, _baseballUtilityText.text)('left fielder'),\n            center: (0, _baseballUtilityText.text)('center fielder'),\n            right: (0, _baseballUtilityText.text)('right fielder')\n        };\n    }\n};\n\nexports.Log = Log;\n\n},{\"baseball/Utility/text\":18}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballUtilityData = require('baseball/Utility/data');\n\nvar _baseballUtilityHelper = require('baseball/Utility/helper');\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar _baseballUtilityText = require('baseball/Utility/text');\n\nexports.data = _baseballUtilityData.data;\nexports.helper = _baseballUtilityHelper.helper;\nexports.Log = _baseballUtilityLog.Log;\nexports.text = _baseballUtilityText.text;\n\n},{\"baseball/Utility/Log\":14,\"baseball/Utility/data\":16,\"baseball/Utility/helper\":17,\"baseball/Utility/text\":18}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar data = {\n    surnames: ['Sato', 'Suzuki', 'Takahashi', 'Tanaka', 'Watanabe', 'Ito', 'Nakamura', 'Kobayashi', 'Yamamoto', 'Kato', 'Yoshida', 'Yamada', 'Sasaki', 'Yamaguchi', 'Matsumoto', 'Inoue', 'Kimura', 'Shimizu', 'Hayashi', 'Saito', 'Saito', 'Yamazaki', 'Nakajima', 'Mori', 'Abe', 'Ikeda', 'Hashimoto', 'Ishikawa', 'Yamashita', 'Ogawa', 'Ishii', 'Hasegawa', 'Goto', 'Okada', 'Kondo', 'Maeda', 'Fujita', 'Endo', 'Aoki', 'Sakamoto', 'Murakami', 'Ota', 'Kaneko', 'Fujii', 'Fukuda', 'Nishimura', 'Miura', 'Takeuchi', 'Nakagawa', 'Okamoto', 'Matsuda', 'Harada', 'Nakano'],\n    surnamesJ: ['佐藤', '鈴木', '高橋', '田中', '渡辺', '伊藤', '中村', '小林', '山本', '加藤', '吉田', '山田', '佐々木', '山口', '松本', '井上', '木村', '清水', '林', '斉藤', '斎藤', '山崎', '中島', '森', '阿部', '池田', '橋本', '石川', '山下', '小川', '石井', '長谷川', '後藤', '岡田', '近藤', '前田', '藤田', '遠藤', '青木', '坂本', '村上', '太田', '金子', '藤井', '福田', '西村', '三浦', '竹内', '中川', '岡本', '松田', '原田', '中野'],\n\n    namesJ: ['匠', 'ヒカル', 'ゆうき', '翔太', '冬馬', '漣', '港区', 'ルイ', '樹', '賢治', '五木', '春', '光一', '宗介', 'こうすけ', '雄太', '大樹', '瑛太',\n    // newer set\n    '宏', '亨', '道夫', '聡', '昭', '茂雄', '勝', '純一', '和夫', '勲', '省三', '隆', '達夫', '正一', '輝夫', '俊夫', '史郎', '勇', '義弘', '良雄', '登', '義明', '正義', '秀夫', '肇', '月', '克己', '正男', '光男', '久', '耕三', '清', '次郎', '正博', '明子', '武', '勉', '晴夫', '裕二', '稔', '障子', '和子', '敦', '茂', '信夫', '恵一', '忠', '高尾', '薫', 'ケン', '健治', '哲夫', '啓二', '光一', '真一', '貞夫', '靖', '武', '雄', '文雄', '久雄', '一朗', '健一', '正明', '五郎', '誠', '昭夫', '誠司', '洋一', '康夫', '誠一', '正美', '則夫', '幸雄', '忠雄', '仁', 'シンジ', '豊', '邦雄', '修', '雅之', '三郎', '英治', '浩二', '栄一', '恒夫', '義郎', '進', '博之', '巌'],\n    names: ['Takumi', 'Hikaru', 'Yuuki', 'Shouta', 'Touma', 'Ren', 'Minato', 'Rui', 'Tatsuki', 'Kenji', 'Itsuki', 'Haru', 'Kouichi', 'Sousuke', 'Kousuke', 'Yuuta', 'Daiki', 'Eita',\n    // newer set\n    'Hiroshi', 'Toru', 'Michio', 'Satoshi', 'Akira', 'Shigeo', 'Masaru', 'Junichi', 'Kazuo', 'Isao', 'Shozo', 'Takashi', 'Tatsuo', 'Shoichi', 'Teruo', 'Toshio', 'Shiro', 'Isamu', 'Yoshihiro', 'Yoshio', 'Noboru', 'Yoshiaki', 'Tadayoshi', 'Hideo', 'Hajime', 'Akari', 'Katsumi', 'Masao', 'Mitsuo', 'Hisashi', 'Kozo', 'Kiyoshi', 'Jiro', 'Masahiro', 'Akiko', 'Takeshi', 'Tsutomu', 'Haruo', 'Yuji', 'Minoru', 'Shoji', 'Kazuko', 'Atsushi', 'Shigeru', 'Shinobu', 'Keiichi', 'Tadashi', 'Takao', 'Kaoru', 'Ken', 'Kenji', 'Tetsuo', 'Keiji', 'Koichi', 'Shinichi', 'Sadao', 'Yasushi', 'Takeshi', 'Yu', 'Fumio', 'Hisao', 'Ichiro', 'Kenichi', 'Masaaki', 'Goro', 'Makoto', 'Akio', 'Seiji', 'Yoichi', 'Yasuo', 'Seiichi', 'Masami', 'Norio', 'Yukio', 'Tadao', 'Hitoshi', 'Shinji', 'Yutaka', 'Kunio', 'Osamu', 'Masayuki', 'Saburo', 'Eiji', 'Koji', 'Eiichi', 'Tsuneo', 'Yoshio', 'Susumu', 'Hiroyuki', 'Iwao'],\n    teamNamesJ: ['横浜', '大阪', '名古屋', '札幌', '神戸', '京都', '福岡', '川崎', '埼玉県', '広島', '仙台', '千葉県', '新潟', '浜松', '静岡', '相模原', '岡山', '熊本', '鹿児島', '船橋', '川口', '姫路', '松山', '宇都宮', '松戸', '西宮', '倉敷', '市川', '福山', '尼崎', '金沢', '長崎', '横須賀', '富山', '高松', '町田', '岐阜', '枚方', '藤沢', '柏', '豊中', '長野県', '豊橋', '一宮', '和歌山', '岡崎', '宮崎', '奈良', '吹田', '高槻', '旭川', 'いわき', '高崎', '所沢', '川越', '秋田', '越谷', '前橋', '那覇', '四日市', '青森', '久留米', '春日井', '盛岡', '明石', '福島', '下関', '長岡', '市原', '函館', '茨城県', '福井', '加古川', '徳島', '水戸', '平塚', '佐世保', '呉', '八戸', '佐賀', '寝屋川', '富士', '春日部', '茅ヶ崎', '松本', '厚木', '大和', '上尾', '宝塚', '筑波', '沼津', '熊谷', '伊勢崎', '岸和田', '鳥取', '小田原', '鈴鹿', '松江', '日立'],\n    teamNames: ['Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Kyoto', 'Fukuoka', 'Kawasaki', 'Saitama', 'Hiroshima', 'Sendai', 'Chiba', 'Niigata', 'Hamamatsu', 'Shizuoka', 'Sagamihara', 'Okayama', 'Kumamoto', 'Kagoshima', 'Funabashi', 'Kawaguchi', 'Himeji', 'Matsuyama', 'Utsunomiya', 'Matsudo', 'Nishinomiya', 'Kurashiki', 'Ichikawa', 'Fukuyama', 'Amagasaki', 'Kanazawa', 'Nagasaki', 'Yokosuka', 'Toyama', 'Takamatsu', 'Machida', 'Gifu', 'Hirakata', 'Fujisawa', 'Kashiwa', 'Toyonaka', 'Nagano', 'Toyohashi', 'Ichinomiya', 'Wakayama', 'Okazaki', 'Miyazaki', 'Nara', 'Suita', 'Takatsuki', 'Asahikawa', 'Iwaki', 'Takasaki', 'Tokorozawa', 'Kawagoe', 'Akita', 'Koshigaya', 'Maebashi', 'Naha', 'Yokkaichi', 'Aomori', 'Kurume', 'Kasugai', 'Morioka', 'Akashi', 'Fukushima', 'Shimonoseki', 'Nagaoka', 'Ichihara', 'Hakodate', 'Ibaraki', 'Fukui', 'Kakogawa', 'Tokushima', 'Mito', 'Hiratsuka', 'Sasebo', 'Kure', 'Hachinohe', 'Saga', 'Neyagawa', 'Fuji', 'Kasukabe', 'Chigasaki', 'Matsumoto', 'Atsugi', 'Yamato', 'Ageo', 'Takarazuka', 'Tsukuba', 'Numazu', 'Kumagaya', 'Isesaki', 'Kishiwada', 'Tottori', 'Odawara', 'Suzuka', 'Matsue', 'Hitachi']\n};\n\nexports.data = data;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar helper = {\n    pitchDefinitions: {\n        '4-seam': [0, 0, 1], //x movement, y movement, speed ratio\n        '2-seam': [20, -20, 0.90],\n        'cutter': [-25, -20, 0.95],\n        'sinker': [-15, -30, 0.95],\n\n        'slider': [-50, -35, 0.9],\n        'fork': [0, -70, 0.87],\n        'curve': [0, -90, 0.82],\n\n        'change': [0, -10, 0.88]\n    },\n    selectRandomPitch: function selectRandomPitch() {\n        return ['4-seam', '2-seam', 'cutter', 'sinker', 'slider', 'fork', 'curve', 'change'][Math.floor(Math.random() * 8)];\n    }\n};\n\nexports.helper = helper;\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar text = function text(phrase, override) {\n    if (!text.mode) text.mode = 'n';\n    var string = ({\n        n: {\n            empty: '-',\n            ' 1st': '1番',\n            ' 2nd': '2番',\n            ' 3rd': '3番',\n            ' 4th': '4番',\n            ' 5th': '5番',\n            ' 6th': '6番',\n            ' 7th': '7番',\n            ' 8th': '8番',\n            ' 9th': '9番',\n            'Now batting': '次のバッター、',\n            'way outside': '相当外角',\n            'outside': '外角',\n            'inside': '内角',\n            'way inside': '相当内角',\n            'way low': '相当低め',\n            'low': '低め',\n            'high': '高め',\n            'way high': '相当高め',\n            'down the middle': '真ん中',\n            'first baseman': 'ファースト',\n            'second baseman': 'セカンド',\n            'third baseman': 'サード',\n            'shortstop': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left fielder': 'レフト',\n            'center fielder': 'センター',\n            'right fielder': 'ライト',\n            'Strike.': 'ストライク。',\n            'Ball.': 'ボール。',\n            'Fouled off.': 'ファウル。',\n            'In play.': 'インプレー。',\n            'Swinging strike.': '空振り。',\n            '4-seam': 'ストレート',\n            '2-seam': 'シュート',\n            'slider': 'スライダー',\n            'fork': 'フォーク',\n            'cutter': 'カット',\n            'sinker': 'シンカー',\n            'curve': 'カーブ',\n            'change': 'チェンジ',\n            ' struck out looking.': '、見逃し三振。',\n            ' walked.': '、フォアボール。',\n            ' struck out swinging.': '、空振り三振。',\n            'Previous: ': '前：',\n            'looks like: ': '予想',\n            'breaking ball': '変化球',\n            'fastball': 'ストレート',\n            'Batting, ': '打球',\n            'Catching, pitch selection': '捕球選択',\n            'Season': '記録',\n            'Game': '今試合',\n            'Pitch': '球',\n            'Control': '制球',\n            'Velocity': '速度',\n            'Break': '変化',\n            'At Bat :': 'バッター',\n            'On Deck :': '次バッター',\n            'Eye :': '目',\n            'Power :': '力',\n            'Speed :': '速',\n            'Up to Bat': '打席',\n            'Fielding': '守備',\n            'BA': '打率',\n            'OBP': '出塁',\n            'SLG': '長打',\n            'PA': '打席',\n            'H/2B/3B/HR': '安／二／三／本',\n            'H': '安',\n            '2B': '二',\n            '3B': '三',\n            'HR': '本塁打',\n            'RBI': '打点',\n            'R': '得点',\n            'BB': '四球',\n            'SO': '三振',\n\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n\n            'Select Language:': '言語',\n            'Run Fast Simulation': 'シミュレーションを試合終了まで行う',\n            'Play Ball!': 'プレーボール',\n            'Spectate the CPU': 'CPU観戦',\n\n            'Throws/Bats': ' ',\n            'LHP': '左投',\n            'RHP': '右投',\n            'LHB': '左打',\n            'RHB': '右打',\n            'L': '左投',\n            'R ': '右投',\n            ' L ': '左打',\n            ' R ': '右打',\n            '#': '背番号'\n        },\n        e: {\n            empty: '-',\n            'Season': 'Career'\n        }\n    })[override ? override : text.mode][phrase];\n    return string ? string : phrase;\n};\n\ntext.getBattersEye = function (game) {\n    var eye = {},\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\n    eye.e = text('looks like: ', 'e') + breaking ? text('breaking ball', 'e') : text('fastball', 'e');\n    eye.n = text('looks like: ', 'n') + breaking ? text('breaking ball', 'n') : text('fastball', 'n');\n    return eye;\n};\n\ntext.fielderShortName = function (fielder) {\n    if (text.mode == 'n') {\n        return ({\n            'first': '一',\n            'second': '二',\n            'third': '三',\n            'short': '遊',\n            'pitcher': '投',\n            'catcher': '捕',\n            'left': '左',\n            'center': '中',\n            'right': '右'\n        })[fielder];\n    }\n    return fielder;\n};\n\ntext.slash = function () {\n    if (text.mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = function (fielder) {\n    if (text.mode == 'n') {\n        return ({\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'short': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left': 'レフト',\n            'center': 'センター',\n            'right': 'ライト'\n        })[fielder];\n    }\n    return ({\n        first: text('first baseman'),\n        second: text('second baseman'),\n        third: text('third baseman'),\n        short: text('shortstop'),\n        pitcher: text('pitcher'),\n        catcher: text('catcher'),\n        left: text('left fielder'),\n        center: text('center fielder'),\n        right: text('right fielder')\n    })[fielder];\n};\n\ntext.comma = function () {\n    return ({ n: '、', e: ', ' })[text.mode];\n};\ntext.stop = function () {\n    return ({ n: '。', e: '. ' })[text.mode];\n};\n\ntext.namePitch = function (pitch) {\n    if (text.mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1);\n    }\n    if (text.mode == 'n') {\n        return text(pitch.name);\n    }\n};\n\ntext.contactResult = function (batter, fielder, bases, outBy, sacrificeAdvances, out) {\n    var statement = '';\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    if (text.mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'fieldersChoice':\n                    var plural = out.length > 1;\n                    var runner = plural ? 'Runners' : 'Runner';\n                    var is = plural ? 'are' : 'is';\n                    statement += ' reached on a fielder\\'s choice by ' + text.fielderShortName(fielder) + '. ' + runner + ' from ' + text(out.join(text.comma())) + ' ' + is + ' out';\n                    break;\n                case 'line':\n                    statement += ' lined out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'fly':\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'error':\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\n                    break;\n                case 'pop':\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'ground':\n                    statement += ' grounded into a force out by ' + text.fielderShortName(fielder);\n                    break;\n                case 'thrown':\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder);\n                    break;\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\n                    } else {\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\n                    }\n                    break;\n                case 2:\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\n                    break;\n                case 3:\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\n                    break;\n                case 4:\n                    statement += ' homered to ' + text.fielderShortName(fielder);\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map(function (base) {\n                if (base == 'third') {\n                    statement += text.stop() + 'Runner on third scores';\n                } else {\n                    statement += text.stop() + 'Runner on ' + base + ' advances';\n                }\n            });\n        }\n        statement += text.stop();\n    }\n    if (text.mode == 'n') {\n        var stop = text.stop();\n        statement += batter + 'は';\n        if (outBy) {\n            var fielderLong = text.fielderLongName(fielder);\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'fieldersChoice':\n                    statement += '野選(' + fielder + ')で出塁。' + text(out.join(text.comma())) + 'ランナーはアウト';\n                    break;\n                case 'line':\n                    statement += fielder + '直';\n                    break;\n                case 'fly':\n                    statement += fielder + '飛';\n                    break;\n                case 'error':\n                    statement += 'エラー(' + fielder + ')で出塁';\n                    break;\n                case 'pop':\n                    statement += 'ポップフライで' + fielder + '飛';\n                    break;\n                case 'ground':\n                    statement += fielderLong + 'ゴロに封殺';\n                    break;\n                case 'thrown':\n                    statement += fielder + 'ゴロ';\n                    break;\n            }\n        } else {\n            fielder = text.fielderShortName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += '内野安打' + '(' + fielder + ')' + 'で出塁';\n                    } else {\n                        statement += '安打(' + fielder + ')' + 'で出塁';\n                    }\n                    break;\n                case 2:\n                    statement += '二塁打（' + fielder + '）で出塁';\n                    break;\n                case 3:\n                    statement += '三塁打（' + fielder + '）で出塁';\n                    break;\n                case 4:\n                    statement += '本塁打（' + fielder + '）';\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map(function (base) {\n                if (base == 'third') {\n                    statement += stop + 'サードランナーホームイン';\n                } else {\n                    statement += stop + text(base) + 'ランナー進塁';\n                }\n            });\n        }\n        statement += stop;\n    }\n    return statement;\n};\n\nexports.text = text;\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballNamespace = require('baseball/namespace');\n\nif (typeof window == 'object') {\n    window.Baseball = _baseballNamespace.Baseball;\n}\n\nexports.Baseball = _baseballNamespace.Baseball;\n\n},{\"baseball/namespace\":20}],20:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballModelAtBat = require('baseball/Model/AtBat');\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelGame = require('baseball/Model/Game');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Baseball = {};\n\nBaseball.model = {};\nBaseball.model.Game = Baseball.Game = _baseballModelGame.Game;\nBaseball.model.Player = Baseball.Player = _baseballModelPlayer.Player;\nBaseball.model.Team = Baseball.Team = _baseballModelTeam.Team;\n\nBaseball.service = {};\nBaseball.service.Animator = _baseballServices_services.Animator;\n\nBaseball.util = {};\nBaseball.util.text = _baseballUtility_utils.text;\n\nexports.Baseball = Baseball;\n\n},{\"baseball/Model/AtBat\":1,\"baseball/Model/Field\":2,\"baseball/Model/Game\":3,\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7,\"baseball/Services/_services\":13,\"baseball/Utility/_utils\":15}],21:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballServicesAnimator = require('baseball/Services/Animator');\n\nvar _baseballServicesDistribution = require('baseball/Services/Distribution');\n\nvar _baseballServicesIterator = require('baseball/Services/Iterator');\n\nvar _baseballServicesMathinator = require('baseball/Services/Mathinator');\n\nexports.Animator = _baseballServicesAnimator.Animator;\nexports.Distribution = _baseballServicesDistribution.Distribution;\nexports.Iterator = _baseballServicesIterator.Iterator;\nexports.Mathinator = _baseballServicesMathinator.Mathinator;\n\n},{\"baseball/Services/Animator\":9,\"baseball/Services/Distribution\":10,\"baseball/Services/Iterator\":11,\"baseball/Services/Mathinator\":12}]},{},[19]);\n","IndexController = function($scope, socket) {\n    var text = Baseball.util.text;\n    var Game = Baseball.Game;\n    var Animator = Baseball.service.Animator;\n\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            text.mode = setMode;\n        }\n        return text.mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode;\n        $scope.y = new Game();\n        var game = $scope.y;\n        socket.game = game;\n        $scope.socket = io(window.location.hostname + ':64321');\n        $scope.socketService = socket;\n        socket.socket = $scope.socket;\n        socket.start();\n        s2.y = game;\n        bindMethods();\n        $('.blocking').remove();\n        if (game.humanControl == 'none' && game.quickMode) {\n            var n = 0;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            log('sim ended');\n            game.debugOut();\n        } else if (game.humanControl == 'none') {\n            var scalar = game.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if (game.stage == 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*(game.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 2000 : Animator.TIME_FROM_WINDUP + 2000));\n        }\n        if (game.humanControl == 'away') {\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'home') {\n\n        }\n    };\n\n    var bindMethods = function() {\n        var game = $scope.y;\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n\n        // avoid scope cycles, any other easy way?\n        var bat = $('.target .swing.stance-indicator');\n        var showBat = function(event) {\n            if (game.humanBatting()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\n                bat.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\",\n                    transform: \"rotate(\" + angle + \"deg) rotateY(\"+(game.batter.bats == \"left\" ? 0 : -0)+\"deg)\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    bat.hide();\n                } else {\n                    bat.show();\n                }\n            }\n        };\n        var glove = $('.target .glove.stance-indicator');\n        var showGlove = function(event) {\n            if (game.humanPitching()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                glove.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    glove.hide();\n                } else {\n                    glove.show();\n                }\n            }\n        };\n\n        $scope.selectPitch = function(pitchName) {\n            if (game.stage == 'pitch') {\n                game.pitchInFlight = $.extend({}, game.pitcher.pitching[pitchName]);\n                game.pitchInFlight.name = pitchName;\n                game.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            $('.no-swing').click();\n            $scope.$apply();\n        };\n        game.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if (game.pitcher.windingUp) {\n                return;\n            }\n            if (game.humanPitching()) $scope.allowInput = false;\n            var offset = $('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (text.mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n        $scope.$watch('y.humanBatting()', function() {\n            if ($scope.y.humanBatting()) {\n                $('.target').mousemove(showBat);\n            } else {\n                $('.target').unbind('mousemove', showBat);\n                bat.hide();\n            }\n        });\n        $scope.$watch('y.humanPitching()', function() {\n            if ($scope.y.humanPitching()) {\n                $('.target').mousemove(showGlove);\n            } else {\n                $('.target').unbind('mousemove', showGlove);\n                glove.hide();\n            }\n        });\n    };\n\n\n};","var SocketService = function() {\n    var Service = function() {};\n    var game, socket, NO_OPERATION = function() {},\n        animator = Baseball.service.Animator;\n    Service.prototype = {\n        socket : {},\n        game : {},\n        connected : false,\n        start : function() {\n            game = this.game;\n            socket = this.socket;\n            game.opponentService = this;\n            this.connected = socket.connected;\n            var key = 15;\n            this.on();\n            socket.emit('register', key);\n        },\n        on : function() {\n            var giraffe = this;\n            socket.on('register', this.register);\n            socket.on('connect reconnect', function() {\n                giraffe.connected = true;\n            });\n            socket.on('disconnect', function() {\n                giraffe.connected = false;\n            });\n            socket.on('pitch', function(pitch) {\n                //console.log('receive', 'pitch', pitch);\n                game.thePitch(0, 0, NO_OPERATION, pitch);\n            });\n            socket.on('swing', function(swing) {\n                //console.log('receive', 'swing', swing);\n                game.theSwing(0, 0, NO_OPERATION, swing);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)(function() {\n                    if (swing.contact) {\n                        animator.animateFieldingTrajectory(game);\n                    }\n                });\n            });\n            socket.on('partner_disconnect', function() {\n                console.log('The opponent has disconnected');\n                game.opponentConnected = false;\n            });\n            socket.on('partner_connect', function() {\n                game.opponentConnected = true;\n            });\n            socket.on('opponent_taking_field', function() {\n                console.log('A challenger has appeared! Sending game data.');\n                socket.emit('game_data', game.toData());\n            });\n            socket.on('game_data', function(data) {\n                game.fromData(data);\n                var scope = window.s;\n                scope.$apply();\n            });\n        },\n        off : function() {\n            socket.on('register', NO_OPERATION);\n        },\n        register: function(data) {\n            console.log(data);\n            if (data === 'away') {\n                game.humanControl = 'away';\n            }\n            socket.on('register', NO_OPERATION);\n        },\n        emitPitch : function(pitch) {\n            //console.log('emit', 'pitch', pitch);\n            socket.emit('pitch', pitch);\n        },\n        emitSwing : function(swing) {\n            //console.log('emit', 'swing', swing);\n            socket.emit('swing', swing);\n        },\n        swing : function() {\n\n        },\n        pitch : function() {\n\n        }\n    };\n    return new Service;\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'public/html/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives'])\n    .service('socket', SocketService)\n    .controller('IndexController', ['$scope', 'socket', IndexController]);\n\napp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{{');\n    $interpolateProvider.endSymbol('}}');\n});\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective);"],"sourceRoot":"/source/"}
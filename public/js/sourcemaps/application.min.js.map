{"version":3,"sources":["bundle.js","IndexController.js","SocketService.js","battersData.js","batteryData.js","field.js","scoreboard.js","application.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_baseballUtilityLog","AtBat","text","this","infield","indexOf","INFIELD_HIT_INDICATOR","replace","split","RBI_INDICATOR","rbi","log","Log","beneficial","WALK","SINGLE","HOMERUN","DOUBLE","TRIPLE","SACRIFICE","REACHED_ON_ERROR","constructor","identifier","baseball/Utility/Log",2,"_baseballModelPlayer","_baseballServices_services","Field","game","init","first","second","third","hasRunnersOn","Player","determineSwingContactResult","swing","x","y","splayAngle","angle","flyAngle","power","batter","skill","offense","eye","bonus","landingDistance","Distribution","Math","abs","foul","fielder","findFielder","travelDistance","splay","sacrificeAdvances","half","teams","home","positions","away","fatigue","error","fieldingEase","defense","fielding","throwingEase","throwing","fielderTravel","getPolarDistance","interceptRating","speed","caught","umpire","count","outs","sacrificeThrowInTime","Mathinator","fielderReturnDelay","getBaseRunningTime","push","bases","thrownOut","fieldingReturnDelay","fieldingDelay","outfielder","left","center","right","baseRunningTime","difficulty","fieldersChoice","fielders","team","force","forcePlaySituation","additionalOuts","throwingDelay","infieldThrowDelay","catcher","doublePlay","firstOut","swingResult","Animator","console","animateFieldingTrajectory","pitcher","short","b","fieldingTest","random","distance","data","fielderCandidates","fielderSelectionTest","aggregateFieldingTest","tally","distances","false","selections","returnFielder","minDistance","giraffe","Iterator","each","position","spot","thisDistance","baseball/Model/Player","baseball/Services/_services",3,"_baseballModelField","_baseballModelTeam","_baseballModelUmpire","_baseballUtility_utils","Game","m","gamesIntoSeason","humanControl","quickMode","debug","startTime","h","slice","timeOfDay","mode","floor","field","Team","helper","name","pickName","Umpire","humanPitching","stage","autoPitchSelect","passMinutes","minutes","parseInt","getInning","inning","toUpperCase","humanBatting","end","R","getName","stats","pitching","W","L","note","simulateInput","callback","pitchTarget","autoPitch","autoSwing","simulatePitchAndSwing","setTimeout","TIME_FROM_SET","TIME_FROM_WINDUP","receiveInput","thePitch","theSwing","pitchNames","keys","pitchName","pitch","pitchInFlight","windingUp","$","addClass","windup","css","pitchLocation","animate","width","removeClass","deceptiveX","deceptiveY","convergence","convergenceSum","balls","strikes","centralizedNumber","cpuSwing","swingProbability","swingLikelihood","opponentConnected","waitingCallback","awaitPitch","opponentService","emitSwing","awaitSwing","emitPitch","inFlight","override","breakDirection","pitchDefinitions","battersEye","getBattersEye","control","pitchControl","breakEffect","notePitch","setBatAngle","recalculation","getAngularOffset","precision","looking","contact","strike","max","sqrt","pow","noteSwing","result","makeCall","emit","startOpponentPitching","origin","bats","battingAngle","debugOut","filter","PO","map","hitters","lineup","concat","atBats","getAtBats","ab","LO","FO","GO","GIDP","SO","BB","SAC","FC","table","scoreboard","toData","players","deck","hole","nameJ","says","player","serialize","pitchRecord","record","fromData","playerJson","index","playerData","JSON","parse","side","resetStats","stabilizeShortRecord","velocity","break","playResult","showPlayResultPanels","batterOutcomes","atBat","pop","fielderOutcomes","pitchSelect",4,5,6,7,8,9,"resetTally","H","E","baseball/Model/Field","baseball/Model/Team","baseball/Model/Umpire","baseball/Utility/_utils","Manager","makeLineup","jerseyNumber","selectForSkill","bench","number","order","pool","skillset","requiredThrowingHandedness","selection","rating","skills","cursor","property","shift","_baseballModel_models","hero","averaging","randomizeSkills","surnameKey","surnames","nameKey","names","jSurname","surnamesJ","jGivenName","namesJ","surname","surnameJ","stringify","atBatObjects","IP","ER","GS","arguments","undefined","randBetween","total","isNaN","pa","paRemaining","bb","so","doubles","triples","hr","hbp","sac","chances","pitches","K","getK9","getERA","ERA","HR","WHIP","getWHIP","batting","getBA","ba","getOBP","obp","getSLG","slg","2b","3b","A","K9","item","recordRBI","recordInfieldHit","randValue","isPitching","catching","slider","fork","cutter","sinker","curve","change","reduce","prev","current","getSurname","getUniformNumber","getOrder","baseball/Model/_models","_baseballModelManager","bullpen","j","manager","teamNameIndex","teamNames","teamNamesJ","nowBatting","expanded","baseball/Model/Manager","playBall","batterRunner","noteBatter","advanceRunners","LINEOUT","FLYOUT","newBatter","runner","FIELDERS_CHOICE","reachBase","GROUNDOUT","hitByPitch","STRIKEOUT","changeSides","isWalk","RUN","canAdvance","notePlateAppearanceResult","lastBatter","_baseballModelAtBat","_baseballModelGame","baseball/Model/AtBat","baseball/Model/Game","TweenMax","loadTweenMax","window","set","to","from","killAll","HOLD_UP_ALLOWANCE","pitchBreak","updateFlightPath","$scope","top","breakTop","breakLeft","$baseballs","flightSpeed","originTop","originLeft","henka","quarter","pitchTransition","targetTransition","transitions","lastTimeout","allowInput","$apply","holdUpTimeouts","holdUp","ball","linearApproximateDragScalar","apexHeight","airTime","scalar","memory","bounding","sin","PI","velocityVerticalComponent","RADIAN","mathinator","transitionalTrajectory","show","time","transitionalCatcherPerspectiveTrajectory","fn","hasOwnProperty","baseball/services/_services",10,"chance","scale","effect","min","actual","main","ump",11,"collection","Array",12,"square","SPLAY_INDICATOR_LEFT","offset","xScalar","yScalar","originalAngle","atan","angledY","cos","angledX","radians","percent","step","givenApexHeight","givenDistance","givenSplayAngle","bottom","padding","borderWidth","radian","apexRatio","delay","ease","Power4","easeOut","Linear","easeNone","givenOrigin","height","currentDistance","projection","translateSwingResultToStylePosition","maxPadding","maxBorderWidth","_top","_left","transform","intercept",13,"_baseballServicesAnimator","_baseballServicesDistribution","_baseballServicesIterator","_baseballServicesMathinator","baseball/Services/Animator","baseball/Services/Distribution","baseball/Services/Iterator","baseball/Services/Mathinator",14,"_baseballUtilityText","GITP","rec","shortRecord","stabilized","rec2","_note","noteJ","unshift","async","getBatter","longFormFielder","comma","recordJ","getPitchLocationDescription","batterIsLefty","say","noComma","noComma2","join","namePitch","stop","broadcastCount","justOuts","lastOuts","broadcastScore","broadcastRunners","runners","runnerCount","getSwing","getPlateAppearanceResult","out","outBy","contactResult","statement","prevJ","resultJ","pointer","baseball/Utility/text",15,"_baseballUtilityData","_baseballUtilityHelper","baseball/Utility/data","baseball/Utility/helper",16,17,"4-seam","2-seam","selectRandomPitch",18,"phrase","string","empty"," 1st"," 2nd"," 3rd"," 4th"," 5th"," 6th"," 7th"," 8th"," 9th","Now batting","way outside","outside","inside","way inside","way low","low","high","way high","down the middle","first baseman","second baseman","third baseman","shortstop","left fielder","center fielder","right fielder","Strike.","Ball.","Fouled off.","In play.","Swinging strike."," outs"," out"," struck out looking."," walked."," struck out swinging.","Previous: ","looks like: ","breaking ball","fastball","Batting, ","Catching, pitch selection","Season","Pitch","Control","Velocity","Break","At Bat","On Deck","Eye :","Power :","Speed :","Up to Bat","Fielding","BA","OBP","SLG","PA","H/2B/3B/HR","2B","3B","RBI","Runner on","Runners on","Bases empty","base","Select Language:","Run Fast Simulation","Play Ball!","Spectate the CPU","Play from the 7th","Throws/Bats","LHP","RHP","LHB","RHB","R "," L "," R ","#","Opponent connected","breaking","fielderShortName","slash","fielderLongName","charAt","play","plural","is","fielderLong",19,"_baseballNamespace","Baseball","baseball/namespace",20,"model","service","util",21,"IndexController","socket","setMode","proceedToGame","spectateCpu","location","hash","ceil","io","hostname","socketService","start","s2","bindMethods","remove","auto","setInterval","clearInterval","interval","expandScoreboard","animator","bind","bat","showBat","event","relativeOffset","pageX","pageY","hide","glove","showGlove","selectPitch","extend","click","indicate","$event","clearTimeout","abbreviatePosition","$watch","mousemove","unbind","SocketService","Service","NO_OPERATION","connected","on","register","scope","$digest","off","BattersDirective","templateUrl","cacheKey","transclude","BatteryDirective","FieldDirective","ScoreboardDirective","link","app","angular","controller","config","$interpolateProvider","startSymbol","endSymbol","directive"],"mappings":"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","file":"application.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar AtBat = (function () {\n    function AtBat(text) {\n        _classCallCheck(this, AtBat);\n\n        this.infield = text.indexOf(AtBat.prototype.INFIELD_HIT_INDICATOR) > -1 ? AtBat.prototype.INFIELD_HIT_INDICATOR : '';\n        text = text.replace(AtBat.prototype.INFIELD_HIT_INDICATOR, '');\n        this.text = text.split(AtBat.prototype.RBI_INDICATOR)[0];\n        this.rbi = text.split(this.text)[1] + '';\n\n        var log = new _baseballUtilityLog.Log();\n\n        var beneficial = [log.WALK, log.SINGLE, log.HOMERUN, log.DOUBLE, log.TRIPLE, log.SACRIFICE, log.REACHED_ON_ERROR];\n        if (beneficial.indexOf(this.text) > -1) {\n            this.beneficial = true;\n        }\n    }\n\n    _createClass(AtBat, [{\n        key: 'toString',\n        value: function toString() {\n            return '' + this.infield + this.text + this.rbi;\n        }\n    }]);\n\n    return AtBat;\n})();\n\nAtBat.prototype.constructor = AtBat;\nAtBat.prototype.identifier = 'AtBat';\nAtBat.prototype.INFIELD_HIT_INDICATOR = '';\nAtBat.prototype.RBI_INDICATOR = '+';\n\nexports.AtBat = AtBat;\n\n},{\"baseball/Utility/Log\":14}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\n/**\n * The baseball field tracks the ball's movement, fielders, and what runners are on\n * @param game\n * @constructor\n */\nvar Field = function Field(game) {\n    this.init(game);\n};\n\nField.prototype = {\n    constructor: Field,\n    init: function init(game) {\n        this.game = game;\n        this.first = null;\n        this.second = null;\n        this.third = null;\n    },\n    /**\n     * @returns {boolean}\n     */\n    hasRunnersOn: function hasRunnersOn() {\n        return this.first instanceof _baseballModelPlayer.Player || this.second instanceof _baseballModelPlayer.Player || this.third instanceof _baseballModelPlayer.Player;\n    },\n    /**\n     * @param swing\n     * @returns {object}\n     */\n    determineSwingContactResult: function determineSwingContactResult(swing) {\n        var x = swing.x,\n            y = swing.y;\n        /**\n         * The initial splay angle is 90 degrees for hitting up the middle and 0\n         * for a hard foul left, 180 is a foul right. Depending on the angle of the bat,\n         * a y-axis displacement which would otherwise pop or ground the ball can instead\n         * increase the left/right effect.\n         * @type {number}\n         */\n        var splayAngle = 90 - 1.5 * x + swing.angle * y / 35;\n        var flyAngle = -3 * y - swing.angle * y / 35;\n        var power = this.game.batter.skill.offense.power + (this.game.batter.eye.bonus || 0) / 5;\n        var landingDistance = _baseballServices_services.Distribution.landingDistance(power, flyAngle);\n        if (flyAngle < 0 && landingDistance > 120) {\n            landingDistance = (landingDistance - 120) / 4 + 120;\n        }\n        var game = this.game;\n\n        if (Math.abs(90 - splayAngle) > 50) swing.foul = true;\n        swing.fielder = this.findFielder(splayAngle, landingDistance);\n        swing.travelDistance = landingDistance;\n        swing.flyAngle = flyAngle;\n        /**\n         * the splay for the result is adjusted to 0 being up the middle and negatives being left field\n         * @type {number}\n         */\n        swing.splay = splayAngle - 90;\n        swing.sacrificeAdvances = [];\n\n        if (swing.fielder) {\n            var fielder = game.half == 'top' ? game.teams.home.positions[swing.fielder] : game.teams.away.positions[swing.fielder];\n            fielder.fatigue += 4;\n            swing.error = false;\n            var fieldingEase = fielder.skill.defense.fielding / 100,\n                throwingEase = fielder.skill.defense.throwing / 100;\n            //reach the batted ball?\n            swing.fielderTravel = this.getPolarDistance(this.positions[swing.fielder], [splayAngle, landingDistance]);\n            var interceptRating = fielder.skill.defense.speed + flyAngle - swing.fielderTravel * 1.65;\n            if (interceptRating > 0 && flyAngle > 0) {\n                //caught cleanly?\n                if (_baseballServices_services.Distribution.error(fielder)) {\n                    //error\n                    fieldingEase *= 0.5;\n                    swing.error = true;\n                    swing.caught = false;\n                } else {\n                    swing.caught = true;\n                    if (game.umpire.count.outs < 2) {\n                        var sacrificeThrowInTime = _baseballServices_services.Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, 100);\n                        // todo ran into outfield assist\n                        if (this.first && sacrificeThrowInTime > this.first.getBaseRunningTime() + 4.5) {\n                            swing.sacrificeAdvances.push('first');\n                        }\n                        if (this.second && sacrificeThrowInTime > this.second.getBaseRunningTime()) {\n                            swing.sacrificeAdvances.push('second');\n                        }\n                        if (this.third && sacrificeThrowInTime > this.third.getBaseRunningTime() - 0.5) {\n                            swing.sacrificeAdvances.push('third');\n                        }\n                    }\n                }\n            } else {\n                swing.caught = false;\n            }\n\n            if (!swing.caught) {\n                swing.bases = 0;\n                swing.thrownOut = false; // default value\n                var fieldingReturnDelay = _baseballServices_services.Mathinator.fielderReturnDelay(swing.travelDistance, throwingEase, fieldingEase, interceptRating);\n                swing.fieldingDelay = fieldingReturnDelay;\n                swing.outfielder = ({ 'left': 1, 'center': 1, 'right': 1 })[swing.fielder] == 1;\n                var speed = game.batter.skill.offense.speed,\n                    baseRunningTime = _baseballServices_services.Mathinator.baseRunningTime(speed);\n\n                if (swing.outfielder) {\n                    swing.bases = 1;\n                    fieldingReturnDelay -= baseRunningTime;\n                    var difficulty = 1.8;\n\n                    while (fieldingReturnDelay > baseRunningTime + difficulty && swing.bases < 3) {\n                        swing.bases++;\n                        difficulty = -1.3;\n                        fieldingReturnDelay -= baseRunningTime;\n                    }\n                } else {\n                    var first = this.first,\n                        second = this.second,\n                        third = this.third;\n                    swing.fieldersChoice = null;\n                    swing.bases = fieldingReturnDelay >= baseRunningTime + 1 ? 1 : 0;\n                    if (first && fieldingReturnDelay < first.getBaseRunningTime()) swing.fieldersChoice = 'first';\n                    if (first && second && fieldingReturnDelay < second.getBaseRunningTime() + 0.6) swing.fieldersChoice = 'second';\n                    if (third && fieldingReturnDelay < third.getBaseRunningTime()) swing.fieldersChoice = 'third';\n                    // double play\n                    var outs = game.umpire.count.outs;\n                    if (swing.fieldersChoice) {\n                        outs++;\n                        swing.bases = 1;\n                        var fielders = fielder.team.positions;\n                        var force = this.forcePlaySituation();\n                        if (force) {\n                            var additionalOuts = [];\n                            var throwingDelay = fieldingReturnDelay;\n                            if (third && force === 'third' && _baseballServices_services.Mathinator.infieldThrowDelay(fielders.catcher) + throwingDelay < second.getBaseRunningTime() && outs < 3) {\n                                throwingDelay += _baseballServices_services.Mathinator.infieldThrowDelay(fielders.catcher);\n                                fielders.catcher.fatigue += 4;\n                                additionalOuts.push('second');\n                                outs++;\n                                force = 'second';\n                            }\n                            if (second && force === 'second' && _baseballServices_services.Mathinator.infieldThrowDelay(fielders.third) + throwingDelay < first.getBaseRunningTime() && outs < 3) {\n                                throwingDelay += _baseballServices_services.Mathinator.infieldThrowDelay(fielders.third);\n                                fielders.third.fatigue += 4;\n                                additionalOuts.push('first');\n                                outs++;\n                                force = 'first';\n                            }\n                            if (first && force === 'first' && _baseballServices_services.Mathinator.infieldThrowDelay(fielders.second) + throwingDelay < game.batter.getBaseRunningTime() && outs < 3) {\n                                throwingDelay += _baseballServices_services.Mathinator.infieldThrowDelay(fielders.second);\n                                fielders.second.fatigue += 4;\n                                additionalOuts.push('batter');\n                                swing.bases = 0;\n                                // todo (or shortstop)\n                                outs++;\n                            }\n                            if (outs - game.umpire.count.outs === 2) {\n                                swing.doublePlay = true;\n                            }\n                            if (additionalOuts.length) {\n                                swing.additionalOuts = additionalOuts;\n                                swing.firstOut = swing.fieldersChoice;\n                                if (additionalOuts.indexOf('batter') > -1) {\n                                    delete swing.fieldersChoice;\n                                }\n                            }\n                        }\n                        //console.log('DP?', !!this.forcePlaySituation(), 'throwingDelay', throwingDelay,\n                        //    'fielding delay', fieldingReturnDelay, 'runner', game.batter.getBaseRunningTime());\n                        //if (typeof additionalOuts !== 'undefined' && additionalOuts.length) {\n                        //    console.log('omg dp', additionalOuts);\n                        //}\n                    } else {\n                            delete swing.additionalOuts;\n                            delete swing.firstOut;\n                            delete swing.doublePlay;\n                            delete swing.fieldersChoice;\n                        }\n                }\n                swing.thrownOut = swing.bases == 0;\n                if (swing.thrownOut) {\n                    swing.thrownOut = true;\n                    swing.error = false;\n                }\n            }\n        } else {\n            if (Math.abs(90 - splayAngle) < 45 && landingDistance > 300) {\n                swing.bases = 4;\n            } else {\n                swing.foul = true;\n                swing.caught = false;\n            }\n        }\n        this.game.swingResult = swing;\n        if (!_baseballServices_services.Animator.console) {\n            _baseballServices_services.Animator.animateFieldingTrajectory(this.game);\n        }\n    },\n    forcePlaySituation: function forcePlaySituation() {\n        var first = this.first,\n            second = this.second,\n            third = this.third;\n        return first && second && third && 'third' || first && second && 'second' || first && 'first';\n    },\n    //printRunnerNames : function() {\n    //    return [this.first ? this.first.getName() : '', this.second ? this.second.getName() : '', this.third ? this.third.getname() : ''];\n    //},\n    /**\n     * @param splayAngle\n     * @param landingDistance\n     * @returns {string|bool}\n     */\n    findFielder: function findFielder(splayAngle, landingDistance) {\n        if (Math.abs(90 - splayAngle) > 50) return false;\n        if (landingDistance < 10 && landingDistance > -20) {\n            return 'catcher';\n        } else if (landingDistance >= 10 && landingDistance < 66 && Math.abs(90 - splayAngle) < 5) {\n            return 'pitcher';\n        }\n        if (landingDistance > 20 && landingDistance + Math.abs(90 - splayAngle) / 90 * 37 < 155) {\n            if (splayAngle < 45 + 23) {\n                return 'third';\n            } else if (splayAngle < 45 + 23 + 23) {\n                return 'short';\n            } else if (splayAngle < 45 + 23 + 23 + 23) {\n                return 'second';\n            } else {\n                return 'first';\n            }\n        } else if (landingDistance > 90 && landingDistance < 310) {\n            if (splayAngle < 45 + 28) {\n                return 'left';\n            } else if (splayAngle < 45 + 28 + 34) {\n                return 'center';\n            } else {\n                return 'right';\n            }\n        } else {\n            return false;\n        }\n    },\n    positions: {\n        pitcher: [90, 66],\n        catcher: [0, 0],\n        first: [90 + 45 - 7, 98],\n        second: [90 + 12.5, 130],\n        short: [90 - 12.5, 130],\n        third: [90 - 45 + 7, 98],\n        left: [45 + 14, 280],\n        center: [90, 280],\n        right: [135 - 14, 280]\n    },\n    getPolarDistance: function getPolarDistance(a, b) {\n        return _baseballServices_services.Mathinator.getPolarDistance(a, b);\n    },\n    fieldingTest: function fieldingTest() {\n        var angle = Math.random() * 90 + 45;\n        var distance = Math.random() * 320;\n        var fielder = this.findFielder(angle, distance);\n        var data = {};\n        if (fielder) {\n            var fielderCandidates = this.fielderSelectionTest(angle, distance, true);\n            data.fielder = fielderCandidates[1];\n            data[fielderCandidates[0]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[0]][0], this.positions[fielderCandidates[0]][1]]);\n            data[fielderCandidates[1]] = this.getPolarDistance([angle, distance], [this.positions[fielderCandidates[1]][0], this.positions[fielderCandidates[1]][1]]);\n            return data;\n        }\n    },\n    aggregateFieldingTest: function aggregateFieldingTest() {\n        var fielders = {\n            pitcher: { tally: 0, distances: [] },\n            catcher: { tally: 0, distances: [] },\n            first: { tally: 0, distances: [] },\n            second: { tally: 0, distances: [] },\n            short: { tally: 0, distances: [] },\n            third: { tally: 0, distances: [] },\n            left: { tally: 0, distances: [] },\n            center: { tally: 0, distances: [] },\n            right: { tally: 0, distances: [] },\n            'false': { tally: 0, distances: [] }\n        };\n        var selections = [];\n        for (var i = 0; i < 1000; i++) {\n            var angle = Math.random() * 90 + 45;\n            var distance = Math.random() * 320;\n            var fielder = this.findFielder(angle, distance);\n            fielders[fielder].tally++;\n            if (fielder) {\n                fielders[fielder].distances.push(this.getPolarDistance([angle, distance], [this.positions[fielder][0], this.positions[fielder][1]]));\n            }\n            selections.push([angle, distance]);\n            selections.push(this.fielderSelectionTest(angle, distance, true));\n        }\n        return [fielders, selections];\n    },\n    fielderSelectionTest: function fielderSelectionTest(angle, distance, returnFielder) {\n        var distances = [];\n        var minDistance = 300;\n        var giraffe = this;\n        var fielder = false;\n        Iterator.each(this.positions, function (position, spot) {\n            var thisDistance = giraffe.getPolarDistance([angle, distance], spot);\n            distances[thisDistance] = position;\n            if (minDistance > thisDistance) {\n                minDistance = thisDistance;\n                fielder = position;\n            }\n        });\n        return returnFielder ? [fielder, this.findFielder(angle, distance)] : distances;\n    }\n};\n\nexports.Field = Field;\n\n},{\"baseball/Model/Player\":5,\"baseball/Services/_services\":13}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Game = function Game(m) {\n    this.init(m);\n};\n\nGame.prototype = {\n    constructor: Game,\n    gamesIntoSeason: 0,\n    humanControl: 'home', //home, away, both, none\n    console: false,\n    quickMode: true,\n    debug: [],\n    pitcher: {}, // Player&\n    batter: {}, // Player&\n    init: function init(m) {\n        this.startTime = {\n            h: ('00' + (Math.random() * 8 + 10 | 0)).slice(-2),\n            m: ('00' + (Math.random() * 60 | 0)).slice(-2)\n        };\n        this.timeOfDay = {\n            h: this.startTime.h,\n            m: this.startTime.m\n        };\n        if (m) _baseballUtility_utils.text.mode = m;\n        this.gamesIntoSeason = 1 + Math.floor(Math.random() * 142);\n        this.field = new _baseballModelField.Field(this);\n        this.teams.away = new _baseballModelTeam.Team(this);\n        this.teams.home = new _baseballModelTeam.Team(this);\n        this.log = new _baseballUtilityLog.Log();\n        this.log.game = this;\n        this.debug = [];\n        this.helper = _baseballUtility_utils.helper;\n        while (this.teams.away.name == this.teams.home.name) {\n            this.teams.away.pickName();\n        }\n        this.umpire = new _baseballModelUmpire.Umpire(this);\n        if (this.humanPitching()) {\n            this.stage = 'pitch';\n        }\n        this.autoPitchSelect();\n    },\n    passMinutes: function passMinutes(minutes) {\n        this.timeOfDay.m = ('00' + (parseInt(this.timeOfDay.m) + parseInt(minutes))).slice(-2);\n        if (parseInt(this.timeOfDay.m) >= 60) {\n            this.timeOfDay.m = ('00' + parseInt(this.timeOfDay.m) % 60).slice(-2);\n            this.timeOfDay.h = ('00' + (parseInt(this.timeOfDay.h) + 1) % 24).slice(-2);\n        }\n    },\n    getInning: function getInning() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.inning + (this.half == 'top' ? 'オモテ' : 'ウラ') : this.half.toUpperCase() + ' ' + this.inning;\n    },\n    humanBatting: function humanBatting() {\n        var humanControl = this.humanControl;\n        if (humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return humanControl == 'both' || humanControl == 'away';\n            case 'bottom':\n                return humanControl == 'both' || humanControl == 'home';\n        }\n    },\n    humanPitching: function humanPitching() {\n        var humanControl = this.humanControl;\n        if (humanControl == 'none') return false;\n        switch (this.half) {\n            case 'top':\n                return humanControl == 'both' || humanControl == 'home';\n            case 'bottom':\n                return humanControl == 'both' || humanControl == 'away';\n        }\n    },\n    end: function end() {\n        this.stage = 'end';\n        var e, n;\n        e = this.tally.home.R > this.tally.away.R ? 'Home team wins!' : this.tally.home.R == this.tally.away.R ? 'You tied. Yes, you can do that.' : 'Visitors win!';\n        n = this.tally.home.R > this.tally.away.R ? this.teams.home.getName() + 'の勝利' : this.tally.home.R == this.tally.away.R ? '引き分け' : this.teams.away.getName() + 'の勝利';\n        if (this.tally.home.R > this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.W++;\n            this.teams.away.positions.pitcher.stats.pitching.L++;\n        } else if (this.tally.home.R < this.tally.away.R) {\n            this.teams.home.positions.pitcher.stats.pitching.L++;\n            this.teams.away.positions.pitcher.stats.pitching.W++;\n        }\n        this.log.note(e, n);\n        this.log.note('Reload to play again', 'リロるは次の試合へ');\n    },\n    stage: 'pitch', //pitch, swing\n    simulateInput: function simulateInput(callback) {\n        var stage = this.stage,\n            pitchTarget = this.pitchTarget;\n        if (stage == 'end') {\n            return;\n        }\n        if (stage == 'pitch') {\n            this.autoPitch(callback);\n        } else if (stage == 'swing') {\n            if (typeof pitchTarget != 'object') {\n                this.pitchTarget = { x: 100, y: 100 };\n            }\n            this.autoSwing(this.pitchTarget.x, this.pitchTarget.y, callback);\n        }\n    },\n    simulatePitchAndSwing: function simulatePitchAndSwing(callback) {\n        if (this.stage == 'end') {\n            return;\n        }\n        this.autoPitch(callback);\n        var giraffe = this;\n        setTimeout(function () {\n            if (typeof giraffe.pitchTarget != 'object') {\n                giraffe.pitchTarget = { x: 100, y: 100 };\n            }\n            giraffe.autoSwing(giraffe.pitchTarget.x, giraffe.pitchTarget.y, function (callback) {\n                callback();\n            });\n        }, giraffe.field.hasRunnersOn() ? _baseballServices_services.Animator.TIME_FROM_SET + 1200 : _baseballServices_services.Animator.TIME_FROM_WINDUP + 1200);\n    },\n    /**\n     * generically receive click input and decide what to do\n     * @param x\n     * @param y\n     * @param callback\n     */\n    receiveInput: function receiveInput(x, y, callback) {\n        if (this.humanControl == 'none') {\n            return;\n        }\n        if (this.stage == 'end') {\n            return;\n        }\n        if (this.stage == 'pitch' && this.humanPitching()) {\n            this.thePitch(x, y, callback);\n        } else if (this.stage == 'swing' && this.humanBatting()) {\n            this.theSwing(x, y, callback);\n        }\n    },\n    autoPitchSelect: function autoPitchSelect() {\n        var pitchNames = Object.keys(this.pitcher.pitching);\n        var pitchName = pitchNames[Math.random() * pitchNames.length | 0];\n        var pitch = this.pitcher.pitching[pitchName];\n        pitch.name = pitchName;\n        this.pitchInFlight = pitch;\n    },\n    autoPitch: function autoPitch(callback) {\n        var pitcher = this.pitcher,\n            giraffe = this;\n        if (this.stage == 'pitch') {\n            this.autoPitchSelect();\n            pitcher.windingUp = true;\n            if (!this.console) {\n                $('.baseball').addClass('hide');\n                var windup = $('.windup');\n                windup.css('width', '100%');\n            }\n            var pitch = _baseballServices_services.Distribution.pitchLocation(),\n                x = pitch.x,\n                y = pitch.y;\n            if (this.quickMode) {\n                this.thePitch(x, y, callback);\n            } else {\n                windup.animate({ width: 0 }, this.field.hasRunnersOn() ? _baseballServices_services.Animator.TIME_FROM_SET : _baseballServices_services.Animator.TIME_FROM_WINDUP, function () {\n                    !giraffe.console && $('.baseball.pitch').removeClass('hide');\n                    giraffe.thePitch(x, y, callback);\n                    pitcher.windingUp = false;\n                });\n            }\n        }\n    },\n    autoSwing: function autoSwing(deceptiveX, deceptiveY, callback) {\n        var giraffe = this;\n        var bonus = this.batter.eye.bonus || 0,\n            eye = this.batter.skill.offense.eye + 6 * (this.umpire.count.balls + this.umpire.count.strikes) + bonus,\n            convergence,\n            convergenceSum;\n\n        var x = _baseballServices_services.Distribution.centralizedNumber(),\n            y = _baseballServices_services.Distribution.centralizedNumber();\n        if (100 * Math.random() < eye) {\n            convergence = 1.35 * 4.2 * eye / 100;\n            convergenceSum = 1 + convergence;\n            deceptiveX = this.pitchInFlight.x;\n            deceptiveY = this.pitchInFlight.y;\n        } else {\n            convergence = 1.35 * 0.5 * eye / 100;\n            convergenceSum = 1 + convergence;\n        }\n        x = (deceptiveX * convergence + x) / convergenceSum;\n        y = (deceptiveY * convergence + y) / convergenceSum;\n\n        this.swingResult.x = _baseballServices_services.Distribution.cpuSwing(x, this.pitchInFlight.x, eye);\n        this.swingResult.y = _baseballServices_services.Distribution.cpuSwing(y, this.pitchInFlight.y, eye);\n\n        var swingProbability = _baseballServices_services.Distribution.swingLikelihood(eye, x, y, this.umpire);\n        if (swingProbability < 100 * Math.random()) {\n            x = -20;\n        }\n\n        callback(function () {\n            giraffe.theSwing(x, y);\n        });\n    },\n    opponentConnected: false,\n    waitingCallback: function waitingCallback() {},\n    awaitPitch: function awaitPitch(callback, swingResult) {\n        var giraffe = this;\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitSwing(swingResult);\n        } else {\n            setTimeout(function () {\n                giraffe.autoPitch(callback);\n            }, 4000);\n        }\n    },\n    awaitSwing: function awaitSwing(x, y, callback, pitchInFlight, pitchTarget) {\n        if (this.opponentConnected) {\n            this.waitingCallback = callback;\n            this.opponentService.emitPitch({\n                inFlight: pitchInFlight,\n                target: pitchTarget\n            });\n        } else {\n            this.autoSwing(x, y, callback);\n        }\n    },\n    thePitch: function thePitch(x, y, callback, override) {\n        if (this.stage == 'pitch') {\n            if (override) {\n                this.pitchInFlight = override.inFlight;\n                this.pitchTarget = override.target;\n                callback = this.waitingCallback;\n            } else {\n                this.pitcher.fatigue++;\n                this.pitchTarget.x = x;\n                this.pitchTarget.y = y;\n\n                this.pitchInFlight.breakDirection = this.helper.pitchDefinitions[this.pitchInFlight.name].slice(0, 2);\n                this.battersEye = _baseballUtility_utils.text.getBattersEye(this);\n\n                var control = Math.floor(this.pitchInFlight.control - this.pitcher.fatigue / 2);\n                this.pitchTarget.x = _baseballServices_services.Distribution.pitchControl(this.pitchTarget.x, control);\n                this.pitchTarget.y = _baseballServices_services.Distribution.pitchControl(this.pitchTarget.y, control);\n\n                if (this.pitcher.throws == 'right') this.pitchInFlight.breakDirection[0] *= -1;\n\n                var breakEffect = _baseballServices_services.Distribution.breakEffect(this.pitchInFlight, this.pitcher, this.pitchTarget.x, this.pitchTarget.y);\n\n                this.pitchInFlight.x = breakEffect.x;\n                this.pitchInFlight.y = breakEffect.y;\n            }\n            this.log.notePitch(this.pitchInFlight, this.batter);\n\n            this.stage = 'swing';\n            if (this.humanControl != 'none' && (this.humanControl == 'both' || this.humanBatting())) {\n                callback();\n            } else {\n                this.awaitSwing(x, y, callback, this.pitchInFlight, this.pitchTarget);\n            }\n        }\n    },\n    battersEye: {\n        e: '',\n        n: ''\n    },\n    theSwing: function theSwing(x, y, callback, override) {\n        if (this.stage == 'swing') {\n            if (override) {\n                this.swingResult = override;\n                callback = this.waitingCallback;\n            } else {\n                this.swingResult = {};\n                var bonus = this.batter.eye.bonus || 0,\n                    eye = this.batter.skill.offense.eye + 6 * (this.umpire.count.balls + this.umpire.count.strikes) + bonus;\n\n                if (x >= 0 && x <= 200) {\n                    this.batter.fatigue++;\n\n                    this.swingResult.x = x - this.pitchInFlight.x;\n                    this.swingResult.y = y - this.pitchInFlight.y;\n                    this.swingResult.angle = this.setBatAngle();\n\n                    var recalculation = _baseballServices_services.Mathinator.getAngularOffset(this.swingResult, this.swingResult.angle);\n                    var precision = _baseballServices_services.Distribution.swing(eye);\n\n                    this.swingResult.x = Math.abs(recalculation.x) > 20 ? recalculation.x * precision : recalculation.x;\n                    this.swingResult.y = -5 + (recalculation.y < 0 ? recalculation.y * precision : recalculation.y);\n\n                    //log(recalculation.y, precision);\n\n                    this.swingResult.looking = false;\n                    if (Math.abs(this.swingResult.x) < 60 && Math.abs(this.swingResult.y) < 35) {\n                        this.swingResult.contact = true;\n                        this.field.determineSwingContactResult(this.swingResult);\n                        // log(this.swingResult.flyAngle, Math.floor(this.swingResult.x), Math.floor(this.swingResult.y));\n                        this.debug.push(this.swingResult);\n                    } else {\n                        this.swingResult.contact = false;\n                    }\n                } else {\n                    this.swingResult.strike = this.pitchInFlight.x > 50 && this.pitchInFlight.x < 150 && this.pitchInFlight.y > 35 && this.pitchInFlight.y < 165;\n                    this.batter.eye.bonus = Math.max(0, eye - Math.sqrt(Math.pow(this.batter.eye.x - this.pitchInFlight.x, 2) + Math.pow(this.batter.eye.y - this.pitchInFlight.y, 2)) * 1.5);\n                    this.swingResult.contact = false;\n                    this.swingResult.looking = true;\n                    this.batter.eye.x = this.pitchInFlight.x;\n                    this.batter.eye.y = this.pitchInFlight.y;\n                }\n            }\n            this.log.noteSwing(this.swingResult);\n            this.stage = 'pitch';\n\n            var half = this.half;\n            var result = this.swingResult;\n            this.umpire.makeCall();\n            emit = false;\n            if (half != this.half) {\n                callback = this.startOpponentPitching;\n                var emit = !override;\n            }\n\n            if (typeof callback == 'function') {\n                if (this.humanControl != 'none' && (this.humanControl == 'both' || this.teams[this.humanControl] == this.pitcher.team)) {\n                    callback();\n                    if (emit) {\n                        if (this.opponentService && this.opponentConnected) {\n                            this.opponentService.emitSwing(result);\n                        }\n                    }\n                } else {\n                    this.awaitPitch(callback, result);\n                }\n            }\n        }\n    },\n    setBatAngle: function setBatAngle(x, y) {\n        var giraffe = this,\n            pitchInFlight = this.pitchInFlight,\n            swingResult = this.swingResult;\n        var origin = {\n            x: giraffe.batter.bats == 'right' ? -10 : 210,\n            y: 160\n        };\n        var swing = {\n            x: x ? x : pitchInFlight.x + swingResult.x,\n            y: y ? y : pitchInFlight.y + swingResult.y\n        };\n        return _baseballServices_services.Mathinator.battingAngle(origin, swing);\n    },\n    debugOut: function debugOut() {\n        log('slugging', this.debug.filter(function (a) {\n            return a.bases == 1;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 2;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 3;\n        }).length, this.debug.filter(function (a) {\n            return a.bases == 4;\n        }).length);\n        log('grounders', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle < -5;\n        }).length);\n        log('grounders thrown out', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle < -5 && a.thrownOut;\n        }).length);\n        log('weak air hits (thrown out)', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle > 0 && a.thrownOut;\n        }).length);\n        log('good air hits (not caught)', this.debug.filter(function (a) {\n            return !a.caught && !a.foul && a.flyAngle > 0 && !a.thrownOut;\n        }).length);\n\n        var PO = {};\n        this.debug.map(function (a) {\n            if (!a.fielder) return;\n            if (!PO[a.fielder]) {\n                PO[a.fielder] = 0;\n            }\n            if (!a.bases && a.fielder) {\n                PO[a.fielder]++;\n            }\n        });\n        log('fielding outs', PO);\n\n        var hitters = this.teams.away.lineup.concat(this.teams.home.lineup);\n        var atBats = [];\n        hitters.map(function (a) {\n            atBats = atBats.concat(a.getAtBats().map(function (ab) {\n                return ab.text;\n            }));\n        });\n\n        var LO = atBats.filter(function (ab) {\n            return ab == 'LO';\n        }).length;\n        var FO = atBats.filter(function (ab) {\n            return ab == 'FO';\n        }).length;\n        var GO = atBats.filter(function (ab) {\n            return ab == 'GO';\n        }).length;\n        var GIDP = atBats.filter(function (ab) {\n            return ab == '(IDP)';\n        }).length;\n        var SO = atBats.filter(function (ab) {\n            return ab == 'SO';\n        }).length;\n        var BB = atBats.filter(function (ab) {\n            return ab == 'BB';\n        }).length;\n        var SAC = atBats.filter(function (ab) {\n            return ab == 'SAC';\n        }).length;\n        var FC = atBats.filter(function (ab) {\n            return ab == 'FC';\n        }).length;\n        log('line outs', LO, 'fly outs', FO, 'groundouts', GO, 'strikeouts', SO, 'sacrifices', SAC, 'FC', FC, 'gidp', GIDP);\n        log('BB', BB);\n        log('fouls', this.debug.filter(function (a) {\n            return a.foul;\n        }).length);\n        log('fatigue, home vs away');\n        var teams = this.teams;\n        var fatigue = { home: {}, away: {} };\n        _baseballServices_services.Iterator.each(this.teams.home.positions, function (key) {\n            var position = key;\n            fatigue.home[position] = teams.home.positions[position].fatigue;\n            fatigue.away[position] = teams.away.positions[position].fatigue;\n        });\n        console.table(fatigue);\n        console.table(this.scoreboard);\n        console.table(this.tally);\n    },\n    toData: function toData() {\n        var data = {};\n        data.half = this.half;\n        data.inning = this.inning;\n        data.tally = this.tally;\n        var giraffe = this;\n        var players = this.teams.away.lineup.concat(this.teams.home.lineup);\n        // note: bench not included\n        data.field = {\n            first: players.indexOf(this.field.first),\n            second: players.indexOf(this.field.second),\n            third: players.indexOf(this.field.third)\n        };\n        data.batter = players.indexOf(this.batter);\n        data.deck = players.indexOf(this.deck);\n        data.hole = players.indexOf(this.hole);\n        data.teams = {\n            home: {\n                name: giraffe.teams.home.name,\n                nameJ: giraffe.teams.home.nameJ\n            },\n            away: {\n                name: giraffe.teams.away.name,\n                nameJ: giraffe.teams.away.nameJ\n            }\n        };\n        data.umpire = {\n            says: giraffe.umpire.says,\n            count: {\n                strikes: giraffe.umpire.count.strikes,\n                balls: giraffe.umpire.count.balls,\n                outs: giraffe.umpire.count.outs\n            }\n        };\n        data.players = players.map(function (player) {\n            return player.serialize();\n        });\n        data.log = {\n            pitchRecord: giraffe.log.pitchRecord,\n            record: giraffe.log.record\n        };\n        data.gamesIntoSeason = this.gamesIntoSeason;\n        return data;\n    },\n    fromData: function fromData(data) {\n        this.half = data.half;\n        this.inning = data.inning;\n        this.tally = data.tally;\n        var giraffe = this;\n        var players = data.players.map(function (playerJson, index) {\n            var playerData = JSON.parse(playerJson);\n            if (index > 8) {\n                var side = 'home';\n                index = index - 9;\n            } else {\n                side = 'away';\n            }\n            var player = giraffe.teams[side].positions[playerData.position];\n            player.fromData(playerData);\n            giraffe.teams[side].lineup[index] = player;\n            player.resetStats(data.gamesIntoSeason);\n            return player;\n        });\n        this.field.first = players[data.field.first];\n        this.field.second = players[data.field.second];\n        this.field.third = players[data.field.third];\n        this.batter = players[data.batter];\n        this.deck = players[data.deck];\n        this.hole = players[data.hole];\n        this.umpire.says = data.umpire.says;\n        this.umpire.count = data.umpire.count;\n        this.teams.away.name = data.teams.away.name;\n        this.teams.away.nameJ = data.teams.away.nameJ;\n        this.teams.home.name = data.teams.home.name;\n        this.teams.home.nameJ = data.teams.home.nameJ;\n        this.log.pitchRecord = data.log.pitchRecord;\n        this.log.record = data.log.record;\n        this.log.stabilizeShortRecord();\n        this.gamesIntoSeason = data.gamesIntoSeason;\n        return this;\n    },\n    startOpponentPitching: null, // late function\n    pitchTarget: { x: 100, y: 100 },\n    pitchInFlight: {\n        x: 100,\n        y: 100,\n        breakDirection: [0, 0],\n        name: 'slider',\n        velocity: 50,\n        'break': 50,\n        control: 50\n    },\n    swingResult: {\n        x: 100, //difference to pitch location\n        y: 100, //difference to pitch location\n        strike: false,\n        foul: false,\n        caught: false,\n        contact: false,\n        looking: true,\n        bases: 0,\n        fielder: 'short',\n        outs: 0\n    },\n    playResult: {\n        batter: '',\n        fielder: ''\n    },\n    showPlayResultPanels: function showPlayResultPanels(batter) {\n        var batterOutcomes = {};\n        var atBat = batter.atBats.slice(0).pop();\n        var fielderOutcomes = {};\n        var n = function n() {\n            var n = Math.floor(Math.random() * 3);\n            return n ? n : '';\n        };\n        this.playResult = {\n            batter: 'B_placeholder' + n() || batterOutcomes[atBat] || 'batter/' + atBat,\n            fielder: 'F_placeholder' + n() || fielderOutcomes[atBat] || 'fielder/' + atBat\n        };\n    },\n    pitchSelect: function pitchSelect() {},\n    field: null,\n    teams: {\n        away: null,\n        home: null\n    },\n    log: null,\n    half: 'top',\n    inning: 1,\n    scoreboard: {\n        away: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        },\n        home: {\n            1: 0,\n            2: 0,\n            3: 0,\n            4: 0,\n            5: 0,\n            6: 0,\n            7: 0,\n            8: 0,\n            9: 0\n        }\n    },\n    resetTally: function resetTally() {\n        this.tally = {\n            away: {\n                H: 0,\n                R: 0,\n                E: 0\n            },\n            home: {\n                H: 0,\n                R: 0,\n                E: 0\n            }\n        };\n    },\n    tally: {\n        away: {\n            H: 0,\n            R: 0,\n            E: 0\n        },\n        home: {\n            H: 0,\n            R: 0,\n            E: 0\n        }\n    }\n};\n\nexports.Game = Game;\n\n},{\"baseball/Model/Field\":2,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7,\"baseball/Services/_services\":13,\"baseball/Utility/Log\":14,\"baseball/Utility/_utils\":15}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Manager = function Manager(team) {\n    this.init(team);\n};\n\nManager.prototype = {\n    constructor: Manager,\n    init: function init(team) {\n        this.team = team;\n    },\n    makeLineup: function makeLineup() {\n        var jerseyNumber = 1;\n        this.team.positions.pitcher = this.selectForSkill(this.team.bench, ['pitching']);\n        this.team.positions.pitcher.position = 'pitcher';\n        this.team.positions.pitcher.number = jerseyNumber++;\n        this.team.positions.catcher = this.selectForSkill(this.team.bench, ['defense', 'catching'], 'right');\n        this.team.positions.catcher.position = 'catcher';\n        this.team.positions.catcher.number = jerseyNumber++;\n        _baseballServices_services.Iterator.each(this.team.bench, function (key, player) {\n            player.number = jerseyNumber++;\n        });\n        this.team.positions.short = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.short.position = 'short';\n        this.team.positions.second = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.second.position = 'second';\n        this.team.positions.third = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'right');\n        this.team.positions.third.position = 'third';\n        this.team.positions.center = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.center.position = 'center';\n        this.team.positions.left = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.left.position = 'left';\n        this.team.positions.right = this.selectForSkill(this.team.bench, ['defense', 'speed']);\n        this.team.positions.right.position = 'right';\n        this.team.positions.first = this.selectForSkill(this.team.bench, ['defense', 'fielding'], 'left');\n        this.team.positions.first.position = 'first';\n\n        this.team.lineup[3] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[3].order = 3;\n        this.team.lineup[2] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[2].order = 2;\n        this.team.lineup[4] = this.selectForSkill(this.team.positions, ['offense', 'power']);\n        this.team.lineup[4].order = 4;\n        this.team.lineup[0] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[0].order = 0;\n        this.team.lineup[1] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[1].order = 1;\n        this.team.lineup[5] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[5].order = 5;\n        this.team.lineup[6] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[6].order = 6;\n        this.team.lineup[7] = this.selectForSkill(this.team.positions, ['offense', 'eye']);\n        this.team.lineup[7].order = 7;\n        this.team.lineup[8] = this.selectForSkill(this.team.positions, ['offense', 'speed']);\n        this.team.lineup[8].order = 8;\n    },\n    selectForSkill: function selectForSkill(pool, skillset, requiredThrowingHandedness) {\n        if (this.team.bench.length || pool == this.team.positions) {\n            var selection = this.team.bench[0];\n            var rating = 0;\n            var index = 0;\n            _baseballServices_services.Iterator.each(pool, function (key, player) {\n                var skills = skillset.slice();\n                var cursor = player.skill;\n                var property = skills.shift();\n                while (property) {\n                    cursor = cursor[property];\n                    property = skills.shift();\n                }\n                if (!(player.order + 1) && cursor >= rating && (!requiredThrowingHandedness || player.throws == requiredThrowingHandedness)) {\n                    rating = cursor;\n                    selection = player;\n                    index = key;\n                }\n            });\n            if (pool == this.team.bench) {\n                delete this.team.bench[index];\n                this.team.bench = this.team.bench.filter(function (player) {\n                    return player instanceof selection.constructor;\n                });\n            }\n            return selection;\n        }\n        return 'no players available';\n    }\n};\n\nexports.Manager = Manager;\n\n},{\"baseball/Services/_services\":13}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar _baseballModel_models = require('baseball/Model/_models');\n\nvar Player = function Player(team) {\n    this.init(team);\n    this.resetStats(this.team.game.gamesIntoSeason);\n};\n\nPlayer.prototype = {\n    constructor: Player,\n    init: function init(team, hero) {\n        this.throws = Math.random() > 0.86 ? 'left' : 'right';\n        this.bats = Math.random() > 0.75 ? 'left' : 'right';\n        this.team = team;\n        this.skill = {};\n        this.eye = {\n            x: 100,\n            y: 100\n        };\n        this.pitching = { averaging: [] };\n        this.number = 0;\n        this.randomizeSkills(hero || Math.random() > 0.9);\n        var surnameKey = Math.floor(Math.random() * _baseballUtility_utils.data.surnames.length),\n            nameKey = Math.floor(Math.random() * _baseballUtility_utils.data.names.length);\n\n        this.name = _baseballUtility_utils.data.surnames[surnameKey] + ' ' + _baseballUtility_utils.data.names[nameKey];\n        var jSurname = _baseballUtility_utils.data.surnamesJ[surnameKey],\n            jGivenName = _baseballUtility_utils.data.namesJ[nameKey];\n        if (jSurname.length == 1 && jGivenName.length <= 2) jSurname += '・';\n        if (jGivenName.length == 1 && jSurname.indexOf('・') < 0) jSurname += '・';\n        this.nameJ = jSurname + jGivenName;\n        this.surname = _baseballUtility_utils.data.surnames[surnameKey];\n        this.surnameJ = _baseballUtility_utils.data.surnamesJ[surnameKey];\n        this.atBats = [];\n    },\n    serialize: function serialize() {\n        var team = this.team;\n        delete this.team;\n        var data = JSON.stringify(this);\n        this.team = team;\n        return data;\n    },\n    fromData: function fromData(data) {\n        var giraffe = this;\n        _baseballServices_services.Iterator.each(data, function (key, value) {\n            giraffe[key] = value;\n        });\n        delete this.atBatObjects;\n        this.getAtBats();\n    },\n    resetStats: function resetStats() {\n        var gamesIntoSeason = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n        var offense = this.skill.offense;\n        var defense = this.skill.defense;\n        var randBetween = function randBetween(a, b, skill) {\n            var total = 0,\n                count = 0;\n            skill += '';\n            if (!skill) skill = '';\n            _baseballServices_services.Iterator.each(skill.split(' '), function (key, value) {\n                var skill = value;\n                if (offense[skill]) skill = offense[skill];\n                if (defense[skill]) skill = defense[skill];\n                if (isNaN(skill)) skill = 50;\n                total += skill;\n                count++;\n            });\n\n            skill = Math.sqrt(0.05 + Math.random() * 0.95) * (total / (count * 0.97));\n            return Math.floor(skill / 100 * (b - a) + a);\n        };\n        var IP, ER, GS, W, L;\n        if (this.skill.pitching > 65) {\n            IP = (this.skill.pitching - 65) * gamesIntoSeason / 20;\n            ER = IP / 9 * randBetween(800, 215, this.skill.pitching) / 100;\n            if (IP > gamesIntoSeason) {\n                //starter\n                GS = Math.floor(gamesIntoSeason / 5);\n                W = randBetween(GS * 0.1, GS * 0.8, this.skill.pitching / 1.20);\n                L = randBetween(GS - W, 0, this.skill.pitching / 3);\n            } else {\n                //reliever\n                GS = Math.floor(gamesIntoSeason / 40);\n                W = randBetween(0, GS * 0.6, this.skill.pitching);\n                L = randBetween(GS - W, 0, this.skill.pitching);\n            }\n        }\n        var pa = randBetween(gamesIntoSeason * 3, gamesIntoSeason * 5, 'speed eye');\n        var paRemaining = pa;\n        var bb = Math.floor(randBetween(0, 18, 'power eye') * paRemaining / 100);\n        paRemaining -= bb;\n        var ab = paRemaining;\n        var so = Math.floor(randBetween(25, 2, 'eye') * paRemaining / 100);\n        paRemaining -= so;\n        var h = Math.floor(randBetween(185, 472, 'eye power speed') * paRemaining / 1000);\n        paRemaining -= h;\n\n        var doubles = randBetween(0, h / 4, 'power speed');\n        var triples = randBetween(0, h / 12, 'speed');\n        var hr = Math.max(0, randBetween(-h / 20, h / 5, 'power eye'));\n        var r = randBetween(h / 8, (h + bb) / 3, 'speed') + hr;\n        var rbi = randBetween(h / 8, h / 2, 'power eye') + hr;\n        var hbp = randBetween(0, gamesIntoSeason / 25);\n        var sac = randBetween(0, gamesIntoSeason / 5, 'eye');\n\n        var chances = randBetween(0, gamesIntoSeason * 10, 'fielding');\n        var E = randBetween(chances / 10, 0, 'fielding');\n        var PO = chances - E;\n\n        this.stats = {\n            pitching: {\n                pitches: 0, // in game\n                GS: GS,\n                W: W,\n                L: L,\n                strikes: 0, // in game\n                K: 0, // in game\n                getK9: function getK9() {\n                    return this.K / (this.IP[0] / 9);\n                },\n                getERA: function getERA() {\n                    return 9 * this.ER / Math.max(1 / 3, this.IP[0] + this.IP[1] / 3);\n                },\n                ERA: null,\n                ER: ER,\n                H: 0, // in game\n                HR: 0, // in game\n                BB: 0, // in game\n                IP: [IP, 0],\n                WHIP: 0,\n                getWHIP: function getWHIP() {\n                    return (this.H + this.BB) / (this.IP[0] ? this.IP[0] : 1);\n                }\n            },\n            batting: {\n                getBA: function getBA() {\n                    return this.h / Math.max(1, this.ab);\n                },\n                ba: null,\n                getOBP: function getOBP() {\n                    return (this.h + this.bb + this.hbp) / (this.ab + this.bb + this.hbp + this.sac);\n                },\n                obp: null,\n                getSLG: function getSLG() {\n                    return (this.h - this['2b'] - this['3b'] - this.hr + 2 * this['2b'] + 3 * this['3b'] + 4 * this.hr) / this.ab;\n                },\n                slg: null,\n                pa: pa,\n                ab: ab,\n                so: so,\n                bb: bb,\n                h: h,\n                '2b': doubles,\n                '3b': triples,\n                hr: hr,\n                r: r,\n                rbi: rbi,\n                hbp: hbp,\n                sac: sac\n            },\n            fielding: {\n                E: E,\n                PO: PO, // should depend on position\n                A: Math.floor(Math.random() * 5) + 1 // ehh should depend on position\n            }\n        };\n        this.stats.pitching.ERA = this.stats.pitching.getERA();\n        this.stats.pitching.K9 = this.stats.pitching.getK9();\n        this.stats.pitching.WHIP = this.stats.pitching.getWHIP();\n        this.stats.batting.ba = this.stats.batting.getBA();\n    },\n    atBatObjects: [],\n    getAtBats: function getAtBats() {\n        if (this.atBats.length > this.atBatObjects.length) {\n            this.atBatObjects = this.atBats.map(function (item) {\n                return new _baseballModel_models.AtBat(item);\n            });\n        }\n        return this.atBatObjects;\n    },\n    recordRBI: function recordRBI() {\n        this.atBats[this.atBats.length - 1] += _baseballModel_models.AtBat.prototype.RBI_INDICATOR;\n    },\n    recordInfieldHit: function recordInfieldHit() {\n        this.atBats[this.atBats.length - 1] += _baseballModel_models.AtBat.prototype.INFIELD_HIT_INDICATOR;\n    },\n    getBaseRunningTime: function getBaseRunningTime() {\n        return _baseballServices_services.Mathinator.baseRunningTime(this.skill.offense.speed);\n    },\n    randomizeSkills: function randomizeSkills(hero) {\n        this.hero = hero;\n        var giraffe = this;\n        var randValue = function randValue(isPitching) {\n            var value = Math.floor(Math.pow(Math.random(), 0.75) * 80 + Math.random() * 20);\n            if (hero) {\n                value += Math.floor((100 - value) * Math.max(Math.random(), isPitching ? 0 : 0.65));\n            }\n            if (isPitching) giraffe.pitching.averaging.push(value);\n            return value;\n        };\n        this.skill.offense = {\n            eye: randValue(),\n            power: randValue(),\n            speed: randValue()\n        };\n        this.skill.defense = {\n            catching: randValue(),\n            fielding: randValue(),\n            speed: randValue(),\n            throwing: randValue()\n        };\n        this.pitching.averaging = [];\n        this.pitching['4-seam'] = {\n            velocity: randValue(true),\n            'break': randValue(true),\n            control: randValue(true)\n        };\n        this.pitching.slider = {\n            velocity: randValue(true),\n            'break': randValue(true),\n            control: randValue(true)\n        };\n        if (Math.random() < 0.17) {\n            // can pitch!\n            if (Math.random() > 0.6) {\n                this.pitching['2-seam'] = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.18) {\n                this.pitching.fork = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() > 0.77) {\n                this.pitching.cutter = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n            if (Math.random() < 0.21) {\n                this.pitching.sinker = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.4) {\n                this.pitching.curve = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n\n            if (Math.random() < 0.9) {\n                this.pitching.change = {\n                    velocity: randValue(true),\n                    'break': randValue(true),\n                    control: randValue(true)\n                };\n            }\n        }\n        this.skill.pitching = Math.floor(this.pitching.averaging.reduce(function (prev, current) {\n            return prev + current;\n        }) / this.pitching.averaging.length + this.pitching.averaging.length * 3);\n        delete this.pitching.averaging;\n    },\n    getSurname: function getSurname() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.surnameJ : this.surname;\n    },\n    getName: function getName() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.nameJ : this.name;\n    },\n    getUniformNumber: function getUniformNumber() {\n        return (0, _baseballUtility_utils.text)('#') + this.number;\n    },\n    getOrder: function getOrder() {\n        return (0, _baseballUtility_utils.text)([' 1st', ' 2nd', ' 3rd', ' 4th', ' 5th', ' 6th', '7th', ' 8th', ' 9th'][this.order]);\n    },\n    eye: {},\n    fatigue: 0,\n    name: '',\n    number: 0,\n    position: '',\n    atBats: []\n};\n\nexports.Player = Player;\n\n},{\"baseball/Model/_models\":8,\"baseball/Services/_services\":13,\"baseball/Utility/_utils\":15}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar Team = function Team(game) {\n    this.init(game);\n};\n\nTeam.prototype = {\n    constructor: Team,\n    init: function init(game) {\n        this.pickName();\n        this.lineup = [];\n        this.bench = [];\n        this.bullpen = [];\n        this.positions = {\n            pitcher: null,\n            catcher: null,\n            first: null,\n            second: null,\n            short: null,\n            third: null,\n            left: null,\n            center: null,\n            right: null\n        };\n        this.game = game;\n        for (var j = 0; j < 20; j++) {\n            this.bench.push(new _baseballModelPlayer.Player(this));\n        }\n        if (this.bench.length == 20) {\n            this.manager = new _baseballModelManager.Manager(this);\n            this.manager.makeLineup();\n        }\n    },\n    pickName: function pickName() {\n        var teamNameIndex = Math.floor(Math.random() * _baseballUtility_utils.data.teamNames.length);\n        this.name = _baseballUtility_utils.data.teamNames[teamNameIndex];\n        this.nameJ = _baseballUtility_utils.data.teamNamesJ[teamNameIndex];\n    },\n    getName: function getName() {\n        return _baseballUtility_utils.text.mode == 'n' ? this.nameJ : this.name;\n    },\n    lineup: [],\n    positions: {},\n    manager: null,\n    bench: [],\n    bullpen: [],\n    nowBatting: 0,\n    expanded: 'Player&'\n};\n\nexports.Team = Team;\n\n},{\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Utility/_utils\":15}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar Umpire = function Umpire(game) {\n    this.init(game);\n};\n\nUmpire.prototype = {\n    constructor: Umpire,\n    init: function init(game) {\n        this.game = game;\n        this.playBall();\n    },\n    count: {\n        strikes: 0,\n        balls: 0,\n        outs: 0\n    },\n    playBall: function playBall() {\n        var game = this.game;\n        game.half = 'top';\n        game.inning = 1;\n        game.batter = game.teams.away.lineup[0];\n        game.batterRunner = game.teams.away.lineup[0];\n        game.deck = game.teams.away.lineup[1];\n        game.hole = game.teams.away.lineup[2];\n        game.pitcher = game.teams.home.positions.pitcher;\n        var n = '一回のオモテ、' + game.teams.away.getName() + 'の攻撃対' + game.teams.home.getName() + '、ピッチャーは' + game.teams.home.positions.pitcher.getName() + '。',\n            e = 'Top 1, ' + game.teams.away.name + ' offense vs. ' + game.teams.home.positions.pitcher.name + ' starting for ' + game.teams.home.name;\n        game.log.note(e, n);\n        game.log.noteBatter(game.batter);\n    },\n    makeCall: function makeCall() {\n        this.says = '';\n        var game = this.game;\n        var result = game.swingResult;\n        var pitcher = game.pitcher;\n        var batter = game.batter;\n\n        if (game.swingResult.fielder) {\n            var fielder = game.teams[game.half == 'top' ? 'home' : 'away'].positions[result.fielder];\n        } else {\n            fielder = null;\n        }\n\n        game.batterRunner = game.batter;\n\n        pitcher.stats.pitching.pitches++;\n        if (result.looking) {\n            if (result.strike) {\n                this.count.strikes++;\n                pitcher.stats.pitching.strikes++;\n            } else {\n                this.count.balls++;\n            }\n        } else {\n            pitcher.stats.pitching.strikes++;\n            if (result.contact) {\n                game.passMinutes(1);\n                if (result.caught) {\n                    batter.stats.batting.pa++;\n                    pitcher.stats.pitching.IP[1]++;\n                    if (result.sacrificeAdvances.length && this.count.outs < 2) {\n                        batter.stats.batting.sac++;\n                        game.batter.atBats.push(_baseballUtility_utils.Log.prototype.SACRIFICE);\n                        this.advanceRunners(false, null, result.sacrificeAdvances);\n                    } else {\n                        batter.stats.batting.ab++;\n                        if (result.flyAngle < 15) {\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.LINEOUT);\n                        } else {\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.FLYOUT);\n                        }\n                    }\n                    this.count.outs++;\n                    this.newBatter();\n                } else {\n                    if (result.foul) {\n                        this.count.strikes++;\n                        if (this.count.strikes > 2) this.count.strikes = 2;\n                    } else {\n                        batter.stats.batting.pa++;\n                        batter.stats.batting.ab++;\n                        if (result.firstOut) {\n                            result.additionalOuts.map(function (runner) {\n                                if (runner !== 'batter') {\n                                    game.field[runner] = null;\n                                }\n                            });\n                            this.count.outs += result.additionalOuts.length;\n                        }\n                        if (result.fieldersChoice && this.count.outs < 2) {\n                            result.bases = 0;\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.FIELDERS_CHOICE);\n                            this.advanceRunners(false, result.fieldersChoice);\n                            result.doublePlay && game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GIDP);\n                            this.reachBase();\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        } else if (result.fieldersChoice) {\n                            result.bases = 0;\n                            result.thrownOut = true;\n                        }\n                        if (result.thrownOut) {\n                            this.count.outs++;\n                            pitcher.stats.pitching.IP[1]++;\n                            game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GROUNDOUT);\n                            result.doublePlay && game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GIDP);\n                            if (this.count.outs < 3) {\n                                this.advanceRunners(false);\n                            }\n                            result.outs = this.count.outs;\n                            this.newBatter();\n                        }\n                        if (result.hitByPitch) {\n                            batter.stats.batting.ab--;\n                        }\n                        if (result.bases) {\n                            if (!result.error) {\n                                game.tally[game.half == 'top' ? 'away' : 'home'][_baseballUtility_utils.Log.prototype.SINGLE]++;\n                                pitcher.stats.pitching.H++;\n                            } else {\n                                if (result.bases > 0) {\n                                    game.tally[game.half == 'top' ? 'home' : 'away'].E++;\n                                    fielder.stats.fielding.E++;\n                                }\n                            }\n                            var bases = result.bases;\n                            switch (bases) {\n                                case 0:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.GROUNDOUT);\n                                    break;\n                                case 1:\n                                    if (result.error) {\n                                        game.batter.atBats.push(_baseballUtility_utils.Log.prototype.REACHED_ON_ERROR);\n                                    } else {\n                                        game.batter.atBats.push(_baseballUtility_utils.Log.prototype.SINGLE);\n                                        batter.stats.batting.h++;\n                                    }\n                                    break;\n                                case 2:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.DOUBLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['2b']++;\n                                    break;\n                                case 3:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.TRIPLE);\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting['3b']++;\n                                    break;\n                                case 4:\n                                    game.batter.atBats.push(_baseballUtility_utils.Log.prototype.HOMERUN);\n                                    pitcher.stats.pitching.HR++;\n                                    batter.stats.batting.h++;\n                                    batter.stats.batting.hr++;\n                                    break;\n                            }\n                            if (bases > 0 && bases < 4 && !result.error) {\n                                if (['left', 'right', 'center'].indexOf(result.fielder) == -1) {\n                                    batter.recordInfieldHit();\n                                }\n                            }\n                            if (bases >= 1) {\n                                this.advanceRunners();\n                                this.reachBase();\n                                bases -= 1;\n                            }\n                            while (bases > 0) {\n                                bases -= 1;\n                                this.advanceRunners();\n                            }\n                            this.newBatter();\n                        }\n                    }\n                }\n            } else {\n                this.count.strikes++;\n            }\n        }\n\n        this.says = this.count.balls + ' and ' + this.count.strikes;\n\n        result.outs = this.count.outs;\n\n        if (this.count.strikes > 2) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.ab++;\n            batter.stats.batting.so++;\n            pitcher.stats.pitching.K++;\n            this.count.outs++;\n            pitcher.stats.pitching.IP[1]++;\n            this.count.balls = this.count.strikes = 0;\n            this.says = 'Strike three. Batter out.';\n            batter.atBats.push(_baseballUtility_utils.Log.prototype.STRIKEOUT);\n            this.newBatter();\n        }\n        if (this.count.balls > 3) {\n            batter.stats.batting.pa++;\n            batter.stats.batting.bb++;\n            pitcher.stats.pitching.BB++;\n            this.says = 'Ball four.';\n            this.count.balls = this.count.strikes = 0;\n            batter.atBats.push(_baseballUtility_utils.Log.prototype.WALK);\n            this.advanceRunners(true).reachBase().newBatter();\n        }\n        if (this.count.outs > 2) {\n            this.says = 'Three outs, change.';\n            this.count.outs = this.count.balls = this.count.strikes = 0;\n            pitcher.stats.pitching.IP[0]++;\n            pitcher.stats.pitching.IP[1] = 0;\n            this.changeSides();\n        }\n    },\n    reachBase: function reachBase() {\n        var game = this.game;\n        game.field.first = game.batter;\n        game.field.first.fatigue += 2;\n        return this;\n    },\n    advanceRunners: function advanceRunners(isWalk, fieldersChoice, sacrificeAdvances) {\n        isWalk = !!isWalk;\n        var game = this.game;\n        var first = game.field.first,\n            second = game.field.second,\n            third = game.field.third,\n            swing = game.swingResult;\n\n        if (isWalk) {\n            if (first) {\n                if (second) {\n                    if (third) {\n                        //bases loaded\n                        game.batter.recordRBI();\n                        game.batter.stats.batting.rbi++;\n                        third.atBats.push(_baseballUtility_utils.Log.prototype.RUN);\n                        third.stats.batting.r++;\n                        game.pitcher.stats.pitching.ER++;\n                        game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\n                        game.tally[game.half == 'top' ? 'away' : 'home'].R++;\n                        game.field.third = second;\n                        game.field.second = first;\n                        first = null;\n                    } else {\n                        // 1st and second\n                        game.field.third = second;\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                } else {\n                    if (third) {\n                        // first and third\n                        game.field.second = first;\n                        game.field.first = null;\n                    } else {\n                        // first only\n                        game.field.second = first;\n                        game.field.first = null;\n                    }\n                }\n            } else {\n                // no one on first\n            }\n        } else {\n                if (fieldersChoice) {\n                    game.field[fieldersChoice] = null;\n                    first = game.field.first;\n                    second = game.field.second;\n                    third = game.field.third;\n                }\n                var canAdvance = function canAdvance() {\n                    return true;\n                };\n                if (sacrificeAdvances) {\n                    canAdvance = function (position) {\n                        switch (position) {\n                            case 'first':\n                                return sacrificeAdvances.indexOf('first') > -1 && (canAdvance('second') || !second);\n                            case 'second':\n                                return sacrificeAdvances.indexOf('second') > -1 && (canAdvance('third') || !third);\n                            case 'third':\n                                return sacrificeAdvances.indexOf('third') > -1;\n                        }\n                    };\n                }\n                if (third instanceof _baseballModelPlayer.Player && canAdvance('third')) {\n                    // run scored\n                    game.scoreboard[game.half == 'top' ? 'away' : 'home'][game.inning]++;\n                    game.tally[game.half == 'top' ? 'away' : 'home'].R++;\n                    if (game.batter != third) {\n                        game.batter.recordRBI();\n                        third.atBats.push(_baseballUtility_utils.Log.prototype.RUN);\n                    }\n                    game.batter.stats.batting.rbi++;\n                    third.stats.batting.r++;\n                    game.pitcher.stats.pitching.ER++;\n                }\n                if (second && canAdvance('second')) {\n                    game.field.third = second;\n                } else {\n                    game.field.third = null;\n                }\n                if (first && canAdvance('first')) {\n                    game.field.second = first;\n                } else {\n                    game.field.second = null;\n                }\n                game.field.first = null;\n            }\n        return this;\n    },\n    newBatter: function newBatter() {\n        var game = this.game;\n        game.passMinutes(2);\n        game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        this.count.balls = this.count.strikes = 0;\n        game.log.notePlateAppearanceResult(game);\n        var team = game.half == 'bottom' ? game.teams.home : game.teams.away;\n        game.lastBatter = game.batter;\n        game.batter = team.lineup[(team.nowBatting + 1) % 9];\n        game.deck = team.lineup[(team.nowBatting + 2) % 9];\n        game.hole = team.lineup[(team.nowBatting + 3) % 9];\n        team.nowBatting = (team.nowBatting + 1) % 9;\n        if (this.count.outs < 3) {\n            game.log.noteBatter(game.batter);\n        }\n        game.showPlayResultPanels(game.lastBatter);\n    },\n    changeSides: function changeSides() {\n        var game = this.game;\n        game.passMinutes(5);\n        game.swingResult = {};\n        game.swingResult.looking = true; // hide bat\n        game.pitchInFlight.x = null; // hide ball\n        game.pitchInFlight.y = null; // hide ball\n        game.log.pitchRecord = {\n            e: [],\n            n: []\n        };\n        var offense, defense;\n        game.field.first = null;\n        game.field.second = null;\n        game.field.third = null;\n        if (game.half == 'top') {\n            if (game.inning == 9 && game.tally.home.R > game.tally.away.R) {\n                return game.end();\n            }\n            game.half = 'bottom';\n        } else {\n            if (game.inning + 1 > 9) {\n                return game.end();\n            }\n            game.inning++;\n            game.half = 'top';\n        }\n        offense = game.half == 'top' ? 'away' : 'home';\n        defense = game.half == 'top' ? 'home' : 'away';\n        var n = game.inning + '回の' + (game.half == 'top' ? 'オモテ' : 'ウラ') + '、' + game.teams[game.half == 'top' ? 'away' : 'home'].getName() + 'の攻撃。',\n            e = (game.half == 'top' ? 'Top' : 'Bottom') + ' ' + game.inning;\n        game.log.note(e, n);\n        var team = game.teams[offense];\n        game.batter = team.lineup[team.nowBatting];\n        game.batterRunner = game.batter;\n        game.deck = team.lineup[(team.nowBatting + 1) % 9];\n        game.hole = team.lineup[(team.nowBatting + 2) % 9];\n\n        game.pitcher = game.teams[defense].positions.pitcher;\n        game.log.noteBatter(game.batter);\n        game.autoPitchSelect();\n    },\n    says: 'Play ball!',\n    game: null\n};\n\nexports.Umpire = Umpire;\n\n},{\"baseball/Model/Player\":5,\"baseball/Utility/_utils\":15}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballModelAtBat = require('baseball/Model/AtBat');\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelGame = require('baseball/Model/Game');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nexports.AtBat = _baseballModelAtBat.AtBat;\nexports.Field = _baseballModelField.Field;\nexports.Game = _baseballModelGame.Game;\nexports.Manager = _baseballModelManager.Manager;\nexports.Player = _baseballModelPlayer.Player;\nexports.Team = _baseballModelTeam.Team;\nexports.Umpire = _baseballModelUmpire.Umpire;\n\n},{\"baseball/Model/AtBat\":1,\"baseball/Model/Field\":2,\"baseball/Model/Game\":3,\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballServices_services = require('baseball/services/_services');\n\nvar Animator = function Animator() {\n    this.init();\n};\nAnimator.TweenMax = {};\nAnimator.prototype = {\n    identifier: 'Animator',\n    constructor: Animator,\n    console: false,\n    TweenMax: {},\n    init: function init() {},\n    loadTweenMax: function loadTweenMax() {\n        if (this.console || typeof window !== 'object') {\n            Animator.TweenMax = {\n                'set': function set() {},\n                'to': function to() {},\n                'from': function from() {},\n                killAll: function killAll() {}\n            };\n        } else {\n            Animator.TweenMax = window.TweenMax;\n        }\n        return Animator.TweenMax;\n    },\n    TIME_FROM_SET: 2300, //ms\n    TIME_FROM_WINDUP: 3600, //ms\n    HOLD_UP_ALLOWANCE: 0.75, // seconds\n    pitchTarget: null,\n    pitchBreak: null,\n    /**\n     * this is called from the scope context\n     * @param callback\n     */\n    updateFlightPath: function updateFlightPath(callback) {\n        if (Animator.console) return;\n        var TweenMax = Animator.loadTweenMax();\n        TweenMax.killAll();\n        var $scope = this,\n            game = $scope.y,\n            top = 200 - game.pitchTarget.y,\n            left = game.pitchTarget.x,\n            breakTop = 200 - game.pitchInFlight.y,\n            breakLeft = game.pitchInFlight.x,\n            $baseballs = $('.baseball'),\n            flightSpeed = 1.3 - 0.6 * (game.pitchInFlight.velocity + 300) / 400,\n            originTop = 50,\n            originLeft = 110 + (game.pitcher.throws == 'left' ? 20 : -20);\n        var pitch = this.pitchTarget = $('.main-area .target .baseball.pitch'),\n            henka = this.pitchBreak = $('.main-area .target .baseball.break'),\n            quarter = flightSpeed / 4;\n\n        var pitchTransition = _baseballServices_services.Mathinator.pitchTransition(top, left, originTop, originLeft, quarter, 12, 4),\n            targetTransition = _baseballServices_services.Mathinator.pitchTransition(top, left, originTop, originLeft, quarter, 10, 3);\n\n        var transitions = [pitchTransition(0, 0), pitchTransition(10, 0), pitchTransition(30, 1), pitchTransition(50, 2), targetTransition(100, 3), pitchTransition(100, 3, breakTop, breakLeft)];\n\n        //var horizontalBreak = (60 - Math.abs(game.pitchTarget.x - game.pitchInFlight.x))/10;\n        //$('.baseball').addClass('spin');\n        //$('.baseball').css('animation', 'spin '+horizontalBreak+'s 5 0s linear');\n\n        TweenMax.set([pitch, henka], transitions[0]);\n        TweenMax.to([pitch, henka], quarter, transitions[1]);\n        TweenMax.to([pitch, henka], quarter, transitions[2]);\n        TweenMax.to([pitch, henka], quarter, transitions[3]);\n        TweenMax.to(pitch, quarter, transitions[4]);\n        TweenMax.to(henka, quarter, transitions[5]);\n\n        $scope.lastTimeout = setTimeout(function () {\n            $scope.allowInput = true;\n            if (typeof callback == 'function') {\n                callback();\n                $scope.$apply();\n            }\n        }, flightSpeed * 1000);\n\n        if (!game.pitchInFlight.x) {\n            $baseballs.addClass('hide');\n        } else {\n            if (game.humanBatting() && Math.random() * 180 > game.batter.skill.offense.eye) {\n                $('.baseball.break').addClass('hide');\n            } else {\n                $('.baseball.break').removeClass('hide');\n            }\n            $('.baseball.pitch').removeClass('hide');\n        }\n\n        if ($scope.y.humanBatting() && !$scope.y.humanPitching()) {\n            $scope.holdUpTimeouts.push(setTimeout(function () {\n                $scope.holdUp();\n            }, (flightSpeed + Animator.HOLD_UP_ALLOWANCE) * 1000));\n        }\n    },\n    animateFieldingTrajectory: function animateFieldingTrajectory(game) {\n        if (Animator.console) return game.swingResult;\n        this.init();\n        var TweenMax = Animator.loadTweenMax();\n        var ball = $('.splay-indicator-ball');\n        TweenMax.killAll();\n        var result = game.swingResult;\n\n        var linearApproximateDragScalar = {\n            distance: 1,\n            apexHeight: 0.57,\n            airTime: 0.96\n        };\n\n        var angle = result.flyAngle,\n            distance = Math.abs(result.travelDistance),\n            scalar = result.travelDistance < 0 ? -1 : 1;\n\n        _baseballServices_services.Mathinator.memory.bounding = angle < 0;\n        angle = 1 + Math.abs(angle);\n        if (angle > 90) angle = 180 - angle;\n\n        var velocity = linearApproximateDragScalar.distance * Math.sqrt(9.81 * distance / Math.sin(2 * Math.PI * angle / 180));\n        var velocityVerticalComponent = Math.sin(_baseballServices_services.Mathinator.RADIAN * angle) * velocity;\n        var apexHeight = velocityVerticalComponent * velocityVerticalComponent / (2 * 9.81) * linearApproximateDragScalar.apexHeight;\n        var airTime = 1.5 * Math.sqrt(2 * apexHeight / 9.81) * linearApproximateDragScalar.airTime; // 2x freefall equation\n\n        //log('angle', angle, 'vel', velocity, 'apex', apexHeight, 'air', airTime, 'dist', result.travelDistance);\n        var quarter = airTime / 4;\n        var mathinator = new _baseballServices_services.Mathinator();\n        var transitions = [mathinator.transitionalTrajectory(0, quarter, 0, apexHeight, scalar * distance, result.splay), mathinator.transitionalTrajectory(25, quarter, 0), mathinator.transitionalTrajectory(50, quarter, 1), mathinator.transitionalTrajectory(75, quarter, 2), mathinator.transitionalTrajectory(100, quarter, 3)];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, quarter, transitions[1]);\n        TweenMax.to(ball, quarter, transitions[2]);\n        TweenMax.to(ball, quarter, transitions[3]);\n        TweenMax.to(ball, quarter, transitions[4]);\n\n        ball = $('.indicator.baseball.break').removeClass('hide').show();\n        var time = quarter / 2;\n        transitions = [mathinator.transitionalCatcherPerspectiveTrajectory(0, time, 0, apexHeight, scalar * distance, result.splay, game.pitchInFlight), mathinator.transitionalCatcherPerspectiveTrajectory(12.5, time * 0.75, 0), mathinator.transitionalCatcherPerspectiveTrajectory(25, time * 0.80, 1), mathinator.transitionalCatcherPerspectiveTrajectory(37.5, time * 0.85, 2), mathinator.transitionalCatcherPerspectiveTrajectory(50, time * 0.90, 3), mathinator.transitionalCatcherPerspectiveTrajectory(62.5, time * 0.95, 4), mathinator.transitionalCatcherPerspectiveTrajectory(75, time, 5), mathinator.transitionalCatcherPerspectiveTrajectory(87.5, time, 6), mathinator.transitionalCatcherPerspectiveTrajectory(100, time, 7)];\n        TweenMax.set(ball, transitions[0]);\n        TweenMax.to(ball, time, transitions[1]);\n        TweenMax.to(ball, time, transitions[2]);\n        TweenMax.to(ball, time, transitions[3]);\n        TweenMax.to(ball, time, transitions[4]);\n        TweenMax.to(ball, time, transitions[5]);\n        TweenMax.to(ball, time, transitions[6]);\n        TweenMax.to(ball, time, transitions[7]);\n        TweenMax.to(ball, time, transitions[8]);\n\n        setTimeout(function () {\n            // hack\n            $('.indicator.baseball.break').removeClass('hide').show();\n        }, 50);\n\n        return game.swingResult;\n    }\n};\n\nfor (var fn in Animator.prototype) {\n    if (Animator.prototype.hasOwnProperty(fn)) {\n        Animator[fn] = Animator.prototype[fn];\n    }\n}\n\nexports.Animator = Animator;\n\n},{\"baseball/services/_services\":21}],10:[function(require,module,exports){\n/**\n * For Probability!\n * @constructor\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Distribution = function Distribution() {};\n\nDistribution.prototype = {\n    identifier: 'Distribution',\n    constructor: Distribution,\n    /**\n     * @param scale {number}\n     * @returns {number}\n     */\n    chance: function chance(scale) {\n        if (!scale) scale = 1;\n        return Math.random() * scale;\n    },\n    /**\n     * @param fielder {Player}\n     * @returns {boolean}\n     */\n    error: function error(fielder) {\n        return (100 - fielder.skill.defense.fielding) * 0.40 + 4 > Math.random() * 100;\n    },\n    /**\n     * @param power\n     * @param flyAngle\n     * @returns {number}\n     */\n    landingDistance: function landingDistance(power, flyAngle) {\n        return (10 + power / 2 + Math.random() * 310 + power / 100 * 30) * (1 - Math.abs(flyAngle - 30) / 60);\n    },\n    /**\n     * @returns {{x: number, y: number}}\n     */\n    pitchLocation: function pitchLocation() {\n        var x, y;\n        if (Math.random() < 0.5) {\n            x = 50 + Math.floor(Math.random() * 70) - Math.floor(Math.random() * 15);\n        } else {\n            x = 150 + Math.floor(Math.random() * 15) - Math.floor(Math.random() * 70);\n        }\n        y = 30 + (170 - Math.floor(Math.sqrt(Math.random() * 28900)));\n        return { x: x, y: y };\n    },\n    /**\n     * swing centering basis\n     * @returns {number}\n     */\n    centralizedNumber: function centralizedNumber() {\n        return 100 + Math.floor(Math.random() * 15) - Math.floor(Math.random() * 15);\n    },\n    /**\n     * @param eye {Player.skill.offense.eye}\n     * @param x\n     * @param y\n     * @param umpire {Umpire}\n     */\n    swingLikelihood: function swingLikelihood(eye, x, y, umpire) {\n        var swingLikelihood = (200 - Math.abs(100 - x) - Math.abs(100 - y)) / 2;\n        if (x < 60 || x > 140 || y < 50 || y > 150) {\n            // ball\n            /** 138 based on avg O-Swing of 30% + 8% for fun */\n            swingLikelihood = (swingLikelihood + 138 - eye) / 2 - 15 * umpire.count.balls;\n        } else {\n            /** avg Swing rate of 65% - 8% for laughs */\n            swingLikelihood = (57 + (2 * swingLikelihood + eye) / 3) / 2;\n        }\n        return swingLikelihood - 35 + 2 * (umpire.count.balls + 8 * umpire.count.strikes);\n    },\n    /**\n     * @param target {number} 0-200\n     * @param control {number} 0-100\n     * @returns {number}\n     */\n    pitchControl: function pitchControl(target, control) {\n        var effect = (50 - Math.random() * 100) / (1 + control / 100);\n        return Math.min(199.9, Math.max(0.1, target + effect));\n    },\n    /**\n     * @param pitch {Game.pitchInFlight}\n     * @param pitcher {Player}\n     * @param x {number}\n     * @param y {number}\n     * @returns {object|{x: number, y: number}}\n     */\n    breakEffect: function breakEffect(pitch, pitcher, x, y) {\n        var effect = {};\n        effect.x = Math.floor(x + pitch.breakDirection[0] * (0.55 + 1.5 * Math.random() * pitcher.pitching[pitch.name]['break'] / 250));\n        effect.y = Math.floor(y + pitch.breakDirection[1] * (0.55 + 1.5 * Math.random() * pitcher.pitching[pitch.name]['break'] / 250 / (0.5 + y / 200)));\n        return effect;\n    },\n    /**\n     * Determine the swing target along an axis\n     * @param target {number} 0-200\n     * @param actual {number} 0-200\n     * @param eye {number} 0-100\n     * @returns {number} 0-200\n     */\n    cpuSwing: function cpuSwing(target, actual, eye) {\n        eye = Math.max(eye, 100);\n        return 100 + (target - 100) * (0.5 + Math.random() * eye / 200) - actual;\n    },\n    /**\n     * Determine the swing scalar\n     * @param eye {number} 0-100\n     * @returns {number}\n     */\n    swing: function swing(eye) {\n        return 100 / (eye + 25 + Math.random() * 50);\n    }\n};\n\nfor (var fn in Distribution.prototype) {\n    if (Distribution.prototype.hasOwnProperty(fn)) {\n        Distribution[fn] = Distribution.prototype[fn];\n    }\n}\n\nDistribution.main = function () {\n    var ump = {\n        count: {\n            balls: 0,\n            strikes: 0\n        }\n    };\n    while (ump.count.balls < 4) {\n        while (ump.count.strikes < 3) {\n            console.log('S', ump.count.strikes, 'B', ump.count.balls);\n            console.log('middle', [15, 35, 55, 75, 95].map(function (x) {\n                return Distribution.swingLikelihood(x, 100, 100, ump) | 0;\n            }));\n            console.log('corner', [15, 35, 55, 75, 95].map(function (x) {\n                return Distribution.swingLikelihood(x, 50, 50, ump) | 0;\n            }));\n            console.log('ball', [15, 35, 55, 75, 95].map(function (x) {\n                return Distribution.swingLikelihood(x, 15, 15, ump) | 0;\n            }));\n            ump.count.strikes++;\n        }\n        ump.count.balls++;\n        ump.count.strikes = 0;\n    }\n};\n\nexports.Distribution = Distribution;\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Iterator = function Iterator() {};\n\nIterator.prototype = {\n    identifier: 'Iterator',\n    constructor: Iterator,\n    each: function each(collection, map) {\n        var keys, i;\n        if (collection instanceof Array) {\n            for (i = 0; i < collection.length; i++) {\n                map(i, collection[i]);\n            }\n        } else {\n            keys = Object.keys(collection);\n            for (i = 0; i < keys.length; i++) {\n                map(keys[i], collection[keys[i]]);\n            }\n        }\n    }\n};\n\nfor (var fn in Iterator.prototype) {\n    if (Iterator.prototype.hasOwnProperty(fn)) {\n        Iterator[fn] = Iterator.prototype[fn];\n    }\n}\n\nexports.Iterator = Iterator;\n\n},{}],12:[function(require,module,exports){\n/**\n * For Math!\n * @constructor\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar Mathinator = function Mathinator() {};\n\n/**\n * @param n\n * @returns {number}\n */\nMathinator.square = function (n) {\n    return n * n;\n};\n\nMathinator.prototype = {\n    identifier: 'Mathinator',\n    constructor: Mathinator,\n    /**\n     * CONST\n     */\n    RADIAN: Math.PI / 180,\n    SPLAY_INDICATOR_LEFT: -4,\n    /**\n     * @param offset {{x: number, y: number}}\n     * @param angle {number}\n     * @returns {{x: number, y: number}}\n     */\n    getAngularOffset: function getAngularOffset(offset, angle) {\n        var xScalar = offset.x < 0 ? -1 : 1,\n            yScalar = offset.y < 0 ? -1 : 1;\n        var originalAngle = Math.atan(offset.x / offset.y) / this.RADIAN;\n        var distance = Math.sqrt(offset.x * offset.x + offset.y * offset.y),\n            angledY = yScalar * Math.cos((angle - originalAngle) * this.RADIAN) * distance,\n            angledX = xScalar * Math.sqrt(distance * distance - angledY * angledY);\n        return {\n            x: angledX,\n            y: angledY\n        };\n    },\n    /**\n     * @param a {Array<Number>}\n     * @param b {Array<Number>}\n     * @returns {number}\n     */\n    getPolarDistance: function getPolarDistance(a, b) {\n        var radians = this.RADIAN;\n        return Math.sqrt(a[1] * a[1] + b[1] * b[1] - 2 * a[1] * b[1] * Math.cos(a[0] * radians - b[0] * radians));\n    },\n    /**\n     * @param origin\n     * @param target\n     * @returns {number}\n     * 0 is flat (left-right), positive is clockwise.\n     * We use 125 instead of 180 to account for natural hand-height adjustments\n     * of various swing heights.\n     */\n    battingAngle: function battingAngle(origin, target) {\n        return Math.atan((origin.y - target.y) / (target.x - origin.x)) / Math.PI * 125;\n    },\n    memory: {},\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @returns {{bottom: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalTrajectory: function transitionalTrajectory(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle) {\n        if (givenApexHeight) Mathinator.prototype.memory.apexHeight = givenApexHeight;\n        if (givenDistance) Mathinator.prototype.memory.distance = givenDistance;\n        if (givenSplayAngle) Mathinator.prototype.memory.splay = givenSplayAngle;\n        var apexHeight = Mathinator.prototype.memory.apexHeight,\n            distance = Mathinator.prototype.memory.distance,\n            splay = Mathinator.prototype.memory.splay;\n        var bottom, left, padding, borderWidth;\n        var bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            quarter *= 4;\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        bottom = Math.cos(splay * radian) * percent / 100 * distance * 95 / 300;\n        left = Math.sin(splay * radian) * percent / 100 * distance * 95 / 300 + this.SPLAY_INDICATOR_LEFT;\n\n        var apexRatio = Math.sqrt((50 - Math.abs(percent - 50)) / 100) * (1 / 0.7071);\n        if (bounding) {\n            padding = 1;\n            borderWidth = 1;\n        } else {\n            padding = apexRatio * apexHeight / 90 * 15;\n            borderWidth = 2 + apexRatio * 2;\n        }\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n        padding = Math.max(Math.min(padding, 12), 0);\n        return {\n            bottom: bottom,\n            left: left,\n            padding: padding,\n            borderWidth: borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param percent {number} 0-100\n     * @param quarter {number} seconds\n     * @param step {number} 0 and up\n     * @param [givenApexHeight] feet\n     * @param [givenDistance] in feet\n     * @param [givenSplayAngle] where 0 is up the middle and 90 is right foul\n     * @param [givenOrigin] Object with x, y -- pitchInFlight\n     * @returns {{top: number, left: number, padding: number, borderWidth: number, delay: number, ease: (r.easeOut|*)}}\n     */\n    transitionalCatcherPerspectiveTrajectory: function transitionalCatcherPerspectiveTrajectory(percent, quarter, step, givenApexHeight, givenDistance, givenSplayAngle, givenOrigin) {\n        var memory = Mathinator.prototype.memory;\n        if (givenApexHeight) memory.apexHeight = givenApexHeight;\n        if (givenDistance) memory.distance = givenDistance;\n        if (givenSplayAngle) memory.splay = givenSplayAngle;\n        if (givenOrigin) memory.origin = givenOrigin;\n        var apexHeight = memory.apexHeight,\n            distance = memory.distance,\n            splay = memory.splay,\n            origin = memory.origin;\n        var top, left, padding, borderWidth;\n        var bounding = Mathinator.prototype.memory.bounding,\n            radian = this.RADIAN;\n\n        if (bounding) {\n            percent = Math.floor(Math.sqrt(percent / 100) * 100);\n        }\n\n        var height = apexHeight - Math.pow(Math.abs(50 - percent) / 50, 1.2) * apexHeight,\n            currentDistance = distance * percent / 100;\n\n        var projection = Math.pow((500 - currentDistance) / 500, 2); // reduction of dimensions due to distance\n\n        top = 200 - origin.y - height * 20 * projection + percent / 100 * (origin.y - 85) * projection;\n        left = origin.x + Math.sin(splay * radian) * (currentDistance * 8) * projection;\n        padding = 12 * projection * projection;\n        borderWidth = Math.max(Math.min(padding / 3, 4), 0);\n\n        top = Math.max(Math.min(top, 500), -10000);\n        left = Math.max(Math.min(left, 10000), -10000);\n        padding = Math.max(Math.min(padding, 24), 1);\n\n        //console.log('height', height|0, apexHeight|0, projection, 'left/pad/border', left|0, padding|0, borderWidth|0, 'top', top);\n\n        return {\n            top: top,\n            left: left,\n            padding: padding,\n            borderWidth: borderWidth,\n            delay: quarter * step,\n            ease: bounding ? Power4.easeOut : Linear.easeNone\n        };\n    },\n    /**\n     * @param swingResult\n     * @returns {Game.swingResult}\n     */\n    translateSwingResultToStylePosition: function translateSwingResultToStylePosition(swingResult) {\n        // CF HR bottom: 95px, centerline: left: 190px;\n        var bottom, left;\n\n        bottom = Math.cos(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95 / 300;\n        left = Math.sin(swingResult.splay / 180 * Math.PI) * swingResult.travelDistance * 95 / 300 + this.SPLAY_INDICATOR_LEFT;\n\n        bottom = Math.max(Math.min(bottom, 400), -20);\n        left = Math.max(Math.min(left, 100), -100);\n\n        swingResult.bottom = bottom + 'px';\n        swingResult.left = left + 'px';\n        return swingResult;\n    },\n    /**\n     * @param left {number} 0-200\n     * @param top {number} 0-200\n     * @param originLeft {number} 0-200\n     * @param originTop {number} 0-200\n     * @param quarter {number} seconds\n     * @param maxPadding {number} px padding at full size\n     * @param maxBorderWidth {number} px border width at full size\n     * @returns {Function}\n     */\n    pitchTransition: function pitchTransition(top, left, originTop, originLeft, quarter, maxPadding, maxBorderWidth) {\n        /**\n         * @param percent {number} 0-100\n         * @param step {number} 0 and up\n         * @param [breakTop] {number} 0-200 override\n         * @param [breakLeft] {number} 0-200 override\n         * @returns {{top: number, left: number, padding: string, borderWidth: string, transform: string, delay: number, ease: *}}\n         */\n        return function (percent, step, breakTop, breakLeft) {\n            var _top, _left;\n            _top = breakTop || top;\n            _left = breakLeft || left;\n            _top = originTop + Mathinator.square(percent / 100) * (_top - originTop);\n            if (step == 1) {\n                _top -= 2;\n            }\n            if (step == 2) {\n                _top -= 1;\n            }\n            _left = originLeft + Mathinator.square(percent / 100) * (_left - originLeft);\n            var padding = Math.max(Mathinator.square(percent / 100) * maxPadding, 1),\n                borderWidth = Math.max(Mathinator.square(percent / 100) * maxBorderWidth, 1);\n            return {\n                top: _top,\n                left: _left,\n                padding: padding + 'px',\n                borderWidth: borderWidth + 'px',\n                transform: 'translateZ(0)',\n                delay: quarter * step,\n                ease: Linear.easeNone\n            };\n        };\n    },\n    /**\n     * @param distance {number} feet\n     * @param throwing {number} 0-1\n     * @param fielding {number} 0-1\n     * @param intercept {number} approx. -140 to 140\n     * @returns {number} seconds\n     */\n    fielderReturnDelay: function fielderReturnDelay(distance, throwing, fielding, intercept) {\n        return distance / 90 // bip distance\n         + distance / 90 / (0.5 + throwing / 2) // throwing distance\n         + 1 - (0.2 + fielding * 0.8) + 9 * (distance / 310) * Math.min(intercept - 120, 0) / -240; // gather time\n    },\n    /**\n     * @param player {Player}\n     * @returns {number} ~2.0\n     */\n    infieldThrowDelay: function infieldThrowDelay(player) {\n        var fielding = player.skill.defense.fielding,\n            throwing = player.skill.defense.throwing;\n        return 3.5 - (fielding + throwing) / 200;\n    },\n    /**\n     * @param speed {number} 0-100\n     * @returns {number} seconds\n     */\n    baseRunningTime: function baseRunningTime(speed) {\n        return 6.0 - speed / 100 * 2.2;\n    }\n};\n\nfor (var fn in Mathinator.prototype) {\n    if (Mathinator.prototype.hasOwnProperty(fn)) {\n        Mathinator[fn] = Mathinator.prototype[fn];\n    }\n}\n\nexports.Mathinator = Mathinator;\n\n},{}],13:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballServicesAnimator = require('baseball/Services/Animator');\n\nvar _baseballServicesDistribution = require('baseball/Services/Distribution');\n\nvar _baseballServicesIterator = require('baseball/Services/Iterator');\n\nvar _baseballServicesMathinator = require('baseball/Services/Mathinator');\n\nexports.Animator = _baseballServicesAnimator.Animator;\nexports.Distribution = _baseballServicesDistribution.Distribution;\nexports.Iterator = _baseballServicesIterator.Iterator;\nexports.Mathinator = _baseballServicesMathinator.Mathinator;\n\n},{\"baseball/Services/Animator\":9,\"baseball/Services/Distribution\":10,\"baseball/Services/Iterator\":11,\"baseball/Services/Mathinator\":12}],14:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballUtilityText = require('baseball/Utility/text');\n\nvar Log = function Log() {\n    this.init();\n};\n\nLog.prototype = {\n    game: 'instance of Game',\n    init: function init() {\n        this.pitchRecord = {\n            e: [],\n            n: []\n        };\n    },\n    SINGLE: 'H',\n    DOUBLE: '2B',\n    TRIPLE: '3B',\n    HOMERUN: 'HR',\n    WALK: 'BB',\n    GROUNDOUT: 'GO',\n    FLYOUT: 'FO',\n    LINEOUT: 'LO',\n    RUN: 'R',\n    STRIKEOUT: 'SO',\n    SACRIFICE: 'SAC',\n    REACHED_ON_ERROR: 'ROE',\n    FIELDERS_CHOICE: 'FC',\n    GIDP: '(IDP)',\n    GITP: '(ITP)',\n    stabilizeShortRecord: function stabilizeShortRecord() {\n        var rec = this.record.e.slice(0, 6);\n        this.shortRecord.e = rec;\n        this.stabilized.shortRecord.e = rec.concat(['', '', '', '', '', '']).slice(0, 6);\n\n        var rec2 = this.record.n.slice(0, 6);\n        this.shortRecord.n = rec2;\n        this.stabilized.shortRecord.n = rec2.concat(['', '', '', '', '', '']).slice(0, 6);\n    },\n    note: function note(_note, noteJ) {\n        this.record.e.unshift(_note);\n        this.record.n.unshift(noteJ);\n        this.stabilizeShortRecord();\n        this.async(function () {\n            if (_baseballUtilityText.text.mode === 'n') {\n                console.log(noteJ);\n            } else {\n                console.log(_note);\n            }\n        });\n    },\n    getBatter: function getBatter(batter) {\n        var order = batter.team.nowBatting;\n        order = ({\n            0: (0, _baseballUtilityText.text)(' 1st'),\n            1: (0, _baseballUtilityText.text)(' 2nd'),\n            2: (0, _baseballUtilityText.text)(' 3rd'),\n            3: (0, _baseballUtilityText.text)(' 4th'),\n            4: (0, _baseballUtilityText.text)(' 5th'),\n            5: (0, _baseballUtilityText.text)(' 6th'),\n            6: (0, _baseballUtilityText.text)(' 7th'),\n            7: (0, _baseballUtilityText.text)(' 8th'),\n            8: (0, _baseballUtilityText.text)(' 9th')\n        })[order];\n        var positions = this.longFormFielder();\n        return (0, _baseballUtilityText.text)('Now batting') + order + _baseballUtilityText.text.comma() + positions[batter.position] + _baseballUtilityText.text.comma() + batter.getUniformNumber() + _baseballUtilityText.text.comma() + batter.getName();\n    },\n    noteBatter: function noteBatter(batter) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getBatter(batter);\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getBatter(batter);\n        _baseballUtilityText.text.mode = m;\n        this.note(record, recordJ);\n    },\n    getPitchLocationDescription: function getPitchLocationDescription(pitchInFlight, batterIsLefty) {\n        var x = pitchInFlight.x,\n            y = pitchInFlight.y,\n            say = '';\n        var noComma = false,\n            noComma2 = false;\n        var ball = false;\n        if (!batterIsLefty) x = 200 - x;\n        if (x < 50) {\n            say += (0, _baseballUtilityText.text)('way outside');\n            ball = true;\n        } else if (x < 70) {\n            say += (0, _baseballUtilityText.text)('outside');\n        } else if (x < 100) {\n            say += '';\n            noComma = true;\n        } else if (x < 130) {\n            say += '';\n            noComma = true;\n        } else if (x < 150) {\n            say += (0, _baseballUtilityText.text)('inside');\n        } else {\n            say += (0, _baseballUtilityText.text)('way inside');\n            ball = true;\n        }\n        if (say != '') say += _baseballUtilityText.text.comma();\n        if (y < 35) {\n            say += (0, _baseballUtilityText.text)('way low');\n            ball = true;\n        } else if (y < 65) {\n            say += (0, _baseballUtilityText.text)('low');\n        } else if (y < 135) {\n            say += '';\n            noComma2 = true;\n        } else if (y < 165) {\n            say += (0, _baseballUtilityText.text)('high');\n        } else {\n            say += (0, _baseballUtilityText.text)('way high');\n            ball = true;\n        }\n        if (noComma || noComma2) {\n            say = say.split(_baseballUtilityText.text.comma()).join('');\n            if (noComma && noComma2) {\n                say = (0, _baseballUtilityText.text)('down the middle');\n            }\n        }\n        // say = (ball ? 'Ball, ' : 'Strike, ') + say;\n        say = _baseballUtilityText.text.namePitch(pitchInFlight) + _baseballUtilityText.text.comma() + say + _baseballUtilityText.text.stop();\n        return say;\n    },\n    notePitch: function notePitch(pitchInFlight, batter) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.unshift(record);\n        this.stabilized.pitchRecord.e.pop();\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getPitchLocationDescription(pitchInFlight, batter.bats == 'left');\n        this.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.unshift(recordJ);\n        this.stabilized.pitchRecord.n.pop();\n        _baseballUtilityText.text.mode = m;\n    },\n    broadcastCount: function broadcastCount(justOuts) {\n        if (!this.game.umpire) return '';\n        var count = this.game.umpire.count;\n        if (this.lastOuts == 2 && count.outs == 0) {\n            outs = 3 + (0, _baseballUtilityText.text)(' outs');\n        } else {\n            var outs = count.outs + (count.outs == 1 ? (0, _baseballUtilityText.text)(' out') : (0, _baseballUtilityText.text)(' outs'));\n        }\n        this.lastOuts = count.outs;\n        if (justOuts) {\n            return outs + _baseballUtilityText.text.stop();\n        }\n        return count.strikes + '-' + count.balls + ', ' + outs + _baseballUtilityText.text.stop();\n    },\n    broadcastScore: function broadcastScore() {\n        return this.game.teams.away.getName() + ' ' + this.game.tally.away.R + ', ' + this.game.teams.home.getName() + ' ' + this.game.tally.home.R + _baseballUtilityText.text.stop();\n    },\n    broadcastRunners: function broadcastRunners() {\n        var field = this.game.field;\n        var runners = [field.first && (0, _baseballUtilityText.text)('first') || '', field.second && (0, _baseballUtilityText.text)('second') || '', field.third && (0, _baseballUtilityText.text)('third') || ''].filter(function (x) {\n            return x;\n        });\n\n        var runnerCount = 0;\n        runners.map(function (runner) {\n            if (runner) {\n                runnerCount++;\n            }\n        });\n\n        switch (runnerCount) {\n            case 0:\n                return (0, _baseballUtilityText.text)('Bases empty') + _baseballUtilityText.text.stop();\n            case 1:\n                return (0, _baseballUtilityText.text)('Runner on') + ': ' + runners.join(_baseballUtilityText.text.comma()) + _baseballUtilityText.text.stop();\n            default:\n                return (0, _baseballUtilityText.text)('Runners on') + ': ' + runners.join(_baseballUtilityText.text.comma()) + _baseballUtilityText.text.stop();\n        }\n    },\n    getSwing: function getSwing(swingResult) {\n        var result = '';\n        if (swingResult.looking) {\n            if (swingResult.strike) {\n                result += (0, _baseballUtilityText.text)('Strike.');\n            } else {\n                result += (0, _baseballUtilityText.text)('Ball.');\n            }\n        } else {\n            if (swingResult.contact) {\n                if (swingResult.foul) {\n                    result += (0, _baseballUtilityText.text)('Fouled off.');\n                } else {\n                    if (swingResult.caught) {\n                        result += (0, _baseballUtilityText.text)('In play.');\n                    } else {\n                        if (swingResult.thrownOut) {\n                            result += (0, _baseballUtilityText.text)('In play.');\n                        } else {\n                            result += (0, _baseballUtilityText.text)('In play.');\n                        }\n                    }\n                }\n            } else {\n                result += (0, _baseballUtilityText.text)('Swinging strike.');\n            }\n        }\n        return result;\n    },\n    noteSwing: function noteSwing(swingResult) {\n        var m = _baseballUtilityText.text.mode,\n            record,\n            recordJ,\n            pitchRecord = this.pitchRecord,\n            stabilized = this.stabilized.pitchRecord;\n        _baseballUtilityText.text.mode = 'e';\n        record = this.getSwing(swingResult);\n        pitchRecord.e[0] += record;\n        stabilized.e[0] += record;\n        _baseballUtilityText.text.mode = 'n';\n        recordJ = this.getSwing(swingResult);\n        pitchRecord.n[0] += recordJ;\n        stabilized.n[0] += recordJ;\n        _baseballUtilityText.text.mode = m;\n        recordJ = stabilized.n[0];\n        record = stabilized.e[0];\n        var giraffe = this;\n        record.indexOf('Previous') !== 0 && this.async(function () {\n            if (record.indexOf('In play') > -1 && record.indexOf('struck out') > -1) {\n                if (_baseballUtilityText.text.mode === 'n') {\n                    console.log(recordJ);\n                } else {\n                    console.log(record);\n                }\n            } else {\n                if (_baseballUtilityText.text.mode === 'n') {\n                    console.log(giraffe.broadcastCount(), recordJ);\n                } else {\n                    console.log(giraffe.broadcastCount(), record);\n                }\n            }\n        });\n    },\n    async: function async(fn) {\n        if (!this.game.console && !this.game.quickMode) {\n            setTimeout(fn, 100);\n        }\n    },\n    getPlateAppearanceResult: function getPlateAppearanceResult(game) {\n        var r = game.swingResult;\n        var record = '';\n        var batter = game.batter.getName();\n        var out = [];\n        if (r.looking) {\n            if (r.strike) {\n                record = batter + (0, _baseballUtilityText.text)(' struck out looking.');\n            } else {\n                record = batter + (0, _baseballUtilityText.text)(' walked.');\n            }\n        } else {\n            if (r.contact) {\n                var fielder = r.fielder,\n                    bases = r.bases,\n                    outBy;\n                if (r.caught) {\n                    if (r.flyAngle < 15) {\n                        outBy = 'line';\n                    } else {\n                        if (['left', 'center', 'right'].indexOf(r.fielder) < 0) {\n                            outBy = 'pop';\n                        } else {\n                            outBy = 'fly';\n                        }\n                    }\n                } else {\n                    if (r.foul) {\n                        // not possible to end PA on foul?\n                    } else {\n                            if (r.error) {\n                                bases = 1;\n                                outBy = 'error';\n                            } else {\n                                if (r.thrownOut) {\n                                    if (Math.random() < 0.5) {\n                                        outBy = 'ground';\n                                    } else {\n                                        outBy = 'thrown';\n                                    }\n                                } else {\n                                    switch (r.bases) {\n                                        case 1:\n                                        case 2:\n                                        case 3:\n                                            bases = r.bases;\n                                            break;\n                                        case 4:\n                                            bases = 4;\n                                            if (r.splay < -15) {\n                                                fielder = 'left';\n                                            } else if (r.splay < 15) {\n                                                fielder = 'center';\n                                            } else {\n                                                fielder = 'right';\n                                            }\n                                            break;\n                                    }\n                                }\n                                if (r.firstOut) {\n                                    out = out.concat(r.additionalOuts.filter(function (runner) {\n                                        return runner !== 'batter';\n                                    }));\n                                    out.doublePlay = r.doublePlay;\n                                }\n                                if (r.fieldersChoice) {\n                                    out.push(r.fieldersChoice);\n                                    if (r.outs == 3) {\n                                        outBy = 'ground';\n                                    } else {\n                                        outBy = 'fieldersChoice';\n                                    }\n                                }\n                            }\n                        }\n                }\n                record = _baseballUtilityText.text.contactResult(batter, fielder, bases, outBy, r.outs === 3 ? [] : r.sacrificeAdvances, out);\n            } else {\n                record = batter + (0, _baseballUtilityText.text)(' struck out swinging.');\n            }\n        }\n        return record;\n    },\n    notePlateAppearanceResult: function notePlateAppearanceResult(game) {\n        var m = _baseballUtilityText.text.mode,\n            prevJ = (0, _baseballUtilityText.text)('Previous: ', 'n'),\n            prev = (0, _baseballUtilityText.text)('Previous: ', 'e');\n\n        var statement,\n            record = this.record,\n            pitchRecord = this.pitchRecord,\n            stabilized = this.stabilized.pitchRecord;\n\n        _baseballUtilityText.text.mode = 'e';\n        var result = this.getPlateAppearanceResult(game);\n        record.e.unshift(result);\n        statement = prev + result;\n        pitchRecord.e = [statement];\n        stabilized.e = [statement, '', '', '', '', ''];\n\n        _baseballUtilityText.text.mode = 'n';\n        var resultJ = this.getPlateAppearanceResult(game);\n        record.n.unshift(resultJ);\n        statement = prevJ + resultJ;\n        pitchRecord.n = [statement];\n        stabilized.n = [statement, '', '', '', '', ''];\n\n        _baseballUtilityText.text.mode = m;\n        var giraffe = this;\n        this.async(function () {\n            if (_baseballUtilityText.text.mode === 'n') {\n                console.log(resultJ, giraffe.broadcastCount(true), giraffe.broadcastScore(), giraffe.broadcastRunners());\n            } else {\n                console.log(result, giraffe.broadcastCount(true), giraffe.broadcastScore(), giraffe.broadcastRunners());\n            }\n        });\n    },\n    pointer: 0,\n    stabilized: {\n        pitchRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        },\n        shortRecord: {\n            e: ['', '', '', '', '', ''],\n            n: ['', '', '', '', '', '']\n        }\n    },\n    pitchRecord: {\n        e: [],\n        n: []\n    },\n    shortRecord: {\n        e: [],\n        n: []\n    },\n    record: {\n        e: [],\n        n: []\n    },\n    longFormFielder: function longFormFielder() {\n        return {\n            first: (0, _baseballUtilityText.text)('first baseman'),\n            second: (0, _baseballUtilityText.text)('second baseman'),\n            third: (0, _baseballUtilityText.text)('third baseman'),\n            short: (0, _baseballUtilityText.text)('shortstop'),\n            pitcher: (0, _baseballUtilityText.text)('pitcher'),\n            catcher: (0, _baseballUtilityText.text)('catcher'),\n            left: (0, _baseballUtilityText.text)('left fielder'),\n            center: (0, _baseballUtilityText.text)('center fielder'),\n            right: (0, _baseballUtilityText.text)('right fielder')\n        };\n    }\n};\n\nexports.Log = Log;\n\n},{\"baseball/Utility/text\":18}],15:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballUtilityData = require('baseball/Utility/data');\n\nvar _baseballUtilityHelper = require('baseball/Utility/helper');\n\nvar _baseballUtilityLog = require('baseball/Utility/Log');\n\nvar _baseballUtilityText = require('baseball/Utility/text');\n\nexports.data = _baseballUtilityData.data;\nexports.helper = _baseballUtilityHelper.helper;\nexports.Log = _baseballUtilityLog.Log;\nexports.text = _baseballUtilityText.text;\n\n},{\"baseball/Utility/Log\":14,\"baseball/Utility/data\":16,\"baseball/Utility/helper\":17,\"baseball/Utility/text\":18}],16:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar data = {\n    surnames: ['Sato', 'Suzuki', 'Takahashi', 'Tanaka', 'Watanabe', 'Ito', 'Nakamura', 'Kobayashi', 'Yamamoto', 'Kato', 'Yoshida', 'Yamada', 'Sasaki', 'Yamaguchi', 'Matsumoto', 'Inoue', 'Kimura', 'Shimizu', 'Hayashi', 'Saito', 'Saito', 'Yamazaki', 'Nakajima', 'Mori', 'Abe', 'Ikeda', 'Hashimoto', 'Ishikawa', 'Yamashita', 'Ogawa', 'Ishii', 'Hasegawa', 'Goto', 'Okada', 'Kondo', 'Maeda', 'Fujita', 'Endo', 'Aoki', 'Sakamoto', 'Murakami', 'Ota', 'Kaneko', 'Fujii', 'Fukuda', 'Nishimura', 'Miura', 'Takeuchi', 'Nakagawa', 'Okamoto', 'Matsuda', 'Harada', 'Nakano'],\n    surnamesJ: ['佐藤', '鈴木', '高橋', '田中', '渡辺', '伊藤', '中村', '小林', '山本', '加藤', '吉田', '山田', '佐々木', '山口', '松本', '井上', '木村', '清水', '林', '斉藤', '斎藤', '山崎', '中島', '森', '阿部', '池田', '橋本', '石川', '山下', '小川', '石井', '長谷川', '後藤', '岡田', '近藤', '前田', '藤田', '遠藤', '青木', '坂本', '村上', '太田', '金子', '藤井', '福田', '西村', '三浦', '竹内', '中川', '岡本', '松田', '原田', '中野'],\n\n    namesJ: ['匠', 'ヒカル', 'ゆうき', '翔太', '冬馬', '漣', '港区', 'ルイ', '樹', '賢治', '五木', '春', '光一', '宗介', 'こうすけ', '雄太', '大樹', '瑛太',\n    // newer set\n    '宏', '亨', '道夫', '聡', '昭', '茂雄', '勝', '純一', '和夫', '勲', '省三', '隆', '達夫', '正一', '輝夫', '俊夫', '史郎', '勇', '義弘', '良雄', '登', '義明', '正義', '秀夫', '肇', '月', '克己', '正男', '光男', '久', '耕三', '清', '次郎', '正博', '明子', '武', '勉', '晴夫', '裕二', '稔', '障子', '和子', '敦', '茂', '信夫', '恵一', '忠', '高尾', '薫', 'ケン', '健治', '哲夫', '啓二', '光一', '真一', '貞夫', '靖', '武', '雄', '文雄', '久雄', '一朗', '健一', '正明', '五郎', '誠', '昭夫', '誠司', '洋一', '康夫', '誠一', '正美', '則夫', '幸雄', '忠雄', '仁', 'シンジ', '豊', '邦雄', '修', '雅之', '三郎', '英治', '浩二', '栄一', '恒夫', '義郎', '進', '博之', '巌'],\n    names: ['Takumi', 'Hikaru', 'Yuuki', 'Shouta', 'Touma', 'Ren', 'Minato', 'Rui', 'Tatsuki', 'Kenji', 'Itsuki', 'Haru', 'Kouichi', 'Sousuke', 'Kousuke', 'Yuuta', 'Daiki', 'Eita',\n    // newer set\n    'Hiroshi', 'Toru', 'Michio', 'Satoshi', 'Akira', 'Shigeo', 'Masaru', 'Junichi', 'Kazuo', 'Isao', 'Shozo', 'Takashi', 'Tatsuo', 'Shoichi', 'Teruo', 'Toshio', 'Shiro', 'Isamu', 'Yoshihiro', 'Yoshio', 'Noboru', 'Yoshiaki', 'Tadayoshi', 'Hideo', 'Hajime', 'Akari', 'Katsumi', 'Masao', 'Mitsuo', 'Hisashi', 'Kozo', 'Kiyoshi', 'Jiro', 'Masahiro', 'Akiko', 'Takeshi', 'Tsutomu', 'Haruo', 'Yuji', 'Minoru', 'Shoji', 'Kazuko', 'Atsushi', 'Shigeru', 'Shinobu', 'Keiichi', 'Tadashi', 'Takao', 'Kaoru', 'Ken', 'Kenji', 'Tetsuo', 'Keiji', 'Koichi', 'Shinichi', 'Sadao', 'Yasushi', 'Takeshi', 'Yu', 'Fumio', 'Hisao', 'Ichiro', 'Kenichi', 'Masaaki', 'Goro', 'Makoto', 'Akio', 'Seiji', 'Yoichi', 'Yasuo', 'Seiichi', 'Masami', 'Norio', 'Yukio', 'Tadao', 'Hitoshi', 'Shinji', 'Yutaka', 'Kunio', 'Osamu', 'Masayuki', 'Saburo', 'Eiji', 'Koji', 'Eiichi', 'Tsuneo', 'Yoshio', 'Susumu', 'Hiroyuki', 'Iwao'],\n    teamNamesJ: ['横浜', '大阪', '名古屋', '札幌', '神戸', '京都', '福岡', '川崎', '埼玉県', '広島', '仙台', '千葉県', '新潟', '浜松', '静岡', '相模原', '岡山', '熊本', '鹿児島', '船橋', '川口', '姫路', '松山', '宇都宮', '松戸', '西宮', '倉敷', '市川', '福山', '尼崎', '金沢', '長崎', '横須賀', '富山', '高松', '町田', '岐阜', '枚方', '藤沢', '柏', '豊中', '長野県', '豊橋', '一宮', '和歌山', '岡崎', '宮崎', '奈良', '吹田', '高槻', '旭川', 'いわき', '高崎', '所沢', '川越', '秋田', '越谷', '前橋', '那覇', '四日市', '青森', '久留米', '春日井', '盛岡', '明石', '福島', '下関', '長岡', '市原', '函館', '茨城県', '福井', '加古川', '徳島', '水戸', '平塚', '佐世保', '呉', '八戸', '佐賀', '寝屋川', '富士', '春日部', '茅ヶ崎', '松本', '厚木', '大和', '上尾', '宝塚', '筑波', '沼津', '熊谷', '伊勢崎', '岸和田', '鳥取', '小田原', '鈴鹿', '松江', '日立'],\n    teamNames: ['Yokohama', 'Osaka', 'Nagoya', 'Sapporo', 'Kobe', 'Kyoto', 'Fukuoka', 'Kawasaki', 'Saitama', 'Hiroshima', 'Sendai', 'Chiba', 'Niigata', 'Hamamatsu', 'Shizuoka', 'Sagamihara', 'Okayama', 'Kumamoto', 'Kagoshima', 'Funabashi', 'Kawaguchi', 'Himeji', 'Matsuyama', 'Utsunomiya', 'Matsudo', 'Nishinomiya', 'Kurashiki', 'Ichikawa', 'Fukuyama', 'Amagasaki', 'Kanazawa', 'Nagasaki', 'Yokosuka', 'Toyama', 'Takamatsu', 'Machida', 'Gifu', 'Hirakata', 'Fujisawa', 'Kashiwa', 'Toyonaka', 'Nagano', 'Toyohashi', 'Ichinomiya', 'Wakayama', 'Okazaki', 'Miyazaki', 'Nara', 'Suita', 'Takatsuki', 'Asahikawa', 'Iwaki', 'Takasaki', 'Tokorozawa', 'Kawagoe', 'Akita', 'Koshigaya', 'Maebashi', 'Naha', 'Yokkaichi', 'Aomori', 'Kurume', 'Kasugai', 'Morioka', 'Akashi', 'Fukushima', 'Shimonoseki', 'Nagaoka', 'Ichihara', 'Hakodate', 'Ibaraki', 'Fukui', 'Kakogawa', 'Tokushima', 'Mito', 'Hiratsuka', 'Sasebo', 'Kure', 'Hachinohe', 'Saga', 'Neyagawa', 'Fuji', 'Kasukabe', 'Chigasaki', 'Matsumoto', 'Atsugi', 'Yamato', 'Ageo', 'Takarazuka', 'Tsukuba', 'Numazu', 'Kumagaya', 'Isesaki', 'Kishiwada', 'Tottori', 'Odawara', 'Suzuka', 'Matsue', 'Hitachi']\n};\n\nexports.data = data;\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar helper = {\n    pitchDefinitions: {\n        '4-seam': [0, 0, 1], //x movement, y movement, speed ratio\n        '2-seam': [20, -20, 0.90],\n        'cutter': [-25, -20, 0.95],\n        'sinker': [-15, -30, 0.95],\n\n        'slider': [-50, -35, 0.9],\n        'fork': [0, -70, 0.87],\n        'curve': [0, -90, 0.82],\n\n        'change': [0, -10, 0.88]\n    },\n    selectRandomPitch: function selectRandomPitch() {\n        return ['4-seam', '2-seam', 'cutter', 'sinker', 'slider', 'fork', 'curve', 'change'][Math.floor(Math.random() * 8)];\n    }\n};\n\nexports.helper = helper;\n\n},{}],18:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar text = function text(phrase, override) {\n    if (!text.mode) text.mode = 'n';\n    var string = ({\n        n: {\n            empty: '-',\n            ' 1st': '1番',\n            ' 2nd': '2番',\n            ' 3rd': '3番',\n            ' 4th': '4番',\n            ' 5th': '5番',\n            ' 6th': '6番',\n            ' 7th': '7番',\n            ' 8th': '8番',\n            ' 9th': '9番',\n            'Now batting': '次のバッター',\n            'way outside': '相当外角',\n            'outside': '外角',\n            'inside': '内角',\n            'way inside': '相当内角',\n            'way low': '相当低め',\n            'low': '低め',\n            'high': '高め',\n            'way high': '相当高め',\n            'down the middle': '真ん中',\n            'first baseman': 'ファースト',\n            'second baseman': 'セカンド',\n            'third baseman': 'サード',\n            'shortstop': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left fielder': 'レフト',\n            'center fielder': 'センター',\n            'right fielder': 'ライト',\n            'Strike.': 'ストライク。',\n            'Ball.': 'ボール。',\n            'Fouled off.': 'ファウル。',\n            'In play.': 'インプレー。',\n            'Swinging strike.': '空振り。',\n            ' outs': 'アウト',\n            ' out': 'アウト',\n            '4-seam': 'ストレート',\n            '2-seam': 'シュート',\n            'slider': 'スライダー',\n            'fork': 'フォーク',\n            'cutter': 'カット',\n            'sinker': 'シンカー',\n            'curve': 'カーブ',\n            'change': 'チェンジ',\n            ' struck out looking.': '、見逃し三振。',\n            ' walked.': '、フォアボール。',\n            ' struck out swinging.': '、空振り三振。',\n            'Previous: ': '前：',\n            'looks like: ': '予想',\n            'breaking ball': '変化球',\n            'fastball': 'ストレート',\n            'Batting, ': '打球',\n            'Catching, pitch selection': '捕球選択',\n            'Season': '記録',\n            'Game': '今試合',\n            'Pitch': '球',\n            'Control': '制球',\n            'Velocity': '速度',\n            'Break': '変化',\n            'At Bat': 'バッター',\n            'On Deck': '次バッター',\n            'Eye :': '目',\n            'Power :': '力',\n            'Speed :': '速',\n            'Up to Bat': '打席',\n            'Fielding': '守備',\n            'BA': '打率',\n            'OBP': '出塁',\n            'SLG': '長打',\n            'PA': '打席',\n            'H/2B/3B/HR': '安／二／三／本',\n            'H': '安',\n            '2B': '二',\n            '3B': '三',\n            'HR': '本塁打',\n            'RBI': '打点',\n            'R': '得点',\n            'BB': '四球',\n            'SO': '三振',\n\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'Runner on': 'ランナー',\n            'Runners on': 'ランナー',\n            'Bases empty': 'ランナーなし',\n            'base': '塁',\n\n            'Select Language:': '言語',\n            'Run Fast Simulation': 'シミュレーションを試合終了まで行う',\n            'Play Ball!': 'プレーボール',\n            'Spectate the CPU': 'CPU観戦',\n            'Play from the 7th': '７回からプレーする',\n\n            'Throws/Bats': ' ',\n            'LHP': '左投',\n            'RHP': '右投',\n            'LHB': '左打',\n            'RHB': '右打',\n            'L': '左投',\n            'R ': '右投',\n            ' L ': '左打',\n            ' R ': '右打',\n            '#': '背番号',\n\n            'Opponent connected': '相手選手見参'\n        },\n        e: {\n            empty: '-',\n            'Season': 'Season'\n        }\n    })[override ? override : text.mode][phrase];\n    return string ? string : phrase;\n};\n\ntext.getBattersEye = function (game) {\n    var eye = {},\n        breaking = Math.abs(game.pitchInFlight.breakDirection[0]) + Math.abs(game.pitchInFlight.breakDirection[1]) > 40;\n    eye.e = text('looks like: ', 'e') + breaking ? text('breaking ball', 'e') : text('fastball', 'e');\n    eye.n = text('looks like: ', 'n') + breaking ? text('breaking ball', 'n') : text('fastball', 'n');\n    return eye;\n};\n\ntext.fielderShortName = function (fielder) {\n    if (text.mode == 'n') {\n        return ({\n            'first': '一',\n            'second': '二',\n            'third': '三',\n            'short': '遊',\n            'pitcher': '投',\n            'catcher': '捕',\n            'left': '左',\n            'center': '中',\n            'right': '右'\n        })[fielder];\n    }\n    return fielder;\n};\n\ntext.slash = function () {\n    if (text.mode == 'n') {\n        return '・';\n    }\n    return '/';\n};\n\ntext.fielderLongName = function (fielder) {\n    if (text.mode == 'n') {\n        return ({\n            'first': 'ファースト',\n            'second': 'セカンド',\n            'third': 'サード',\n            'short': 'ショート',\n            'pitcher': 'ピッチャー',\n            'catcher': 'キャッチャー',\n            'left': 'レフト',\n            'center': 'センター',\n            'right': 'ライト'\n        })[fielder];\n    }\n    return ({\n        first: text('first baseman'),\n        second: text('second baseman'),\n        third: text('third baseman'),\n        short: text('shortstop'),\n        pitcher: text('pitcher'),\n        catcher: text('catcher'),\n        left: text('left fielder'),\n        center: text('center fielder'),\n        right: text('right fielder')\n    })[fielder];\n};\n\ntext.comma = function () {\n    return ({ n: '、', e: ', ' })[text.mode];\n};\ntext.stop = function () {\n    return ({ n: '。', e: '. ' })[text.mode];\n};\n\ntext.namePitch = function (pitch) {\n    if (text.mode == 'e') {\n        return pitch.name.charAt(0).toUpperCase() + pitch.name.slice(1);\n    }\n    if (text.mode == 'n') {\n        return text(pitch.name);\n    }\n};\n\ntext.contactResult = function (batter, fielder, bases, outBy, sacrificeAdvances, out) {\n    var statement = '';\n    var infield = ['left', 'center', 'right'].indexOf(fielder) < 0;\n    var doublePlay = out.doublePlay;\n    if (text.mode == 'e') {\n        statement += batter;\n        if (outBy) {\n            switch (outBy) {\n                case 'fieldersChoice':\n                    play = out.length === 2 ? 'double play ' : '';\n                    statement += ' reached on a fielder\\'s choice ' + play + 'by ' + text.fielderShortName(fielder);\n                    break;\n                case 'line':\n                    statement += ' lined out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'fly':\n                    statement += ' flew out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'error':\n                    statement += ' reached on error by ' + text.fielderShortName(fielder);\n                    break;\n                case 'pop':\n                    statement += ' popped out to ' + text.fielderShortName(fielder);\n                    break;\n                case 'ground':\n                    var play = doublePlay ? 'into a double play by' : 'out to';\n                    statement += ' grounded ' + play + ' ' + text.fielderShortName(fielder);\n                    break;\n                case 'thrown':\n                    play = doublePlay ? ' on a double play' : '';\n                    statement += ' was thrown out by ' + text.fielderShortName(fielder) + play;\n                    break;\n            }\n            if (out.length) {\n                var plural = out.length > 1;\n                var runner = plural ? 'Runners' : 'Runner';\n                var is = plural ? 'are' : 'is';\n                statement += '. ' + runner + ' from ' + text(out.join(text.comma())) + ' ' + is + ' out';\n            }\n        } else {\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += ' reached on an infield hit to ' + text.fielderShortName(fielder);\n                    } else {\n                        statement += ' reached on a single to ' + text.fielderShortName(fielder);\n                    }\n                    break;\n                case 2:\n                    statement += ' doubled past ' + text.fielderShortName(fielder);\n                    break;\n                case 3:\n                    statement += ' tripled past ' + text.fielderShortName(fielder);\n                    break;\n                case 4:\n                    statement += ' homered to ' + text.fielderShortName(fielder);\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map(function (base) {\n                if (base == 'third') {\n                    statement += text.stop() + 'Runner on third scores';\n                } else {\n                    statement += text.stop() + 'Runner on ' + base + ' advances';\n                }\n            });\n        }\n        statement += text.stop();\n    }\n    if (text.mode == 'n') {\n        var stop = text.stop();\n        statement += batter + 'は';\n        if (outBy) {\n            var fielderLong = text.fielderLongName(fielder);\n            fielder = text.fielderShortName(fielder);\n            switch (outBy) {\n                case 'fieldersChoice':\n                    statement += '野選(' + fielder + ')で出塁';\n                    break;\n                case 'line':\n                    statement += fielder + '直';\n                    break;\n                case 'fly':\n                    statement += fielder + '飛';\n                    break;\n                case 'error':\n                    statement += 'エラー(' + fielder + ')で出塁';\n                    break;\n                case 'pop':\n                    statement += 'ポップフライで' + fielder + '飛';\n                    break;\n                case 'ground':\n                    statement += fielderLong + 'ゴロに封殺';\n                    break;\n                case 'thrown':\n                    statement += fielder + 'ゴロ';\n                    break;\n            }\n            if (out.length) {\n                statement += '。' + out.map(function (runner) {\n                    return text(runner);\n                }).join(text.comma()) + 'ランナーはアウト';\n            }\n            if (doublePlay) {\n                statement += '。ゲッツー';\n            }\n        } else {\n            fielder = text.fielderShortName(fielder);\n            switch (bases) {\n                case 1:\n                    if (infield) {\n                        statement += '内野安打' + '(' + fielder + ')' + 'で出塁';\n                    } else {\n                        statement += '安打(' + fielder + ')' + 'で出塁';\n                    }\n                    break;\n                case 2:\n                    statement += '二塁打（' + fielder + '）で出塁';\n                    break;\n                case 3:\n                    statement += '三塁打（' + fielder + '）で出塁';\n                    break;\n                case 4:\n                    statement += '本塁打（' + fielder + '）';\n                    break;\n            }\n        }\n        if (sacrificeAdvances) {\n            sacrificeAdvances.map(function (base) {\n                if (base == 'third') {\n                    statement += stop + 'サードランナーホームイン';\n                } else {\n                    statement += stop + text(base) + 'ランナー進塁';\n                }\n            });\n        }\n        statement += stop;\n    }\n    return statement;\n};\n\nexports.text = text;\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _baseballNamespace = require('baseball/namespace');\n\nif (typeof window == 'object') {\n    window.Baseball = _baseballNamespace.Baseball;\n}\n\nexports.Baseball = _baseballNamespace.Baseball;\n\n},{\"baseball/namespace\":20}],20:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballModelAtBat = require('baseball/Model/AtBat');\n\nvar _baseballModelField = require('baseball/Model/Field');\n\nvar _baseballModelGame = require('baseball/Model/Game');\n\nvar _baseballModelManager = require('baseball/Model/Manager');\n\nvar _baseballModelPlayer = require('baseball/Model/Player');\n\nvar _baseballModelTeam = require('baseball/Model/Team');\n\nvar _baseballModelUmpire = require('baseball/Model/Umpire');\n\nvar _baseballUtility_utils = require('baseball/Utility/_utils');\n\nvar _baseballServices_services = require('baseball/Services/_services');\n\nvar Baseball = {};\n\nBaseball.model = {};\nBaseball.model.Game = Baseball.Game = _baseballModelGame.Game;\nBaseball.model.Player = Baseball.Player = _baseballModelPlayer.Player;\nBaseball.model.Team = Baseball.Team = _baseballModelTeam.Team;\n\nBaseball.service = {};\nBaseball.service.Animator = _baseballServices_services.Animator;\nBaseball.service.Distribution = _baseballServices_services.Distribution;\nBaseball.service.Iterator = _baseballServices_services.Iterator;\nBaseball.service.Mathinator = _baseballServices_services.Mathinator;\n\nBaseball.util = {};\nBaseball.util.text = _baseballUtility_utils.text;\nBaseball.util.Log = _baseballUtility_utils.Log;\n\nexports.Baseball = Baseball;\n\n},{\"baseball/Model/AtBat\":1,\"baseball/Model/Field\":2,\"baseball/Model/Game\":3,\"baseball/Model/Manager\":4,\"baseball/Model/Player\":5,\"baseball/Model/Team\":6,\"baseball/Model/Umpire\":7,\"baseball/Services/_services\":13,\"baseball/Utility/_utils\":15}],21:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _baseballServicesAnimator = require('baseball/Services/Animator');\n\nvar _baseballServicesDistribution = require('baseball/Services/Distribution');\n\nvar _baseballServicesIterator = require('baseball/Services/Iterator');\n\nvar _baseballServicesMathinator = require('baseball/Services/Mathinator');\n\nexports.Animator = _baseballServicesAnimator.Animator;\nexports.Distribution = _baseballServicesDistribution.Distribution;\nexports.Iterator = _baseballServicesIterator.Iterator;\nexports.Mathinator = _baseballServicesMathinator.Mathinator;\n\n},{\"baseball/Services/Animator\":9,\"baseball/Services/Distribution\":10,\"baseball/Services/Iterator\":11,\"baseball/Services/Mathinator\":12}]},{},[19]);\n","IndexController = function($scope, socket) {\n    var text = Baseball.util.text;\n    var Game = Baseball.Game;\n    var Animator = Baseball.service.Animator;\n\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            text.mode = setMode;\n        }\n        return text.mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode && quickMode !== 7;\n        $scope.y = new Game();\n        var game = $scope.y;\n        var field = window.location.hash ? window.location.hash.slice(1) : game.teams.home.name + Math.ceil(Math.random()*47);\n        if (typeof io !== 'undefined') {\n            socket.game = game;\n            $scope.socket = io(window.location.hostname + ':64321');\n            $scope.socketService = socket;\n            socket.socket = $scope.socket;\n            socket.start(field);\n        }\n        window.location.hash = '#' + field;\n        s2.y = game;\n        bindMethods();\n        $('.blocking').remove();\n        if (game.humanControl == 'none' && game.quickMode) {\n            var n = 0;\n            Animator.console = true;\n            game.console = true;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            Animator.console = game.console = false;\n            log('sim ended');\n            game.debugOut();\n        } else if (game.humanControl == 'none') {\n            var scalar = game.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if (game.stage == 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*(game.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 2000 : Animator.TIME_FROM_WINDUP + 2000));\n        }\n        if (quickMode === 7 && spectateCpu === undefined) {\n            Game.prototype.quickMode = true;\n            do {\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && game.inning != 7);\n            log('sim halted in 7th');\n            game.debugOut();\n            Game.prototype.quickMode = false;\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'away') {\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'home') {\n\n        }\n        if (!quickMode || quickMode === 7) {\n            game.timeOfDay.h = '00';\n            var delay = 100,\n                interval = 150;\n            while (delay < (game.startTime.h - game.timeOfDay.h) * interval) {\n                setTimeout(function() {\n                    game.timeOfDay.h = ('00' + (parseInt(game.timeOfDay.h) + 1)).slice(-2);\n                    $scope.$apply();\n                }, delay);\n                delay += interval;\n            }\n        }\n    };\n\n    var bindMethods = function() {\n        var game = $scope.y;\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n\n        // avoid scope cycles, any other easy way?\n        var bat = $('.target .swing.stance-indicator');\n        var showBat = function(event) {\n            if (game.humanBatting()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\n                bat.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\",\n                    transform: \"rotate(\" + angle + \"deg) rotateY(\"+(game.batter.bats == \"left\" ? 0 : -0)+\"deg)\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    bat.hide();\n                } else {\n                    bat.show();\n                }\n            }\n        };\n        var glove = $('.target .glove.stance-indicator');\n        var showGlove = function(event) {\n            if (game.humanPitching()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                glove.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    glove.hide();\n                } else {\n                    glove.show();\n                }\n            }\n        };\n\n        $scope.selectPitch = function(pitchName) {\n            if (game.stage == 'pitch') {\n                game.pitchInFlight = $.extend({}, game.pitcher.pitching[pitchName]);\n                game.pitchInFlight.name = pitchName;\n                game.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            $('.no-swing').click();\n            $scope.$apply();\n        };\n        game.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if (game.pitcher.windingUp) {\n                return;\n            }\n            if (game.humanPitching()) $scope.allowInput = false;\n            var offset = $('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (text.mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n        $scope.$watch('y.humanBatting()', function() {\n            if ($scope.y.humanBatting()) {\n                $('.target').mousemove(showBat);\n            } else {\n                $('.target').unbind('mousemove', showBat);\n                bat.hide();\n            }\n        });\n        $scope.$watch('y.humanPitching()', function() {\n            if ($scope.y.humanPitching()) {\n                $('.target').mousemove(showGlove);\n            } else {\n                $('.target').unbind('mousemove', showGlove);\n                glove.hide();\n            }\n        });\n        var aside = {\n            left: $('aside.image-panel.left'),\n            right: $('aside.image-panel.right')\n        };\n        //$scope.$watch('y.playResult', function() {\n        //    aside.left.hide();\n        //    aside.right.hide();\n        //    aside.left.fadeIn(1000, function() {\n        //        aside.left.fadeOut(1000);\n        //        aside.right.fadeIn(1000, function() {\n        //            aside.right.fadeOut(1000);\n        //        })\n        //    });\n        //    $scope.imagePanel = {\n        //        left: 'url(./public/images/' + $scope.y.playResult.batter + '.png)',\n        //        right: 'url(./public/images/' + $scope.y.playResult.fielder + '.png)'\n        //    };\n        //});\n    };\n\n\n};","var SocketService = function() {\n    var Service = function() {};\n    var game, socket, NO_OPERATION = function() {},\n        animator = Baseball.service.Animator;\n    Service.prototype = {\n        socket : {},\n        game : {},\n        connected : false,\n        start : function(key) {\n            game = this.game;\n            socket = this.socket;\n            game.opponentService = this;\n            this.connected = socket.connected;\n            this.on();\n            socket.emit('register', key);\n        },\n        on : function() {\n            var giraffe = this;\n            socket.on('register', this.register);\n            socket.on('connect reconnect', function() {\n                giraffe.connected = true;\n            });\n            socket.on('disconnect', function() {\n                giraffe.connected = false;\n            });\n            socket.on('pitch', function(pitch) {\n                //console.log('receive', 'pitch', pitch);\n                game.thePitch(0, 0, NO_OPERATION, pitch);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)();\n            });\n            socket.on('swing', function(swing) {\n                //console.log('receive', 'swing', swing);\n                game.theSwing(0, 0, NO_OPERATION, swing);\n                var scope = window.s;\n                animator.updateFlightPath.bind(scope)(function() {\n                    if (swing.contact) {\n                        animator.animateFieldingTrajectory(game);\n                    }\n                });\n            });\n            socket.on('partner_disconnect', function() {\n                console.log('The opponent has disconnected');\n                game.opponentConnected = false;\n                var scope = window.s;\n                scope.$digest();\n            });\n            socket.on('partner_connect', function() {\n                game.opponentConnected = true;\n                var scope = window.s;\n                scope.$digest();\n            });\n            socket.on('opponent_taking_field', function() {\n                console.log('A challenger has appeared! Sending game data.');\n                socket.emit('game_data', game.toData());\n            });\n            socket.on('game_data', function(data) {\n                game.fromData(data);\n                var scope = window.s;\n                scope.$apply();\n            });\n            socket.on('field_in_use', function() {\n                game.opponentConnected = false;\n            });\n        },\n        off : function() {\n            socket.on('register', NO_OPERATION);\n        },\n        register: function(data) {\n            console.log(data);\n            if (data === 'away') {\n                game.humanControl = 'away';\n            }\n            socket.on('register', NO_OPERATION);\n        },\n        emitPitch : function(pitch) {\n            //console.log('emit', 'pitch', pitch);\n            socket.emit('pitch', pitch);\n        },\n        emitSwing : function(swing) {\n            //console.log('emit', 'swing', swing);\n            socket.emit('swing', swing);\n        },\n        swing : function() {\n\n        },\n        pitch : function() {\n\n        }\n    };\n    return new Service;\n};","BattersDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/batters.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","BatteryDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/battery.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","FieldDirective = function() {\n    return {\n        //scope: {\n        //    game: '=',\n        //    text: '='\n        //},\n        templateUrl: 'public/html/views/directives/field.html?cache='+cacheKey,\n        transclude : true,\n        //link: function(scope) {\n        //    scope.t = scope.text;\n        //    scope.y = scope.game;\n        //}\n    };\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'public/html/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives'])\n    .service('socket', SocketService)\n    .controller('IndexController', ['$scope', 'socket', IndexController]);\n\napp.config(function($interpolateProvider) {\n    $interpolateProvider.startSymbol('{{');\n    $interpolateProvider.endSymbol('}}');\n});\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective)\n    .directive('batters', BattersDirective)\n    .directive('battery', BatteryDirective)\n    .directive('field', FieldDirective);"],"sourceRoot":"/source/"}
{"version":3,"sources":["IndexController.js","scoreboard.js","application.js"],"names":["IndexController","$scope","text","Baseball","util","Game","Animator","service","window","s","t","mode","setMode","proceedToGame","quickMode","spectateCpu","prototype","humanControl","y","game","s2","bindMethods","$","remove","n","simulateInput","callback","stage","log","debugOut","scalar","auto","setInterval","clearInterval","simulatePitchAndSwing","$apply","updateFlightPath","field","hasRunnersOn","TIME_FROM_SET","TIME_FROM_WINDUP","holdUpTimeouts","expandScoreboard","animator","bind","bat","showBat","event","humanBatting","offset","relativeOffset","x","pageX","left","pageY","top","angle","setBatAngle","css","transform","batter","bats","hide","show","glove","showGlove","humanPitching","selectPitch","pitchName","pitchInFlight","extend","pitcher","pitching","name","swingResult","looking","allowInput","holdUp","click","startOpponentPitching","indicate","$event","windingUp","clearTimeout","lastTimeout","length","shift","receiveInput","abbreviatePosition","position","catcher","first","second","short","third","center","right","fielderShortName","$watch","mousemove","unbind","ScoreboardDirective","scope","templateUrl","cacheKey","link","app","angular","module","Math","floor","random","directive","controller"],"mappings":"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","file":"application.min.js","sourcesContent":["IndexController = function($scope) {\n    var text = Baseball.util.text;\n    var Game = Baseball.Game;\n    var Animator = Baseball.service.Animator;\n\n    window.s = $scope;\n    $scope.t = text;\n\n    $scope.mode = function(setMode) {\n        if (setMode) {\n            text.mode = setMode;\n        }\n        return text.mode;\n    };\n\n    $scope.proceedToGame = function(quickMode, spectateCpu) {\n        Game.prototype.humanControl = spectateCpu ? 'none' : 'home';\n        Game.prototype.quickMode = !!quickMode;\n        $scope.y = new Game();\n        var game = $scope.y;\n        s2.y = game;\n        bindMethods();\n        $('.blocking').remove();\n        if (game.humanControl == 'none' && game.quickMode) {\n            var n = 0;\n            do {\n                n++;\n                game.simulateInput(function(callback) {\n                    typeof callback == 'function' && callback();\n                });\n            } while (game.stage != 'end' && n < 500);\n            log('sim ended');\n            game.debugOut();\n        } else if (game.humanControl == 'none') {\n            var scalar = game.quickMode ? 0.05 : 1;\n            var auto = setInterval(function() {\n                if (game.stage == 'end') {\n                    clearInterval(auto);\n                }\n                game.simulatePitchAndSwing(function(callback) {\n                    game.quickMode ? void 0 : $scope.$apply();\n                    $scope.updateFlightPath(callback);\n                });\n            }, scalar*(game.field.hasRunnersOn() ? Animator.TIME_FROM_SET + 2000 : Animator.TIME_FROM_WINDUP + 2000));\n        }\n        if (game.humanControl == 'away') {\n            game.simulateInput(function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        }\n        if (game.humanControl == 'home') {\n\n        }\n    };\n\n    var bindMethods = function() {\n        var game = $scope.y;\n        $scope.holdUpTimeouts = [];\n        $scope.expandScoreboard = false;\n        var animator = new Animator();\n        $scope.updateFlightPath = animator.updateFlightPath.bind($scope);\n\n        // avoid scope cycles, any other easy way?\n        var bat = $('.target .swing.stance-indicator');\n        var showBat = function(event) {\n            if (game.humanBatting()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                var angle = game.setBatAngle(relativeOffset.x, relativeOffset.y);\n                bat.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\",\n                    transform: \"rotate(\" + angle + \"deg) rotateY(\"+(game.batter.bats == \"left\" ? 0 : -0)+\"deg)\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    bat.hide();\n                } else {\n                    bat.show();\n                }\n            }\n        };\n        var glove = $('.target .glove.stance-indicator');\n        var showGlove = function(event) {\n            if (game.humanPitching()) {\n                var offset = $('.target').offset();\n                var relativeOffset = {\n                    x : event.pageX - offset.left,\n                    y : 200 - (event.pageY - offset.top)\n                };\n                glove.css({\n                    top: 200-relativeOffset.y + \"px\",\n                    left: relativeOffset.x + \"px\"\n                });\n                if (relativeOffset.x > 200 || relativeOffset.x < 0 || relativeOffset.y > 200 || relativeOffset.y < 0) {\n                    glove.hide();\n                } else {\n                    glove.show();\n                }\n            }\n        };\n\n        $scope.selectPitch = function(pitchName) {\n            if (game.stage == 'pitch') {\n                game.pitchInFlight = $.extend({}, game.pitcher.pitching[pitchName]);\n                game.pitchInFlight.name = pitchName;\n                game.swingResult.looking = true;\n            }\n        };\n        $scope.allowInput = true;\n        $scope.holdUp = function() {\n            $('.no-swing').click();\n            $scope.$apply();\n        };\n        game.startOpponentPitching = function(callback) {\n            $scope.updateFlightPath(callback);\n        };\n        $scope.indicate = function($event) {\n            if (!$scope.allowInput) {\n                return;\n            }\n            if (game.pitcher.windingUp) {\n                return;\n            }\n            if (game.humanPitching()) $scope.allowInput = false;\n            var offset = $('.target').offset();\n            var relativeOffset = {\n                x : $event.pageX - offset.left,\n                y : 200 - ($event.pageY - offset.top)\n            };\n            clearTimeout($scope.lastTimeout);\n            while ($scope.holdUpTimeouts.length) {\n                clearTimeout($scope.holdUpTimeouts.shift());\n            }\n            game.receiveInput(relativeOffset.x, relativeOffset.y, function(callback) {\n                $scope.updateFlightPath(callback);\n            });\n        };\n        $scope.abbreviatePosition = function(position) {\n            if (text.mode == 'e') {\n                return {\n                    pitcher : 'P',\n                    catcher : 'C',\n                    first : '1B',\n                    second : '2B',\n                    short : 'SS',\n                    third : '3B',\n                    left : 'LF',\n                    center : 'CF',\n                    right : 'RF'\n                }[position];\n            }\n            return text.fielderShortName(position);\n        };\n        $scope.$watch('y.humanBatting()', function() {\n            if ($scope.y.humanBatting()) {\n                $('.target').mousemove(showBat);\n            } else {\n                $('.target').unbind('mousemove', showBat);\n                bat.hide();\n            }\n        });\n        $scope.$watch('y.humanPitching()', function() {\n            if ($scope.y.humanPitching()) {\n                $('.target').mousemove(showGlove);\n            } else {\n                $('.target').unbind('mousemove', showGlove);\n                glove.hide();\n            }\n        });\n    };\n\n\n};","ScoreboardDirective = function() {\n    return {\n        scope: {\n            game: '=',\n            text: '='\n        },\n        templateUrl: 'public/html/views/directives/scoreboard.html?cache='+cacheKey,\n        link: function(scope) {\n            window.s2 = scope;\n            scope.t = scope.text;\n            scope.y = scope.game;\n        }\n    };\n};","var app = angular.module('YakyuuAikoukai', ['directives']);\n\ncacheKey = Math.floor(Math.random()*1500);\n\nangular.module('directives', [])\n    .directive('scoreboard', ScoreboardDirective);\n\nangular.module('controllers', [])\n    .controller('IndexController', IndexController);\n\n// var socket = io('ws://' + window.location.hostname + ':3000');"],"sourceRoot":"/source/"}